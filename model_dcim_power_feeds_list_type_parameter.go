/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimPowerFeedsListTypeParameter the model 'DcimPowerFeedsListTypeParameter'
type DcimPowerFeedsListTypeParameter string

// List of dcim_power_feeds_list_type_parameter
const (
	DCIMPOWERFEEDSLISTTYPEPARAMETER_PRIMARY   DcimPowerFeedsListTypeParameter = "primary"
	DCIMPOWERFEEDSLISTTYPEPARAMETER_REDUNDANT DcimPowerFeedsListTypeParameter = "redundant"
)

// All allowed values of DcimPowerFeedsListTypeParameter enum
var AllowedDcimPowerFeedsListTypeParameterEnumValues = []DcimPowerFeedsListTypeParameter{
	"primary",
	"redundant",
}

func (v *DcimPowerFeedsListTypeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimPowerFeedsListTypeParameter(value)
	for _, existing := range AllowedDcimPowerFeedsListTypeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimPowerFeedsListTypeParameter", value)
}

// NewDcimPowerFeedsListTypeParameterFromValue returns a pointer to a valid DcimPowerFeedsListTypeParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimPowerFeedsListTypeParameterFromValue(v string) (*DcimPowerFeedsListTypeParameter, error) {
	ev := DcimPowerFeedsListTypeParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimPowerFeedsListTypeParameter: valid values are %v", v, AllowedDcimPowerFeedsListTypeParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimPowerFeedsListTypeParameter) IsValid() bool {
	for _, existing := range AllowedDcimPowerFeedsListTypeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_power_feeds_list_type_parameter value
func (v DcimPowerFeedsListTypeParameter) Ptr() *DcimPowerFeedsListTypeParameter {
	return &v
}

type NullableDcimPowerFeedsListTypeParameter struct {
	value *DcimPowerFeedsListTypeParameter
	isSet bool
}

func (v NullableDcimPowerFeedsListTypeParameter) Get() *DcimPowerFeedsListTypeParameter {
	return v.value
}

func (v *NullableDcimPowerFeedsListTypeParameter) Set(val *DcimPowerFeedsListTypeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimPowerFeedsListTypeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimPowerFeedsListTypeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimPowerFeedsListTypeParameter(val *DcimPowerFeedsListTypeParameter) *NullableDcimPowerFeedsListTypeParameter {
	return &NullableDcimPowerFeedsListTypeParameter{value: val, isSet: true}
}

func (v NullableDcimPowerFeedsListTypeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimPowerFeedsListTypeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
