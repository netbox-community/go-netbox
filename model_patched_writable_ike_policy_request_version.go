/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableIKEPolicyRequestVersion * `1` - IKEv1 * `2` - IKEv2
type PatchedWritableIKEPolicyRequestVersion int32

// List of PatchedWritableIKEPolicyRequest_version
const (
	PATCHEDWRITABLEIKEPOLICYREQUESTVERSION__1 PatchedWritableIKEPolicyRequestVersion = 1
	PATCHEDWRITABLEIKEPOLICYREQUESTVERSION__2 PatchedWritableIKEPolicyRequestVersion = 2
)

// All allowed values of PatchedWritableIKEPolicyRequestVersion enum
var AllowedPatchedWritableIKEPolicyRequestVersionEnumValues = []PatchedWritableIKEPolicyRequestVersion{
	1,
	2,
}

func (v *PatchedWritableIKEPolicyRequestVersion) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableIKEPolicyRequestVersion(value)
	for _, existing := range AllowedPatchedWritableIKEPolicyRequestVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableIKEPolicyRequestVersion", value)
}

// NewPatchedWritableIKEPolicyRequestVersionFromValue returns a pointer to a valid PatchedWritableIKEPolicyRequestVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableIKEPolicyRequestVersionFromValue(v int32) (*PatchedWritableIKEPolicyRequestVersion, error) {
	ev := PatchedWritableIKEPolicyRequestVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableIKEPolicyRequestVersion: valid values are %v", v, AllowedPatchedWritableIKEPolicyRequestVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableIKEPolicyRequestVersion) IsValid() bool {
	for _, existing := range AllowedPatchedWritableIKEPolicyRequestVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableIKEPolicyRequest_version value
func (v PatchedWritableIKEPolicyRequestVersion) Ptr() *PatchedWritableIKEPolicyRequestVersion {
	return &v
}

type NullablePatchedWritableIKEPolicyRequestVersion struct {
	value *PatchedWritableIKEPolicyRequestVersion
	isSet bool
}

func (v NullablePatchedWritableIKEPolicyRequestVersion) Get() *PatchedWritableIKEPolicyRequestVersion {
	return v.value
}

func (v *NullablePatchedWritableIKEPolicyRequestVersion) Set(val *PatchedWritableIKEPolicyRequestVersion) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableIKEPolicyRequestVersion) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableIKEPolicyRequestVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableIKEPolicyRequestVersion(val *PatchedWritableIKEPolicyRequestVersion) *NullablePatchedWritableIKEPolicyRequestVersion {
	return &NullablePatchedWritableIKEPolicyRequestVersion{value: val, isSet: true}
}

func (v NullablePatchedWritableIKEPolicyRequestVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableIKEPolicyRequestVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
