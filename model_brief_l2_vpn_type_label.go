/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// BriefL2VPNTypeLabel the model 'BriefL2VPNTypeLabel'
type BriefL2VPNTypeLabel string

// List of BriefL2VPN_type_label
const (
	BRIEFL2VPNTYPELABEL_VPWS                          BriefL2VPNTypeLabel = "VPWS"
	BRIEFL2VPNTYPELABEL_VPLS                          BriefL2VPNTypeLabel = "VPLS"
	BRIEFL2VPNTYPELABEL_VXLAN                         BriefL2VPNTypeLabel = "VXLAN"
	BRIEFL2VPNTYPELABEL_VXLAN_EVPN                    BriefL2VPNTypeLabel = "VXLAN-EVPN"
	BRIEFL2VPNTYPELABEL_MPLS_EVPN                     BriefL2VPNTypeLabel = "MPLS EVPN"
	BRIEFL2VPNTYPELABEL_PBB_EVPN                      BriefL2VPNTypeLabel = "PBB EVPN"
	BRIEFL2VPNTYPELABEL_EPL                           BriefL2VPNTypeLabel = "EPL"
	BRIEFL2VPNTYPELABEL_EVPL                          BriefL2VPNTypeLabel = "EVPL"
	BRIEFL2VPNTYPELABEL_ETHERNET_PRIVATE_LAN          BriefL2VPNTypeLabel = "Ethernet Private LAN"
	BRIEFL2VPNTYPELABEL_ETHERNET_VIRTUAL_PRIVATE_LAN  BriefL2VPNTypeLabel = "Ethernet Virtual Private LAN"
	BRIEFL2VPNTYPELABEL_ETHERNET_PRIVATE_TREE         BriefL2VPNTypeLabel = "Ethernet Private Tree"
	BRIEFL2VPNTYPELABEL_ETHERNET_VIRTUAL_PRIVATE_TREE BriefL2VPNTypeLabel = "Ethernet Virtual Private Tree"
)

// All allowed values of BriefL2VPNTypeLabel enum
var AllowedBriefL2VPNTypeLabelEnumValues = []BriefL2VPNTypeLabel{
	"VPWS",
	"VPLS",
	"VXLAN",
	"VXLAN-EVPN",
	"MPLS EVPN",
	"PBB EVPN",
	"EPL",
	"EVPL",
	"Ethernet Private LAN",
	"Ethernet Virtual Private LAN",
	"Ethernet Private Tree",
	"Ethernet Virtual Private Tree",
}

func (v *BriefL2VPNTypeLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BriefL2VPNTypeLabel(value)
	for _, existing := range AllowedBriefL2VPNTypeLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BriefL2VPNTypeLabel", value)
}

// NewBriefL2VPNTypeLabelFromValue returns a pointer to a valid BriefL2VPNTypeLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBriefL2VPNTypeLabelFromValue(v string) (*BriefL2VPNTypeLabel, error) {
	ev := BriefL2VPNTypeLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BriefL2VPNTypeLabel: valid values are %v", v, AllowedBriefL2VPNTypeLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BriefL2VPNTypeLabel) IsValid() bool {
	for _, existing := range AllowedBriefL2VPNTypeLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BriefL2VPN_type_label value
func (v BriefL2VPNTypeLabel) Ptr() *BriefL2VPNTypeLabel {
	return &v
}

type NullableBriefL2VPNTypeLabel struct {
	value *BriefL2VPNTypeLabel
	isSet bool
}

func (v NullableBriefL2VPNTypeLabel) Get() *BriefL2VPNTypeLabel {
	return v.value
}

func (v *NullableBriefL2VPNTypeLabel) Set(val *BriefL2VPNTypeLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableBriefL2VPNTypeLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableBriefL2VPNTypeLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBriefL2VPNTypeLabel(val *BriefL2VPNTypeLabel) *NullableBriefL2VPNTypeLabel {
	return &NullableBriefL2VPNTypeLabel{value: val, isSet: true}
}

func (v NullableBriefL2VPNTypeLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBriefL2VPNTypeLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
