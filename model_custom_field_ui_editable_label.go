/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// CustomFieldUiEditableLabel the model 'CustomFieldUiEditableLabel'
type CustomFieldUiEditableLabel string

// List of CustomField_ui_editable_label
const (
	CUSTOMFIELDUIEDITABLELABEL_YES    CustomFieldUiEditableLabel = "Yes"
	CUSTOMFIELDUIEDITABLELABEL_NO     CustomFieldUiEditableLabel = "No"
	CUSTOMFIELDUIEDITABLELABEL_HIDDEN CustomFieldUiEditableLabel = "Hidden"
)

// All allowed values of CustomFieldUiEditableLabel enum
var AllowedCustomFieldUiEditableLabelEnumValues = []CustomFieldUiEditableLabel{
	"Yes",
	"No",
	"Hidden",
}

func (v *CustomFieldUiEditableLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomFieldUiEditableLabel(value)
	for _, existing := range AllowedCustomFieldUiEditableLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomFieldUiEditableLabel", value)
}

// NewCustomFieldUiEditableLabelFromValue returns a pointer to a valid CustomFieldUiEditableLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomFieldUiEditableLabelFromValue(v string) (*CustomFieldUiEditableLabel, error) {
	ev := CustomFieldUiEditableLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomFieldUiEditableLabel: valid values are %v", v, AllowedCustomFieldUiEditableLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomFieldUiEditableLabel) IsValid() bool {
	for _, existing := range AllowedCustomFieldUiEditableLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CustomField_ui_editable_label value
func (v CustomFieldUiEditableLabel) Ptr() *CustomFieldUiEditableLabel {
	return &v
}

type NullableCustomFieldUiEditableLabel struct {
	value *CustomFieldUiEditableLabel
	isSet bool
}

func (v NullableCustomFieldUiEditableLabel) Get() *CustomFieldUiEditableLabel {
	return v.value
}

func (v *NullableCustomFieldUiEditableLabel) Set(val *CustomFieldUiEditableLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldUiEditableLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldUiEditableLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldUiEditableLabel(val *CustomFieldUiEditableLabel) *NullableCustomFieldUiEditableLabel {
	return &NullableCustomFieldUiEditableLabel{value: val, isSet: true}
}

func (v NullableCustomFieldUiEditableLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldUiEditableLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
