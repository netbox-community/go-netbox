/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// ContactAssignmentPriorityLabel the model 'ContactAssignmentPriorityLabel'
type ContactAssignmentPriorityLabel string

// List of ContactAssignment_priority_label
const (
	CONTACTASSIGNMENTPRIORITYLABEL_PRIMARY   ContactAssignmentPriorityLabel = "Primary"
	CONTACTASSIGNMENTPRIORITYLABEL_SECONDARY ContactAssignmentPriorityLabel = "Secondary"
	CONTACTASSIGNMENTPRIORITYLABEL_TERTIARY  ContactAssignmentPriorityLabel = "Tertiary"
	CONTACTASSIGNMENTPRIORITYLABEL_INACTIVE  ContactAssignmentPriorityLabel = "Inactive"
)

// All allowed values of ContactAssignmentPriorityLabel enum
var AllowedContactAssignmentPriorityLabelEnumValues = []ContactAssignmentPriorityLabel{
	"Primary",
	"Secondary",
	"Tertiary",
	"Inactive",
}

func (v *ContactAssignmentPriorityLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContactAssignmentPriorityLabel(value)
	for _, existing := range AllowedContactAssignmentPriorityLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContactAssignmentPriorityLabel", value)
}

// NewContactAssignmentPriorityLabelFromValue returns a pointer to a valid ContactAssignmentPriorityLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContactAssignmentPriorityLabelFromValue(v string) (*ContactAssignmentPriorityLabel, error) {
	ev := ContactAssignmentPriorityLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContactAssignmentPriorityLabel: valid values are %v", v, AllowedContactAssignmentPriorityLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContactAssignmentPriorityLabel) IsValid() bool {
	for _, existing := range AllowedContactAssignmentPriorityLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContactAssignment_priority_label value
func (v ContactAssignmentPriorityLabel) Ptr() *ContactAssignmentPriorityLabel {
	return &v
}

type NullableContactAssignmentPriorityLabel struct {
	value *ContactAssignmentPriorityLabel
	isSet bool
}

func (v NullableContactAssignmentPriorityLabel) Get() *ContactAssignmentPriorityLabel {
	return v.value
}

func (v *NullableContactAssignmentPriorityLabel) Set(val *ContactAssignmentPriorityLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableContactAssignmentPriorityLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableContactAssignmentPriorityLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactAssignmentPriorityLabel(val *ContactAssignmentPriorityLabel) *NullableContactAssignmentPriorityLabel {
	return &NullableContactAssignmentPriorityLabel{value: val, isSet: true}
}

func (v NullableContactAssignmentPriorityLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactAssignmentPriorityLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
