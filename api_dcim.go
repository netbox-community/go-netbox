/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
	"time"
)

// DcimAPIService DcimAPI service
type DcimAPIService service

type ApiDcimCableTerminationsBulkDestroyRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	cableTerminationRequest *[]CableTerminationRequest
}

func (r ApiDcimCableTerminationsBulkDestroyRequest) CableTerminationRequest(cableTerminationRequest []CableTerminationRequest) ApiDcimCableTerminationsBulkDestroyRequest {
	r.cableTerminationRequest = &cableTerminationRequest
	return r
}

func (r ApiDcimCableTerminationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimCableTerminationsBulkDestroyExecute(r)
}

/*
DcimCableTerminationsBulkDestroy Method for DcimCableTerminationsBulkDestroy

Delete a list of cable termination objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCableTerminationsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimCableTerminationsBulkDestroy(ctx context.Context) ApiDcimCableTerminationsBulkDestroyRequest {
	return ApiDcimCableTerminationsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimCableTerminationsBulkDestroyExecute(r ApiDcimCableTerminationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCableTerminationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cable-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cableTerminationRequest == nil {
		return nil, reportError("cableTerminationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cableTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimCableTerminationsBulkPartialUpdateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	cableTerminationRequest *[]CableTerminationRequest
}

func (r ApiDcimCableTerminationsBulkPartialUpdateRequest) CableTerminationRequest(cableTerminationRequest []CableTerminationRequest) ApiDcimCableTerminationsBulkPartialUpdateRequest {
	r.cableTerminationRequest = &cableTerminationRequest
	return r
}

func (r ApiDcimCableTerminationsBulkPartialUpdateRequest) Execute() ([]CableTermination, *http.Response, error) {
	return r.ApiService.DcimCableTerminationsBulkPartialUpdateExecute(r)
}

/*
DcimCableTerminationsBulkPartialUpdate Method for DcimCableTerminationsBulkPartialUpdate

Patch a list of cable termination objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCableTerminationsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimCableTerminationsBulkPartialUpdate(ctx context.Context) ApiDcimCableTerminationsBulkPartialUpdateRequest {
	return ApiDcimCableTerminationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CableTermination
func (a *DcimAPIService) DcimCableTerminationsBulkPartialUpdateExecute(r ApiDcimCableTerminationsBulkPartialUpdateRequest) ([]CableTermination, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CableTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCableTerminationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cable-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cableTerminationRequest == nil {
		return localVarReturnValue, nil, reportError("cableTerminationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cableTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCableTerminationsBulkUpdateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	cableTerminationRequest *[]CableTerminationRequest
}

func (r ApiDcimCableTerminationsBulkUpdateRequest) CableTerminationRequest(cableTerminationRequest []CableTerminationRequest) ApiDcimCableTerminationsBulkUpdateRequest {
	r.cableTerminationRequest = &cableTerminationRequest
	return r
}

func (r ApiDcimCableTerminationsBulkUpdateRequest) Execute() ([]CableTermination, *http.Response, error) {
	return r.ApiService.DcimCableTerminationsBulkUpdateExecute(r)
}

/*
DcimCableTerminationsBulkUpdate Method for DcimCableTerminationsBulkUpdate

Put a list of cable termination objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCableTerminationsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimCableTerminationsBulkUpdate(ctx context.Context) ApiDcimCableTerminationsBulkUpdateRequest {
	return ApiDcimCableTerminationsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CableTermination
func (a *DcimAPIService) DcimCableTerminationsBulkUpdateExecute(r ApiDcimCableTerminationsBulkUpdateRequest) ([]CableTermination, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CableTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCableTerminationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cable-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cableTerminationRequest == nil {
		return localVarReturnValue, nil, reportError("cableTerminationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cableTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCableTerminationsCreateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	cableTerminationRequest *CableTerminationRequest
}

func (r ApiDcimCableTerminationsCreateRequest) CableTerminationRequest(cableTerminationRequest CableTerminationRequest) ApiDcimCableTerminationsCreateRequest {
	r.cableTerminationRequest = &cableTerminationRequest
	return r
}

func (r ApiDcimCableTerminationsCreateRequest) Execute() (*CableTermination, *http.Response, error) {
	return r.ApiService.DcimCableTerminationsCreateExecute(r)
}

/*
DcimCableTerminationsCreate Method for DcimCableTerminationsCreate

Post a list of cable termination objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCableTerminationsCreateRequest
*/
func (a *DcimAPIService) DcimCableTerminationsCreate(ctx context.Context) ApiDcimCableTerminationsCreateRequest {
	return ApiDcimCableTerminationsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CableTermination
func (a *DcimAPIService) DcimCableTerminationsCreateExecute(r ApiDcimCableTerminationsCreateRequest) (*CableTermination, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CableTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCableTerminationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cable-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cableTerminationRequest == nil {
		return localVarReturnValue, nil, reportError("cableTerminationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cableTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCableTerminationsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimCableTerminationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimCableTerminationsDestroyExecute(r)
}

/*
DcimCableTerminationsDestroy Method for DcimCableTerminationsDestroy

Delete a cable termination object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this cable termination.
	@return ApiDcimCableTerminationsDestroyRequest
*/
func (a *DcimAPIService) DcimCableTerminationsDestroy(ctx context.Context, id int32) ApiDcimCableTerminationsDestroyRequest {
	return ApiDcimCableTerminationsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimCableTerminationsDestroyExecute(r ApiDcimCableTerminationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCableTerminationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cable-terminations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimCableTerminationsListRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	cable              *int32
	cableN             *int32
	cableEnd           *End
	cableEndN          *End
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	modifiedByRequest  *string
	offset             *int32
	ordering           *string
	terminationId      *[]int32
	terminationIdEmpty *bool
	terminationIdGt    *[]int32
	terminationIdGte   *[]int32
	terminationIdLt    *[]int32
	terminationIdLte   *[]int32
	terminationIdN     *[]int32
	terminationType    *string
	terminationTypeN   *string
	updatedByRequest   *string
}

func (r ApiDcimCableTerminationsListRequest) Cable(cable int32) ApiDcimCableTerminationsListRequest {
	r.cable = &cable
	return r
}

func (r ApiDcimCableTerminationsListRequest) CableN(cableN int32) ApiDcimCableTerminationsListRequest {
	r.cableN = &cableN
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimCableTerminationsListRequest) CableEnd(cableEnd End) ApiDcimCableTerminationsListRequest {
	r.cableEnd = &cableEnd
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimCableTerminationsListRequest) CableEndN(cableEndN End) ApiDcimCableTerminationsListRequest {
	r.cableEndN = &cableEndN
	return r
}

func (r ApiDcimCableTerminationsListRequest) Created(created []time.Time) ApiDcimCableTerminationsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimCableTerminationsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimCableTerminationsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimCableTerminationsListRequest) CreatedGt(createdGt []time.Time) ApiDcimCableTerminationsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimCableTerminationsListRequest) CreatedGte(createdGte []time.Time) ApiDcimCableTerminationsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimCableTerminationsListRequest) CreatedLt(createdLt []time.Time) ApiDcimCableTerminationsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimCableTerminationsListRequest) CreatedLte(createdLte []time.Time) ApiDcimCableTerminationsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimCableTerminationsListRequest) CreatedN(createdN []time.Time) ApiDcimCableTerminationsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimCableTerminationsListRequest) CreatedByRequest(createdByRequest string) ApiDcimCableTerminationsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimCableTerminationsListRequest) Id(id []int32) ApiDcimCableTerminationsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimCableTerminationsListRequest) IdEmpty(idEmpty bool) ApiDcimCableTerminationsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimCableTerminationsListRequest) IdGt(idGt []int32) ApiDcimCableTerminationsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimCableTerminationsListRequest) IdGte(idGte []int32) ApiDcimCableTerminationsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimCableTerminationsListRequest) IdLt(idLt []int32) ApiDcimCableTerminationsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimCableTerminationsListRequest) IdLte(idLte []int32) ApiDcimCableTerminationsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimCableTerminationsListRequest) IdN(idN []int32) ApiDcimCableTerminationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimCableTerminationsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimCableTerminationsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimCableTerminationsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimCableTerminationsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimCableTerminationsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimCableTerminationsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimCableTerminationsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimCableTerminationsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimCableTerminationsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimCableTerminationsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimCableTerminationsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimCableTerminationsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimCableTerminationsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimCableTerminationsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimCableTerminationsListRequest) Limit(limit int32) ApiDcimCableTerminationsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimCableTerminationsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimCableTerminationsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiDcimCableTerminationsListRequest) Offset(offset int32) ApiDcimCableTerminationsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimCableTerminationsListRequest) Ordering(ordering string) ApiDcimCableTerminationsListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimCableTerminationsListRequest) TerminationId(terminationId []int32) ApiDcimCableTerminationsListRequest {
	r.terminationId = &terminationId
	return r
}

func (r ApiDcimCableTerminationsListRequest) TerminationIdEmpty(terminationIdEmpty bool) ApiDcimCableTerminationsListRequest {
	r.terminationIdEmpty = &terminationIdEmpty
	return r
}

func (r ApiDcimCableTerminationsListRequest) TerminationIdGt(terminationIdGt []int32) ApiDcimCableTerminationsListRequest {
	r.terminationIdGt = &terminationIdGt
	return r
}

func (r ApiDcimCableTerminationsListRequest) TerminationIdGte(terminationIdGte []int32) ApiDcimCableTerminationsListRequest {
	r.terminationIdGte = &terminationIdGte
	return r
}

func (r ApiDcimCableTerminationsListRequest) TerminationIdLt(terminationIdLt []int32) ApiDcimCableTerminationsListRequest {
	r.terminationIdLt = &terminationIdLt
	return r
}

func (r ApiDcimCableTerminationsListRequest) TerminationIdLte(terminationIdLte []int32) ApiDcimCableTerminationsListRequest {
	r.terminationIdLte = &terminationIdLte
	return r
}

func (r ApiDcimCableTerminationsListRequest) TerminationIdN(terminationIdN []int32) ApiDcimCableTerminationsListRequest {
	r.terminationIdN = &terminationIdN
	return r
}

func (r ApiDcimCableTerminationsListRequest) TerminationType(terminationType string) ApiDcimCableTerminationsListRequest {
	r.terminationType = &terminationType
	return r
}

func (r ApiDcimCableTerminationsListRequest) TerminationTypeN(terminationTypeN string) ApiDcimCableTerminationsListRequest {
	r.terminationTypeN = &terminationTypeN
	return r
}

func (r ApiDcimCableTerminationsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimCableTerminationsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimCableTerminationsListRequest) Execute() (*PaginatedCableTerminationList, *http.Response, error) {
	return r.ApiService.DcimCableTerminationsListExecute(r)
}

/*
DcimCableTerminationsList Method for DcimCableTerminationsList

Get a list of cable termination objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCableTerminationsListRequest
*/
func (a *DcimAPIService) DcimCableTerminationsList(ctx context.Context) ApiDcimCableTerminationsListRequest {
	return ApiDcimCableTerminationsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCableTerminationList
func (a *DcimAPIService) DcimCableTerminationsListExecute(r ApiDcimCableTerminationsListRequest) (*PaginatedCableTerminationList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCableTerminationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCableTerminationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cable-terminations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable", r.cable, "")
	}
	if r.cableN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable__n", r.cableN, "")
	}
	if r.cableEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end", r.cableEnd, "")
	}
	if r.cableEndN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end__n", r.cableEndN, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.terminationId != nil {
		t := *r.terminationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id", t, "multi")
		}
	}
	if r.terminationIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__empty", r.terminationIdEmpty, "")
	}
	if r.terminationIdGt != nil {
		t := *r.terminationIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__gt", t, "multi")
		}
	}
	if r.terminationIdGte != nil {
		t := *r.terminationIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__gte", t, "multi")
		}
	}
	if r.terminationIdLt != nil {
		t := *r.terminationIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__lt", t, "multi")
		}
	}
	if r.terminationIdLte != nil {
		t := *r.terminationIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__lte", t, "multi")
		}
	}
	if r.terminationIdN != nil {
		t := *r.terminationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "termination_id__n", t, "multi")
		}
	}
	if r.terminationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "termination_type", r.terminationType, "")
	}
	if r.terminationTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "termination_type__n", r.terminationTypeN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCableTerminationsPartialUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *DcimAPIService
	id                             int32
	patchedCableTerminationRequest *PatchedCableTerminationRequest
}

func (r ApiDcimCableTerminationsPartialUpdateRequest) PatchedCableTerminationRequest(patchedCableTerminationRequest PatchedCableTerminationRequest) ApiDcimCableTerminationsPartialUpdateRequest {
	r.patchedCableTerminationRequest = &patchedCableTerminationRequest
	return r
}

func (r ApiDcimCableTerminationsPartialUpdateRequest) Execute() (*CableTermination, *http.Response, error) {
	return r.ApiService.DcimCableTerminationsPartialUpdateExecute(r)
}

/*
DcimCableTerminationsPartialUpdate Method for DcimCableTerminationsPartialUpdate

Patch a cable termination object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this cable termination.
	@return ApiDcimCableTerminationsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimCableTerminationsPartialUpdate(ctx context.Context, id int32) ApiDcimCableTerminationsPartialUpdateRequest {
	return ApiDcimCableTerminationsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CableTermination
func (a *DcimAPIService) DcimCableTerminationsPartialUpdateExecute(r ApiDcimCableTerminationsPartialUpdateRequest) (*CableTermination, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CableTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCableTerminationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cable-terminations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCableTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCableTerminationsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimCableTerminationsRetrieveRequest) Execute() (*CableTermination, *http.Response, error) {
	return r.ApiService.DcimCableTerminationsRetrieveExecute(r)
}

/*
DcimCableTerminationsRetrieve Method for DcimCableTerminationsRetrieve

Get a cable termination object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this cable termination.
	@return ApiDcimCableTerminationsRetrieveRequest
*/
func (a *DcimAPIService) DcimCableTerminationsRetrieve(ctx context.Context, id int32) ApiDcimCableTerminationsRetrieveRequest {
	return ApiDcimCableTerminationsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CableTermination
func (a *DcimAPIService) DcimCableTerminationsRetrieveExecute(r ApiDcimCableTerminationsRetrieveRequest) (*CableTermination, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CableTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCableTerminationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cable-terminations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCableTerminationsUpdateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	id                      int32
	cableTerminationRequest *CableTerminationRequest
}

func (r ApiDcimCableTerminationsUpdateRequest) CableTerminationRequest(cableTerminationRequest CableTerminationRequest) ApiDcimCableTerminationsUpdateRequest {
	r.cableTerminationRequest = &cableTerminationRequest
	return r
}

func (r ApiDcimCableTerminationsUpdateRequest) Execute() (*CableTermination, *http.Response, error) {
	return r.ApiService.DcimCableTerminationsUpdateExecute(r)
}

/*
DcimCableTerminationsUpdate Method for DcimCableTerminationsUpdate

Put a cable termination object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this cable termination.
	@return ApiDcimCableTerminationsUpdateRequest
*/
func (a *DcimAPIService) DcimCableTerminationsUpdate(ctx context.Context, id int32) ApiDcimCableTerminationsUpdateRequest {
	return ApiDcimCableTerminationsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CableTermination
func (a *DcimAPIService) DcimCableTerminationsUpdateExecute(r ApiDcimCableTerminationsUpdateRequest) (*CableTermination, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CableTermination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCableTerminationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cable-terminations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cableTerminationRequest == nil {
		return localVarReturnValue, nil, reportError("cableTerminationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cableTerminationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesBulkDestroyRequest struct {
	ctx          context.Context
	ApiService   *DcimAPIService
	cableRequest *[]CableRequest
}

func (r ApiDcimCablesBulkDestroyRequest) CableRequest(cableRequest []CableRequest) ApiDcimCablesBulkDestroyRequest {
	r.cableRequest = &cableRequest
	return r
}

func (r ApiDcimCablesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimCablesBulkDestroyExecute(r)
}

/*
DcimCablesBulkDestroy Method for DcimCablesBulkDestroy

Delete a list of cable objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCablesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimCablesBulkDestroy(ctx context.Context) ApiDcimCablesBulkDestroyRequest {
	return ApiDcimCablesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimCablesBulkDestroyExecute(r ApiDcimCablesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCablesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cableRequest == nil {
		return nil, reportError("cableRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cableRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimCablesBulkPartialUpdateRequest struct {
	ctx          context.Context
	ApiService   *DcimAPIService
	cableRequest *[]CableRequest
}

func (r ApiDcimCablesBulkPartialUpdateRequest) CableRequest(cableRequest []CableRequest) ApiDcimCablesBulkPartialUpdateRequest {
	r.cableRequest = &cableRequest
	return r
}

func (r ApiDcimCablesBulkPartialUpdateRequest) Execute() ([]Cable, *http.Response, error) {
	return r.ApiService.DcimCablesBulkPartialUpdateExecute(r)
}

/*
DcimCablesBulkPartialUpdate Method for DcimCablesBulkPartialUpdate

Patch a list of cable objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCablesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimCablesBulkPartialUpdate(ctx context.Context) ApiDcimCablesBulkPartialUpdateRequest {
	return ApiDcimCablesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Cable
func (a *DcimAPIService) DcimCablesBulkPartialUpdateExecute(r ApiDcimCablesBulkPartialUpdateRequest) ([]Cable, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCablesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cableRequest == nil {
		return localVarReturnValue, nil, reportError("cableRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cableRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesBulkUpdateRequest struct {
	ctx          context.Context
	ApiService   *DcimAPIService
	cableRequest *[]CableRequest
}

func (r ApiDcimCablesBulkUpdateRequest) CableRequest(cableRequest []CableRequest) ApiDcimCablesBulkUpdateRequest {
	r.cableRequest = &cableRequest
	return r
}

func (r ApiDcimCablesBulkUpdateRequest) Execute() ([]Cable, *http.Response, error) {
	return r.ApiService.DcimCablesBulkUpdateExecute(r)
}

/*
DcimCablesBulkUpdate Method for DcimCablesBulkUpdate

Put a list of cable objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCablesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimCablesBulkUpdate(ctx context.Context) ApiDcimCablesBulkUpdateRequest {
	return ApiDcimCablesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Cable
func (a *DcimAPIService) DcimCablesBulkUpdateExecute(r ApiDcimCablesBulkUpdateRequest) ([]Cable, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCablesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cableRequest == nil {
		return localVarReturnValue, nil, reportError("cableRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cableRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesCreateRequest struct {
	ctx                  context.Context
	ApiService           *DcimAPIService
	writableCableRequest *WritableCableRequest
}

func (r ApiDcimCablesCreateRequest) WritableCableRequest(writableCableRequest WritableCableRequest) ApiDcimCablesCreateRequest {
	r.writableCableRequest = &writableCableRequest
	return r
}

func (r ApiDcimCablesCreateRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesCreateExecute(r)
}

/*
DcimCablesCreate Method for DcimCablesCreate

Post a list of cable objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCablesCreateRequest
*/
func (a *DcimAPIService) DcimCablesCreate(ctx context.Context) ApiDcimCablesCreateRequest {
	return ApiDcimCablesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Cable
func (a *DcimAPIService) DcimCablesCreateExecute(r ApiDcimCablesCreateRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCablesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCableRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimCablesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimCablesDestroyExecute(r)
}

/*
DcimCablesDestroy Method for DcimCablesDestroy

Delete a cable object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this cable.
	@return ApiDcimCablesDestroyRequest
*/
func (a *DcimAPIService) DcimCablesDestroy(ctx context.Context, id int32) ApiDcimCablesDestroyRequest {
	return ApiDcimCablesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimCablesDestroyExecute(r ApiDcimCablesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCablesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cables/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimCablesListRequest struct {
	ctx                  context.Context
	ApiService           *DcimAPIService
	circuitterminationId *[]int32
	color                *[]string
	colorN               *[]string
	consoleportId        *[]int32
	consoleserverportId  *[]int32
	created              *[]time.Time
	createdEmpty         *[]time.Time
	createdGt            *[]time.Time
	createdGte           *[]time.Time
	createdLt            *[]time.Time
	createdLte           *[]time.Time
	createdN             *[]time.Time
	createdByRequest     *string
	description          *[]string
	descriptionEmpty     *bool
	descriptionIc        *[]string
	descriptionIe        *[]string
	descriptionIew       *[]string
	descriptionIsw       *[]string
	descriptionN         *[]string
	descriptionNic       *[]string
	descriptionNie       *[]string
	descriptionNiew      *[]string
	descriptionNisw      *[]string
	device               *[]string
	deviceId             *[]int32
	frontportId          *[]int32
	id                   *[]int32
	idEmpty              *bool
	idGt                 *[]int32
	idGte                *[]int32
	idLt                 *[]int32
	idLte                *[]int32
	idN                  *[]int32
	interfaceId          *[]int32
	label                *[]string
	labelEmpty           *bool
	labelIc              *[]string
	labelIe              *[]string
	labelIew             *[]string
	labelIsw             *[]string
	labelN               *[]string
	labelNic             *[]string
	labelNie             *[]string
	labelNiew            *[]string
	labelNisw            *[]string
	lastUpdated          *[]time.Time
	lastUpdatedEmpty     *[]time.Time
	lastUpdatedGt        *[]time.Time
	lastUpdatedGte       *[]time.Time
	lastUpdatedLt        *[]time.Time
	lastUpdatedLte       *[]time.Time
	lastUpdatedN         *[]time.Time
	length               *[]float64
	lengthEmpty          *bool
	lengthGt             *[]float64
	lengthGte            *[]float64
	lengthLt             *[]float64
	lengthLte            *[]float64
	lengthN              *[]float64
	lengthUnit           *DcimCablesListLengthUnitParameter
	lengthUnitN          *DcimCablesListLengthUnitParameter
	limit                *int32
	location             *[]string
	locationId           *[]int32
	modifiedByRequest    *string
	offset               *int32
	ordering             *string
	powerfeedId          *[]int32
	poweroutletId        *[]int32
	powerportId          *[]int32
	q                    *string
	rack                 *[]string
	rackId               *[]int32
	rearportId           *[]int32
	site                 *[]string
	siteId               *[]int32
	status               *[]string
	statusN              *[]string
	tag                  *[]string
	tagN                 *[]string
	tenant               *[]string
	tenantN              *[]string
	tenantGroup          *[]string
	tenantGroupN         *[]string
	tenantGroupId        *[]string
	tenantGroupIdN       *[]string
	tenantId             *[]*int32
	tenantIdN            *[]*int32
	terminationAId       *[]int32
	terminationAType     *string
	terminationATypeN    *string
	terminationBId       *[]int32
	terminationBType     *string
	terminationBTypeN    *string
	type_                *[]string
	typeN                *[]string
	unterminated         *bool
	updatedByRequest     *string
}

func (r ApiDcimCablesListRequest) CircuitterminationId(circuitterminationId []int32) ApiDcimCablesListRequest {
	r.circuitterminationId = &circuitterminationId
	return r
}

func (r ApiDcimCablesListRequest) Color(color []string) ApiDcimCablesListRequest {
	r.color = &color
	return r
}

func (r ApiDcimCablesListRequest) ColorN(colorN []string) ApiDcimCablesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimCablesListRequest) ConsoleportId(consoleportId []int32) ApiDcimCablesListRequest {
	r.consoleportId = &consoleportId
	return r
}

func (r ApiDcimCablesListRequest) ConsoleserverportId(consoleserverportId []int32) ApiDcimCablesListRequest {
	r.consoleserverportId = &consoleserverportId
	return r
}

func (r ApiDcimCablesListRequest) Created(created []time.Time) ApiDcimCablesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimCablesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimCablesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimCablesListRequest) CreatedGt(createdGt []time.Time) ApiDcimCablesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimCablesListRequest) CreatedGte(createdGte []time.Time) ApiDcimCablesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimCablesListRequest) CreatedLt(createdLt []time.Time) ApiDcimCablesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimCablesListRequest) CreatedLte(createdLte []time.Time) ApiDcimCablesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimCablesListRequest) CreatedN(createdN []time.Time) ApiDcimCablesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimCablesListRequest) CreatedByRequest(createdByRequest string) ApiDcimCablesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimCablesListRequest) Description(description []string) ApiDcimCablesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimCablesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimCablesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimCablesListRequest) DescriptionIc(descriptionIc []string) ApiDcimCablesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimCablesListRequest) DescriptionIe(descriptionIe []string) ApiDcimCablesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimCablesListRequest) DescriptionIew(descriptionIew []string) ApiDcimCablesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimCablesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimCablesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimCablesListRequest) DescriptionN(descriptionN []string) ApiDcimCablesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimCablesListRequest) DescriptionNic(descriptionNic []string) ApiDcimCablesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimCablesListRequest) DescriptionNie(descriptionNie []string) ApiDcimCablesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimCablesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimCablesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimCablesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimCablesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimCablesListRequest) Device(device []string) ApiDcimCablesListRequest {
	r.device = &device
	return r
}

func (r ApiDcimCablesListRequest) DeviceId(deviceId []int32) ApiDcimCablesListRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiDcimCablesListRequest) FrontportId(frontportId []int32) ApiDcimCablesListRequest {
	r.frontportId = &frontportId
	return r
}

func (r ApiDcimCablesListRequest) Id(id []int32) ApiDcimCablesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimCablesListRequest) IdEmpty(idEmpty bool) ApiDcimCablesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimCablesListRequest) IdGt(idGt []int32) ApiDcimCablesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimCablesListRequest) IdGte(idGte []int32) ApiDcimCablesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimCablesListRequest) IdLt(idLt []int32) ApiDcimCablesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimCablesListRequest) IdLte(idLte []int32) ApiDcimCablesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimCablesListRequest) IdN(idN []int32) ApiDcimCablesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimCablesListRequest) InterfaceId(interfaceId []int32) ApiDcimCablesListRequest {
	r.interfaceId = &interfaceId
	return r
}

func (r ApiDcimCablesListRequest) Label(label []string) ApiDcimCablesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimCablesListRequest) LabelEmpty(labelEmpty bool) ApiDcimCablesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimCablesListRequest) LabelIc(labelIc []string) ApiDcimCablesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimCablesListRequest) LabelIe(labelIe []string) ApiDcimCablesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimCablesListRequest) LabelIew(labelIew []string) ApiDcimCablesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimCablesListRequest) LabelIsw(labelIsw []string) ApiDcimCablesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimCablesListRequest) LabelN(labelN []string) ApiDcimCablesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimCablesListRequest) LabelNic(labelNic []string) ApiDcimCablesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimCablesListRequest) LabelNie(labelNie []string) ApiDcimCablesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimCablesListRequest) LabelNiew(labelNiew []string) ApiDcimCablesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimCablesListRequest) LabelNisw(labelNisw []string) ApiDcimCablesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimCablesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimCablesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimCablesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimCablesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimCablesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimCablesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimCablesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimCablesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimCablesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimCablesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimCablesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimCablesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimCablesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimCablesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

func (r ApiDcimCablesListRequest) Length(length []float64) ApiDcimCablesListRequest {
	r.length = &length
	return r
}

func (r ApiDcimCablesListRequest) LengthEmpty(lengthEmpty bool) ApiDcimCablesListRequest {
	r.lengthEmpty = &lengthEmpty
	return r
}

func (r ApiDcimCablesListRequest) LengthGt(lengthGt []float64) ApiDcimCablesListRequest {
	r.lengthGt = &lengthGt
	return r
}

func (r ApiDcimCablesListRequest) LengthGte(lengthGte []float64) ApiDcimCablesListRequest {
	r.lengthGte = &lengthGte
	return r
}

func (r ApiDcimCablesListRequest) LengthLt(lengthLt []float64) ApiDcimCablesListRequest {
	r.lengthLt = &lengthLt
	return r
}

func (r ApiDcimCablesListRequest) LengthLte(lengthLte []float64) ApiDcimCablesListRequest {
	r.lengthLte = &lengthLte
	return r
}

func (r ApiDcimCablesListRequest) LengthN(lengthN []float64) ApiDcimCablesListRequest {
	r.lengthN = &lengthN
	return r
}

// * &#x60;km&#x60; - Kilometers * &#x60;m&#x60; - Meters * &#x60;cm&#x60; - Centimeters * &#x60;mi&#x60; - Miles * &#x60;ft&#x60; - Feet * &#x60;in&#x60; - Inches
func (r ApiDcimCablesListRequest) LengthUnit(lengthUnit DcimCablesListLengthUnitParameter) ApiDcimCablesListRequest {
	r.lengthUnit = &lengthUnit
	return r
}

// * &#x60;km&#x60; - Kilometers * &#x60;m&#x60; - Meters * &#x60;cm&#x60; - Centimeters * &#x60;mi&#x60; - Miles * &#x60;ft&#x60; - Feet * &#x60;in&#x60; - Inches
func (r ApiDcimCablesListRequest) LengthUnitN(lengthUnitN DcimCablesListLengthUnitParameter) ApiDcimCablesListRequest {
	r.lengthUnitN = &lengthUnitN
	return r
}

// Number of results to return per page.
func (r ApiDcimCablesListRequest) Limit(limit int32) ApiDcimCablesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimCablesListRequest) Location(location []string) ApiDcimCablesListRequest {
	r.location = &location
	return r
}

func (r ApiDcimCablesListRequest) LocationId(locationId []int32) ApiDcimCablesListRequest {
	r.locationId = &locationId
	return r
}

func (r ApiDcimCablesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimCablesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiDcimCablesListRequest) Offset(offset int32) ApiDcimCablesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimCablesListRequest) Ordering(ordering string) ApiDcimCablesListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimCablesListRequest) PowerfeedId(powerfeedId []int32) ApiDcimCablesListRequest {
	r.powerfeedId = &powerfeedId
	return r
}

func (r ApiDcimCablesListRequest) PoweroutletId(poweroutletId []int32) ApiDcimCablesListRequest {
	r.poweroutletId = &poweroutletId
	return r
}

func (r ApiDcimCablesListRequest) PowerportId(powerportId []int32) ApiDcimCablesListRequest {
	r.powerportId = &powerportId
	return r
}

// Search
func (r ApiDcimCablesListRequest) Q(q string) ApiDcimCablesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimCablesListRequest) Rack(rack []string) ApiDcimCablesListRequest {
	r.rack = &rack
	return r
}

func (r ApiDcimCablesListRequest) RackId(rackId []int32) ApiDcimCablesListRequest {
	r.rackId = &rackId
	return r
}

func (r ApiDcimCablesListRequest) RearportId(rearportId []int32) ApiDcimCablesListRequest {
	r.rearportId = &rearportId
	return r
}

func (r ApiDcimCablesListRequest) Site(site []string) ApiDcimCablesListRequest {
	r.site = &site
	return r
}

func (r ApiDcimCablesListRequest) SiteId(siteId []int32) ApiDcimCablesListRequest {
	r.siteId = &siteId
	return r
}

func (r ApiDcimCablesListRequest) Status(status []string) ApiDcimCablesListRequest {
	r.status = &status
	return r
}

func (r ApiDcimCablesListRequest) StatusN(statusN []string) ApiDcimCablesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimCablesListRequest) Tag(tag []string) ApiDcimCablesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimCablesListRequest) TagN(tagN []string) ApiDcimCablesListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimCablesListRequest) Tenant(tenant []string) ApiDcimCablesListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimCablesListRequest) TenantN(tenantN []string) ApiDcimCablesListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiDcimCablesListRequest) TenantGroup(tenantGroup []string) ApiDcimCablesListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiDcimCablesListRequest) TenantGroupN(tenantGroupN []string) ApiDcimCablesListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiDcimCablesListRequest) TenantGroupId(tenantGroupId []string) ApiDcimCablesListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiDcimCablesListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimCablesListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimCablesListRequest) TenantId(tenantId []*int32) ApiDcimCablesListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimCablesListRequest) TenantIdN(tenantIdN []*int32) ApiDcimCablesListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimCablesListRequest) TerminationAId(terminationAId []int32) ApiDcimCablesListRequest {
	r.terminationAId = &terminationAId
	return r
}

func (r ApiDcimCablesListRequest) TerminationAType(terminationAType string) ApiDcimCablesListRequest {
	r.terminationAType = &terminationAType
	return r
}

func (r ApiDcimCablesListRequest) TerminationATypeN(terminationATypeN string) ApiDcimCablesListRequest {
	r.terminationATypeN = &terminationATypeN
	return r
}

func (r ApiDcimCablesListRequest) TerminationBId(terminationBId []int32) ApiDcimCablesListRequest {
	r.terminationBId = &terminationBId
	return r
}

func (r ApiDcimCablesListRequest) TerminationBType(terminationBType string) ApiDcimCablesListRequest {
	r.terminationBType = &terminationBType
	return r
}

func (r ApiDcimCablesListRequest) TerminationBTypeN(terminationBTypeN string) ApiDcimCablesListRequest {
	r.terminationBTypeN = &terminationBTypeN
	return r
}

func (r ApiDcimCablesListRequest) Type_(type_ []string) ApiDcimCablesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimCablesListRequest) TypeN(typeN []string) ApiDcimCablesListRequest {
	r.typeN = &typeN
	return r
}

// Unterminated
func (r ApiDcimCablesListRequest) Unterminated(unterminated bool) ApiDcimCablesListRequest {
	r.unterminated = &unterminated
	return r
}

func (r ApiDcimCablesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimCablesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimCablesListRequest) Execute() (*PaginatedCableList, *http.Response, error) {
	return r.ApiService.DcimCablesListExecute(r)
}

/*
DcimCablesList Method for DcimCablesList

Get a list of cable objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimCablesListRequest
*/
func (a *DcimAPIService) DcimCablesList(ctx context.Context) ApiDcimCablesListRequest {
	return ApiDcimCablesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCableList
func (a *DcimAPIService) DcimCablesListExecute(r ApiDcimCablesListRequest) (*PaginatedCableList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCableList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCablesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.circuitterminationId != nil {
		t := *r.circuitterminationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "circuittermination_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "circuittermination_id", t, "multi")
		}
	}
	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "multi")
		}
	}
	if r.consoleportId != nil {
		t := *r.consoleportId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "consoleport_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "consoleport_id", t, "multi")
		}
	}
	if r.consoleserverportId != nil {
		t := *r.consoleserverportId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "consoleserverport_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "consoleserverport_id", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.frontportId != nil {
		t := *r.frontportId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "frontport_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "frontport_id", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.interfaceId != nil {
		t := *r.interfaceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.length != nil {
		t := *r.length
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "length", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "length", t, "multi")
		}
	}
	if r.lengthEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "length__empty", r.lengthEmpty, "")
	}
	if r.lengthGt != nil {
		t := *r.lengthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "length__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "length__gt", t, "multi")
		}
	}
	if r.lengthGte != nil {
		t := *r.lengthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "length__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "length__gte", t, "multi")
		}
	}
	if r.lengthLt != nil {
		t := *r.lengthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "length__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "length__lt", t, "multi")
		}
	}
	if r.lengthLte != nil {
		t := *r.lengthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "length__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "length__lte", t, "multi")
		}
	}
	if r.lengthN != nil {
		t := *r.lengthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "length__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "length__n", t, "multi")
		}
	}
	if r.lengthUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "length_unit", r.lengthUnit, "")
	}
	if r.lengthUnitN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "length_unit__n", r.lengthUnitN, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.powerfeedId != nil {
		t := *r.powerfeedId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "powerfeed_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "powerfeed_id", t, "multi")
		}
	}
	if r.poweroutletId != nil {
		t := *r.poweroutletId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "poweroutlet_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "poweroutlet_id", t, "multi")
		}
	}
	if r.powerportId != nil {
		t := *r.powerportId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "powerport_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "powerport_id", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rearportId != nil {
		t := *r.rearportId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rearport_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rearport_id", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.terminationAId != nil {
		t := *r.terminationAId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "termination_a_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "termination_a_id", t, "multi")
		}
	}
	if r.terminationAType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "termination_a_type", r.terminationAType, "")
	}
	if r.terminationATypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "termination_a_type__n", r.terminationATypeN, "")
	}
	if r.terminationBId != nil {
		t := *r.terminationBId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "termination_b_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "termination_b_id", t, "multi")
		}
	}
	if r.terminationBType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "termination_b_type", r.terminationBType, "")
	}
	if r.terminationBTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "termination_b_type__n", r.terminationBTypeN, "")
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.unterminated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unterminated", r.unterminated, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *DcimAPIService
	id                          int32
	patchedWritableCableRequest *PatchedWritableCableRequest
}

func (r ApiDcimCablesPartialUpdateRequest) PatchedWritableCableRequest(patchedWritableCableRequest PatchedWritableCableRequest) ApiDcimCablesPartialUpdateRequest {
	r.patchedWritableCableRequest = &patchedWritableCableRequest
	return r
}

func (r ApiDcimCablesPartialUpdateRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesPartialUpdateExecute(r)
}

/*
DcimCablesPartialUpdate Method for DcimCablesPartialUpdate

Patch a cable object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this cable.
	@return ApiDcimCablesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimCablesPartialUpdate(ctx context.Context, id int32) ApiDcimCablesPartialUpdateRequest {
	return ApiDcimCablesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Cable
func (a *DcimAPIService) DcimCablesPartialUpdateExecute(r ApiDcimCablesPartialUpdateRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCablesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cables/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCableRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimCablesRetrieveRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesRetrieveExecute(r)
}

/*
DcimCablesRetrieve Method for DcimCablesRetrieve

Get a cable object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this cable.
	@return ApiDcimCablesRetrieveRequest
*/
func (a *DcimAPIService) DcimCablesRetrieve(ctx context.Context, id int32) ApiDcimCablesRetrieveRequest {
	return ApiDcimCablesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Cable
func (a *DcimAPIService) DcimCablesRetrieveExecute(r ApiDcimCablesRetrieveRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCablesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cables/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesUpdateRequest struct {
	ctx                  context.Context
	ApiService           *DcimAPIService
	id                   int32
	writableCableRequest *WritableCableRequest
}

func (r ApiDcimCablesUpdateRequest) WritableCableRequest(writableCableRequest WritableCableRequest) ApiDcimCablesUpdateRequest {
	r.writableCableRequest = &writableCableRequest
	return r
}

func (r ApiDcimCablesUpdateRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesUpdateExecute(r)
}

/*
DcimCablesUpdate Method for DcimCablesUpdate

Put a cable object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this cable.
	@return ApiDcimCablesUpdateRequest
*/
func (a *DcimAPIService) DcimCablesUpdate(ctx context.Context, id int32) ApiDcimCablesUpdateRequest {
	return ApiDcimCablesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Cable
func (a *DcimAPIService) DcimCablesUpdateExecute(r ApiDcimCablesUpdateRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimCablesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/cables/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCableRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConnectedDeviceListRequest struct {
	ctx           context.Context
	ApiService    *DcimAPIService
	peerDevice    *string
	peerInterface *string
}

// The name of the peer device
func (r ApiDcimConnectedDeviceListRequest) PeerDevice(peerDevice string) ApiDcimConnectedDeviceListRequest {
	r.peerDevice = &peerDevice
	return r
}

// The name of the peer interface
func (r ApiDcimConnectedDeviceListRequest) PeerInterface(peerInterface string) ApiDcimConnectedDeviceListRequest {
	r.peerInterface = &peerInterface
	return r
}

func (r ApiDcimConnectedDeviceListRequest) Execute() ([]Device, *http.Response, error) {
	return r.ApiService.DcimConnectedDeviceListExecute(r)
}

/*
DcimConnectedDeviceList Method for DcimConnectedDeviceList

This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer
interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors
via a protocol such as LLDP. Two query parameters must be included in the request:

* `peer_device`: The name of the peer device
* `peer_interface`: The name of the peer interface

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConnectedDeviceListRequest
*/
func (a *DcimAPIService) DcimConnectedDeviceList(ctx context.Context) ApiDcimConnectedDeviceListRequest {
	return ApiDcimConnectedDeviceListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Device
func (a *DcimAPIService) DcimConnectedDeviceListExecute(r ApiDcimConnectedDeviceListRequest) ([]Device, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Device
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConnectedDeviceList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/connected-device/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.peerDevice == nil {
		return localVarReturnValue, nil, reportError("peerDevice is required and must be specified")
	}
	if r.peerInterface == nil {
		return localVarReturnValue, nil, reportError("peerInterface is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "peer_device", r.peerDevice, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "peer_interface", r.peerInterface, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesBulkDestroyRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	consolePortTemplateRequest *[]ConsolePortTemplateRequest
}

func (r ApiDcimConsolePortTemplatesBulkDestroyRequest) ConsolePortTemplateRequest(consolePortTemplateRequest []ConsolePortTemplateRequest) ApiDcimConsolePortTemplatesBulkDestroyRequest {
	r.consolePortTemplateRequest = &consolePortTemplateRequest
	return r
}

func (r ApiDcimConsolePortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesBulkDestroyExecute(r)
}

/*
DcimConsolePortTemplatesBulkDestroy Method for DcimConsolePortTemplatesBulkDestroy

Delete a list of console port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimConsolePortTemplatesBulkDestroy(ctx context.Context) ApiDcimConsolePortTemplatesBulkDestroyRequest {
	return ApiDcimConsolePortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimConsolePortTemplatesBulkDestroyExecute(r ApiDcimConsolePortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consolePortTemplateRequest == nil {
		return nil, reportError("consolePortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consolePortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesBulkPartialUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	consolePortTemplateRequest *[]ConsolePortTemplateRequest
}

func (r ApiDcimConsolePortTemplatesBulkPartialUpdateRequest) ConsolePortTemplateRequest(consolePortTemplateRequest []ConsolePortTemplateRequest) ApiDcimConsolePortTemplatesBulkPartialUpdateRequest {
	r.consolePortTemplateRequest = &consolePortTemplateRequest
	return r
}

func (r ApiDcimConsolePortTemplatesBulkPartialUpdateRequest) Execute() ([]ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimConsolePortTemplatesBulkPartialUpdate Method for DcimConsolePortTemplatesBulkPartialUpdate

Patch a list of console port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimConsolePortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimConsolePortTemplatesBulkPartialUpdateRequest {
	return ApiDcimConsolePortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConsolePortTemplate
func (a *DcimAPIService) DcimConsolePortTemplatesBulkPartialUpdateExecute(r ApiDcimConsolePortTemplatesBulkPartialUpdateRequest) ([]ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consolePortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("consolePortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consolePortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesBulkUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	consolePortTemplateRequest *[]ConsolePortTemplateRequest
}

func (r ApiDcimConsolePortTemplatesBulkUpdateRequest) ConsolePortTemplateRequest(consolePortTemplateRequest []ConsolePortTemplateRequest) ApiDcimConsolePortTemplatesBulkUpdateRequest {
	r.consolePortTemplateRequest = &consolePortTemplateRequest
	return r
}

func (r ApiDcimConsolePortTemplatesBulkUpdateRequest) Execute() ([]ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesBulkUpdateExecute(r)
}

/*
DcimConsolePortTemplatesBulkUpdate Method for DcimConsolePortTemplatesBulkUpdate

Put a list of console port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimConsolePortTemplatesBulkUpdate(ctx context.Context) ApiDcimConsolePortTemplatesBulkUpdateRequest {
	return ApiDcimConsolePortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConsolePortTemplate
func (a *DcimAPIService) DcimConsolePortTemplatesBulkUpdateExecute(r ApiDcimConsolePortTemplatesBulkUpdateRequest) ([]ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consolePortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("consolePortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consolePortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesCreateRequest struct {
	ctx                                context.Context
	ApiService                         *DcimAPIService
	writableConsolePortTemplateRequest *WritableConsolePortTemplateRequest
}

func (r ApiDcimConsolePortTemplatesCreateRequest) WritableConsolePortTemplateRequest(writableConsolePortTemplateRequest WritableConsolePortTemplateRequest) ApiDcimConsolePortTemplatesCreateRequest {
	r.writableConsolePortTemplateRequest = &writableConsolePortTemplateRequest
	return r
}

func (r ApiDcimConsolePortTemplatesCreateRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesCreateExecute(r)
}

/*
DcimConsolePortTemplatesCreate Method for DcimConsolePortTemplatesCreate

Post a list of console port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimConsolePortTemplatesCreate(ctx context.Context) ApiDcimConsolePortTemplatesCreateRequest {
	return ApiDcimConsolePortTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConsolePortTemplate
func (a *DcimAPIService) DcimConsolePortTemplatesCreateExecute(r ApiDcimConsolePortTemplatesCreateRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableConsolePortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsolePortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesDestroyExecute(r)
}

/*
DcimConsolePortTemplatesDestroy Method for DcimConsolePortTemplatesDestroy

Delete a console port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console port template.
	@return ApiDcimConsolePortTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimConsolePortTemplatesDestroy(ctx context.Context, id int32) ApiDcimConsolePortTemplatesDestroyRequest {
	return ApiDcimConsolePortTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimConsolePortTemplatesDestroyExecute(r ApiDcimConsolePortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceTypeId      *[]*int32
	deviceTypeIdN     *[]*int32
	devicetypeId      *[]*int32
	devicetypeIdN     *[]*int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	moduleTypeId      *[]*int32
	moduleTypeIdN     *[]*int32
	moduletypeId      *[]*int32
	moduletypeIdN     *[]*int32
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	type_             *DcimConsolePortTemplatesListTypeParameter
	typeN             *DcimConsolePortTemplatesListTypeParameter
	updatedByRequest  *string
}

func (r ApiDcimConsolePortTemplatesListRequest) Created(created []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimConsolePortTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) Description(description []string) ApiDcimConsolePortTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimConsolePortTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) DeviceTypeId(deviceTypeId []*int32) ApiDcimConsolePortTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []*int32) ApiDcimConsolePortTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) DevicetypeId(devicetypeId []*int32) ApiDcimConsolePortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []*int32) ApiDcimConsolePortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) Id(id []int32) ApiDcimConsolePortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimConsolePortTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdGt(idGt []int32) ApiDcimConsolePortTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdGte(idGte []int32) ApiDcimConsolePortTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdLt(idLt []int32) ApiDcimConsolePortTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdLte(idLte []int32) ApiDcimConsolePortTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdN(idN []int32) ApiDcimConsolePortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) Label(label []string) ApiDcimConsolePortTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimConsolePortTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelIc(labelIc []string) ApiDcimConsolePortTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelIe(labelIe []string) ApiDcimConsolePortTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelIew(labelIew []string) ApiDcimConsolePortTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimConsolePortTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelN(labelN []string) ApiDcimConsolePortTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelNic(labelNic []string) ApiDcimConsolePortTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelNie(labelNie []string) ApiDcimConsolePortTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimConsolePortTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimConsolePortTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimConsolePortTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimConsolePortTemplatesListRequest) Limit(limit int32) ApiDcimConsolePortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimConsolePortTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) ModuleTypeId(moduleTypeId []*int32) ApiDcimConsolePortTemplatesListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) ModuleTypeIdN(moduleTypeIdN []*int32) ApiDcimConsolePortTemplatesListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

// Module type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) ModuletypeId(moduletypeId []*int32) ApiDcimConsolePortTemplatesListRequest {
	r.moduletypeId = &moduletypeId
	return r
}

// Module type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) ModuletypeIdN(moduletypeIdN []*int32) ApiDcimConsolePortTemplatesListRequest {
	r.moduletypeIdN = &moduletypeIdN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) Name(name []string) ApiDcimConsolePortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimConsolePortTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameIc(nameIc []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameIe(nameIe []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameIew(nameIew []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameN(nameN []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNic(nameNic []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNie(nameNie []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimConsolePortTemplatesListRequest) Offset(offset int32) ApiDcimConsolePortTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimConsolePortTemplatesListRequest) Ordering(ordering string) ApiDcimConsolePortTemplatesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimConsolePortTemplatesListRequest) Q(q string) ApiDcimConsolePortTemplatesListRequest {
	r.q = &q
	return r
}

// * &#x60;Serial&#x60; - [(&#39;de-9&#39;, &#39;DE-9&#39;), (&#39;db-25&#39;, &#39;DB-25&#39;), (&#39;rj-11&#39;, &#39;RJ-11&#39;), (&#39;rj-12&#39;, &#39;RJ-12&#39;), (&#39;rj-45&#39;, &#39;RJ-45&#39;), (&#39;mini-din-8&#39;, &#39;Mini-DIN 8&#39;)] * &#x60;USB&#x60; - [(&#39;usb-a&#39;, &#39;USB Type A&#39;), (&#39;usb-b&#39;, &#39;USB Type B&#39;), (&#39;usb-c&#39;, &#39;USB Type C&#39;), (&#39;usb-mini-a&#39;, &#39;USB Mini A&#39;), (&#39;usb-mini-b&#39;, &#39;USB Mini B&#39;), (&#39;usb-micro-a&#39;, &#39;USB Micro A&#39;), (&#39;usb-micro-b&#39;, &#39;USB Micro B&#39;), (&#39;usb-micro-ab&#39;, &#39;USB Micro AB&#39;)] * &#x60;Other&#x60; - [(&#39;other&#39;, &#39;Other&#39;)]
func (r ApiDcimConsolePortTemplatesListRequest) Type_(type_ DcimConsolePortTemplatesListTypeParameter) ApiDcimConsolePortTemplatesListRequest {
	r.type_ = &type_
	return r
}

// * &#x60;Serial&#x60; - [(&#39;de-9&#39;, &#39;DE-9&#39;), (&#39;db-25&#39;, &#39;DB-25&#39;), (&#39;rj-11&#39;, &#39;RJ-11&#39;), (&#39;rj-12&#39;, &#39;RJ-12&#39;), (&#39;rj-45&#39;, &#39;RJ-45&#39;), (&#39;mini-din-8&#39;, &#39;Mini-DIN 8&#39;)] * &#x60;USB&#x60; - [(&#39;usb-a&#39;, &#39;USB Type A&#39;), (&#39;usb-b&#39;, &#39;USB Type B&#39;), (&#39;usb-c&#39;, &#39;USB Type C&#39;), (&#39;usb-mini-a&#39;, &#39;USB Mini A&#39;), (&#39;usb-mini-b&#39;, &#39;USB Mini B&#39;), (&#39;usb-micro-a&#39;, &#39;USB Micro A&#39;), (&#39;usb-micro-b&#39;, &#39;USB Micro B&#39;), (&#39;usb-micro-ab&#39;, &#39;USB Micro AB&#39;)] * &#x60;Other&#x60; - [(&#39;other&#39;, &#39;Other&#39;)]
func (r ApiDcimConsolePortTemplatesListRequest) TypeN(typeN DcimConsolePortTemplatesListTypeParameter) ApiDcimConsolePortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimConsolePortTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) Execute() (*PaginatedConsolePortTemplateList, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesListExecute(r)
}

/*
DcimConsolePortTemplatesList Method for DcimConsolePortTemplatesList

Get a list of console port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortTemplatesListRequest
*/
func (a *DcimAPIService) DcimConsolePortTemplatesList(ctx context.Context) ApiDcimConsolePortTemplatesListRequest {
	return ApiDcimConsolePortTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedConsolePortTemplateList
func (a *DcimAPIService) DcimConsolePortTemplatesListExecute(r ApiDcimConsolePortTemplatesListRequest) (*PaginatedConsolePortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedConsolePortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.moduletypeId != nil {
		t := *r.moduletypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", t, "multi")
		}
	}
	if r.moduletypeIdN != nil {
		t := *r.moduletypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.typeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", r.typeN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesPartialUpdateRequest struct {
	ctx                                       context.Context
	ApiService                                *DcimAPIService
	id                                        int32
	patchedWritableConsolePortTemplateRequest *PatchedWritableConsolePortTemplateRequest
}

func (r ApiDcimConsolePortTemplatesPartialUpdateRequest) PatchedWritableConsolePortTemplateRequest(patchedWritableConsolePortTemplateRequest PatchedWritableConsolePortTemplateRequest) ApiDcimConsolePortTemplatesPartialUpdateRequest {
	r.patchedWritableConsolePortTemplateRequest = &patchedWritableConsolePortTemplateRequest
	return r
}

func (r ApiDcimConsolePortTemplatesPartialUpdateRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesPartialUpdateExecute(r)
}

/*
DcimConsolePortTemplatesPartialUpdate Method for DcimConsolePortTemplatesPartialUpdate

Patch a console port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console port template.
	@return ApiDcimConsolePortTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimConsolePortTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimConsolePortTemplatesPartialUpdateRequest {
	return ApiDcimConsolePortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsolePortTemplate
func (a *DcimAPIService) DcimConsolePortTemplatesPartialUpdateExecute(r ApiDcimConsolePortTemplatesPartialUpdateRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsolePortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsolePortTemplatesRetrieveRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesRetrieveExecute(r)
}

/*
DcimConsolePortTemplatesRetrieve Method for DcimConsolePortTemplatesRetrieve

Get a console port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console port template.
	@return ApiDcimConsolePortTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimConsolePortTemplatesRetrieve(ctx context.Context, id int32) ApiDcimConsolePortTemplatesRetrieveRequest {
	return ApiDcimConsolePortTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsolePortTemplate
func (a *DcimAPIService) DcimConsolePortTemplatesRetrieveExecute(r ApiDcimConsolePortTemplatesRetrieveRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesUpdateRequest struct {
	ctx                                context.Context
	ApiService                         *DcimAPIService
	id                                 int32
	writableConsolePortTemplateRequest *WritableConsolePortTemplateRequest
}

func (r ApiDcimConsolePortTemplatesUpdateRequest) WritableConsolePortTemplateRequest(writableConsolePortTemplateRequest WritableConsolePortTemplateRequest) ApiDcimConsolePortTemplatesUpdateRequest {
	r.writableConsolePortTemplateRequest = &writableConsolePortTemplateRequest
	return r
}

func (r ApiDcimConsolePortTemplatesUpdateRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesUpdateExecute(r)
}

/*
DcimConsolePortTemplatesUpdate Method for DcimConsolePortTemplatesUpdate

Put a console port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console port template.
	@return ApiDcimConsolePortTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimConsolePortTemplatesUpdate(ctx context.Context, id int32) ApiDcimConsolePortTemplatesUpdateRequest {
	return ApiDcimConsolePortTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsolePortTemplate
func (a *DcimAPIService) DcimConsolePortTemplatesUpdateExecute(r ApiDcimConsolePortTemplatesUpdateRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableConsolePortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsBulkDestroyRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	consolePortRequest *[]ConsolePortRequest
}

func (r ApiDcimConsolePortsBulkDestroyRequest) ConsolePortRequest(consolePortRequest []ConsolePortRequest) ApiDcimConsolePortsBulkDestroyRequest {
	r.consolePortRequest = &consolePortRequest
	return r
}

func (r ApiDcimConsolePortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsolePortsBulkDestroyExecute(r)
}

/*
DcimConsolePortsBulkDestroy Method for DcimConsolePortsBulkDestroy

Delete a list of console port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimConsolePortsBulkDestroy(ctx context.Context) ApiDcimConsolePortsBulkDestroyRequest {
	return ApiDcimConsolePortsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimConsolePortsBulkDestroyExecute(r ApiDcimConsolePortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consolePortRequest == nil {
		return nil, reportError("consolePortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consolePortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsolePortsBulkPartialUpdateRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	consolePortRequest *[]ConsolePortRequest
}

func (r ApiDcimConsolePortsBulkPartialUpdateRequest) ConsolePortRequest(consolePortRequest []ConsolePortRequest) ApiDcimConsolePortsBulkPartialUpdateRequest {
	r.consolePortRequest = &consolePortRequest
	return r
}

func (r ApiDcimConsolePortsBulkPartialUpdateRequest) Execute() ([]ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsBulkPartialUpdateExecute(r)
}

/*
DcimConsolePortsBulkPartialUpdate Method for DcimConsolePortsBulkPartialUpdate

Patch a list of console port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimConsolePortsBulkPartialUpdate(ctx context.Context) ApiDcimConsolePortsBulkPartialUpdateRequest {
	return ApiDcimConsolePortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConsolePort
func (a *DcimAPIService) DcimConsolePortsBulkPartialUpdateExecute(r ApiDcimConsolePortsBulkPartialUpdateRequest) ([]ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consolePortRequest == nil {
		return localVarReturnValue, nil, reportError("consolePortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consolePortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsBulkUpdateRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	consolePortRequest *[]ConsolePortRequest
}

func (r ApiDcimConsolePortsBulkUpdateRequest) ConsolePortRequest(consolePortRequest []ConsolePortRequest) ApiDcimConsolePortsBulkUpdateRequest {
	r.consolePortRequest = &consolePortRequest
	return r
}

func (r ApiDcimConsolePortsBulkUpdateRequest) Execute() ([]ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsBulkUpdateExecute(r)
}

/*
DcimConsolePortsBulkUpdate Method for DcimConsolePortsBulkUpdate

Put a list of console port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimConsolePortsBulkUpdate(ctx context.Context) ApiDcimConsolePortsBulkUpdateRequest {
	return ApiDcimConsolePortsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConsolePort
func (a *DcimAPIService) DcimConsolePortsBulkUpdateExecute(r ApiDcimConsolePortsBulkUpdateRequest) ([]ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consolePortRequest == nil {
		return localVarReturnValue, nil, reportError("consolePortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consolePortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsCreateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	writableConsolePortRequest *WritableConsolePortRequest
}

func (r ApiDcimConsolePortsCreateRequest) WritableConsolePortRequest(writableConsolePortRequest WritableConsolePortRequest) ApiDcimConsolePortsCreateRequest {
	r.writableConsolePortRequest = &writableConsolePortRequest
	return r
}

func (r ApiDcimConsolePortsCreateRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsCreateExecute(r)
}

/*
DcimConsolePortsCreate Method for DcimConsolePortsCreate

Post a list of console port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortsCreateRequest
*/
func (a *DcimAPIService) DcimConsolePortsCreate(ctx context.Context) ApiDcimConsolePortsCreateRequest {
	return ApiDcimConsolePortsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConsolePort
func (a *DcimAPIService) DcimConsolePortsCreateExecute(r ApiDcimConsolePortsCreateRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePortRequest == nil {
		return localVarReturnValue, nil, reportError("writableConsolePortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsolePortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsolePortsDestroyExecute(r)
}

/*
DcimConsolePortsDestroy Method for DcimConsolePortsDestroy

Delete a console port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console port.
	@return ApiDcimConsolePortsDestroyRequest
*/
func (a *DcimAPIService) DcimConsolePortsDestroy(ctx context.Context, id int32) ApiDcimConsolePortsDestroyRequest {
	return ApiDcimConsolePortsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimConsolePortsDestroyExecute(r ApiDcimConsolePortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsolePortsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	cableEnd          *CircuitsCircuitTerminationsListCableEndParameter
	cableEndN         *CircuitsCircuitTerminationsListCableEndParameter
	cableId           *[]*int32
	cableIdN          *[]*int32
	cabled            *bool
	connected         *bool
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	deviceRole        *[]string
	deviceRoleN       *[]string
	deviceRoleId      *[]int32
	deviceRoleIdN     *[]int32
	deviceStatus      *[]string
	deviceStatusN     *[]string
	deviceType        *[]string
	deviceTypeN       *[]string
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	location          *[]string
	locationN         *[]string
	locationId        *[]int32
	locationIdN       *[]int32
	markConnected     *bool
	modifiedByRequest *string
	moduleId          *[]*int32
	moduleIdN         *[]*int32
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	occupied          *bool
	offset            *int32
	ordering          *string
	q                 *string
	rack              *[]string
	rackN             *[]string
	rackId            *[]int32
	rackIdN           *[]int32
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]string
	siteGroupIdN      *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	speed             *DcimConsolePortsListSpeedParameter
	speedN            *DcimConsolePortsListSpeedParameter
	tag               *[]string
	tagN              *[]string
	type_             *[]string
	typeN             *[]string
	updatedByRequest  *string
	virtualChassis    *[]string
	virtualChassisN   *[]string
	virtualChassisId  *[]int32
	virtualChassisIdN *[]int32
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimConsolePortsListRequest) CableEnd(cableEnd CircuitsCircuitTerminationsListCableEndParameter) ApiDcimConsolePortsListRequest {
	r.cableEnd = &cableEnd
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimConsolePortsListRequest) CableEndN(cableEndN CircuitsCircuitTerminationsListCableEndParameter) ApiDcimConsolePortsListRequest {
	r.cableEndN = &cableEndN
	return r
}

// Cable (ID)
func (r ApiDcimConsolePortsListRequest) CableId(cableId []*int32) ApiDcimConsolePortsListRequest {
	r.cableId = &cableId
	return r
}

// Cable (ID)
func (r ApiDcimConsolePortsListRequest) CableIdN(cableIdN []*int32) ApiDcimConsolePortsListRequest {
	r.cableIdN = &cableIdN
	return r
}

func (r ApiDcimConsolePortsListRequest) Cabled(cabled bool) ApiDcimConsolePortsListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimConsolePortsListRequest) Connected(connected bool) ApiDcimConsolePortsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimConsolePortsListRequest) Created(created []time.Time) ApiDcimConsolePortsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimConsolePortsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimConsolePortsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimConsolePortsListRequest) CreatedGt(createdGt []time.Time) ApiDcimConsolePortsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimConsolePortsListRequest) CreatedGte(createdGte []time.Time) ApiDcimConsolePortsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimConsolePortsListRequest) CreatedLt(createdLt []time.Time) ApiDcimConsolePortsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimConsolePortsListRequest) CreatedLte(createdLte []time.Time) ApiDcimConsolePortsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimConsolePortsListRequest) CreatedN(createdN []time.Time) ApiDcimConsolePortsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimConsolePortsListRequest) CreatedByRequest(createdByRequest string) ApiDcimConsolePortsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimConsolePortsListRequest) Description(description []string) ApiDcimConsolePortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimConsolePortsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimConsolePortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimConsolePortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimConsolePortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimConsolePortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionN(descriptionN []string) ApiDcimConsolePortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimConsolePortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimConsolePortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimConsolePortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimConsolePortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimConsolePortsListRequest) Device(device []*string) ApiDcimConsolePortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimConsolePortsListRequest) DeviceN(deviceN []*string) ApiDcimConsolePortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimConsolePortsListRequest) DeviceId(deviceId []int32) ApiDcimConsolePortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimConsolePortsListRequest) DeviceIdN(deviceIdN []int32) ApiDcimConsolePortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimConsolePortsListRequest) DeviceRole(deviceRole []string) ApiDcimConsolePortsListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimConsolePortsListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimConsolePortsListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimConsolePortsListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimConsolePortsListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimConsolePortsListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimConsolePortsListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimConsolePortsListRequest) DeviceStatus(deviceStatus []string) ApiDcimConsolePortsListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimConsolePortsListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimConsolePortsListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimConsolePortsListRequest) DeviceType(deviceType []string) ApiDcimConsolePortsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimConsolePortsListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimConsolePortsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimConsolePortsListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimConsolePortsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimConsolePortsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimConsolePortsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimConsolePortsListRequest) Id(id []int32) ApiDcimConsolePortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimConsolePortsListRequest) IdEmpty(idEmpty bool) ApiDcimConsolePortsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimConsolePortsListRequest) IdGt(idGt []int32) ApiDcimConsolePortsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimConsolePortsListRequest) IdGte(idGte []int32) ApiDcimConsolePortsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimConsolePortsListRequest) IdLt(idLt []int32) ApiDcimConsolePortsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimConsolePortsListRequest) IdLte(idLte []int32) ApiDcimConsolePortsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimConsolePortsListRequest) IdN(idN []int32) ApiDcimConsolePortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimConsolePortsListRequest) Label(label []string) ApiDcimConsolePortsListRequest {
	r.label = &label
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelEmpty(labelEmpty bool) ApiDcimConsolePortsListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelIc(labelIc []string) ApiDcimConsolePortsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelIe(labelIe []string) ApiDcimConsolePortsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelIew(labelIew []string) ApiDcimConsolePortsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelIsw(labelIsw []string) ApiDcimConsolePortsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelN(labelN []string) ApiDcimConsolePortsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelNic(labelNic []string) ApiDcimConsolePortsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelNie(labelNie []string) ApiDcimConsolePortsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelNiew(labelNiew []string) ApiDcimConsolePortsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimConsolePortsListRequest) LabelNisw(labelNisw []string) ApiDcimConsolePortsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimConsolePortsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimConsolePortsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimConsolePortsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimConsolePortsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimConsolePortsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimConsolePortsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimConsolePortsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimConsolePortsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimConsolePortsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimConsolePortsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimConsolePortsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimConsolePortsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimConsolePortsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimConsolePortsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimConsolePortsListRequest) Limit(limit int32) ApiDcimConsolePortsListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimConsolePortsListRequest) Location(location []string) ApiDcimConsolePortsListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimConsolePortsListRequest) LocationN(locationN []string) ApiDcimConsolePortsListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimConsolePortsListRequest) LocationId(locationId []int32) ApiDcimConsolePortsListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimConsolePortsListRequest) LocationIdN(locationIdN []int32) ApiDcimConsolePortsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimConsolePortsListRequest) MarkConnected(markConnected bool) ApiDcimConsolePortsListRequest {
	r.markConnected = &markConnected
	return r
}

func (r ApiDcimConsolePortsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimConsolePortsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module (ID)
func (r ApiDcimConsolePortsListRequest) ModuleId(moduleId []*int32) ApiDcimConsolePortsListRequest {
	r.moduleId = &moduleId
	return r
}

// Module (ID)
func (r ApiDcimConsolePortsListRequest) ModuleIdN(moduleIdN []*int32) ApiDcimConsolePortsListRequest {
	r.moduleIdN = &moduleIdN
	return r
}

func (r ApiDcimConsolePortsListRequest) Name(name []string) ApiDcimConsolePortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimConsolePortsListRequest) NameEmpty(nameEmpty bool) ApiDcimConsolePortsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimConsolePortsListRequest) NameIc(nameIc []string) ApiDcimConsolePortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimConsolePortsListRequest) NameIe(nameIe []string) ApiDcimConsolePortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimConsolePortsListRequest) NameIew(nameIew []string) ApiDcimConsolePortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimConsolePortsListRequest) NameIsw(nameIsw []string) ApiDcimConsolePortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimConsolePortsListRequest) NameN(nameN []string) ApiDcimConsolePortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNic(nameNic []string) ApiDcimConsolePortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNie(nameNie []string) ApiDcimConsolePortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNiew(nameNiew []string) ApiDcimConsolePortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNisw(nameNisw []string) ApiDcimConsolePortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimConsolePortsListRequest) Occupied(occupied bool) ApiDcimConsolePortsListRequest {
	r.occupied = &occupied
	return r
}

// The initial index from which to return the results.
func (r ApiDcimConsolePortsListRequest) Offset(offset int32) ApiDcimConsolePortsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimConsolePortsListRequest) Ordering(ordering string) ApiDcimConsolePortsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimConsolePortsListRequest) Q(q string) ApiDcimConsolePortsListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimConsolePortsListRequest) Rack(rack []string) ApiDcimConsolePortsListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimConsolePortsListRequest) RackN(rackN []string) ApiDcimConsolePortsListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimConsolePortsListRequest) RackId(rackId []int32) ApiDcimConsolePortsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimConsolePortsListRequest) RackIdN(rackIdN []int32) ApiDcimConsolePortsListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimConsolePortsListRequest) Region(region []string) ApiDcimConsolePortsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimConsolePortsListRequest) RegionN(regionN []string) ApiDcimConsolePortsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimConsolePortsListRequest) RegionId(regionId []string) ApiDcimConsolePortsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimConsolePortsListRequest) RegionIdN(regionIdN []string) ApiDcimConsolePortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimConsolePortsListRequest) Site(site []string) ApiDcimConsolePortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimConsolePortsListRequest) SiteN(siteN []string) ApiDcimConsolePortsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimConsolePortsListRequest) SiteGroup(siteGroup []string) ApiDcimConsolePortsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimConsolePortsListRequest) SiteGroupN(siteGroupN []string) ApiDcimConsolePortsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimConsolePortsListRequest) SiteGroupId(siteGroupId []string) ApiDcimConsolePortsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimConsolePortsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimConsolePortsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimConsolePortsListRequest) SiteId(siteId []int32) ApiDcimConsolePortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimConsolePortsListRequest) SiteIdN(siteIdN []int32) ApiDcimConsolePortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

// Port speed in bits per second  * &#x60;1200&#x60; - 1200 bps * &#x60;2400&#x60; - 2400 bps * &#x60;4800&#x60; - 4800 bps * &#x60;9600&#x60; - 9600 bps * &#x60;19200&#x60; - 19.2 kbps * &#x60;38400&#x60; - 38.4 kbps * &#x60;57600&#x60; - 57.6 kbps * &#x60;115200&#x60; - 115.2 kbps
func (r ApiDcimConsolePortsListRequest) Speed(speed DcimConsolePortsListSpeedParameter) ApiDcimConsolePortsListRequest {
	r.speed = &speed
	return r
}

// Port speed in bits per second  * &#x60;1200&#x60; - 1200 bps * &#x60;2400&#x60; - 2400 bps * &#x60;4800&#x60; - 4800 bps * &#x60;9600&#x60; - 9600 bps * &#x60;19200&#x60; - 19.2 kbps * &#x60;38400&#x60; - 38.4 kbps * &#x60;57600&#x60; - 57.6 kbps * &#x60;115200&#x60; - 115.2 kbps
func (r ApiDcimConsolePortsListRequest) SpeedN(speedN DcimConsolePortsListSpeedParameter) ApiDcimConsolePortsListRequest {
	r.speedN = &speedN
	return r
}

func (r ApiDcimConsolePortsListRequest) Tag(tag []string) ApiDcimConsolePortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimConsolePortsListRequest) TagN(tagN []string) ApiDcimConsolePortsListRequest {
	r.tagN = &tagN
	return r
}

// Physical port type
func (r ApiDcimConsolePortsListRequest) Type_(type_ []string) ApiDcimConsolePortsListRequest {
	r.type_ = &type_
	return r
}

// Physical port type
func (r ApiDcimConsolePortsListRequest) TypeN(typeN []string) ApiDcimConsolePortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimConsolePortsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimConsolePortsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiDcimConsolePortsListRequest) VirtualChassis(virtualChassis []string) ApiDcimConsolePortsListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimConsolePortsListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimConsolePortsListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimConsolePortsListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimConsolePortsListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimConsolePortsListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimConsolePortsListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimConsolePortsListRequest) Execute() (*PaginatedConsolePortList, *http.Response, error) {
	return r.ApiService.DcimConsolePortsListExecute(r)
}

/*
DcimConsolePortsList Method for DcimConsolePortsList

Get a list of console port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsolePortsListRequest
*/
func (a *DcimAPIService) DcimConsolePortsList(ctx context.Context) ApiDcimConsolePortsListRequest {
	return ApiDcimConsolePortsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedConsolePortList
func (a *DcimAPIService) DcimConsolePortsListExecute(r ApiDcimConsolePortsListRequest) (*PaginatedConsolePortList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedConsolePortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cableEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end", r.cableEnd, "")
	}
	if r.cableEndN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end__n", r.cableEndN, "")
	}
	if r.cableId != nil {
		t := *r.cableId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", t, "multi")
		}
	}
	if r.cableIdN != nil {
		t := *r.cableIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", t, "multi")
		}
	}
	if r.cabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cabled", r.cabled, "")
	}
	if r.connected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connected", r.connected, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.markConnected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mark_connected", r.markConnected, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleId != nil {
		t := *r.moduleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", t, "multi")
		}
	}
	if r.moduleIdN != nil {
		t := *r.moduleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.occupied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occupied", r.occupied, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.speed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "speed", r.speed, "")
	}
	if r.speedN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "speed__n", r.speedN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsPartialUpdateRequest struct {
	ctx                               context.Context
	ApiService                        *DcimAPIService
	id                                int32
	patchedWritableConsolePortRequest *PatchedWritableConsolePortRequest
}

func (r ApiDcimConsolePortsPartialUpdateRequest) PatchedWritableConsolePortRequest(patchedWritableConsolePortRequest PatchedWritableConsolePortRequest) ApiDcimConsolePortsPartialUpdateRequest {
	r.patchedWritableConsolePortRequest = &patchedWritableConsolePortRequest
	return r
}

func (r ApiDcimConsolePortsPartialUpdateRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsPartialUpdateExecute(r)
}

/*
DcimConsolePortsPartialUpdate Method for DcimConsolePortsPartialUpdate

Patch a console port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console port.
	@return ApiDcimConsolePortsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimConsolePortsPartialUpdate(ctx context.Context, id int32) ApiDcimConsolePortsPartialUpdateRequest {
	return ApiDcimConsolePortsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsolePort
func (a *DcimAPIService) DcimConsolePortsPartialUpdateExecute(r ApiDcimConsolePortsPartialUpdateRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsolePortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsolePortsRetrieveRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsRetrieveExecute(r)
}

/*
DcimConsolePortsRetrieve Method for DcimConsolePortsRetrieve

Get a console port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console port.
	@return ApiDcimConsolePortsRetrieveRequest
*/
func (a *DcimAPIService) DcimConsolePortsRetrieve(ctx context.Context, id int32) ApiDcimConsolePortsRetrieveRequest {
	return ApiDcimConsolePortsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsolePort
func (a *DcimAPIService) DcimConsolePortsRetrieveExecute(r ApiDcimConsolePortsRetrieveRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsTraceRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsolePortsTraceRetrieveRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsTraceRetrieveExecute(r)
}

/*
DcimConsolePortsTraceRetrieve Method for DcimConsolePortsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console port.
	@return ApiDcimConsolePortsTraceRetrieveRequest
*/
func (a *DcimAPIService) DcimConsolePortsTraceRetrieve(ctx context.Context, id int32) ApiDcimConsolePortsTraceRetrieveRequest {
	return ApiDcimConsolePortsTraceRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsolePort
func (a *DcimAPIService) DcimConsolePortsTraceRetrieveExecute(r ApiDcimConsolePortsTraceRetrieveRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	id                         int32
	writableConsolePortRequest *WritableConsolePortRequest
}

func (r ApiDcimConsolePortsUpdateRequest) WritableConsolePortRequest(writableConsolePortRequest WritableConsolePortRequest) ApiDcimConsolePortsUpdateRequest {
	r.writableConsolePortRequest = &writableConsolePortRequest
	return r
}

func (r ApiDcimConsolePortsUpdateRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsUpdateExecute(r)
}

/*
DcimConsolePortsUpdate Method for DcimConsolePortsUpdate

Put a console port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console port.
	@return ApiDcimConsolePortsUpdateRequest
*/
func (a *DcimAPIService) DcimConsolePortsUpdate(ctx context.Context, id int32) ApiDcimConsolePortsUpdateRequest {
	return ApiDcimConsolePortsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsolePort
func (a *DcimAPIService) DcimConsolePortsUpdateExecute(r ApiDcimConsolePortsUpdateRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsolePortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePortRequest == nil {
		return localVarReturnValue, nil, reportError("writableConsolePortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesBulkDestroyRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	consoleServerPortTemplateRequest *[]ConsoleServerPortTemplateRequest
}

func (r ApiDcimConsoleServerPortTemplatesBulkDestroyRequest) ConsoleServerPortTemplateRequest(consoleServerPortTemplateRequest []ConsoleServerPortTemplateRequest) ApiDcimConsoleServerPortTemplatesBulkDestroyRequest {
	r.consoleServerPortTemplateRequest = &consoleServerPortTemplateRequest
	return r
}

func (r ApiDcimConsoleServerPortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesBulkDestroyExecute(r)
}

/*
DcimConsoleServerPortTemplatesBulkDestroy Method for DcimConsoleServerPortTemplatesBulkDestroy

Delete a list of console server port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortTemplatesBulkDestroy(ctx context.Context) ApiDcimConsoleServerPortTemplatesBulkDestroyRequest {
	return ApiDcimConsoleServerPortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimConsoleServerPortTemplatesBulkDestroyExecute(r ApiDcimConsoleServerPortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consoleServerPortTemplateRequest == nil {
		return nil, reportError("consoleServerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consoleServerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	consoleServerPortTemplateRequest *[]ConsoleServerPortTemplateRequest
}

func (r ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest) ConsoleServerPortTemplateRequest(consoleServerPortTemplateRequest []ConsoleServerPortTemplateRequest) ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest {
	r.consoleServerPortTemplateRequest = &consoleServerPortTemplateRequest
	return r
}

func (r ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest) Execute() ([]ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimConsoleServerPortTemplatesBulkPartialUpdate Method for DcimConsoleServerPortTemplatesBulkPartialUpdate

Patch a list of console server port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest {
	return ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConsoleServerPortTemplate
func (a *DcimAPIService) DcimConsoleServerPortTemplatesBulkPartialUpdateExecute(r ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest) ([]ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consoleServerPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("consoleServerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consoleServerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesBulkUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	consoleServerPortTemplateRequest *[]ConsoleServerPortTemplateRequest
}

func (r ApiDcimConsoleServerPortTemplatesBulkUpdateRequest) ConsoleServerPortTemplateRequest(consoleServerPortTemplateRequest []ConsoleServerPortTemplateRequest) ApiDcimConsoleServerPortTemplatesBulkUpdateRequest {
	r.consoleServerPortTemplateRequest = &consoleServerPortTemplateRequest
	return r
}

func (r ApiDcimConsoleServerPortTemplatesBulkUpdateRequest) Execute() ([]ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesBulkUpdateExecute(r)
}

/*
DcimConsoleServerPortTemplatesBulkUpdate Method for DcimConsoleServerPortTemplatesBulkUpdate

Put a list of console server port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortTemplatesBulkUpdate(ctx context.Context) ApiDcimConsoleServerPortTemplatesBulkUpdateRequest {
	return ApiDcimConsoleServerPortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConsoleServerPortTemplate
func (a *DcimAPIService) DcimConsoleServerPortTemplatesBulkUpdateExecute(r ApiDcimConsoleServerPortTemplatesBulkUpdateRequest) ([]ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consoleServerPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("consoleServerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consoleServerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesCreateRequest struct {
	ctx                                      context.Context
	ApiService                               *DcimAPIService
	writableConsoleServerPortTemplateRequest *WritableConsoleServerPortTemplateRequest
}

func (r ApiDcimConsoleServerPortTemplatesCreateRequest) WritableConsoleServerPortTemplateRequest(writableConsoleServerPortTemplateRequest WritableConsoleServerPortTemplateRequest) ApiDcimConsoleServerPortTemplatesCreateRequest {
	r.writableConsoleServerPortTemplateRequest = &writableConsoleServerPortTemplateRequest
	return r
}

func (r ApiDcimConsoleServerPortTemplatesCreateRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesCreateExecute(r)
}

/*
DcimConsoleServerPortTemplatesCreate Method for DcimConsoleServerPortTemplatesCreate

Post a list of console server port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortTemplatesCreate(ctx context.Context) ApiDcimConsoleServerPortTemplatesCreateRequest {
	return ApiDcimConsoleServerPortTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConsoleServerPortTemplate
func (a *DcimAPIService) DcimConsoleServerPortTemplatesCreateExecute(r ApiDcimConsoleServerPortTemplatesCreateRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsoleServerPortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesDestroyExecute(r)
}

/*
DcimConsoleServerPortTemplatesDestroy Method for DcimConsoleServerPortTemplatesDestroy

Delete a console server port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console server port template.
	@return ApiDcimConsoleServerPortTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortTemplatesDestroy(ctx context.Context, id int32) ApiDcimConsoleServerPortTemplatesDestroyRequest {
	return ApiDcimConsoleServerPortTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimConsoleServerPortTemplatesDestroyExecute(r ApiDcimConsoleServerPortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceTypeId      *[]*int32
	deviceTypeIdN     *[]*int32
	devicetypeId      *[]*int32
	devicetypeIdN     *[]*int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	moduleTypeId      *[]*int32
	moduleTypeIdN     *[]*int32
	moduletypeId      *[]*int32
	moduletypeIdN     *[]*int32
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	type_             *DcimConsolePortTemplatesListTypeParameter
	typeN             *DcimConsolePortTemplatesListTypeParameter
	updatedByRequest  *string
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Created(created []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Description(description []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) DeviceTypeId(deviceTypeId []*int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []*int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) DevicetypeId(devicetypeId []*int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []*int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Id(id []int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdGt(idGt []int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdGte(idGte []int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdLt(idLt []int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdLte(idLte []int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdN(idN []int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Label(label []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelIc(labelIc []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelIe(labelIe []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelIew(labelIew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelN(labelN []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelNic(labelNic []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelNie(labelNie []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimConsoleServerPortTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimConsoleServerPortTemplatesListRequest) Limit(limit int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) ModuleTypeId(moduleTypeId []*int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) ModuleTypeIdN(moduleTypeIdN []*int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

// Module type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) ModuletypeId(moduletypeId []*int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.moduletypeId = &moduletypeId
	return r
}

// Module type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) ModuletypeIdN(moduletypeIdN []*int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.moduletypeIdN = &moduletypeIdN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Name(name []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameIc(nameIc []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameIe(nameIe []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameIew(nameIew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameN(nameN []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNic(nameNic []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNie(nameNie []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimConsoleServerPortTemplatesListRequest) Offset(offset int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimConsoleServerPortTemplatesListRequest) Ordering(ordering string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimConsoleServerPortTemplatesListRequest) Q(q string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.q = &q
	return r
}

// * &#x60;Serial&#x60; - [(&#39;de-9&#39;, &#39;DE-9&#39;), (&#39;db-25&#39;, &#39;DB-25&#39;), (&#39;rj-11&#39;, &#39;RJ-11&#39;), (&#39;rj-12&#39;, &#39;RJ-12&#39;), (&#39;rj-45&#39;, &#39;RJ-45&#39;), (&#39;mini-din-8&#39;, &#39;Mini-DIN 8&#39;)] * &#x60;USB&#x60; - [(&#39;usb-a&#39;, &#39;USB Type A&#39;), (&#39;usb-b&#39;, &#39;USB Type B&#39;), (&#39;usb-c&#39;, &#39;USB Type C&#39;), (&#39;usb-mini-a&#39;, &#39;USB Mini A&#39;), (&#39;usb-mini-b&#39;, &#39;USB Mini B&#39;), (&#39;usb-micro-a&#39;, &#39;USB Micro A&#39;), (&#39;usb-micro-b&#39;, &#39;USB Micro B&#39;), (&#39;usb-micro-ab&#39;, &#39;USB Micro AB&#39;)] * &#x60;Other&#x60; - [(&#39;other&#39;, &#39;Other&#39;)]
func (r ApiDcimConsoleServerPortTemplatesListRequest) Type_(type_ DcimConsolePortTemplatesListTypeParameter) ApiDcimConsoleServerPortTemplatesListRequest {
	r.type_ = &type_
	return r
}

// * &#x60;Serial&#x60; - [(&#39;de-9&#39;, &#39;DE-9&#39;), (&#39;db-25&#39;, &#39;DB-25&#39;), (&#39;rj-11&#39;, &#39;RJ-11&#39;), (&#39;rj-12&#39;, &#39;RJ-12&#39;), (&#39;rj-45&#39;, &#39;RJ-45&#39;), (&#39;mini-din-8&#39;, &#39;Mini-DIN 8&#39;)] * &#x60;USB&#x60; - [(&#39;usb-a&#39;, &#39;USB Type A&#39;), (&#39;usb-b&#39;, &#39;USB Type B&#39;), (&#39;usb-c&#39;, &#39;USB Type C&#39;), (&#39;usb-mini-a&#39;, &#39;USB Mini A&#39;), (&#39;usb-mini-b&#39;, &#39;USB Mini B&#39;), (&#39;usb-micro-a&#39;, &#39;USB Micro A&#39;), (&#39;usb-micro-b&#39;, &#39;USB Micro B&#39;), (&#39;usb-micro-ab&#39;, &#39;USB Micro AB&#39;)] * &#x60;Other&#x60; - [(&#39;other&#39;, &#39;Other&#39;)]
func (r ApiDcimConsoleServerPortTemplatesListRequest) TypeN(typeN DcimConsolePortTemplatesListTypeParameter) ApiDcimConsoleServerPortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Execute() (*PaginatedConsoleServerPortTemplateList, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesListExecute(r)
}

/*
DcimConsoleServerPortTemplatesList Method for DcimConsoleServerPortTemplatesList

Get a list of console server port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortTemplatesListRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortTemplatesList(ctx context.Context) ApiDcimConsoleServerPortTemplatesListRequest {
	return ApiDcimConsoleServerPortTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedConsoleServerPortTemplateList
func (a *DcimAPIService) DcimConsoleServerPortTemplatesListExecute(r ApiDcimConsoleServerPortTemplatesListRequest) (*PaginatedConsoleServerPortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedConsoleServerPortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.moduletypeId != nil {
		t := *r.moduletypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", t, "multi")
		}
	}
	if r.moduletypeIdN != nil {
		t := *r.moduletypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.typeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", r.typeN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesPartialUpdateRequest struct {
	ctx                                             context.Context
	ApiService                                      *DcimAPIService
	id                                              int32
	patchedWritableConsoleServerPortTemplateRequest *PatchedWritableConsoleServerPortTemplateRequest
}

func (r ApiDcimConsoleServerPortTemplatesPartialUpdateRequest) PatchedWritableConsoleServerPortTemplateRequest(patchedWritableConsoleServerPortTemplateRequest PatchedWritableConsoleServerPortTemplateRequest) ApiDcimConsoleServerPortTemplatesPartialUpdateRequest {
	r.patchedWritableConsoleServerPortTemplateRequest = &patchedWritableConsoleServerPortTemplateRequest
	return r
}

func (r ApiDcimConsoleServerPortTemplatesPartialUpdateRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesPartialUpdateExecute(r)
}

/*
DcimConsoleServerPortTemplatesPartialUpdate Method for DcimConsoleServerPortTemplatesPartialUpdate

Patch a console server port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console server port template.
	@return ApiDcimConsoleServerPortTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimConsoleServerPortTemplatesPartialUpdateRequest {
	return ApiDcimConsoleServerPortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsoleServerPortTemplate
func (a *DcimAPIService) DcimConsoleServerPortTemplatesPartialUpdateExecute(r ApiDcimConsoleServerPortTemplatesPartialUpdateRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsoleServerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsoleServerPortTemplatesRetrieveRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesRetrieveExecute(r)
}

/*
DcimConsoleServerPortTemplatesRetrieve Method for DcimConsoleServerPortTemplatesRetrieve

Get a console server port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console server port template.
	@return ApiDcimConsoleServerPortTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortTemplatesRetrieve(ctx context.Context, id int32) ApiDcimConsoleServerPortTemplatesRetrieveRequest {
	return ApiDcimConsoleServerPortTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsoleServerPortTemplate
func (a *DcimAPIService) DcimConsoleServerPortTemplatesRetrieveExecute(r ApiDcimConsoleServerPortTemplatesRetrieveRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesUpdateRequest struct {
	ctx                                      context.Context
	ApiService                               *DcimAPIService
	id                                       int32
	writableConsoleServerPortTemplateRequest *WritableConsoleServerPortTemplateRequest
}

func (r ApiDcimConsoleServerPortTemplatesUpdateRequest) WritableConsoleServerPortTemplateRequest(writableConsoleServerPortTemplateRequest WritableConsoleServerPortTemplateRequest) ApiDcimConsoleServerPortTemplatesUpdateRequest {
	r.writableConsoleServerPortTemplateRequest = &writableConsoleServerPortTemplateRequest
	return r
}

func (r ApiDcimConsoleServerPortTemplatesUpdateRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesUpdateExecute(r)
}

/*
DcimConsoleServerPortTemplatesUpdate Method for DcimConsoleServerPortTemplatesUpdate

Put a console server port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console server port template.
	@return ApiDcimConsoleServerPortTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortTemplatesUpdate(ctx context.Context, id int32) ApiDcimConsoleServerPortTemplatesUpdateRequest {
	return ApiDcimConsoleServerPortTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsoleServerPortTemplate
func (a *DcimAPIService) DcimConsoleServerPortTemplatesUpdateExecute(r ApiDcimConsoleServerPortTemplatesUpdateRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	consoleServerPortRequest *[]ConsoleServerPortRequest
}

func (r ApiDcimConsoleServerPortsBulkDestroyRequest) ConsoleServerPortRequest(consoleServerPortRequest []ConsoleServerPortRequest) ApiDcimConsoleServerPortsBulkDestroyRequest {
	r.consoleServerPortRequest = &consoleServerPortRequest
	return r
}

func (r ApiDcimConsoleServerPortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsBulkDestroyExecute(r)
}

/*
DcimConsoleServerPortsBulkDestroy Method for DcimConsoleServerPortsBulkDestroy

Delete a list of console server port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsBulkDestroy(ctx context.Context) ApiDcimConsoleServerPortsBulkDestroyRequest {
	return ApiDcimConsoleServerPortsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimConsoleServerPortsBulkDestroyExecute(r ApiDcimConsoleServerPortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consoleServerPortRequest == nil {
		return nil, reportError("consoleServerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consoleServerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	consoleServerPortRequest *[]ConsoleServerPortRequest
}

func (r ApiDcimConsoleServerPortsBulkPartialUpdateRequest) ConsoleServerPortRequest(consoleServerPortRequest []ConsoleServerPortRequest) ApiDcimConsoleServerPortsBulkPartialUpdateRequest {
	r.consoleServerPortRequest = &consoleServerPortRequest
	return r
}

func (r ApiDcimConsoleServerPortsBulkPartialUpdateRequest) Execute() ([]ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsBulkPartialUpdateExecute(r)
}

/*
DcimConsoleServerPortsBulkPartialUpdate Method for DcimConsoleServerPortsBulkPartialUpdate

Patch a list of console server port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsBulkPartialUpdate(ctx context.Context) ApiDcimConsoleServerPortsBulkPartialUpdateRequest {
	return ApiDcimConsoleServerPortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConsoleServerPort
func (a *DcimAPIService) DcimConsoleServerPortsBulkPartialUpdateExecute(r ApiDcimConsoleServerPortsBulkPartialUpdateRequest) ([]ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consoleServerPortRequest == nil {
		return localVarReturnValue, nil, reportError("consoleServerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consoleServerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	consoleServerPortRequest *[]ConsoleServerPortRequest
}

func (r ApiDcimConsoleServerPortsBulkUpdateRequest) ConsoleServerPortRequest(consoleServerPortRequest []ConsoleServerPortRequest) ApiDcimConsoleServerPortsBulkUpdateRequest {
	r.consoleServerPortRequest = &consoleServerPortRequest
	return r
}

func (r ApiDcimConsoleServerPortsBulkUpdateRequest) Execute() ([]ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsBulkUpdateExecute(r)
}

/*
DcimConsoleServerPortsBulkUpdate Method for DcimConsoleServerPortsBulkUpdate

Put a list of console server port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsBulkUpdate(ctx context.Context) ApiDcimConsoleServerPortsBulkUpdateRequest {
	return ApiDcimConsoleServerPortsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConsoleServerPort
func (a *DcimAPIService) DcimConsoleServerPortsBulkUpdateExecute(r ApiDcimConsoleServerPortsBulkUpdateRequest) ([]ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.consoleServerPortRequest == nil {
		return localVarReturnValue, nil, reportError("consoleServerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.consoleServerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsCreateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	writableConsoleServerPortRequest *WritableConsoleServerPortRequest
}

func (r ApiDcimConsoleServerPortsCreateRequest) WritableConsoleServerPortRequest(writableConsoleServerPortRequest WritableConsoleServerPortRequest) ApiDcimConsoleServerPortsCreateRequest {
	r.writableConsoleServerPortRequest = &writableConsoleServerPortRequest
	return r
}

func (r ApiDcimConsoleServerPortsCreateRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsCreateExecute(r)
}

/*
DcimConsoleServerPortsCreate Method for DcimConsoleServerPortsCreate

Post a list of console server port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortsCreateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsCreate(ctx context.Context) ApiDcimConsoleServerPortsCreateRequest {
	return ApiDcimConsoleServerPortsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConsoleServerPort
func (a *DcimAPIService) DcimConsoleServerPortsCreateExecute(r ApiDcimConsoleServerPortsCreateRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPortRequest == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsoleServerPortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsDestroyExecute(r)
}

/*
DcimConsoleServerPortsDestroy Method for DcimConsoleServerPortsDestroy

Delete a console server port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console server port.
	@return ApiDcimConsoleServerPortsDestroyRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsDestroy(ctx context.Context, id int32) ApiDcimConsoleServerPortsDestroyRequest {
	return ApiDcimConsoleServerPortsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimConsoleServerPortsDestroyExecute(r ApiDcimConsoleServerPortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	cableEnd          *CircuitsCircuitTerminationsListCableEndParameter
	cableEndN         *CircuitsCircuitTerminationsListCableEndParameter
	cableId           *[]*int32
	cableIdN          *[]*int32
	cabled            *bool
	connected         *bool
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	deviceRole        *[]string
	deviceRoleN       *[]string
	deviceRoleId      *[]int32
	deviceRoleIdN     *[]int32
	deviceStatus      *[]string
	deviceStatusN     *[]string
	deviceType        *[]string
	deviceTypeN       *[]string
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	location          *[]string
	locationN         *[]string
	locationId        *[]int32
	locationIdN       *[]int32
	markConnected     *bool
	modifiedByRequest *string
	moduleId          *[]*int32
	moduleIdN         *[]*int32
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	occupied          *bool
	offset            *int32
	ordering          *string
	q                 *string
	rack              *[]string
	rackN             *[]string
	rackId            *[]int32
	rackIdN           *[]int32
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]string
	siteGroupIdN      *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	speed             *DcimConsolePortsListSpeedParameter
	speedN            *DcimConsolePortsListSpeedParameter
	tag               *[]string
	tagN              *[]string
	type_             *[]string
	typeN             *[]string
	updatedByRequest  *string
	virtualChassis    *[]string
	virtualChassisN   *[]string
	virtualChassisId  *[]int32
	virtualChassisIdN *[]int32
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimConsoleServerPortsListRequest) CableEnd(cableEnd CircuitsCircuitTerminationsListCableEndParameter) ApiDcimConsoleServerPortsListRequest {
	r.cableEnd = &cableEnd
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimConsoleServerPortsListRequest) CableEndN(cableEndN CircuitsCircuitTerminationsListCableEndParameter) ApiDcimConsoleServerPortsListRequest {
	r.cableEndN = &cableEndN
	return r
}

// Cable (ID)
func (r ApiDcimConsoleServerPortsListRequest) CableId(cableId []*int32) ApiDcimConsoleServerPortsListRequest {
	r.cableId = &cableId
	return r
}

// Cable (ID)
func (r ApiDcimConsoleServerPortsListRequest) CableIdN(cableIdN []*int32) ApiDcimConsoleServerPortsListRequest {
	r.cableIdN = &cableIdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Cabled(cabled bool) ApiDcimConsoleServerPortsListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Connected(connected bool) ApiDcimConsoleServerPortsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Created(created []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) CreatedGt(createdGt []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) CreatedGte(createdGte []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) CreatedLt(createdLt []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) CreatedLte(createdLte []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) CreatedN(createdN []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) CreatedByRequest(createdByRequest string) ApiDcimConsoleServerPortsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Description(description []string) ApiDcimConsoleServerPortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimConsoleServerPortsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionN(descriptionN []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimConsoleServerPortsListRequest) Device(device []*string) ApiDcimConsoleServerPortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimConsoleServerPortsListRequest) DeviceN(deviceN []*string) ApiDcimConsoleServerPortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimConsoleServerPortsListRequest) DeviceId(deviceId []int32) ApiDcimConsoleServerPortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimConsoleServerPortsListRequest) DeviceIdN(deviceIdN []int32) ApiDcimConsoleServerPortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimConsoleServerPortsListRequest) DeviceRole(deviceRole []string) ApiDcimConsoleServerPortsListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimConsoleServerPortsListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimConsoleServerPortsListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimConsoleServerPortsListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimConsoleServerPortsListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimConsoleServerPortsListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimConsoleServerPortsListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DeviceStatus(deviceStatus []string) ApiDcimConsoleServerPortsListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimConsoleServerPortsListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimConsoleServerPortsListRequest) DeviceType(deviceType []string) ApiDcimConsoleServerPortsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimConsoleServerPortsListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimConsoleServerPortsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimConsoleServerPortsListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimConsoleServerPortsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimConsoleServerPortsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimConsoleServerPortsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Id(id []int32) ApiDcimConsoleServerPortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdEmpty(idEmpty bool) ApiDcimConsoleServerPortsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdGt(idGt []int32) ApiDcimConsoleServerPortsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdGte(idGte []int32) ApiDcimConsoleServerPortsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdLt(idLt []int32) ApiDcimConsoleServerPortsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdLte(idLte []int32) ApiDcimConsoleServerPortsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdN(idN []int32) ApiDcimConsoleServerPortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Label(label []string) ApiDcimConsoleServerPortsListRequest {
	r.label = &label
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelEmpty(labelEmpty bool) ApiDcimConsoleServerPortsListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelIc(labelIc []string) ApiDcimConsoleServerPortsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelIe(labelIe []string) ApiDcimConsoleServerPortsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelIew(labelIew []string) ApiDcimConsoleServerPortsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelIsw(labelIsw []string) ApiDcimConsoleServerPortsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelN(labelN []string) ApiDcimConsoleServerPortsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelNic(labelNic []string) ApiDcimConsoleServerPortsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelNie(labelNie []string) ApiDcimConsoleServerPortsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelNiew(labelNiew []string) ApiDcimConsoleServerPortsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LabelNisw(labelNisw []string) ApiDcimConsoleServerPortsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimConsoleServerPortsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimConsoleServerPortsListRequest) Limit(limit int32) ApiDcimConsoleServerPortsListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimConsoleServerPortsListRequest) Location(location []string) ApiDcimConsoleServerPortsListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimConsoleServerPortsListRequest) LocationN(locationN []string) ApiDcimConsoleServerPortsListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimConsoleServerPortsListRequest) LocationId(locationId []int32) ApiDcimConsoleServerPortsListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimConsoleServerPortsListRequest) LocationIdN(locationIdN []int32) ApiDcimConsoleServerPortsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) MarkConnected(markConnected bool) ApiDcimConsoleServerPortsListRequest {
	r.markConnected = &markConnected
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimConsoleServerPortsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module (ID)
func (r ApiDcimConsoleServerPortsListRequest) ModuleId(moduleId []*int32) ApiDcimConsoleServerPortsListRequest {
	r.moduleId = &moduleId
	return r
}

// Module (ID)
func (r ApiDcimConsoleServerPortsListRequest) ModuleIdN(moduleIdN []*int32) ApiDcimConsoleServerPortsListRequest {
	r.moduleIdN = &moduleIdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Name(name []string) ApiDcimConsoleServerPortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameEmpty(nameEmpty bool) ApiDcimConsoleServerPortsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameIc(nameIc []string) ApiDcimConsoleServerPortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameIe(nameIe []string) ApiDcimConsoleServerPortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameIew(nameIew []string) ApiDcimConsoleServerPortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameIsw(nameIsw []string) ApiDcimConsoleServerPortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameN(nameN []string) ApiDcimConsoleServerPortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNic(nameNic []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNie(nameNie []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNiew(nameNiew []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNisw(nameNisw []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Occupied(occupied bool) ApiDcimConsoleServerPortsListRequest {
	r.occupied = &occupied
	return r
}

// The initial index from which to return the results.
func (r ApiDcimConsoleServerPortsListRequest) Offset(offset int32) ApiDcimConsoleServerPortsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimConsoleServerPortsListRequest) Ordering(ordering string) ApiDcimConsoleServerPortsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimConsoleServerPortsListRequest) Q(q string) ApiDcimConsoleServerPortsListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimConsoleServerPortsListRequest) Rack(rack []string) ApiDcimConsoleServerPortsListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimConsoleServerPortsListRequest) RackN(rackN []string) ApiDcimConsoleServerPortsListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimConsoleServerPortsListRequest) RackId(rackId []int32) ApiDcimConsoleServerPortsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimConsoleServerPortsListRequest) RackIdN(rackIdN []int32) ApiDcimConsoleServerPortsListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Region(region []string) ApiDcimConsoleServerPortsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) RegionN(regionN []string) ApiDcimConsoleServerPortsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) RegionId(regionId []string) ApiDcimConsoleServerPortsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) RegionIdN(regionIdN []string) ApiDcimConsoleServerPortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimConsoleServerPortsListRequest) Site(site []string) ApiDcimConsoleServerPortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimConsoleServerPortsListRequest) SiteN(siteN []string) ApiDcimConsoleServerPortsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) SiteGroup(siteGroup []string) ApiDcimConsoleServerPortsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) SiteGroupN(siteGroupN []string) ApiDcimConsoleServerPortsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) SiteGroupId(siteGroupId []string) ApiDcimConsoleServerPortsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimConsoleServerPortsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimConsoleServerPortsListRequest) SiteId(siteId []int32) ApiDcimConsoleServerPortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimConsoleServerPortsListRequest) SiteIdN(siteIdN []int32) ApiDcimConsoleServerPortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

// Port speed in bits per second  * &#x60;1200&#x60; - 1200 bps * &#x60;2400&#x60; - 2400 bps * &#x60;4800&#x60; - 4800 bps * &#x60;9600&#x60; - 9600 bps * &#x60;19200&#x60; - 19.2 kbps * &#x60;38400&#x60; - 38.4 kbps * &#x60;57600&#x60; - 57.6 kbps * &#x60;115200&#x60; - 115.2 kbps
func (r ApiDcimConsoleServerPortsListRequest) Speed(speed DcimConsolePortsListSpeedParameter) ApiDcimConsoleServerPortsListRequest {
	r.speed = &speed
	return r
}

// Port speed in bits per second  * &#x60;1200&#x60; - 1200 bps * &#x60;2400&#x60; - 2400 bps * &#x60;4800&#x60; - 4800 bps * &#x60;9600&#x60; - 9600 bps * &#x60;19200&#x60; - 19.2 kbps * &#x60;38400&#x60; - 38.4 kbps * &#x60;57600&#x60; - 57.6 kbps * &#x60;115200&#x60; - 115.2 kbps
func (r ApiDcimConsoleServerPortsListRequest) SpeedN(speedN DcimConsolePortsListSpeedParameter) ApiDcimConsoleServerPortsListRequest {
	r.speedN = &speedN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Tag(tag []string) ApiDcimConsoleServerPortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) TagN(tagN []string) ApiDcimConsoleServerPortsListRequest {
	r.tagN = &tagN
	return r
}

// Physical port type
func (r ApiDcimConsoleServerPortsListRequest) Type_(type_ []string) ApiDcimConsoleServerPortsListRequest {
	r.type_ = &type_
	return r
}

// Physical port type
func (r ApiDcimConsoleServerPortsListRequest) TypeN(typeN []string) ApiDcimConsoleServerPortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimConsoleServerPortsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiDcimConsoleServerPortsListRequest) VirtualChassis(virtualChassis []string) ApiDcimConsoleServerPortsListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimConsoleServerPortsListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimConsoleServerPortsListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimConsoleServerPortsListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimConsoleServerPortsListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimConsoleServerPortsListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimConsoleServerPortsListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Execute() (*PaginatedConsoleServerPortList, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsListExecute(r)
}

/*
DcimConsoleServerPortsList Method for DcimConsoleServerPortsList

Get a list of console server port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimConsoleServerPortsListRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsList(ctx context.Context) ApiDcimConsoleServerPortsListRequest {
	return ApiDcimConsoleServerPortsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedConsoleServerPortList
func (a *DcimAPIService) DcimConsoleServerPortsListExecute(r ApiDcimConsoleServerPortsListRequest) (*PaginatedConsoleServerPortList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedConsoleServerPortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cableEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end", r.cableEnd, "")
	}
	if r.cableEndN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end__n", r.cableEndN, "")
	}
	if r.cableId != nil {
		t := *r.cableId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", t, "multi")
		}
	}
	if r.cableIdN != nil {
		t := *r.cableIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", t, "multi")
		}
	}
	if r.cabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cabled", r.cabled, "")
	}
	if r.connected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connected", r.connected, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.markConnected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mark_connected", r.markConnected, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleId != nil {
		t := *r.moduleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", t, "multi")
		}
	}
	if r.moduleIdN != nil {
		t := *r.moduleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.occupied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occupied", r.occupied, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.speed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "speed", r.speed, "")
	}
	if r.speedN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "speed__n", r.speedN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsPartialUpdateRequest struct {
	ctx                                     context.Context
	ApiService                              *DcimAPIService
	id                                      int32
	patchedWritableConsoleServerPortRequest *PatchedWritableConsoleServerPortRequest
}

func (r ApiDcimConsoleServerPortsPartialUpdateRequest) PatchedWritableConsoleServerPortRequest(patchedWritableConsoleServerPortRequest PatchedWritableConsoleServerPortRequest) ApiDcimConsoleServerPortsPartialUpdateRequest {
	r.patchedWritableConsoleServerPortRequest = &patchedWritableConsoleServerPortRequest
	return r
}

func (r ApiDcimConsoleServerPortsPartialUpdateRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsPartialUpdateExecute(r)
}

/*
DcimConsoleServerPortsPartialUpdate Method for DcimConsoleServerPortsPartialUpdate

Patch a console server port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console server port.
	@return ApiDcimConsoleServerPortsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsPartialUpdate(ctx context.Context, id int32) ApiDcimConsoleServerPortsPartialUpdateRequest {
	return ApiDcimConsoleServerPortsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsoleServerPort
func (a *DcimAPIService) DcimConsoleServerPortsPartialUpdateExecute(r ApiDcimConsoleServerPortsPartialUpdateRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsoleServerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsoleServerPortsRetrieveRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsRetrieveExecute(r)
}

/*
DcimConsoleServerPortsRetrieve Method for DcimConsoleServerPortsRetrieve

Get a console server port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console server port.
	@return ApiDcimConsoleServerPortsRetrieveRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsRetrieve(ctx context.Context, id int32) ApiDcimConsoleServerPortsRetrieveRequest {
	return ApiDcimConsoleServerPortsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsoleServerPort
func (a *DcimAPIService) DcimConsoleServerPortsRetrieveExecute(r ApiDcimConsoleServerPortsRetrieveRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsTraceRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimConsoleServerPortsTraceRetrieveRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsTraceRetrieveExecute(r)
}

/*
DcimConsoleServerPortsTraceRetrieve Method for DcimConsoleServerPortsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console server port.
	@return ApiDcimConsoleServerPortsTraceRetrieveRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsTraceRetrieve(ctx context.Context, id int32) ApiDcimConsoleServerPortsTraceRetrieveRequest {
	return ApiDcimConsoleServerPortsTraceRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsoleServerPort
func (a *DcimAPIService) DcimConsoleServerPortsTraceRetrieveExecute(r ApiDcimConsoleServerPortsTraceRetrieveRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	id                               int32
	writableConsoleServerPortRequest *WritableConsoleServerPortRequest
}

func (r ApiDcimConsoleServerPortsUpdateRequest) WritableConsoleServerPortRequest(writableConsoleServerPortRequest WritableConsoleServerPortRequest) ApiDcimConsoleServerPortsUpdateRequest {
	r.writableConsoleServerPortRequest = &writableConsoleServerPortRequest
	return r
}

func (r ApiDcimConsoleServerPortsUpdateRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsUpdateExecute(r)
}

/*
DcimConsoleServerPortsUpdate Method for DcimConsoleServerPortsUpdate

Put a console server port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this console server port.
	@return ApiDcimConsoleServerPortsUpdateRequest
*/
func (a *DcimAPIService) DcimConsoleServerPortsUpdate(ctx context.Context, id int32) ApiDcimConsoleServerPortsUpdateRequest {
	return ApiDcimConsoleServerPortsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConsoleServerPort
func (a *DcimAPIService) DcimConsoleServerPortsUpdateExecute(r ApiDcimConsoleServerPortsUpdateRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimConsoleServerPortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/console-server-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPortRequest == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	deviceBayTemplateRequest *[]DeviceBayTemplateRequest
}

func (r ApiDcimDeviceBayTemplatesBulkDestroyRequest) DeviceBayTemplateRequest(deviceBayTemplateRequest []DeviceBayTemplateRequest) ApiDcimDeviceBayTemplatesBulkDestroyRequest {
	r.deviceBayTemplateRequest = &deviceBayTemplateRequest
	return r
}

func (r ApiDcimDeviceBayTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesBulkDestroyExecute(r)
}

/*
DcimDeviceBayTemplatesBulkDestroy Method for DcimDeviceBayTemplatesBulkDestroy

Delete a list of device bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBayTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimDeviceBayTemplatesBulkDestroy(ctx context.Context) ApiDcimDeviceBayTemplatesBulkDestroyRequest {
	return ApiDcimDeviceBayTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDeviceBayTemplatesBulkDestroyExecute(r ApiDcimDeviceBayTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBayTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayTemplateRequest == nil {
		return nil, reportError("deviceBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	deviceBayTemplateRequest *[]DeviceBayTemplateRequest
}

func (r ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest) DeviceBayTemplateRequest(deviceBayTemplateRequest []DeviceBayTemplateRequest) ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest {
	r.deviceBayTemplateRequest = &deviceBayTemplateRequest
	return r
}

func (r ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest) Execute() ([]DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimDeviceBayTemplatesBulkPartialUpdate Method for DcimDeviceBayTemplatesBulkPartialUpdate

Patch a list of device bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceBayTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest {
	return ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceBayTemplate
func (a *DcimAPIService) DcimDeviceBayTemplatesBulkPartialUpdateExecute(r ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest) ([]DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBayTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("deviceBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	deviceBayTemplateRequest *[]DeviceBayTemplateRequest
}

func (r ApiDcimDeviceBayTemplatesBulkUpdateRequest) DeviceBayTemplateRequest(deviceBayTemplateRequest []DeviceBayTemplateRequest) ApiDcimDeviceBayTemplatesBulkUpdateRequest {
	r.deviceBayTemplateRequest = &deviceBayTemplateRequest
	return r
}

func (r ApiDcimDeviceBayTemplatesBulkUpdateRequest) Execute() ([]DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesBulkUpdateExecute(r)
}

/*
DcimDeviceBayTemplatesBulkUpdate Method for DcimDeviceBayTemplatesBulkUpdate

Put a list of device bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBayTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceBayTemplatesBulkUpdate(ctx context.Context) ApiDcimDeviceBayTemplatesBulkUpdateRequest {
	return ApiDcimDeviceBayTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceBayTemplate
func (a *DcimAPIService) DcimDeviceBayTemplatesBulkUpdateExecute(r ApiDcimDeviceBayTemplatesBulkUpdateRequest) ([]DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBayTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("deviceBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesCreateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	deviceBayTemplateRequest *DeviceBayTemplateRequest
}

func (r ApiDcimDeviceBayTemplatesCreateRequest) DeviceBayTemplateRequest(deviceBayTemplateRequest DeviceBayTemplateRequest) ApiDcimDeviceBayTemplatesCreateRequest {
	r.deviceBayTemplateRequest = &deviceBayTemplateRequest
	return r
}

func (r ApiDcimDeviceBayTemplatesCreateRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesCreateExecute(r)
}

/*
DcimDeviceBayTemplatesCreate Method for DcimDeviceBayTemplatesCreate

Post a list of device bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBayTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimDeviceBayTemplatesCreate(ctx context.Context) ApiDcimDeviceBayTemplatesCreateRequest {
	return ApiDcimDeviceBayTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeviceBayTemplate
func (a *DcimAPIService) DcimDeviceBayTemplatesCreateExecute(r ApiDcimDeviceBayTemplatesCreateRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBayTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("deviceBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDeviceBayTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesDestroyExecute(r)
}

/*
DcimDeviceBayTemplatesDestroy Method for DcimDeviceBayTemplatesDestroy

Delete a device bay template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device bay template.
	@return ApiDcimDeviceBayTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimDeviceBayTemplatesDestroy(ctx context.Context, id int32) ApiDcimDeviceBayTemplatesDestroyRequest {
	return ApiDcimDeviceBayTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDeviceBayTemplatesDestroyExecute(r ApiDcimDeviceBayTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBayTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	devicetypeId      *[]int32
	devicetypeIdN     *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	updatedByRequest  *string
}

func (r ApiDcimDeviceBayTemplatesListRequest) Created(created []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimDeviceBayTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) Description(description []string) ApiDcimDeviceBayTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimDeviceBayTemplatesListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimDeviceBayTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimDeviceBayTemplatesListRequest) DevicetypeId(devicetypeId []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimDeviceBayTemplatesListRequest) DevicetypeIdN(devicetypeIdN []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) Id(id []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimDeviceBayTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdGt(idGt []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdGte(idGte []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdLt(idLt []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdLte(idLte []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdN(idN []int32) ApiDcimDeviceBayTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) Label(label []string) ApiDcimDeviceBayTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimDeviceBayTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelIc(labelIc []string) ApiDcimDeviceBayTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelIe(labelIe []string) ApiDcimDeviceBayTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelIew(labelIew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelN(labelN []string) ApiDcimDeviceBayTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelNic(labelNic []string) ApiDcimDeviceBayTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelNie(labelNie []string) ApiDcimDeviceBayTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimDeviceBayTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimDeviceBayTemplatesListRequest) Limit(limit int32) ApiDcimDeviceBayTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimDeviceBayTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) Name(name []string) ApiDcimDeviceBayTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimDeviceBayTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameIc(nameIc []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameIe(nameIe []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameIew(nameIew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameN(nameN []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNic(nameNic []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNie(nameNie []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDeviceBayTemplatesListRequest) Offset(offset int32) ApiDcimDeviceBayTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimDeviceBayTemplatesListRequest) Ordering(ordering string) ApiDcimDeviceBayTemplatesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimDeviceBayTemplatesListRequest) Q(q string) ApiDcimDeviceBayTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimDeviceBayTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) Execute() (*PaginatedDeviceBayTemplateList, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesListExecute(r)
}

/*
DcimDeviceBayTemplatesList Method for DcimDeviceBayTemplatesList

Get a list of device bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBayTemplatesListRequest
*/
func (a *DcimAPIService) DcimDeviceBayTemplatesList(ctx context.Context) ApiDcimDeviceBayTemplatesListRequest {
	return ApiDcimDeviceBayTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedDeviceBayTemplateList
func (a *DcimAPIService) DcimDeviceBayTemplatesListExecute(r ApiDcimDeviceBayTemplatesListRequest) (*PaginatedDeviceBayTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedDeviceBayTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBayTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	id                              int32
	patchedDeviceBayTemplateRequest *PatchedDeviceBayTemplateRequest
}

func (r ApiDcimDeviceBayTemplatesPartialUpdateRequest) PatchedDeviceBayTemplateRequest(patchedDeviceBayTemplateRequest PatchedDeviceBayTemplateRequest) ApiDcimDeviceBayTemplatesPartialUpdateRequest {
	r.patchedDeviceBayTemplateRequest = &patchedDeviceBayTemplateRequest
	return r
}

func (r ApiDcimDeviceBayTemplatesPartialUpdateRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesPartialUpdateExecute(r)
}

/*
DcimDeviceBayTemplatesPartialUpdate Method for DcimDeviceBayTemplatesPartialUpdate

Patch a device bay template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device bay template.
	@return ApiDcimDeviceBayTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceBayTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimDeviceBayTemplatesPartialUpdateRequest {
	return ApiDcimDeviceBayTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceBayTemplate
func (a *DcimAPIService) DcimDeviceBayTemplatesPartialUpdateExecute(r ApiDcimDeviceBayTemplatesPartialUpdateRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBayTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDeviceBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDeviceBayTemplatesRetrieveRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesRetrieveExecute(r)
}

/*
DcimDeviceBayTemplatesRetrieve Method for DcimDeviceBayTemplatesRetrieve

Get a device bay template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device bay template.
	@return ApiDcimDeviceBayTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimDeviceBayTemplatesRetrieve(ctx context.Context, id int32) ApiDcimDeviceBayTemplatesRetrieveRequest {
	return ApiDcimDeviceBayTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceBayTemplate
func (a *DcimAPIService) DcimDeviceBayTemplatesRetrieveExecute(r ApiDcimDeviceBayTemplatesRetrieveRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBayTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	deviceBayTemplateRequest *DeviceBayTemplateRequest
}

func (r ApiDcimDeviceBayTemplatesUpdateRequest) DeviceBayTemplateRequest(deviceBayTemplateRequest DeviceBayTemplateRequest) ApiDcimDeviceBayTemplatesUpdateRequest {
	r.deviceBayTemplateRequest = &deviceBayTemplateRequest
	return r
}

func (r ApiDcimDeviceBayTemplatesUpdateRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesUpdateExecute(r)
}

/*
DcimDeviceBayTemplatesUpdate Method for DcimDeviceBayTemplatesUpdate

Put a device bay template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device bay template.
	@return ApiDcimDeviceBayTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceBayTemplatesUpdate(ctx context.Context, id int32) ApiDcimDeviceBayTemplatesUpdateRequest {
	return ApiDcimDeviceBayTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceBayTemplate
func (a *DcimAPIService) DcimDeviceBayTemplatesUpdateExecute(r ApiDcimDeviceBayTemplatesUpdateRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBayTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("deviceBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysBulkDestroyRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	deviceBayRequest *[]DeviceBayRequest
}

func (r ApiDcimDeviceBaysBulkDestroyRequest) DeviceBayRequest(deviceBayRequest []DeviceBayRequest) ApiDcimDeviceBaysBulkDestroyRequest {
	r.deviceBayRequest = &deviceBayRequest
	return r
}

func (r ApiDcimDeviceBaysBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceBaysBulkDestroyExecute(r)
}

/*
DcimDeviceBaysBulkDestroy Method for DcimDeviceBaysBulkDestroy

Delete a list of device bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBaysBulkDestroyRequest
*/
func (a *DcimAPIService) DcimDeviceBaysBulkDestroy(ctx context.Context) ApiDcimDeviceBaysBulkDestroyRequest {
	return ApiDcimDeviceBaysBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDeviceBaysBulkDestroyExecute(r ApiDcimDeviceBaysBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBaysBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayRequest == nil {
		return nil, reportError("deviceBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysBulkPartialUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	deviceBayRequest *[]DeviceBayRequest
}

func (r ApiDcimDeviceBaysBulkPartialUpdateRequest) DeviceBayRequest(deviceBayRequest []DeviceBayRequest) ApiDcimDeviceBaysBulkPartialUpdateRequest {
	r.deviceBayRequest = &deviceBayRequest
	return r
}

func (r ApiDcimDeviceBaysBulkPartialUpdateRequest) Execute() ([]DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysBulkPartialUpdateExecute(r)
}

/*
DcimDeviceBaysBulkPartialUpdate Method for DcimDeviceBaysBulkPartialUpdate

Patch a list of device bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBaysBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceBaysBulkPartialUpdate(ctx context.Context) ApiDcimDeviceBaysBulkPartialUpdateRequest {
	return ApiDcimDeviceBaysBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceBay
func (a *DcimAPIService) DcimDeviceBaysBulkPartialUpdateExecute(r ApiDcimDeviceBaysBulkPartialUpdateRequest) ([]DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBaysBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayRequest == nil {
		return localVarReturnValue, nil, reportError("deviceBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysBulkUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	deviceBayRequest *[]DeviceBayRequest
}

func (r ApiDcimDeviceBaysBulkUpdateRequest) DeviceBayRequest(deviceBayRequest []DeviceBayRequest) ApiDcimDeviceBaysBulkUpdateRequest {
	r.deviceBayRequest = &deviceBayRequest
	return r
}

func (r ApiDcimDeviceBaysBulkUpdateRequest) Execute() ([]DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysBulkUpdateExecute(r)
}

/*
DcimDeviceBaysBulkUpdate Method for DcimDeviceBaysBulkUpdate

Put a list of device bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBaysBulkUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceBaysBulkUpdate(ctx context.Context) ApiDcimDeviceBaysBulkUpdateRequest {
	return ApiDcimDeviceBaysBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceBay
func (a *DcimAPIService) DcimDeviceBaysBulkUpdateExecute(r ApiDcimDeviceBaysBulkUpdateRequest) ([]DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBaysBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayRequest == nil {
		return localVarReturnValue, nil, reportError("deviceBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysCreateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	deviceBayRequest *DeviceBayRequest
}

func (r ApiDcimDeviceBaysCreateRequest) DeviceBayRequest(deviceBayRequest DeviceBayRequest) ApiDcimDeviceBaysCreateRequest {
	r.deviceBayRequest = &deviceBayRequest
	return r
}

func (r ApiDcimDeviceBaysCreateRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysCreateExecute(r)
}

/*
DcimDeviceBaysCreate Method for DcimDeviceBaysCreate

Post a list of device bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBaysCreateRequest
*/
func (a *DcimAPIService) DcimDeviceBaysCreate(ctx context.Context) ApiDcimDeviceBaysCreateRequest {
	return ApiDcimDeviceBaysCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeviceBay
func (a *DcimAPIService) DcimDeviceBaysCreateExecute(r ApiDcimDeviceBaysCreateRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBaysCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayRequest == nil {
		return localVarReturnValue, nil, reportError("deviceBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDeviceBaysDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceBaysDestroyExecute(r)
}

/*
DcimDeviceBaysDestroy Method for DcimDeviceBaysDestroy

Delete a device bay object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device bay.
	@return ApiDcimDeviceBaysDestroyRequest
*/
func (a *DcimAPIService) DcimDeviceBaysDestroy(ctx context.Context, id int32) ApiDcimDeviceBaysDestroyRequest {
	return ApiDcimDeviceBaysDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDeviceBaysDestroyExecute(r ApiDcimDeviceBaysDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBaysDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysListRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	description        *[]string
	descriptionEmpty   *bool
	descriptionIc      *[]string
	descriptionIe      *[]string
	descriptionIew     *[]string
	descriptionIsw     *[]string
	descriptionN       *[]string
	descriptionNic     *[]string
	descriptionNie     *[]string
	descriptionNiew    *[]string
	descriptionNisw    *[]string
	device             *[]*string
	deviceN            *[]*string
	deviceId           *[]int32
	deviceIdN          *[]int32
	deviceRole         *[]string
	deviceRoleN        *[]string
	deviceRoleId       *[]int32
	deviceRoleIdN      *[]int32
	deviceStatus       *[]string
	deviceStatusN      *[]string
	deviceType         *[]string
	deviceTypeN        *[]string
	deviceTypeId       *[]int32
	deviceTypeIdN      *[]int32
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	installedDevice    *[]*string
	installedDeviceN   *[]*string
	installedDeviceId  *[]*int32
	installedDeviceIdN *[]*int32
	label              *[]string
	labelEmpty         *bool
	labelIc            *[]string
	labelIe            *[]string
	labelIew           *[]string
	labelIsw           *[]string
	labelN             *[]string
	labelNic           *[]string
	labelNie           *[]string
	labelNiew          *[]string
	labelNisw          *[]string
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	location           *[]string
	locationN          *[]string
	locationId         *[]int32
	locationIdN        *[]int32
	modifiedByRequest  *string
	name               *[]string
	nameEmpty          *bool
	nameIc             *[]string
	nameIe             *[]string
	nameIew            *[]string
	nameIsw            *[]string
	nameN              *[]string
	nameNic            *[]string
	nameNie            *[]string
	nameNiew           *[]string
	nameNisw           *[]string
	offset             *int32
	ordering           *string
	q                  *string
	rack               *[]string
	rackN              *[]string
	rackId             *[]int32
	rackIdN            *[]int32
	region             *[]string
	regionN            *[]string
	regionId           *[]string
	regionIdN          *[]string
	site               *[]string
	siteN              *[]string
	siteGroup          *[]string
	siteGroupN         *[]string
	siteGroupId        *[]string
	siteGroupIdN       *[]string
	siteId             *[]int32
	siteIdN            *[]int32
	tag                *[]string
	tagN               *[]string
	updatedByRequest   *string
	virtualChassis     *[]string
	virtualChassisN    *[]string
	virtualChassisId   *[]int32
	virtualChassisIdN  *[]int32
}

func (r ApiDcimDeviceBaysListRequest) Created(created []time.Time) ApiDcimDeviceBaysListRequest {
	r.created = &created
	return r
}

func (r ApiDcimDeviceBaysListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimDeviceBaysListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimDeviceBaysListRequest) CreatedGt(createdGt []time.Time) ApiDcimDeviceBaysListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimDeviceBaysListRequest) CreatedGte(createdGte []time.Time) ApiDcimDeviceBaysListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimDeviceBaysListRequest) CreatedLt(createdLt []time.Time) ApiDcimDeviceBaysListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimDeviceBaysListRequest) CreatedLte(createdLte []time.Time) ApiDcimDeviceBaysListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimDeviceBaysListRequest) CreatedN(createdN []time.Time) ApiDcimDeviceBaysListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) CreatedByRequest(createdByRequest string) ApiDcimDeviceBaysListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimDeviceBaysListRequest) Description(description []string) ApiDcimDeviceBaysListRequest {
	r.description = &description
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimDeviceBaysListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionIc(descriptionIc []string) ApiDcimDeviceBaysListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionIe(descriptionIe []string) ApiDcimDeviceBaysListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionIew(descriptionIew []string) ApiDcimDeviceBaysListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimDeviceBaysListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionN(descriptionN []string) ApiDcimDeviceBaysListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNic(descriptionNic []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNie(descriptionNie []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimDeviceBaysListRequest) Device(device []*string) ApiDcimDeviceBaysListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimDeviceBaysListRequest) DeviceN(deviceN []*string) ApiDcimDeviceBaysListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimDeviceBaysListRequest) DeviceId(deviceId []int32) ApiDcimDeviceBaysListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimDeviceBaysListRequest) DeviceIdN(deviceIdN []int32) ApiDcimDeviceBaysListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimDeviceBaysListRequest) DeviceRole(deviceRole []string) ApiDcimDeviceBaysListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimDeviceBaysListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimDeviceBaysListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimDeviceBaysListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimDeviceBaysListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimDeviceBaysListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimDeviceBaysListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) DeviceStatus(deviceStatus []string) ApiDcimDeviceBaysListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimDeviceBaysListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimDeviceBaysListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimDeviceBaysListRequest) DeviceType(deviceType []string) ApiDcimDeviceBaysListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimDeviceBaysListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimDeviceBaysListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimDeviceBaysListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimDeviceBaysListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimDeviceBaysListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimDeviceBaysListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) Id(id []int32) ApiDcimDeviceBaysListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdEmpty(idEmpty bool) ApiDcimDeviceBaysListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdGt(idGt []int32) ApiDcimDeviceBaysListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdGte(idGte []int32) ApiDcimDeviceBaysListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdLt(idLt []int32) ApiDcimDeviceBaysListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdLte(idLte []int32) ApiDcimDeviceBaysListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdN(idN []int32) ApiDcimDeviceBaysListRequest {
	r.idN = &idN
	return r
}

// Installed device (name)
func (r ApiDcimDeviceBaysListRequest) InstalledDevice(installedDevice []*string) ApiDcimDeviceBaysListRequest {
	r.installedDevice = &installedDevice
	return r
}

// Installed device (name)
func (r ApiDcimDeviceBaysListRequest) InstalledDeviceN(installedDeviceN []*string) ApiDcimDeviceBaysListRequest {
	r.installedDeviceN = &installedDeviceN
	return r
}

// Installed device (ID)
func (r ApiDcimDeviceBaysListRequest) InstalledDeviceId(installedDeviceId []*int32) ApiDcimDeviceBaysListRequest {
	r.installedDeviceId = &installedDeviceId
	return r
}

// Installed device (ID)
func (r ApiDcimDeviceBaysListRequest) InstalledDeviceIdN(installedDeviceIdN []*int32) ApiDcimDeviceBaysListRequest {
	r.installedDeviceIdN = &installedDeviceIdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) Label(label []string) ApiDcimDeviceBaysListRequest {
	r.label = &label
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelEmpty(labelEmpty bool) ApiDcimDeviceBaysListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelIc(labelIc []string) ApiDcimDeviceBaysListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelIe(labelIe []string) ApiDcimDeviceBaysListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelIew(labelIew []string) ApiDcimDeviceBaysListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelIsw(labelIsw []string) ApiDcimDeviceBaysListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelN(labelN []string) ApiDcimDeviceBaysListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelNic(labelNic []string) ApiDcimDeviceBaysListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelNie(labelNie []string) ApiDcimDeviceBaysListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelNiew(labelNiew []string) ApiDcimDeviceBaysListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimDeviceBaysListRequest) LabelNisw(labelNisw []string) ApiDcimDeviceBaysListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimDeviceBaysListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimDeviceBaysListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimDeviceBaysListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimDeviceBaysListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimDeviceBaysListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimDeviceBaysListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimDeviceBaysListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimDeviceBaysListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimDeviceBaysListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimDeviceBaysListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimDeviceBaysListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimDeviceBaysListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimDeviceBaysListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimDeviceBaysListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimDeviceBaysListRequest) Limit(limit int32) ApiDcimDeviceBaysListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimDeviceBaysListRequest) Location(location []string) ApiDcimDeviceBaysListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimDeviceBaysListRequest) LocationN(locationN []string) ApiDcimDeviceBaysListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimDeviceBaysListRequest) LocationId(locationId []int32) ApiDcimDeviceBaysListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimDeviceBaysListRequest) LocationIdN(locationIdN []int32) ApiDcimDeviceBaysListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimDeviceBaysListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimDeviceBaysListRequest) Name(name []string) ApiDcimDeviceBaysListRequest {
	r.name = &name
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameEmpty(nameEmpty bool) ApiDcimDeviceBaysListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameIc(nameIc []string) ApiDcimDeviceBaysListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameIe(nameIe []string) ApiDcimDeviceBaysListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameIew(nameIew []string) ApiDcimDeviceBaysListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameIsw(nameIsw []string) ApiDcimDeviceBaysListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameN(nameN []string) ApiDcimDeviceBaysListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNic(nameNic []string) ApiDcimDeviceBaysListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNie(nameNie []string) ApiDcimDeviceBaysListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNiew(nameNiew []string) ApiDcimDeviceBaysListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNisw(nameNisw []string) ApiDcimDeviceBaysListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDeviceBaysListRequest) Offset(offset int32) ApiDcimDeviceBaysListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimDeviceBaysListRequest) Ordering(ordering string) ApiDcimDeviceBaysListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimDeviceBaysListRequest) Q(q string) ApiDcimDeviceBaysListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimDeviceBaysListRequest) Rack(rack []string) ApiDcimDeviceBaysListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimDeviceBaysListRequest) RackN(rackN []string) ApiDcimDeviceBaysListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimDeviceBaysListRequest) RackId(rackId []int32) ApiDcimDeviceBaysListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimDeviceBaysListRequest) RackIdN(rackIdN []int32) ApiDcimDeviceBaysListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) Region(region []string) ApiDcimDeviceBaysListRequest {
	r.region = &region
	return r
}

func (r ApiDcimDeviceBaysListRequest) RegionN(regionN []string) ApiDcimDeviceBaysListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimDeviceBaysListRequest) RegionId(regionId []string) ApiDcimDeviceBaysListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimDeviceBaysListRequest) RegionIdN(regionIdN []string) ApiDcimDeviceBaysListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimDeviceBaysListRequest) Site(site []string) ApiDcimDeviceBaysListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimDeviceBaysListRequest) SiteN(siteN []string) ApiDcimDeviceBaysListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimDeviceBaysListRequest) SiteGroup(siteGroup []string) ApiDcimDeviceBaysListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimDeviceBaysListRequest) SiteGroupN(siteGroupN []string) ApiDcimDeviceBaysListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimDeviceBaysListRequest) SiteGroupId(siteGroupId []string) ApiDcimDeviceBaysListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimDeviceBaysListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimDeviceBaysListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimDeviceBaysListRequest) SiteId(siteId []int32) ApiDcimDeviceBaysListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimDeviceBaysListRequest) SiteIdN(siteIdN []int32) ApiDcimDeviceBaysListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) Tag(tag []string) ApiDcimDeviceBaysListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimDeviceBaysListRequest) TagN(tagN []string) ApiDcimDeviceBaysListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimDeviceBaysListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimDeviceBaysListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiDcimDeviceBaysListRequest) VirtualChassis(virtualChassis []string) ApiDcimDeviceBaysListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimDeviceBaysListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimDeviceBaysListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimDeviceBaysListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimDeviceBaysListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimDeviceBaysListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimDeviceBaysListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) Execute() (*PaginatedDeviceBayList, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysListExecute(r)
}

/*
DcimDeviceBaysList Method for DcimDeviceBaysList

Get a list of device bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceBaysListRequest
*/
func (a *DcimAPIService) DcimDeviceBaysList(ctx context.Context) ApiDcimDeviceBaysListRequest {
	return ApiDcimDeviceBaysListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedDeviceBayList
func (a *DcimAPIService) DcimDeviceBaysListExecute(r ApiDcimDeviceBaysListRequest) (*PaginatedDeviceBayList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedDeviceBayList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBaysList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.installedDevice != nil {
		t := *r.installedDevice
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device", t, "multi")
		}
	}
	if r.installedDeviceN != nil {
		t := *r.installedDeviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device__n", t, "multi")
		}
	}
	if r.installedDeviceId != nil {
		t := *r.installedDeviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device_id", t, "multi")
		}
	}
	if r.installedDeviceIdN != nil {
		t := *r.installedDeviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_device_id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysPartialUpdateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	id                      int32
	patchedDeviceBayRequest *PatchedDeviceBayRequest
}

func (r ApiDcimDeviceBaysPartialUpdateRequest) PatchedDeviceBayRequest(patchedDeviceBayRequest PatchedDeviceBayRequest) ApiDcimDeviceBaysPartialUpdateRequest {
	r.patchedDeviceBayRequest = &patchedDeviceBayRequest
	return r
}

func (r ApiDcimDeviceBaysPartialUpdateRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysPartialUpdateExecute(r)
}

/*
DcimDeviceBaysPartialUpdate Method for DcimDeviceBaysPartialUpdate

Patch a device bay object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device bay.
	@return ApiDcimDeviceBaysPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceBaysPartialUpdate(ctx context.Context, id int32) ApiDcimDeviceBaysPartialUpdateRequest {
	return ApiDcimDeviceBaysPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceBay
func (a *DcimAPIService) DcimDeviceBaysPartialUpdateExecute(r ApiDcimDeviceBaysPartialUpdateRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBaysPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDeviceBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDeviceBaysRetrieveRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysRetrieveExecute(r)
}

/*
DcimDeviceBaysRetrieve Method for DcimDeviceBaysRetrieve

Get a device bay object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device bay.
	@return ApiDcimDeviceBaysRetrieveRequest
*/
func (a *DcimAPIService) DcimDeviceBaysRetrieve(ctx context.Context, id int32) ApiDcimDeviceBaysRetrieveRequest {
	return ApiDcimDeviceBaysRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceBay
func (a *DcimAPIService) DcimDeviceBaysRetrieveExecute(r ApiDcimDeviceBaysRetrieveRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBaysRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	id               int32
	deviceBayRequest *DeviceBayRequest
}

func (r ApiDcimDeviceBaysUpdateRequest) DeviceBayRequest(deviceBayRequest DeviceBayRequest) ApiDcimDeviceBaysUpdateRequest {
	r.deviceBayRequest = &deviceBayRequest
	return r
}

func (r ApiDcimDeviceBaysUpdateRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysUpdateExecute(r)
}

/*
DcimDeviceBaysUpdate Method for DcimDeviceBaysUpdate

Put a device bay object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device bay.
	@return ApiDcimDeviceBaysUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceBaysUpdate(ctx context.Context, id int32) ApiDcimDeviceBaysUpdateRequest {
	return ApiDcimDeviceBaysUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceBay
func (a *DcimAPIService) DcimDeviceBaysUpdateExecute(r ApiDcimDeviceBaysUpdateRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceBaysUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceBayRequest == nil {
		return localVarReturnValue, nil, reportError("deviceBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	deviceRoleRequest *[]DeviceRoleRequest
}

func (r ApiDcimDeviceRolesBulkDestroyRequest) DeviceRoleRequest(deviceRoleRequest []DeviceRoleRequest) ApiDcimDeviceRolesBulkDestroyRequest {
	r.deviceRoleRequest = &deviceRoleRequest
	return r
}

func (r ApiDcimDeviceRolesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceRolesBulkDestroyExecute(r)
}

/*
DcimDeviceRolesBulkDestroy Method for DcimDeviceRolesBulkDestroy

Delete a list of device role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceRolesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimDeviceRolesBulkDestroy(ctx context.Context) ApiDcimDeviceRolesBulkDestroyRequest {
	return ApiDcimDeviceRolesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDeviceRolesBulkDestroyExecute(r ApiDcimDeviceRolesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceRolesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceRoleRequest == nil {
		return nil, reportError("deviceRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	deviceRoleRequest *[]DeviceRoleRequest
}

func (r ApiDcimDeviceRolesBulkPartialUpdateRequest) DeviceRoleRequest(deviceRoleRequest []DeviceRoleRequest) ApiDcimDeviceRolesBulkPartialUpdateRequest {
	r.deviceRoleRequest = &deviceRoleRequest
	return r
}

func (r ApiDcimDeviceRolesBulkPartialUpdateRequest) Execute() ([]DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesBulkPartialUpdateExecute(r)
}

/*
DcimDeviceRolesBulkPartialUpdate Method for DcimDeviceRolesBulkPartialUpdate

Patch a list of device role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceRolesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceRolesBulkPartialUpdate(ctx context.Context) ApiDcimDeviceRolesBulkPartialUpdateRequest {
	return ApiDcimDeviceRolesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceRole
func (a *DcimAPIService) DcimDeviceRolesBulkPartialUpdateExecute(r ApiDcimDeviceRolesBulkPartialUpdateRequest) ([]DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceRolesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceRoleRequest == nil {
		return localVarReturnValue, nil, reportError("deviceRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	deviceRoleRequest *[]DeviceRoleRequest
}

func (r ApiDcimDeviceRolesBulkUpdateRequest) DeviceRoleRequest(deviceRoleRequest []DeviceRoleRequest) ApiDcimDeviceRolesBulkUpdateRequest {
	r.deviceRoleRequest = &deviceRoleRequest
	return r
}

func (r ApiDcimDeviceRolesBulkUpdateRequest) Execute() ([]DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesBulkUpdateExecute(r)
}

/*
DcimDeviceRolesBulkUpdate Method for DcimDeviceRolesBulkUpdate

Put a list of device role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceRolesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceRolesBulkUpdate(ctx context.Context) ApiDcimDeviceRolesBulkUpdateRequest {
	return ApiDcimDeviceRolesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceRole
func (a *DcimAPIService) DcimDeviceRolesBulkUpdateExecute(r ApiDcimDeviceRolesBulkUpdateRequest) ([]DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceRolesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceRoleRequest == nil {
		return localVarReturnValue, nil, reportError("deviceRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesCreateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	deviceRoleRequest *DeviceRoleRequest
}

func (r ApiDcimDeviceRolesCreateRequest) DeviceRoleRequest(deviceRoleRequest DeviceRoleRequest) ApiDcimDeviceRolesCreateRequest {
	r.deviceRoleRequest = &deviceRoleRequest
	return r
}

func (r ApiDcimDeviceRolesCreateRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesCreateExecute(r)
}

/*
DcimDeviceRolesCreate Method for DcimDeviceRolesCreate

Post a list of device role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceRolesCreateRequest
*/
func (a *DcimAPIService) DcimDeviceRolesCreate(ctx context.Context) ApiDcimDeviceRolesCreateRequest {
	return ApiDcimDeviceRolesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeviceRole
func (a *DcimAPIService) DcimDeviceRolesCreateExecute(r ApiDcimDeviceRolesCreateRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceRolesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceRoleRequest == nil {
		return localVarReturnValue, nil, reportError("deviceRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDeviceRolesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceRolesDestroyExecute(r)
}

/*
DcimDeviceRolesDestroy Method for DcimDeviceRolesDestroy

Delete a device role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device role.
	@return ApiDcimDeviceRolesDestroyRequest
*/
func (a *DcimAPIService) DcimDeviceRolesDestroy(ctx context.Context, id int32) ApiDcimDeviceRolesDestroyRequest {
	return ApiDcimDeviceRolesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDeviceRolesDestroyExecute(r ApiDcimDeviceRolesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceRolesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	color             *[]string
	colorEmpty        *bool
	colorIc           *[]string
	colorIe           *[]string
	colorIew          *[]string
	colorIsw          *[]string
	colorN            *[]string
	colorNic          *[]string
	colorNie          *[]string
	colorNiew         *[]string
	colorNisw         *[]string
	configTemplateId  *[]*int32
	configTemplateIdN *[]*int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
	vmRole            *bool
}

func (r ApiDcimDeviceRolesListRequest) Color(color []string) ApiDcimDeviceRolesListRequest {
	r.color = &color
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorEmpty(colorEmpty bool) ApiDcimDeviceRolesListRequest {
	r.colorEmpty = &colorEmpty
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorIc(colorIc []string) ApiDcimDeviceRolesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorIe(colorIe []string) ApiDcimDeviceRolesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorIew(colorIew []string) ApiDcimDeviceRolesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorIsw(colorIsw []string) ApiDcimDeviceRolesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorN(colorN []string) ApiDcimDeviceRolesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNic(colorNic []string) ApiDcimDeviceRolesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNie(colorNie []string) ApiDcimDeviceRolesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNiew(colorNiew []string) ApiDcimDeviceRolesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNisw(colorNisw []string) ApiDcimDeviceRolesListRequest {
	r.colorNisw = &colorNisw
	return r
}

// Config template (ID)
func (r ApiDcimDeviceRolesListRequest) ConfigTemplateId(configTemplateId []*int32) ApiDcimDeviceRolesListRequest {
	r.configTemplateId = &configTemplateId
	return r
}

// Config template (ID)
func (r ApiDcimDeviceRolesListRequest) ConfigTemplateIdN(configTemplateIdN []*int32) ApiDcimDeviceRolesListRequest {
	r.configTemplateIdN = &configTemplateIdN
	return r
}

func (r ApiDcimDeviceRolesListRequest) Created(created []time.Time) ApiDcimDeviceRolesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimDeviceRolesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimDeviceRolesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimDeviceRolesListRequest) CreatedGt(createdGt []time.Time) ApiDcimDeviceRolesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimDeviceRolesListRequest) CreatedGte(createdGte []time.Time) ApiDcimDeviceRolesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimDeviceRolesListRequest) CreatedLt(createdLt []time.Time) ApiDcimDeviceRolesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimDeviceRolesListRequest) CreatedLte(createdLte []time.Time) ApiDcimDeviceRolesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimDeviceRolesListRequest) CreatedN(createdN []time.Time) ApiDcimDeviceRolesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimDeviceRolesListRequest) CreatedByRequest(createdByRequest string) ApiDcimDeviceRolesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimDeviceRolesListRequest) Description(description []string) ApiDcimDeviceRolesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimDeviceRolesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionIc(descriptionIc []string) ApiDcimDeviceRolesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionIe(descriptionIe []string) ApiDcimDeviceRolesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionIew(descriptionIew []string) ApiDcimDeviceRolesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimDeviceRolesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionN(descriptionN []string) ApiDcimDeviceRolesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionNic(descriptionNic []string) ApiDcimDeviceRolesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionNie(descriptionNie []string) ApiDcimDeviceRolesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimDeviceRolesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimDeviceRolesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimDeviceRolesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimDeviceRolesListRequest) Id(id []int32) ApiDcimDeviceRolesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdEmpty(idEmpty bool) ApiDcimDeviceRolesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdGt(idGt []int32) ApiDcimDeviceRolesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdGte(idGte []int32) ApiDcimDeviceRolesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdLt(idLt []int32) ApiDcimDeviceRolesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdLte(idLte []int32) ApiDcimDeviceRolesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdN(idN []int32) ApiDcimDeviceRolesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimDeviceRolesListRequest) Limit(limit int32) ApiDcimDeviceRolesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimDeviceRolesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimDeviceRolesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimDeviceRolesListRequest) Name(name []string) ApiDcimDeviceRolesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameEmpty(nameEmpty bool) ApiDcimDeviceRolesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameIc(nameIc []string) ApiDcimDeviceRolesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameIe(nameIe []string) ApiDcimDeviceRolesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameIew(nameIew []string) ApiDcimDeviceRolesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameIsw(nameIsw []string) ApiDcimDeviceRolesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameN(nameN []string) ApiDcimDeviceRolesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNic(nameNic []string) ApiDcimDeviceRolesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNie(nameNie []string) ApiDcimDeviceRolesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNiew(nameNiew []string) ApiDcimDeviceRolesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNisw(nameNisw []string) ApiDcimDeviceRolesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDeviceRolesListRequest) Offset(offset int32) ApiDcimDeviceRolesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimDeviceRolesListRequest) Ordering(ordering string) ApiDcimDeviceRolesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimDeviceRolesListRequest) Q(q string) ApiDcimDeviceRolesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimDeviceRolesListRequest) Slug(slug []string) ApiDcimDeviceRolesListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugEmpty(slugEmpty bool) ApiDcimDeviceRolesListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugIc(slugIc []string) ApiDcimDeviceRolesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugIe(slugIe []string) ApiDcimDeviceRolesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugIew(slugIew []string) ApiDcimDeviceRolesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugIsw(slugIsw []string) ApiDcimDeviceRolesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugN(slugN []string) ApiDcimDeviceRolesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNic(slugNic []string) ApiDcimDeviceRolesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNie(slugNie []string) ApiDcimDeviceRolesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNiew(slugNiew []string) ApiDcimDeviceRolesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNisw(slugNisw []string) ApiDcimDeviceRolesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimDeviceRolesListRequest) Tag(tag []string) ApiDcimDeviceRolesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimDeviceRolesListRequest) TagN(tagN []string) ApiDcimDeviceRolesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimDeviceRolesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimDeviceRolesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimDeviceRolesListRequest) VmRole(vmRole bool) ApiDcimDeviceRolesListRequest {
	r.vmRole = &vmRole
	return r
}

func (r ApiDcimDeviceRolesListRequest) Execute() (*PaginatedDeviceRoleList, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesListExecute(r)
}

/*
DcimDeviceRolesList Method for DcimDeviceRolesList

Get a list of device role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceRolesListRequest
*/
func (a *DcimAPIService) DcimDeviceRolesList(ctx context.Context) ApiDcimDeviceRolesListRequest {
	return ApiDcimDeviceRolesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedDeviceRoleList
func (a *DcimAPIService) DcimDeviceRolesListExecute(r ApiDcimDeviceRolesListRequest) (*PaginatedDeviceRoleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedDeviceRoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceRolesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "multi")
		}
	}
	if r.colorEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "color__empty", r.colorEmpty, "")
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "multi")
		}
	}
	if r.configTemplateId != nil {
		t := *r.configTemplateId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id", t, "multi")
		}
	}
	if r.configTemplateIdN != nil {
		t := *r.configTemplateIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.vmRole != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vm_role", r.vmRole, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	patchedDeviceRoleRequest *PatchedDeviceRoleRequest
}

func (r ApiDcimDeviceRolesPartialUpdateRequest) PatchedDeviceRoleRequest(patchedDeviceRoleRequest PatchedDeviceRoleRequest) ApiDcimDeviceRolesPartialUpdateRequest {
	r.patchedDeviceRoleRequest = &patchedDeviceRoleRequest
	return r
}

func (r ApiDcimDeviceRolesPartialUpdateRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesPartialUpdateExecute(r)
}

/*
DcimDeviceRolesPartialUpdate Method for DcimDeviceRolesPartialUpdate

Patch a device role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device role.
	@return ApiDcimDeviceRolesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceRolesPartialUpdate(ctx context.Context, id int32) ApiDcimDeviceRolesPartialUpdateRequest {
	return ApiDcimDeviceRolesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceRole
func (a *DcimAPIService) DcimDeviceRolesPartialUpdateExecute(r ApiDcimDeviceRolesPartialUpdateRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceRolesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDeviceRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDeviceRolesRetrieveRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesRetrieveExecute(r)
}

/*
DcimDeviceRolesRetrieve Method for DcimDeviceRolesRetrieve

Get a device role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device role.
	@return ApiDcimDeviceRolesRetrieveRequest
*/
func (a *DcimAPIService) DcimDeviceRolesRetrieve(ctx context.Context, id int32) ApiDcimDeviceRolesRetrieveRequest {
	return ApiDcimDeviceRolesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceRole
func (a *DcimAPIService) DcimDeviceRolesRetrieveExecute(r ApiDcimDeviceRolesRetrieveRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceRolesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	id                int32
	deviceRoleRequest *DeviceRoleRequest
}

func (r ApiDcimDeviceRolesUpdateRequest) DeviceRoleRequest(deviceRoleRequest DeviceRoleRequest) ApiDcimDeviceRolesUpdateRequest {
	r.deviceRoleRequest = &deviceRoleRequest
	return r
}

func (r ApiDcimDeviceRolesUpdateRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesUpdateExecute(r)
}

/*
DcimDeviceRolesUpdate Method for DcimDeviceRolesUpdate

Put a device role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device role.
	@return ApiDcimDeviceRolesUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceRolesUpdate(ctx context.Context, id int32) ApiDcimDeviceRolesUpdateRequest {
	return ApiDcimDeviceRolesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceRole
func (a *DcimAPIService) DcimDeviceRolesUpdateExecute(r ApiDcimDeviceRolesUpdateRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceRolesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceRoleRequest == nil {
		return localVarReturnValue, nil, reportError("deviceRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	deviceTypeRequest *[]DeviceTypeRequest
}

func (r ApiDcimDeviceTypesBulkDestroyRequest) DeviceTypeRequest(deviceTypeRequest []DeviceTypeRequest) ApiDcimDeviceTypesBulkDestroyRequest {
	r.deviceTypeRequest = &deviceTypeRequest
	return r
}

func (r ApiDcimDeviceTypesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceTypesBulkDestroyExecute(r)
}

/*
DcimDeviceTypesBulkDestroy Method for DcimDeviceTypesBulkDestroy

Delete a list of device type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceTypesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimDeviceTypesBulkDestroy(ctx context.Context) ApiDcimDeviceTypesBulkDestroyRequest {
	return ApiDcimDeviceTypesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDeviceTypesBulkDestroyExecute(r ApiDcimDeviceTypesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceTypesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceTypeRequest == nil {
		return nil, reportError("deviceTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	deviceTypeRequest *[]DeviceTypeRequest
}

func (r ApiDcimDeviceTypesBulkPartialUpdateRequest) DeviceTypeRequest(deviceTypeRequest []DeviceTypeRequest) ApiDcimDeviceTypesBulkPartialUpdateRequest {
	r.deviceTypeRequest = &deviceTypeRequest
	return r
}

func (r ApiDcimDeviceTypesBulkPartialUpdateRequest) Execute() ([]DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesBulkPartialUpdateExecute(r)
}

/*
DcimDeviceTypesBulkPartialUpdate Method for DcimDeviceTypesBulkPartialUpdate

Patch a list of device type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceTypesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceTypesBulkPartialUpdate(ctx context.Context) ApiDcimDeviceTypesBulkPartialUpdateRequest {
	return ApiDcimDeviceTypesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceType
func (a *DcimAPIService) DcimDeviceTypesBulkPartialUpdateExecute(r ApiDcimDeviceTypesBulkPartialUpdateRequest) ([]DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceTypesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceTypeRequest == nil {
		return localVarReturnValue, nil, reportError("deviceTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	deviceTypeRequest *[]DeviceTypeRequest
}

func (r ApiDcimDeviceTypesBulkUpdateRequest) DeviceTypeRequest(deviceTypeRequest []DeviceTypeRequest) ApiDcimDeviceTypesBulkUpdateRequest {
	r.deviceTypeRequest = &deviceTypeRequest
	return r
}

func (r ApiDcimDeviceTypesBulkUpdateRequest) Execute() ([]DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesBulkUpdateExecute(r)
}

/*
DcimDeviceTypesBulkUpdate Method for DcimDeviceTypesBulkUpdate

Put a list of device type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceTypesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceTypesBulkUpdate(ctx context.Context) ApiDcimDeviceTypesBulkUpdateRequest {
	return ApiDcimDeviceTypesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceType
func (a *DcimAPIService) DcimDeviceTypesBulkUpdateExecute(r ApiDcimDeviceTypesBulkUpdateRequest) ([]DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceTypesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceTypeRequest == nil {
		return localVarReturnValue, nil, reportError("deviceTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesCreateRequest struct {
	ctx                       context.Context
	ApiService                *DcimAPIService
	writableDeviceTypeRequest *WritableDeviceTypeRequest
}

func (r ApiDcimDeviceTypesCreateRequest) WritableDeviceTypeRequest(writableDeviceTypeRequest WritableDeviceTypeRequest) ApiDcimDeviceTypesCreateRequest {
	r.writableDeviceTypeRequest = &writableDeviceTypeRequest
	return r
}

func (r ApiDcimDeviceTypesCreateRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesCreateExecute(r)
}

/*
DcimDeviceTypesCreate Method for DcimDeviceTypesCreate

Post a list of device type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceTypesCreateRequest
*/
func (a *DcimAPIService) DcimDeviceTypesCreate(ctx context.Context) ApiDcimDeviceTypesCreateRequest {
	return ApiDcimDeviceTypesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeviceType
func (a *DcimAPIService) DcimDeviceTypesCreateExecute(r ApiDcimDeviceTypesCreateRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceTypesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceTypeRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeviceTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDeviceTypesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceTypesDestroyExecute(r)
}

/*
DcimDeviceTypesDestroy Method for DcimDeviceTypesDestroy

Delete a device type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device type.
	@return ApiDcimDeviceTypesDestroyRequest
*/
func (a *DcimAPIService) DcimDeviceTypesDestroy(ctx context.Context, id int32) ApiDcimDeviceTypesDestroyRequest {
	return ApiDcimDeviceTypesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDeviceTypesDestroyExecute(r ApiDcimDeviceTypesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceTypesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesListRequest struct {
	ctx                                 context.Context
	ApiService                          *DcimAPIService
	airflow                             *DcimDeviceTypesListAirflowParameter
	airflowN                            *DcimDeviceTypesListAirflowParameter
	consolePortTemplateCount            *[]int32
	consolePortTemplateCountEmpty       *bool
	consolePortTemplateCountGt          *[]int32
	consolePortTemplateCountGte         *[]int32
	consolePortTemplateCountLt          *[]int32
	consolePortTemplateCountLte         *[]int32
	consolePortTemplateCountN           *[]int32
	consolePorts                        *bool
	consoleServerPortTemplateCount      *[]int32
	consoleServerPortTemplateCountEmpty *bool
	consoleServerPortTemplateCountGt    *[]int32
	consoleServerPortTemplateCountGte   *[]int32
	consoleServerPortTemplateCountLt    *[]int32
	consoleServerPortTemplateCountLte   *[]int32
	consoleServerPortTemplateCountN     *[]int32
	consoleServerPorts                  *bool
	created                             *[]time.Time
	createdEmpty                        *[]time.Time
	createdGt                           *[]time.Time
	createdGte                          *[]time.Time
	createdLt                           *[]time.Time
	createdLte                          *[]time.Time
	createdN                            *[]time.Time
	createdByRequest                    *string
	defaultPlatform                     *[]string
	defaultPlatformN                    *[]string
	defaultPlatformId                   *[]*int32
	defaultPlatformIdN                  *[]*int32
	description                         *[]string
	descriptionEmpty                    *bool
	descriptionIc                       *[]string
	descriptionIe                       *[]string
	descriptionIew                      *[]string
	descriptionIsw                      *[]string
	descriptionN                        *[]string
	descriptionNic                      *[]string
	descriptionNie                      *[]string
	descriptionNiew                     *[]string
	descriptionNisw                     *[]string
	deviceBayTemplateCount              *[]int32
	deviceBayTemplateCountEmpty         *bool
	deviceBayTemplateCountGt            *[]int32
	deviceBayTemplateCountGte           *[]int32
	deviceBayTemplateCountLt            *[]int32
	deviceBayTemplateCountLte           *[]int32
	deviceBayTemplateCountN             *[]int32
	deviceBays                          *bool
	excludeFromUtilization              *bool
	frontPortTemplateCount              *[]int32
	frontPortTemplateCountEmpty         *bool
	frontPortTemplateCountGt            *[]int32
	frontPortTemplateCountGte           *[]int32
	frontPortTemplateCountLt            *[]int32
	frontPortTemplateCountLte           *[]int32
	frontPortTemplateCountN             *[]int32
	hasFrontImage                       *bool
	hasRearImage                        *bool
	id                                  *[]int32
	idEmpty                             *bool
	idGt                                *[]int32
	idGte                               *[]int32
	idLt                                *[]int32
	idLte                               *[]int32
	idN                                 *[]int32
	interfaceTemplateCount              *[]int32
	interfaceTemplateCountEmpty         *bool
	interfaceTemplateCountGt            *[]int32
	interfaceTemplateCountGte           *[]int32
	interfaceTemplateCountLt            *[]int32
	interfaceTemplateCountLte           *[]int32
	interfaceTemplateCountN             *[]int32
	interfaces                          *bool
	inventoryItemTemplateCount          *[]int32
	inventoryItemTemplateCountEmpty     *bool
	inventoryItemTemplateCountGt        *[]int32
	inventoryItemTemplateCountGte       *[]int32
	inventoryItemTemplateCountLt        *[]int32
	inventoryItemTemplateCountLte       *[]int32
	inventoryItemTemplateCountN         *[]int32
	inventoryItems                      *bool
	isFullDepth                         *bool
	lastUpdated                         *[]time.Time
	lastUpdatedEmpty                    *[]time.Time
	lastUpdatedGt                       *[]time.Time
	lastUpdatedGte                      *[]time.Time
	lastUpdatedLt                       *[]time.Time
	lastUpdatedLte                      *[]time.Time
	lastUpdatedN                        *[]time.Time
	limit                               *int32
	manufacturer                        *[]string
	manufacturerN                       *[]string
	manufacturerId                      *[]int32
	manufacturerIdN                     *[]int32
	model                               *[]string
	modelEmpty                          *bool
	modelIc                             *[]string
	modelIe                             *[]string
	modelIew                            *[]string
	modelIsw                            *[]string
	modelN                              *[]string
	modelNic                            *[]string
	modelNie                            *[]string
	modelNiew                           *[]string
	modelNisw                           *[]string
	modifiedByRequest                   *string
	moduleBayTemplateCount              *[]int32
	moduleBayTemplateCountEmpty         *bool
	moduleBayTemplateCountGt            *[]int32
	moduleBayTemplateCountGte           *[]int32
	moduleBayTemplateCountLt            *[]int32
	moduleBayTemplateCountLte           *[]int32
	moduleBayTemplateCountN             *[]int32
	moduleBays                          *bool
	offset                              *int32
	ordering                            *string
	partNumber                          *[]string
	partNumberEmpty                     *bool
	partNumberIc                        *[]string
	partNumberIe                        *[]string
	partNumberIew                       *[]string
	partNumberIsw                       *[]string
	partNumberN                         *[]string
	partNumberNic                       *[]string
	partNumberNie                       *[]string
	partNumberNiew                      *[]string
	partNumberNisw                      *[]string
	passThroughPorts                    *bool
	powerOutletTemplateCount            *[]int32
	powerOutletTemplateCountEmpty       *bool
	powerOutletTemplateCountGt          *[]int32
	powerOutletTemplateCountGte         *[]int32
	powerOutletTemplateCountLt          *[]int32
	powerOutletTemplateCountLte         *[]int32
	powerOutletTemplateCountN           *[]int32
	powerOutlets                        *bool
	powerPortTemplateCount              *[]int32
	powerPortTemplateCountEmpty         *bool
	powerPortTemplateCountGt            *[]int32
	powerPortTemplateCountGte           *[]int32
	powerPortTemplateCountLt            *[]int32
	powerPortTemplateCountLte           *[]int32
	powerPortTemplateCountN             *[]int32
	powerPorts                          *bool
	q                                   *string
	rearPortTemplateCount               *[]int32
	rearPortTemplateCountEmpty          *bool
	rearPortTemplateCountGt             *[]int32
	rearPortTemplateCountGte            *[]int32
	rearPortTemplateCountLt             *[]int32
	rearPortTemplateCountLte            *[]int32
	rearPortTemplateCountN              *[]int32
	slug                                *[]string
	slugEmpty                           *bool
	slugIc                              *[]string
	slugIe                              *[]string
	slugIew                             *[]string
	slugIsw                             *[]string
	slugN                               *[]string
	slugNic                             *[]string
	slugNie                             *[]string
	slugNiew                            *[]string
	slugNisw                            *[]string
	subdeviceRole                       *ParentChildStatus
	subdeviceRoleN                      *ParentChildStatus
	tag                                 *[]string
	tagN                                *[]string
	uHeight                             *[]float64
	uHeightEmpty                        *bool
	uHeightGt                           *[]float64
	uHeightGte                          *[]float64
	uHeightLt                           *[]float64
	uHeightLte                          *[]float64
	uHeightN                            *[]float64
	updatedByRequest                    *string
	weight                              *[]float64
	weightEmpty                         *bool
	weightGt                            *[]float64
	weightGte                           *[]float64
	weightLt                            *[]float64
	weightLte                           *[]float64
	weightN                             *[]float64
	weightUnit                          *DcimDeviceTypesListWeightUnitParameter
	weightUnitN                         *DcimDeviceTypesListWeightUnitParameter
}

// * &#x60;front-to-rear&#x60; - Front to rear * &#x60;rear-to-front&#x60; - Rear to front * &#x60;left-to-right&#x60; - Left to right * &#x60;right-to-left&#x60; - Right to left * &#x60;side-to-rear&#x60; - Side to rear * &#x60;passive&#x60; - Passive * &#x60;mixed&#x60; - Mixed
func (r ApiDcimDeviceTypesListRequest) Airflow(airflow DcimDeviceTypesListAirflowParameter) ApiDcimDeviceTypesListRequest {
	r.airflow = &airflow
	return r
}

// * &#x60;front-to-rear&#x60; - Front to rear * &#x60;rear-to-front&#x60; - Rear to front * &#x60;left-to-right&#x60; - Left to right * &#x60;right-to-left&#x60; - Right to left * &#x60;side-to-rear&#x60; - Side to rear * &#x60;passive&#x60; - Passive * &#x60;mixed&#x60; - Mixed
func (r ApiDcimDeviceTypesListRequest) AirflowN(airflowN DcimDeviceTypesListAirflowParameter) ApiDcimDeviceTypesListRequest {
	r.airflowN = &airflowN
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsolePortTemplateCount(consolePortTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.consolePortTemplateCount = &consolePortTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsolePortTemplateCountEmpty(consolePortTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.consolePortTemplateCountEmpty = &consolePortTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsolePortTemplateCountGt(consolePortTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.consolePortTemplateCountGt = &consolePortTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsolePortTemplateCountGte(consolePortTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.consolePortTemplateCountGte = &consolePortTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsolePortTemplateCountLt(consolePortTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.consolePortTemplateCountLt = &consolePortTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsolePortTemplateCountLte(consolePortTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.consolePortTemplateCountLte = &consolePortTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsolePortTemplateCountN(consolePortTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.consolePortTemplateCountN = &consolePortTemplateCountN
	return r
}

// Has console ports
func (r ApiDcimDeviceTypesListRequest) ConsolePorts(consolePorts bool) ApiDcimDeviceTypesListRequest {
	r.consolePorts = &consolePorts
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsoleServerPortTemplateCount(consoleServerPortTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.consoleServerPortTemplateCount = &consoleServerPortTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsoleServerPortTemplateCountEmpty(consoleServerPortTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.consoleServerPortTemplateCountEmpty = &consoleServerPortTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsoleServerPortTemplateCountGt(consoleServerPortTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.consoleServerPortTemplateCountGt = &consoleServerPortTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsoleServerPortTemplateCountGte(consoleServerPortTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.consoleServerPortTemplateCountGte = &consoleServerPortTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsoleServerPortTemplateCountLt(consoleServerPortTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.consoleServerPortTemplateCountLt = &consoleServerPortTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsoleServerPortTemplateCountLte(consoleServerPortTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.consoleServerPortTemplateCountLte = &consoleServerPortTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) ConsoleServerPortTemplateCountN(consoleServerPortTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.consoleServerPortTemplateCountN = &consoleServerPortTemplateCountN
	return r
}

// Has console server ports
func (r ApiDcimDeviceTypesListRequest) ConsoleServerPorts(consoleServerPorts bool) ApiDcimDeviceTypesListRequest {
	r.consoleServerPorts = &consoleServerPorts
	return r
}

func (r ApiDcimDeviceTypesListRequest) Created(created []time.Time) ApiDcimDeviceTypesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimDeviceTypesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimDeviceTypesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) CreatedGt(createdGt []time.Time) ApiDcimDeviceTypesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) CreatedGte(createdGte []time.Time) ApiDcimDeviceTypesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) CreatedLt(createdLt []time.Time) ApiDcimDeviceTypesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) CreatedLte(createdLte []time.Time) ApiDcimDeviceTypesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) CreatedN(createdN []time.Time) ApiDcimDeviceTypesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimDeviceTypesListRequest) CreatedByRequest(createdByRequest string) ApiDcimDeviceTypesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

// Default platform (slug)
func (r ApiDcimDeviceTypesListRequest) DefaultPlatform(defaultPlatform []string) ApiDcimDeviceTypesListRequest {
	r.defaultPlatform = &defaultPlatform
	return r
}

// Default platform (slug)
func (r ApiDcimDeviceTypesListRequest) DefaultPlatformN(defaultPlatformN []string) ApiDcimDeviceTypesListRequest {
	r.defaultPlatformN = &defaultPlatformN
	return r
}

// Default platform (ID)
func (r ApiDcimDeviceTypesListRequest) DefaultPlatformId(defaultPlatformId []*int32) ApiDcimDeviceTypesListRequest {
	r.defaultPlatformId = &defaultPlatformId
	return r
}

// Default platform (ID)
func (r ApiDcimDeviceTypesListRequest) DefaultPlatformIdN(defaultPlatformIdN []*int32) ApiDcimDeviceTypesListRequest {
	r.defaultPlatformIdN = &defaultPlatformIdN
	return r
}

func (r ApiDcimDeviceTypesListRequest) Description(description []string) ApiDcimDeviceTypesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimDeviceTypesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionIc(descriptionIc []string) ApiDcimDeviceTypesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionIe(descriptionIe []string) ApiDcimDeviceTypesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionIew(descriptionIew []string) ApiDcimDeviceTypesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimDeviceTypesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionN(descriptionN []string) ApiDcimDeviceTypesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionNic(descriptionNic []string) ApiDcimDeviceTypesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionNie(descriptionNie []string) ApiDcimDeviceTypesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimDeviceTypesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimDeviceTypesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimDeviceTypesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimDeviceTypesListRequest) DeviceBayTemplateCount(deviceBayTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.deviceBayTemplateCount = &deviceBayTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) DeviceBayTemplateCountEmpty(deviceBayTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.deviceBayTemplateCountEmpty = &deviceBayTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) DeviceBayTemplateCountGt(deviceBayTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.deviceBayTemplateCountGt = &deviceBayTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) DeviceBayTemplateCountGte(deviceBayTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.deviceBayTemplateCountGte = &deviceBayTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) DeviceBayTemplateCountLt(deviceBayTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.deviceBayTemplateCountLt = &deviceBayTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) DeviceBayTemplateCountLte(deviceBayTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.deviceBayTemplateCountLte = &deviceBayTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) DeviceBayTemplateCountN(deviceBayTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.deviceBayTemplateCountN = &deviceBayTemplateCountN
	return r
}

// Has device bays
func (r ApiDcimDeviceTypesListRequest) DeviceBays(deviceBays bool) ApiDcimDeviceTypesListRequest {
	r.deviceBays = &deviceBays
	return r
}

func (r ApiDcimDeviceTypesListRequest) ExcludeFromUtilization(excludeFromUtilization bool) ApiDcimDeviceTypesListRequest {
	r.excludeFromUtilization = &excludeFromUtilization
	return r
}

func (r ApiDcimDeviceTypesListRequest) FrontPortTemplateCount(frontPortTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.frontPortTemplateCount = &frontPortTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) FrontPortTemplateCountEmpty(frontPortTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.frontPortTemplateCountEmpty = &frontPortTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) FrontPortTemplateCountGt(frontPortTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.frontPortTemplateCountGt = &frontPortTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) FrontPortTemplateCountGte(frontPortTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.frontPortTemplateCountGte = &frontPortTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) FrontPortTemplateCountLt(frontPortTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.frontPortTemplateCountLt = &frontPortTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) FrontPortTemplateCountLte(frontPortTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.frontPortTemplateCountLte = &frontPortTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) FrontPortTemplateCountN(frontPortTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.frontPortTemplateCountN = &frontPortTemplateCountN
	return r
}

// Has a front image
func (r ApiDcimDeviceTypesListRequest) HasFrontImage(hasFrontImage bool) ApiDcimDeviceTypesListRequest {
	r.hasFrontImage = &hasFrontImage
	return r
}

// Has a rear image
func (r ApiDcimDeviceTypesListRequest) HasRearImage(hasRearImage bool) ApiDcimDeviceTypesListRequest {
	r.hasRearImage = &hasRearImage
	return r
}

func (r ApiDcimDeviceTypesListRequest) Id(id []int32) ApiDcimDeviceTypesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdEmpty(idEmpty bool) ApiDcimDeviceTypesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdGt(idGt []int32) ApiDcimDeviceTypesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdGte(idGte []int32) ApiDcimDeviceTypesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdLt(idLt []int32) ApiDcimDeviceTypesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdLte(idLte []int32) ApiDcimDeviceTypesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdN(idN []int32) ApiDcimDeviceTypesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimDeviceTypesListRequest) InterfaceTemplateCount(interfaceTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.interfaceTemplateCount = &interfaceTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) InterfaceTemplateCountEmpty(interfaceTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.interfaceTemplateCountEmpty = &interfaceTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) InterfaceTemplateCountGt(interfaceTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.interfaceTemplateCountGt = &interfaceTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) InterfaceTemplateCountGte(interfaceTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.interfaceTemplateCountGte = &interfaceTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) InterfaceTemplateCountLt(interfaceTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.interfaceTemplateCountLt = &interfaceTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) InterfaceTemplateCountLte(interfaceTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.interfaceTemplateCountLte = &interfaceTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) InterfaceTemplateCountN(interfaceTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.interfaceTemplateCountN = &interfaceTemplateCountN
	return r
}

// Has interfaces
func (r ApiDcimDeviceTypesListRequest) Interfaces(interfaces bool) ApiDcimDeviceTypesListRequest {
	r.interfaces = &interfaces
	return r
}

func (r ApiDcimDeviceTypesListRequest) InventoryItemTemplateCount(inventoryItemTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.inventoryItemTemplateCount = &inventoryItemTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) InventoryItemTemplateCountEmpty(inventoryItemTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.inventoryItemTemplateCountEmpty = &inventoryItemTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) InventoryItemTemplateCountGt(inventoryItemTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.inventoryItemTemplateCountGt = &inventoryItemTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) InventoryItemTemplateCountGte(inventoryItemTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.inventoryItemTemplateCountGte = &inventoryItemTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) InventoryItemTemplateCountLt(inventoryItemTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.inventoryItemTemplateCountLt = &inventoryItemTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) InventoryItemTemplateCountLte(inventoryItemTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.inventoryItemTemplateCountLte = &inventoryItemTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) InventoryItemTemplateCountN(inventoryItemTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.inventoryItemTemplateCountN = &inventoryItemTemplateCountN
	return r
}

// Has inventory items
func (r ApiDcimDeviceTypesListRequest) InventoryItems(inventoryItems bool) ApiDcimDeviceTypesListRequest {
	r.inventoryItems = &inventoryItems
	return r
}

func (r ApiDcimDeviceTypesListRequest) IsFullDepth(isFullDepth bool) ApiDcimDeviceTypesListRequest {
	r.isFullDepth = &isFullDepth
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimDeviceTypesListRequest) Limit(limit int32) ApiDcimDeviceTypesListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiDcimDeviceTypesListRequest) Manufacturer(manufacturer []string) ApiDcimDeviceTypesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimDeviceTypesListRequest) ManufacturerN(manufacturerN []string) ApiDcimDeviceTypesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimDeviceTypesListRequest) ManufacturerId(manufacturerId []int32) ApiDcimDeviceTypesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimDeviceTypesListRequest) ManufacturerIdN(manufacturerIdN []int32) ApiDcimDeviceTypesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiDcimDeviceTypesListRequest) Model(model []string) ApiDcimDeviceTypesListRequest {
	r.model = &model
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelEmpty(modelEmpty bool) ApiDcimDeviceTypesListRequest {
	r.modelEmpty = &modelEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelIc(modelIc []string) ApiDcimDeviceTypesListRequest {
	r.modelIc = &modelIc
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelIe(modelIe []string) ApiDcimDeviceTypesListRequest {
	r.modelIe = &modelIe
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelIew(modelIew []string) ApiDcimDeviceTypesListRequest {
	r.modelIew = &modelIew
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelIsw(modelIsw []string) ApiDcimDeviceTypesListRequest {
	r.modelIsw = &modelIsw
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelN(modelN []string) ApiDcimDeviceTypesListRequest {
	r.modelN = &modelN
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNic(modelNic []string) ApiDcimDeviceTypesListRequest {
	r.modelNic = &modelNic
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNie(modelNie []string) ApiDcimDeviceTypesListRequest {
	r.modelNie = &modelNie
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNiew(modelNiew []string) ApiDcimDeviceTypesListRequest {
	r.modelNiew = &modelNiew
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNisw(modelNisw []string) ApiDcimDeviceTypesListRequest {
	r.modelNisw = &modelNisw
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimDeviceTypesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModuleBayTemplateCount(moduleBayTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.moduleBayTemplateCount = &moduleBayTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModuleBayTemplateCountEmpty(moduleBayTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.moduleBayTemplateCountEmpty = &moduleBayTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModuleBayTemplateCountGt(moduleBayTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.moduleBayTemplateCountGt = &moduleBayTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModuleBayTemplateCountGte(moduleBayTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.moduleBayTemplateCountGte = &moduleBayTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModuleBayTemplateCountLt(moduleBayTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.moduleBayTemplateCountLt = &moduleBayTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModuleBayTemplateCountLte(moduleBayTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.moduleBayTemplateCountLte = &moduleBayTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModuleBayTemplateCountN(moduleBayTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.moduleBayTemplateCountN = &moduleBayTemplateCountN
	return r
}

// Has module bays
func (r ApiDcimDeviceTypesListRequest) ModuleBays(moduleBays bool) ApiDcimDeviceTypesListRequest {
	r.moduleBays = &moduleBays
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDeviceTypesListRequest) Offset(offset int32) ApiDcimDeviceTypesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimDeviceTypesListRequest) Ordering(ordering string) ApiDcimDeviceTypesListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumber(partNumber []string) ApiDcimDeviceTypesListRequest {
	r.partNumber = &partNumber
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberEmpty(partNumberEmpty bool) ApiDcimDeviceTypesListRequest {
	r.partNumberEmpty = &partNumberEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberIc(partNumberIc []string) ApiDcimDeviceTypesListRequest {
	r.partNumberIc = &partNumberIc
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberIe(partNumberIe []string) ApiDcimDeviceTypesListRequest {
	r.partNumberIe = &partNumberIe
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberIew(partNumberIew []string) ApiDcimDeviceTypesListRequest {
	r.partNumberIew = &partNumberIew
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberIsw(partNumberIsw []string) ApiDcimDeviceTypesListRequest {
	r.partNumberIsw = &partNumberIsw
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberN(partNumberN []string) ApiDcimDeviceTypesListRequest {
	r.partNumberN = &partNumberN
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNic(partNumberNic []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNic = &partNumberNic
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNie(partNumberNie []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNie = &partNumberNie
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNiew(partNumberNiew []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNiew = &partNumberNiew
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNisw(partNumberNisw []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNisw = &partNumberNisw
	return r
}

// Has pass-through ports
func (r ApiDcimDeviceTypesListRequest) PassThroughPorts(passThroughPorts bool) ApiDcimDeviceTypesListRequest {
	r.passThroughPorts = &passThroughPorts
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerOutletTemplateCount(powerOutletTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.powerOutletTemplateCount = &powerOutletTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerOutletTemplateCountEmpty(powerOutletTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.powerOutletTemplateCountEmpty = &powerOutletTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerOutletTemplateCountGt(powerOutletTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.powerOutletTemplateCountGt = &powerOutletTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerOutletTemplateCountGte(powerOutletTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.powerOutletTemplateCountGte = &powerOutletTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerOutletTemplateCountLt(powerOutletTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.powerOutletTemplateCountLt = &powerOutletTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerOutletTemplateCountLte(powerOutletTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.powerOutletTemplateCountLte = &powerOutletTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerOutletTemplateCountN(powerOutletTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.powerOutletTemplateCountN = &powerOutletTemplateCountN
	return r
}

// Has power outlets
func (r ApiDcimDeviceTypesListRequest) PowerOutlets(powerOutlets bool) ApiDcimDeviceTypesListRequest {
	r.powerOutlets = &powerOutlets
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerPortTemplateCount(powerPortTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.powerPortTemplateCount = &powerPortTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerPortTemplateCountEmpty(powerPortTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.powerPortTemplateCountEmpty = &powerPortTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerPortTemplateCountGt(powerPortTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.powerPortTemplateCountGt = &powerPortTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerPortTemplateCountGte(powerPortTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.powerPortTemplateCountGte = &powerPortTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerPortTemplateCountLt(powerPortTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.powerPortTemplateCountLt = &powerPortTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerPortTemplateCountLte(powerPortTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.powerPortTemplateCountLte = &powerPortTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) PowerPortTemplateCountN(powerPortTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.powerPortTemplateCountN = &powerPortTemplateCountN
	return r
}

// Has power ports
func (r ApiDcimDeviceTypesListRequest) PowerPorts(powerPorts bool) ApiDcimDeviceTypesListRequest {
	r.powerPorts = &powerPorts
	return r
}

// Search
func (r ApiDcimDeviceTypesListRequest) Q(q string) ApiDcimDeviceTypesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimDeviceTypesListRequest) RearPortTemplateCount(rearPortTemplateCount []int32) ApiDcimDeviceTypesListRequest {
	r.rearPortTemplateCount = &rearPortTemplateCount
	return r
}

func (r ApiDcimDeviceTypesListRequest) RearPortTemplateCountEmpty(rearPortTemplateCountEmpty bool) ApiDcimDeviceTypesListRequest {
	r.rearPortTemplateCountEmpty = &rearPortTemplateCountEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) RearPortTemplateCountGt(rearPortTemplateCountGt []int32) ApiDcimDeviceTypesListRequest {
	r.rearPortTemplateCountGt = &rearPortTemplateCountGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) RearPortTemplateCountGte(rearPortTemplateCountGte []int32) ApiDcimDeviceTypesListRequest {
	r.rearPortTemplateCountGte = &rearPortTemplateCountGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) RearPortTemplateCountLt(rearPortTemplateCountLt []int32) ApiDcimDeviceTypesListRequest {
	r.rearPortTemplateCountLt = &rearPortTemplateCountLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) RearPortTemplateCountLte(rearPortTemplateCountLte []int32) ApiDcimDeviceTypesListRequest {
	r.rearPortTemplateCountLte = &rearPortTemplateCountLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) RearPortTemplateCountN(rearPortTemplateCountN []int32) ApiDcimDeviceTypesListRequest {
	r.rearPortTemplateCountN = &rearPortTemplateCountN
	return r
}

func (r ApiDcimDeviceTypesListRequest) Slug(slug []string) ApiDcimDeviceTypesListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugEmpty(slugEmpty bool) ApiDcimDeviceTypesListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugIc(slugIc []string) ApiDcimDeviceTypesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugIe(slugIe []string) ApiDcimDeviceTypesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugIew(slugIew []string) ApiDcimDeviceTypesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugIsw(slugIsw []string) ApiDcimDeviceTypesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugN(slugN []string) ApiDcimDeviceTypesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNic(slugNic []string) ApiDcimDeviceTypesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNie(slugNie []string) ApiDcimDeviceTypesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNiew(slugNiew []string) ApiDcimDeviceTypesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNisw(slugNisw []string) ApiDcimDeviceTypesListRequest {
	r.slugNisw = &slugNisw
	return r
}

// Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.  * &#x60;parent&#x60; - Parent * &#x60;child&#x60; - Child
func (r ApiDcimDeviceTypesListRequest) SubdeviceRole(subdeviceRole ParentChildStatus) ApiDcimDeviceTypesListRequest {
	r.subdeviceRole = &subdeviceRole
	return r
}

// Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.  * &#x60;parent&#x60; - Parent * &#x60;child&#x60; - Child
func (r ApiDcimDeviceTypesListRequest) SubdeviceRoleN(subdeviceRoleN ParentChildStatus) ApiDcimDeviceTypesListRequest {
	r.subdeviceRoleN = &subdeviceRoleN
	return r
}

func (r ApiDcimDeviceTypesListRequest) Tag(tag []string) ApiDcimDeviceTypesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimDeviceTypesListRequest) TagN(tagN []string) ApiDcimDeviceTypesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeight(uHeight []float64) ApiDcimDeviceTypesListRequest {
	r.uHeight = &uHeight
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightEmpty(uHeightEmpty bool) ApiDcimDeviceTypesListRequest {
	r.uHeightEmpty = &uHeightEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightGt(uHeightGt []float64) ApiDcimDeviceTypesListRequest {
	r.uHeightGt = &uHeightGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightGte(uHeightGte []float64) ApiDcimDeviceTypesListRequest {
	r.uHeightGte = &uHeightGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightLt(uHeightLt []float64) ApiDcimDeviceTypesListRequest {
	r.uHeightLt = &uHeightLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightLte(uHeightLte []float64) ApiDcimDeviceTypesListRequest {
	r.uHeightLte = &uHeightLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightN(uHeightN []float64) ApiDcimDeviceTypesListRequest {
	r.uHeightN = &uHeightN
	return r
}

func (r ApiDcimDeviceTypesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimDeviceTypesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimDeviceTypesListRequest) Weight(weight []float64) ApiDcimDeviceTypesListRequest {
	r.weight = &weight
	return r
}

func (r ApiDcimDeviceTypesListRequest) WeightEmpty(weightEmpty bool) ApiDcimDeviceTypesListRequest {
	r.weightEmpty = &weightEmpty
	return r
}

func (r ApiDcimDeviceTypesListRequest) WeightGt(weightGt []float64) ApiDcimDeviceTypesListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) WeightGte(weightGte []float64) ApiDcimDeviceTypesListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) WeightLt(weightLt []float64) ApiDcimDeviceTypesListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) WeightLte(weightLte []float64) ApiDcimDeviceTypesListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) WeightN(weightN []float64) ApiDcimDeviceTypesListRequest {
	r.weightN = &weightN
	return r
}

// * &#x60;kg&#x60; - Kilograms * &#x60;g&#x60; - Grams * &#x60;lb&#x60; - Pounds * &#x60;oz&#x60; - Ounces
func (r ApiDcimDeviceTypesListRequest) WeightUnit(weightUnit DcimDeviceTypesListWeightUnitParameter) ApiDcimDeviceTypesListRequest {
	r.weightUnit = &weightUnit
	return r
}

// * &#x60;kg&#x60; - Kilograms * &#x60;g&#x60; - Grams * &#x60;lb&#x60; - Pounds * &#x60;oz&#x60; - Ounces
func (r ApiDcimDeviceTypesListRequest) WeightUnitN(weightUnitN DcimDeviceTypesListWeightUnitParameter) ApiDcimDeviceTypesListRequest {
	r.weightUnitN = &weightUnitN
	return r
}

func (r ApiDcimDeviceTypesListRequest) Execute() (*PaginatedDeviceTypeList, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesListExecute(r)
}

/*
DcimDeviceTypesList Method for DcimDeviceTypesList

Get a list of device type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDeviceTypesListRequest
*/
func (a *DcimAPIService) DcimDeviceTypesList(ctx context.Context) ApiDcimDeviceTypesListRequest {
	return ApiDcimDeviceTypesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedDeviceTypeList
func (a *DcimAPIService) DcimDeviceTypesListExecute(r ApiDcimDeviceTypesListRequest) (*PaginatedDeviceTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedDeviceTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.airflow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "airflow", r.airflow, "")
	}
	if r.airflowN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "airflow__n", r.airflowN, "")
	}
	if r.consolePortTemplateCount != nil {
		t := *r.consolePortTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count", t, "multi")
		}
	}
	if r.consolePortTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__empty", r.consolePortTemplateCountEmpty, "")
	}
	if r.consolePortTemplateCountGt != nil {
		t := *r.consolePortTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__gt", t, "multi")
		}
	}
	if r.consolePortTemplateCountGte != nil {
		t := *r.consolePortTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__gte", t, "multi")
		}
	}
	if r.consolePortTemplateCountLt != nil {
		t := *r.consolePortTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__lt", t, "multi")
		}
	}
	if r.consolePortTemplateCountLte != nil {
		t := *r.consolePortTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__lte", t, "multi")
		}
	}
	if r.consolePortTemplateCountN != nil {
		t := *r.consolePortTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_template_count__n", t, "multi")
		}
	}
	if r.consolePorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_ports", r.consolePorts, "")
	}
	if r.consoleServerPortTemplateCount != nil {
		t := *r.consoleServerPortTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count", t, "multi")
		}
	}
	if r.consoleServerPortTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__empty", r.consoleServerPortTemplateCountEmpty, "")
	}
	if r.consoleServerPortTemplateCountGt != nil {
		t := *r.consoleServerPortTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__gt", t, "multi")
		}
	}
	if r.consoleServerPortTemplateCountGte != nil {
		t := *r.consoleServerPortTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__gte", t, "multi")
		}
	}
	if r.consoleServerPortTemplateCountLt != nil {
		t := *r.consoleServerPortTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__lt", t, "multi")
		}
	}
	if r.consoleServerPortTemplateCountLte != nil {
		t := *r.consoleServerPortTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__lte", t, "multi")
		}
	}
	if r.consoleServerPortTemplateCountN != nil {
		t := *r.consoleServerPortTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_template_count__n", t, "multi")
		}
	}
	if r.consoleServerPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_ports", r.consoleServerPorts, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.defaultPlatform != nil {
		t := *r.defaultPlatform
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "default_platform", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "default_platform", t, "multi")
		}
	}
	if r.defaultPlatformN != nil {
		t := *r.defaultPlatformN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "default_platform__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "default_platform__n", t, "multi")
		}
	}
	if r.defaultPlatformId != nil {
		t := *r.defaultPlatformId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "default_platform_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "default_platform_id", t, "multi")
		}
	}
	if r.defaultPlatformIdN != nil {
		t := *r.defaultPlatformIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "default_platform_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "default_platform_id__n", t, "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceBayTemplateCount != nil {
		t := *r.deviceBayTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count", t, "multi")
		}
	}
	if r.deviceBayTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__empty", r.deviceBayTemplateCountEmpty, "")
	}
	if r.deviceBayTemplateCountGt != nil {
		t := *r.deviceBayTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__gt", t, "multi")
		}
	}
	if r.deviceBayTemplateCountGte != nil {
		t := *r.deviceBayTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__gte", t, "multi")
		}
	}
	if r.deviceBayTemplateCountLt != nil {
		t := *r.deviceBayTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__lt", t, "multi")
		}
	}
	if r.deviceBayTemplateCountLte != nil {
		t := *r.deviceBayTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__lte", t, "multi")
		}
	}
	if r.deviceBayTemplateCountN != nil {
		t := *r.deviceBayTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_template_count__n", t, "multi")
		}
	}
	if r.deviceBays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device_bays", r.deviceBays, "")
	}
	if r.excludeFromUtilization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_from_utilization", r.excludeFromUtilization, "")
	}
	if r.frontPortTemplateCount != nil {
		t := *r.frontPortTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count", t, "multi")
		}
	}
	if r.frontPortTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__empty", r.frontPortTemplateCountEmpty, "")
	}
	if r.frontPortTemplateCountGt != nil {
		t := *r.frontPortTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__gt", t, "multi")
		}
	}
	if r.frontPortTemplateCountGte != nil {
		t := *r.frontPortTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__gte", t, "multi")
		}
	}
	if r.frontPortTemplateCountLt != nil {
		t := *r.frontPortTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__lt", t, "multi")
		}
	}
	if r.frontPortTemplateCountLte != nil {
		t := *r.frontPortTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__lte", t, "multi")
		}
	}
	if r.frontPortTemplateCountN != nil {
		t := *r.frontPortTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_template_count__n", t, "multi")
		}
	}
	if r.hasFrontImage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_front_image", r.hasFrontImage, "")
	}
	if r.hasRearImage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_rear_image", r.hasRearImage, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.interfaceTemplateCount != nil {
		t := *r.interfaceTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count", t, "multi")
		}
	}
	if r.interfaceTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__empty", r.interfaceTemplateCountEmpty, "")
	}
	if r.interfaceTemplateCountGt != nil {
		t := *r.interfaceTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__gt", t, "multi")
		}
	}
	if r.interfaceTemplateCountGte != nil {
		t := *r.interfaceTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__gte", t, "multi")
		}
	}
	if r.interfaceTemplateCountLt != nil {
		t := *r.interfaceTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__lt", t, "multi")
		}
	}
	if r.interfaceTemplateCountLte != nil {
		t := *r.interfaceTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__lte", t, "multi")
		}
	}
	if r.interfaceTemplateCountN != nil {
		t := *r.interfaceTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_template_count__n", t, "multi")
		}
	}
	if r.interfaces != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaces", r.interfaces, "")
	}
	if r.inventoryItemTemplateCount != nil {
		t := *r.inventoryItemTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count", t, "multi")
		}
	}
	if r.inventoryItemTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__empty", r.inventoryItemTemplateCountEmpty, "")
	}
	if r.inventoryItemTemplateCountGt != nil {
		t := *r.inventoryItemTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__gt", t, "multi")
		}
	}
	if r.inventoryItemTemplateCountGte != nil {
		t := *r.inventoryItemTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__gte", t, "multi")
		}
	}
	if r.inventoryItemTemplateCountLt != nil {
		t := *r.inventoryItemTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__lt", t, "multi")
		}
	}
	if r.inventoryItemTemplateCountLte != nil {
		t := *r.inventoryItemTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__lte", t, "multi")
		}
	}
	if r.inventoryItemTemplateCountN != nil {
		t := *r.inventoryItemTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_template_count__n", t, "multi")
		}
	}
	if r.inventoryItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_items", r.inventoryItems, "")
	}
	if r.isFullDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_full_depth", r.isFullDepth, "")
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.model != nil {
		t := *r.model
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model", t, "multi")
		}
	}
	if r.modelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model__empty", r.modelEmpty, "")
	}
	if r.modelIc != nil {
		t := *r.modelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__ic", t, "multi")
		}
	}
	if r.modelIe != nil {
		t := *r.modelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__ie", t, "multi")
		}
	}
	if r.modelIew != nil {
		t := *r.modelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__iew", t, "multi")
		}
	}
	if r.modelIsw != nil {
		t := *r.modelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__isw", t, "multi")
		}
	}
	if r.modelN != nil {
		t := *r.modelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", t, "multi")
		}
	}
	if r.modelNic != nil {
		t := *r.modelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nic", t, "multi")
		}
	}
	if r.modelNie != nil {
		t := *r.modelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nie", t, "multi")
		}
	}
	if r.modelNiew != nil {
		t := *r.modelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__niew", t, "multi")
		}
	}
	if r.modelNisw != nil {
		t := *r.modelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nisw", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleBayTemplateCount != nil {
		t := *r.moduleBayTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count", t, "multi")
		}
	}
	if r.moduleBayTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__empty", r.moduleBayTemplateCountEmpty, "")
	}
	if r.moduleBayTemplateCountGt != nil {
		t := *r.moduleBayTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__gt", t, "multi")
		}
	}
	if r.moduleBayTemplateCountGte != nil {
		t := *r.moduleBayTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__gte", t, "multi")
		}
	}
	if r.moduleBayTemplateCountLt != nil {
		t := *r.moduleBayTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__lt", t, "multi")
		}
	}
	if r.moduleBayTemplateCountLte != nil {
		t := *r.moduleBayTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__lte", t, "multi")
		}
	}
	if r.moduleBayTemplateCountN != nil {
		t := *r.moduleBayTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_template_count__n", t, "multi")
		}
	}
	if r.moduleBays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "module_bays", r.moduleBays, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.partNumber != nil {
		t := *r.partNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number", t, "multi")
		}
	}
	if r.partNumberEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__empty", r.partNumberEmpty, "")
	}
	if r.partNumberIc != nil {
		t := *r.partNumberIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ic", t, "multi")
		}
	}
	if r.partNumberIe != nil {
		t := *r.partNumberIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ie", t, "multi")
		}
	}
	if r.partNumberIew != nil {
		t := *r.partNumberIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__iew", t, "multi")
		}
	}
	if r.partNumberIsw != nil {
		t := *r.partNumberIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__isw", t, "multi")
		}
	}
	if r.partNumberN != nil {
		t := *r.partNumberN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__n", t, "multi")
		}
	}
	if r.partNumberNic != nil {
		t := *r.partNumberNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nic", t, "multi")
		}
	}
	if r.partNumberNie != nil {
		t := *r.partNumberNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nie", t, "multi")
		}
	}
	if r.partNumberNiew != nil {
		t := *r.partNumberNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__niew", t, "multi")
		}
	}
	if r.partNumberNisw != nil {
		t := *r.partNumberNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nisw", t, "multi")
		}
	}
	if r.passThroughPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pass_through_ports", r.passThroughPorts, "")
	}
	if r.powerOutletTemplateCount != nil {
		t := *r.powerOutletTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count", t, "multi")
		}
	}
	if r.powerOutletTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__empty", r.powerOutletTemplateCountEmpty, "")
	}
	if r.powerOutletTemplateCountGt != nil {
		t := *r.powerOutletTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__gt", t, "multi")
		}
	}
	if r.powerOutletTemplateCountGte != nil {
		t := *r.powerOutletTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__gte", t, "multi")
		}
	}
	if r.powerOutletTemplateCountLt != nil {
		t := *r.powerOutletTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__lt", t, "multi")
		}
	}
	if r.powerOutletTemplateCountLte != nil {
		t := *r.powerOutletTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__lte", t, "multi")
		}
	}
	if r.powerOutletTemplateCountN != nil {
		t := *r.powerOutletTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_template_count__n", t, "multi")
		}
	}
	if r.powerOutlets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlets", r.powerOutlets, "")
	}
	if r.powerPortTemplateCount != nil {
		t := *r.powerPortTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count", t, "multi")
		}
	}
	if r.powerPortTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__empty", r.powerPortTemplateCountEmpty, "")
	}
	if r.powerPortTemplateCountGt != nil {
		t := *r.powerPortTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__gt", t, "multi")
		}
	}
	if r.powerPortTemplateCountGte != nil {
		t := *r.powerPortTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__gte", t, "multi")
		}
	}
	if r.powerPortTemplateCountLt != nil {
		t := *r.powerPortTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__lt", t, "multi")
		}
	}
	if r.powerPortTemplateCountLte != nil {
		t := *r.powerPortTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__lte", t, "multi")
		}
	}
	if r.powerPortTemplateCountN != nil {
		t := *r.powerPortTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_template_count__n", t, "multi")
		}
	}
	if r.powerPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_ports", r.powerPorts, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rearPortTemplateCount != nil {
		t := *r.rearPortTemplateCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count", t, "multi")
		}
	}
	if r.rearPortTemplateCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__empty", r.rearPortTemplateCountEmpty, "")
	}
	if r.rearPortTemplateCountGt != nil {
		t := *r.rearPortTemplateCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__gt", t, "multi")
		}
	}
	if r.rearPortTemplateCountGte != nil {
		t := *r.rearPortTemplateCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__gte", t, "multi")
		}
	}
	if r.rearPortTemplateCountLt != nil {
		t := *r.rearPortTemplateCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__lt", t, "multi")
		}
	}
	if r.rearPortTemplateCountLte != nil {
		t := *r.rearPortTemplateCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__lte", t, "multi")
		}
	}
	if r.rearPortTemplateCountN != nil {
		t := *r.rearPortTemplateCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_template_count__n", t, "multi")
		}
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.subdeviceRole != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subdevice_role", r.subdeviceRole, "")
	}
	if r.subdeviceRoleN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subdevice_role__n", r.subdeviceRoleN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.uHeight != nil {
		t := *r.uHeight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height", t, "multi")
		}
	}
	if r.uHeightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__empty", r.uHeightEmpty, "")
	}
	if r.uHeightGt != nil {
		t := *r.uHeightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__gt", t, "multi")
		}
	}
	if r.uHeightGte != nil {
		t := *r.uHeightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__gte", t, "multi")
		}
	}
	if r.uHeightLt != nil {
		t := *r.uHeightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__lt", t, "multi")
		}
	}
	if r.uHeightLte != nil {
		t := *r.uHeightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__lte", t, "multi")
		}
	}
	if r.uHeightN != nil {
		t := *r.uHeightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "multi")
		}
	}
	if r.weightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight__empty", r.weightEmpty, "")
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "multi")
		}
	}
	if r.weightUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight_unit", r.weightUnit, "")
	}
	if r.weightUnitN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight_unit__n", r.weightUnitN, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesPartialUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	id                               int32
	patchedWritableDeviceTypeRequest *PatchedWritableDeviceTypeRequest
}

func (r ApiDcimDeviceTypesPartialUpdateRequest) PatchedWritableDeviceTypeRequest(patchedWritableDeviceTypeRequest PatchedWritableDeviceTypeRequest) ApiDcimDeviceTypesPartialUpdateRequest {
	r.patchedWritableDeviceTypeRequest = &patchedWritableDeviceTypeRequest
	return r
}

func (r ApiDcimDeviceTypesPartialUpdateRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesPartialUpdateExecute(r)
}

/*
DcimDeviceTypesPartialUpdate Method for DcimDeviceTypesPartialUpdate

Patch a device type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device type.
	@return ApiDcimDeviceTypesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceTypesPartialUpdate(ctx context.Context, id int32) ApiDcimDeviceTypesPartialUpdateRequest {
	return ApiDcimDeviceTypesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceType
func (a *DcimAPIService) DcimDeviceTypesPartialUpdateExecute(r ApiDcimDeviceTypesPartialUpdateRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceTypesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDeviceTypesRetrieveRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesRetrieveExecute(r)
}

/*
DcimDeviceTypesRetrieve Method for DcimDeviceTypesRetrieve

Get a device type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device type.
	@return ApiDcimDeviceTypesRetrieveRequest
*/
func (a *DcimAPIService) DcimDeviceTypesRetrieve(ctx context.Context, id int32) ApiDcimDeviceTypesRetrieveRequest {
	return ApiDcimDeviceTypesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceType
func (a *DcimAPIService) DcimDeviceTypesRetrieveExecute(r ApiDcimDeviceTypesRetrieveRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesUpdateRequest struct {
	ctx                       context.Context
	ApiService                *DcimAPIService
	id                        int32
	writableDeviceTypeRequest *WritableDeviceTypeRequest
}

func (r ApiDcimDeviceTypesUpdateRequest) WritableDeviceTypeRequest(writableDeviceTypeRequest WritableDeviceTypeRequest) ApiDcimDeviceTypesUpdateRequest {
	r.writableDeviceTypeRequest = &writableDeviceTypeRequest
	return r
}

func (r ApiDcimDeviceTypesUpdateRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesUpdateExecute(r)
}

/*
DcimDeviceTypesUpdate Method for DcimDeviceTypesUpdate

Put a device type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device type.
	@return ApiDcimDeviceTypesUpdateRequest
*/
func (a *DcimAPIService) DcimDeviceTypesUpdate(ctx context.Context, id int32) ApiDcimDeviceTypesUpdateRequest {
	return ApiDcimDeviceTypesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceType
func (a *DcimAPIService) DcimDeviceTypesUpdateExecute(r ApiDcimDeviceTypesUpdateRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDeviceTypesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/device-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceTypeRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeviceTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesBulkDestroyRequest struct {
	ctx                            context.Context
	ApiService                     *DcimAPIService
	deviceWithConfigContextRequest *[]DeviceWithConfigContextRequest
}

func (r ApiDcimDevicesBulkDestroyRequest) DeviceWithConfigContextRequest(deviceWithConfigContextRequest []DeviceWithConfigContextRequest) ApiDcimDevicesBulkDestroyRequest {
	r.deviceWithConfigContextRequest = &deviceWithConfigContextRequest
	return r
}

func (r ApiDcimDevicesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDevicesBulkDestroyExecute(r)
}

/*
DcimDevicesBulkDestroy Method for DcimDevicesBulkDestroy

Delete a list of device objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDevicesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimDevicesBulkDestroy(ctx context.Context) ApiDcimDevicesBulkDestroyRequest {
	return ApiDcimDevicesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDevicesBulkDestroyExecute(r ApiDcimDevicesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceWithConfigContextRequest == nil {
		return nil, reportError("deviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDevicesBulkPartialUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *DcimAPIService
	deviceWithConfigContextRequest *[]DeviceWithConfigContextRequest
}

func (r ApiDcimDevicesBulkPartialUpdateRequest) DeviceWithConfigContextRequest(deviceWithConfigContextRequest []DeviceWithConfigContextRequest) ApiDcimDevicesBulkPartialUpdateRequest {
	r.deviceWithConfigContextRequest = &deviceWithConfigContextRequest
	return r
}

func (r ApiDcimDevicesBulkPartialUpdateRequest) Execute() ([]DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesBulkPartialUpdateExecute(r)
}

/*
DcimDevicesBulkPartialUpdate Method for DcimDevicesBulkPartialUpdate

Patch a list of device objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDevicesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDevicesBulkPartialUpdate(ctx context.Context) ApiDcimDevicesBulkPartialUpdateRequest {
	return ApiDcimDevicesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceWithConfigContext
func (a *DcimAPIService) DcimDevicesBulkPartialUpdateExecute(r ApiDcimDevicesBulkPartialUpdateRequest) ([]DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("deviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesBulkUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *DcimAPIService
	deviceWithConfigContextRequest *[]DeviceWithConfigContextRequest
}

func (r ApiDcimDevicesBulkUpdateRequest) DeviceWithConfigContextRequest(deviceWithConfigContextRequest []DeviceWithConfigContextRequest) ApiDcimDevicesBulkUpdateRequest {
	r.deviceWithConfigContextRequest = &deviceWithConfigContextRequest
	return r
}

func (r ApiDcimDevicesBulkUpdateRequest) Execute() ([]DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesBulkUpdateExecute(r)
}

/*
DcimDevicesBulkUpdate Method for DcimDevicesBulkUpdate

Put a list of device objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDevicesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimDevicesBulkUpdate(ctx context.Context) ApiDcimDevicesBulkUpdateRequest {
	return ApiDcimDevicesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DeviceWithConfigContext
func (a *DcimAPIService) DcimDevicesBulkUpdateExecute(r ApiDcimDevicesBulkUpdateRequest) ([]DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("deviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesCreateRequest struct {
	ctx                                    context.Context
	ApiService                             *DcimAPIService
	writableDeviceWithConfigContextRequest *WritableDeviceWithConfigContextRequest
}

func (r ApiDcimDevicesCreateRequest) WritableDeviceWithConfigContextRequest(writableDeviceWithConfigContextRequest WritableDeviceWithConfigContextRequest) ApiDcimDevicesCreateRequest {
	r.writableDeviceWithConfigContextRequest = &writableDeviceWithConfigContextRequest
	return r
}

func (r ApiDcimDevicesCreateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesCreateExecute(r)
}

/*
DcimDevicesCreate Method for DcimDevicesCreate

Post a list of device objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDevicesCreateRequest
*/
func (a *DcimAPIService) DcimDevicesCreate(ctx context.Context) ApiDcimDevicesCreateRequest {
	return ApiDcimDevicesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *DcimAPIService) DcimDevicesCreateExecute(r ApiDcimDevicesCreateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDevicesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDevicesDestroyExecute(r)
}

/*
DcimDevicesDestroy Method for DcimDevicesDestroy

Delete a device object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiDcimDevicesDestroyRequest
*/
func (a *DcimAPIService) DcimDevicesDestroy(ctx context.Context, id int32) ApiDcimDevicesDestroyRequest {
	return ApiDcimDevicesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimDevicesDestroyExecute(r ApiDcimDevicesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDevicesListRequest struct {
	ctx                         context.Context
	ApiService                  *DcimAPIService
	airflow                     *DcimDeviceTypesListAirflowParameter
	airflowN                    *DcimDeviceTypesListAirflowParameter
	assetTag                    *[]string
	assetTagEmpty               *bool
	assetTagIc                  *[]string
	assetTagIe                  *[]string
	assetTagIew                 *[]string
	assetTagIsw                 *[]string
	assetTagN                   *[]string
	assetTagNic                 *[]string
	assetTagNie                 *[]string
	assetTagNiew                *[]string
	assetTagNisw                *[]string
	clusterGroup                *[]string
	clusterGroupN               *[]string
	clusterGroupId              *[]int32
	clusterGroupIdN             *[]int32
	clusterId                   *[]*int32
	clusterIdN                  *[]*int32
	configTemplateId            *[]*int32
	configTemplateIdN           *[]*int32
	consolePortCount            *[]int32
	consolePortCountEmpty       *bool
	consolePortCountGt          *[]int32
	consolePortCountGte         *[]int32
	consolePortCountLt          *[]int32
	consolePortCountLte         *[]int32
	consolePortCountN           *[]int32
	consolePorts                *bool
	consoleServerPortCount      *[]int32
	consoleServerPortCountEmpty *bool
	consoleServerPortCountGt    *[]int32
	consoleServerPortCountGte   *[]int32
	consoleServerPortCountLt    *[]int32
	consoleServerPortCountLte   *[]int32
	consoleServerPortCountN     *[]int32
	consoleServerPorts          *bool
	contact                     *[]int32
	contactN                    *[]int32
	contactGroup                *[]string
	contactGroupN               *[]string
	contactRole                 *[]int32
	contactRoleN                *[]int32
	created                     *[]time.Time
	createdEmpty                *[]time.Time
	createdGt                   *[]time.Time
	createdGte                  *[]time.Time
	createdLt                   *[]time.Time
	createdLte                  *[]time.Time
	createdN                    *[]time.Time
	createdByRequest            *string
	description                 *[]string
	descriptionEmpty            *bool
	descriptionIc               *[]string
	descriptionIe               *[]string
	descriptionIew              *[]string
	descriptionIsw              *[]string
	descriptionN                *[]string
	descriptionNic              *[]string
	descriptionNie              *[]string
	descriptionNiew             *[]string
	descriptionNisw             *[]string
	deviceBayCount              *[]int32
	deviceBayCountEmpty         *bool
	deviceBayCountGt            *[]int32
	deviceBayCountGte           *[]int32
	deviceBayCountLt            *[]int32
	deviceBayCountLte           *[]int32
	deviceBayCountN             *[]int32
	deviceBays                  *bool
	deviceType                  *[]string
	deviceTypeN                 *[]string
	deviceTypeId                *[]int32
	deviceTypeIdN               *[]int32
	face                        *RackFace
	faceN                       *RackFace
	frontPortCount              *[]int32
	frontPortCountEmpty         *bool
	frontPortCountGt            *[]int32
	frontPortCountGte           *[]int32
	frontPortCountLt            *[]int32
	frontPortCountLte           *[]int32
	frontPortCountN             *[]int32
	hasOobIp                    *bool
	hasPrimaryIp                *bool
	hasVirtualDeviceContext     *bool
	id                          *[]int32
	idEmpty                     *bool
	idGt                        *[]int32
	idGte                       *[]int32
	idLt                        *[]int32
	idLte                       *[]int32
	idN                         *[]int32
	interfaceCount              *[]int32
	interfaceCountEmpty         *bool
	interfaceCountGt            *[]int32
	interfaceCountGte           *[]int32
	interfaceCountLt            *[]int32
	interfaceCountLte           *[]int32
	interfaceCountN             *[]int32
	interfaces                  *bool
	inventoryItemCount          *[]int32
	inventoryItemCountEmpty     *bool
	inventoryItemCountGt        *[]int32
	inventoryItemCountGte       *[]int32
	inventoryItemCountLt        *[]int32
	inventoryItemCountLte       *[]int32
	inventoryItemCountN         *[]int32
	isFullDepth                 *bool
	lastUpdated                 *[]time.Time
	lastUpdatedEmpty            *[]time.Time
	lastUpdatedGt               *[]time.Time
	lastUpdatedGte              *[]time.Time
	lastUpdatedLt               *[]time.Time
	lastUpdatedLte              *[]time.Time
	lastUpdatedN                *[]time.Time
	latitude                    *[]float64
	latitudeEmpty               *bool
	latitudeGt                  *[]float64
	latitudeGte                 *[]float64
	latitudeLt                  *[]float64
	latitudeLte                 *[]float64
	latitudeN                   *[]float64
	limit                       *int32
	localContextData            *bool
	locationId                  *[]string
	locationIdN                 *[]string
	longitude                   *[]float64
	longitudeEmpty              *bool
	longitudeGt                 *[]float64
	longitudeGte                *[]float64
	longitudeLt                 *[]float64
	longitudeLte                *[]float64
	longitudeN                  *[]float64
	macAddress                  *[]string
	macAddressIc                *[]string
	macAddressIe                *[]string
	macAddressIew               *[]string
	macAddressIsw               *[]string
	macAddressN                 *[]string
	macAddressNic               *[]string
	macAddressNie               *[]string
	macAddressNiew              *[]string
	macAddressNisw              *[]string
	manufacturer                *[]string
	manufacturerN               *[]string
	manufacturerId              *[]int32
	manufacturerIdN             *[]int32
	model                       *[]string
	modelN                      *[]string
	modifiedByRequest           *string
	moduleBayCount              *[]int32
	moduleBayCountEmpty         *bool
	moduleBayCountGt            *[]int32
	moduleBayCountGte           *[]int32
	moduleBayCountLt            *[]int32
	moduleBayCountLte           *[]int32
	moduleBayCountN             *[]int32
	moduleBays                  *bool
	name                        *[]string
	nameEmpty                   *bool
	nameIc                      *[]string
	nameIe                      *[]string
	nameIew                     *[]string
	nameIsw                     *[]string
	nameN                       *[]string
	nameNic                     *[]string
	nameNie                     *[]string
	nameNiew                    *[]string
	nameNisw                    *[]string
	offset                      *int32
	oobIpId                     *[]int32
	oobIpIdN                    *[]int32
	ordering                    *string
	parentBayId                 *[]int32
	parentBayIdN                *[]int32
	parentDeviceId              *[]int32
	parentDeviceIdN             *[]int32
	passThroughPorts            *bool
	platform                    *[]string
	platformN                   *[]string
	platformId                  *[]*int32
	platformIdN                 *[]*int32
	position                    *[]float64
	positionEmpty               *bool
	positionGt                  *[]float64
	positionGte                 *[]float64
	positionLt                  *[]float64
	positionLte                 *[]float64
	positionN                   *[]float64
	powerOutletCount            *[]int32
	powerOutletCountEmpty       *bool
	powerOutletCountGt          *[]int32
	powerOutletCountGte         *[]int32
	powerOutletCountLt          *[]int32
	powerOutletCountLte         *[]int32
	powerOutletCountN           *[]int32
	powerOutlets                *bool
	powerPortCount              *[]int32
	powerPortCountEmpty         *bool
	powerPortCountGt            *[]int32
	powerPortCountGte           *[]int32
	powerPortCountLt            *[]int32
	powerPortCountLte           *[]int32
	powerPortCountN             *[]int32
	powerPorts                  *bool
	primaryIp4Id                *[]int32
	primaryIp4IdN               *[]int32
	primaryIp6Id                *[]int32
	primaryIp6IdN               *[]int32
	q                           *string
	rackId                      *[]int32
	rackIdN                     *[]int32
	rearPortCount               *[]int32
	rearPortCountEmpty          *bool
	rearPortCountGt             *[]int32
	rearPortCountGte            *[]int32
	rearPortCountLt             *[]int32
	rearPortCountLte            *[]int32
	rearPortCountN              *[]int32
	region                      *[]string
	regionN                     *[]string
	regionId                    *[]string
	regionIdN                   *[]string
	role                        *[]string
	roleN                       *[]string
	roleId                      *[]int32
	roleIdN                     *[]int32
	serial                      *[]string
	serialEmpty                 *bool
	serialIc                    *[]string
	serialIe                    *[]string
	serialIew                   *[]string
	serialIsw                   *[]string
	serialN                     *[]string
	serialNic                   *[]string
	serialNie                   *[]string
	serialNiew                  *[]string
	serialNisw                  *[]string
	site                        *[]string
	siteN                       *[]string
	siteGroup                   *[]string
	siteGroupN                  *[]string
	siteGroupId                 *[]string
	siteGroupIdN                *[]string
	siteId                      *[]int32
	siteIdN                     *[]int32
	status                      *[]string
	statusN                     *[]string
	tag                         *[]string
	tagN                        *[]string
	tenant                      *[]string
	tenantN                     *[]string
	tenantGroup                 *[]string
	tenantGroupN                *[]string
	tenantGroupId               *[]string
	tenantGroupIdN              *[]string
	tenantId                    *[]*int32
	tenantIdN                   *[]*int32
	updatedByRequest            *string
	vcPosition                  *[]int32
	vcPositionEmpty             *bool
	vcPositionGt                *[]int32
	vcPositionGte               *[]int32
	vcPositionLt                *[]int32
	vcPositionLte               *[]int32
	vcPositionN                 *[]int32
	vcPriority                  *[]int32
	vcPriorityEmpty             *bool
	vcPriorityGt                *[]int32
	vcPriorityGte               *[]int32
	vcPriorityLt                *[]int32
	vcPriorityLte               *[]int32
	vcPriorityN                 *[]int32
	virtualChassisId            *[]int32
	virtualChassisIdN           *[]int32
	virtualChassisMember        *bool
}

// * &#x60;front-to-rear&#x60; - Front to rear * &#x60;rear-to-front&#x60; - Rear to front * &#x60;left-to-right&#x60; - Left to right * &#x60;right-to-left&#x60; - Right to left * &#x60;side-to-rear&#x60; - Side to rear * &#x60;passive&#x60; - Passive * &#x60;mixed&#x60; - Mixed
func (r ApiDcimDevicesListRequest) Airflow(airflow DcimDeviceTypesListAirflowParameter) ApiDcimDevicesListRequest {
	r.airflow = &airflow
	return r
}

// * &#x60;front-to-rear&#x60; - Front to rear * &#x60;rear-to-front&#x60; - Rear to front * &#x60;left-to-right&#x60; - Left to right * &#x60;right-to-left&#x60; - Right to left * &#x60;side-to-rear&#x60; - Side to rear * &#x60;passive&#x60; - Passive * &#x60;mixed&#x60; - Mixed
func (r ApiDcimDevicesListRequest) AirflowN(airflowN DcimDeviceTypesListAirflowParameter) ApiDcimDevicesListRequest {
	r.airflowN = &airflowN
	return r
}

func (r ApiDcimDevicesListRequest) AssetTag(assetTag []string) ApiDcimDevicesListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagEmpty(assetTagEmpty bool) ApiDcimDevicesListRequest {
	r.assetTagEmpty = &assetTagEmpty
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagIc(assetTagIc []string) ApiDcimDevicesListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagIe(assetTagIe []string) ApiDcimDevicesListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagIew(assetTagIew []string) ApiDcimDevicesListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagIsw(assetTagIsw []string) ApiDcimDevicesListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagN(assetTagN []string) ApiDcimDevicesListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNic(assetTagNic []string) ApiDcimDevicesListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNie(assetTagNie []string) ApiDcimDevicesListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNiew(assetTagNiew []string) ApiDcimDevicesListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNisw(assetTagNisw []string) ApiDcimDevicesListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

// Cluster group (slug)
func (r ApiDcimDevicesListRequest) ClusterGroup(clusterGroup []string) ApiDcimDevicesListRequest {
	r.clusterGroup = &clusterGroup
	return r
}

// Cluster group (slug)
func (r ApiDcimDevicesListRequest) ClusterGroupN(clusterGroupN []string) ApiDcimDevicesListRequest {
	r.clusterGroupN = &clusterGroupN
	return r
}

// Cluster group (ID)
func (r ApiDcimDevicesListRequest) ClusterGroupId(clusterGroupId []int32) ApiDcimDevicesListRequest {
	r.clusterGroupId = &clusterGroupId
	return r
}

// Cluster group (ID)
func (r ApiDcimDevicesListRequest) ClusterGroupIdN(clusterGroupIdN []int32) ApiDcimDevicesListRequest {
	r.clusterGroupIdN = &clusterGroupIdN
	return r
}

// VM cluster (ID)
func (r ApiDcimDevicesListRequest) ClusterId(clusterId []*int32) ApiDcimDevicesListRequest {
	r.clusterId = &clusterId
	return r
}

// VM cluster (ID)
func (r ApiDcimDevicesListRequest) ClusterIdN(clusterIdN []*int32) ApiDcimDevicesListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

// Config template (ID)
func (r ApiDcimDevicesListRequest) ConfigTemplateId(configTemplateId []*int32) ApiDcimDevicesListRequest {
	r.configTemplateId = &configTemplateId
	return r
}

// Config template (ID)
func (r ApiDcimDevicesListRequest) ConfigTemplateIdN(configTemplateIdN []*int32) ApiDcimDevicesListRequest {
	r.configTemplateIdN = &configTemplateIdN
	return r
}

func (r ApiDcimDevicesListRequest) ConsolePortCount(consolePortCount []int32) ApiDcimDevicesListRequest {
	r.consolePortCount = &consolePortCount
	return r
}

func (r ApiDcimDevicesListRequest) ConsolePortCountEmpty(consolePortCountEmpty bool) ApiDcimDevicesListRequest {
	r.consolePortCountEmpty = &consolePortCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) ConsolePortCountGt(consolePortCountGt []int32) ApiDcimDevicesListRequest {
	r.consolePortCountGt = &consolePortCountGt
	return r
}

func (r ApiDcimDevicesListRequest) ConsolePortCountGte(consolePortCountGte []int32) ApiDcimDevicesListRequest {
	r.consolePortCountGte = &consolePortCountGte
	return r
}

func (r ApiDcimDevicesListRequest) ConsolePortCountLt(consolePortCountLt []int32) ApiDcimDevicesListRequest {
	r.consolePortCountLt = &consolePortCountLt
	return r
}

func (r ApiDcimDevicesListRequest) ConsolePortCountLte(consolePortCountLte []int32) ApiDcimDevicesListRequest {
	r.consolePortCountLte = &consolePortCountLte
	return r
}

func (r ApiDcimDevicesListRequest) ConsolePortCountN(consolePortCountN []int32) ApiDcimDevicesListRequest {
	r.consolePortCountN = &consolePortCountN
	return r
}

// Has console ports
func (r ApiDcimDevicesListRequest) ConsolePorts(consolePorts bool) ApiDcimDevicesListRequest {
	r.consolePorts = &consolePorts
	return r
}

func (r ApiDcimDevicesListRequest) ConsoleServerPortCount(consoleServerPortCount []int32) ApiDcimDevicesListRequest {
	r.consoleServerPortCount = &consoleServerPortCount
	return r
}

func (r ApiDcimDevicesListRequest) ConsoleServerPortCountEmpty(consoleServerPortCountEmpty bool) ApiDcimDevicesListRequest {
	r.consoleServerPortCountEmpty = &consoleServerPortCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) ConsoleServerPortCountGt(consoleServerPortCountGt []int32) ApiDcimDevicesListRequest {
	r.consoleServerPortCountGt = &consoleServerPortCountGt
	return r
}

func (r ApiDcimDevicesListRequest) ConsoleServerPortCountGte(consoleServerPortCountGte []int32) ApiDcimDevicesListRequest {
	r.consoleServerPortCountGte = &consoleServerPortCountGte
	return r
}

func (r ApiDcimDevicesListRequest) ConsoleServerPortCountLt(consoleServerPortCountLt []int32) ApiDcimDevicesListRequest {
	r.consoleServerPortCountLt = &consoleServerPortCountLt
	return r
}

func (r ApiDcimDevicesListRequest) ConsoleServerPortCountLte(consoleServerPortCountLte []int32) ApiDcimDevicesListRequest {
	r.consoleServerPortCountLte = &consoleServerPortCountLte
	return r
}

func (r ApiDcimDevicesListRequest) ConsoleServerPortCountN(consoleServerPortCountN []int32) ApiDcimDevicesListRequest {
	r.consoleServerPortCountN = &consoleServerPortCountN
	return r
}

// Has console server ports
func (r ApiDcimDevicesListRequest) ConsoleServerPorts(consoleServerPorts bool) ApiDcimDevicesListRequest {
	r.consoleServerPorts = &consoleServerPorts
	return r
}

// Contact
func (r ApiDcimDevicesListRequest) Contact(contact []int32) ApiDcimDevicesListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiDcimDevicesListRequest) ContactN(contactN []int32) ApiDcimDevicesListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiDcimDevicesListRequest) ContactGroup(contactGroup []string) ApiDcimDevicesListRequest {
	r.contactGroup = &contactGroup
	return r
}

func (r ApiDcimDevicesListRequest) ContactGroupN(contactGroupN []string) ApiDcimDevicesListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiDcimDevicesListRequest) ContactRole(contactRole []int32) ApiDcimDevicesListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiDcimDevicesListRequest) ContactRoleN(contactRoleN []int32) ApiDcimDevicesListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiDcimDevicesListRequest) Created(created []time.Time) ApiDcimDevicesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimDevicesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimDevicesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimDevicesListRequest) CreatedGt(createdGt []time.Time) ApiDcimDevicesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimDevicesListRequest) CreatedGte(createdGte []time.Time) ApiDcimDevicesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimDevicesListRequest) CreatedLt(createdLt []time.Time) ApiDcimDevicesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimDevicesListRequest) CreatedLte(createdLte []time.Time) ApiDcimDevicesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimDevicesListRequest) CreatedN(createdN []time.Time) ApiDcimDevicesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimDevicesListRequest) CreatedByRequest(createdByRequest string) ApiDcimDevicesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimDevicesListRequest) Description(description []string) ApiDcimDevicesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimDevicesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionIc(descriptionIc []string) ApiDcimDevicesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionIe(descriptionIe []string) ApiDcimDevicesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionIew(descriptionIew []string) ApiDcimDevicesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimDevicesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionN(descriptionN []string) ApiDcimDevicesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionNic(descriptionNic []string) ApiDcimDevicesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionNie(descriptionNie []string) ApiDcimDevicesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimDevicesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimDevicesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimDevicesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimDevicesListRequest) DeviceBayCount(deviceBayCount []int32) ApiDcimDevicesListRequest {
	r.deviceBayCount = &deviceBayCount
	return r
}

func (r ApiDcimDevicesListRequest) DeviceBayCountEmpty(deviceBayCountEmpty bool) ApiDcimDevicesListRequest {
	r.deviceBayCountEmpty = &deviceBayCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) DeviceBayCountGt(deviceBayCountGt []int32) ApiDcimDevicesListRequest {
	r.deviceBayCountGt = &deviceBayCountGt
	return r
}

func (r ApiDcimDevicesListRequest) DeviceBayCountGte(deviceBayCountGte []int32) ApiDcimDevicesListRequest {
	r.deviceBayCountGte = &deviceBayCountGte
	return r
}

func (r ApiDcimDevicesListRequest) DeviceBayCountLt(deviceBayCountLt []int32) ApiDcimDevicesListRequest {
	r.deviceBayCountLt = &deviceBayCountLt
	return r
}

func (r ApiDcimDevicesListRequest) DeviceBayCountLte(deviceBayCountLte []int32) ApiDcimDevicesListRequest {
	r.deviceBayCountLte = &deviceBayCountLte
	return r
}

func (r ApiDcimDevicesListRequest) DeviceBayCountN(deviceBayCountN []int32) ApiDcimDevicesListRequest {
	r.deviceBayCountN = &deviceBayCountN
	return r
}

// Has device bays
func (r ApiDcimDevicesListRequest) DeviceBays(deviceBays bool) ApiDcimDevicesListRequest {
	r.deviceBays = &deviceBays
	return r
}

// Device type (slug)
func (r ApiDcimDevicesListRequest) DeviceType(deviceType []string) ApiDcimDevicesListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (slug)
func (r ApiDcimDevicesListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimDevicesListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimDevicesListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimDevicesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimDevicesListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimDevicesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// * &#x60;front&#x60; - Front * &#x60;rear&#x60; - Rear
func (r ApiDcimDevicesListRequest) Face(face RackFace) ApiDcimDevicesListRequest {
	r.face = &face
	return r
}

// * &#x60;front&#x60; - Front * &#x60;rear&#x60; - Rear
func (r ApiDcimDevicesListRequest) FaceN(faceN RackFace) ApiDcimDevicesListRequest {
	r.faceN = &faceN
	return r
}

func (r ApiDcimDevicesListRequest) FrontPortCount(frontPortCount []int32) ApiDcimDevicesListRequest {
	r.frontPortCount = &frontPortCount
	return r
}

func (r ApiDcimDevicesListRequest) FrontPortCountEmpty(frontPortCountEmpty bool) ApiDcimDevicesListRequest {
	r.frontPortCountEmpty = &frontPortCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) FrontPortCountGt(frontPortCountGt []int32) ApiDcimDevicesListRequest {
	r.frontPortCountGt = &frontPortCountGt
	return r
}

func (r ApiDcimDevicesListRequest) FrontPortCountGte(frontPortCountGte []int32) ApiDcimDevicesListRequest {
	r.frontPortCountGte = &frontPortCountGte
	return r
}

func (r ApiDcimDevicesListRequest) FrontPortCountLt(frontPortCountLt []int32) ApiDcimDevicesListRequest {
	r.frontPortCountLt = &frontPortCountLt
	return r
}

func (r ApiDcimDevicesListRequest) FrontPortCountLte(frontPortCountLte []int32) ApiDcimDevicesListRequest {
	r.frontPortCountLte = &frontPortCountLte
	return r
}

func (r ApiDcimDevicesListRequest) FrontPortCountN(frontPortCountN []int32) ApiDcimDevicesListRequest {
	r.frontPortCountN = &frontPortCountN
	return r
}

// Has an out-of-band IP
func (r ApiDcimDevicesListRequest) HasOobIp(hasOobIp bool) ApiDcimDevicesListRequest {
	r.hasOobIp = &hasOobIp
	return r
}

// Has a primary IP
func (r ApiDcimDevicesListRequest) HasPrimaryIp(hasPrimaryIp bool) ApiDcimDevicesListRequest {
	r.hasPrimaryIp = &hasPrimaryIp
	return r
}

// Has virtual device context
func (r ApiDcimDevicesListRequest) HasVirtualDeviceContext(hasVirtualDeviceContext bool) ApiDcimDevicesListRequest {
	r.hasVirtualDeviceContext = &hasVirtualDeviceContext
	return r
}

func (r ApiDcimDevicesListRequest) Id(id []int32) ApiDcimDevicesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDevicesListRequest) IdEmpty(idEmpty bool) ApiDcimDevicesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimDevicesListRequest) IdGt(idGt []int32) ApiDcimDevicesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimDevicesListRequest) IdGte(idGte []int32) ApiDcimDevicesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimDevicesListRequest) IdLt(idLt []int32) ApiDcimDevicesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimDevicesListRequest) IdLte(idLte []int32) ApiDcimDevicesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimDevicesListRequest) IdN(idN []int32) ApiDcimDevicesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimDevicesListRequest) InterfaceCount(interfaceCount []int32) ApiDcimDevicesListRequest {
	r.interfaceCount = &interfaceCount
	return r
}

func (r ApiDcimDevicesListRequest) InterfaceCountEmpty(interfaceCountEmpty bool) ApiDcimDevicesListRequest {
	r.interfaceCountEmpty = &interfaceCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) InterfaceCountGt(interfaceCountGt []int32) ApiDcimDevicesListRequest {
	r.interfaceCountGt = &interfaceCountGt
	return r
}

func (r ApiDcimDevicesListRequest) InterfaceCountGte(interfaceCountGte []int32) ApiDcimDevicesListRequest {
	r.interfaceCountGte = &interfaceCountGte
	return r
}

func (r ApiDcimDevicesListRequest) InterfaceCountLt(interfaceCountLt []int32) ApiDcimDevicesListRequest {
	r.interfaceCountLt = &interfaceCountLt
	return r
}

func (r ApiDcimDevicesListRequest) InterfaceCountLte(interfaceCountLte []int32) ApiDcimDevicesListRequest {
	r.interfaceCountLte = &interfaceCountLte
	return r
}

func (r ApiDcimDevicesListRequest) InterfaceCountN(interfaceCountN []int32) ApiDcimDevicesListRequest {
	r.interfaceCountN = &interfaceCountN
	return r
}

// Has interfaces
func (r ApiDcimDevicesListRequest) Interfaces(interfaces bool) ApiDcimDevicesListRequest {
	r.interfaces = &interfaces
	return r
}

func (r ApiDcimDevicesListRequest) InventoryItemCount(inventoryItemCount []int32) ApiDcimDevicesListRequest {
	r.inventoryItemCount = &inventoryItemCount
	return r
}

func (r ApiDcimDevicesListRequest) InventoryItemCountEmpty(inventoryItemCountEmpty bool) ApiDcimDevicesListRequest {
	r.inventoryItemCountEmpty = &inventoryItemCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) InventoryItemCountGt(inventoryItemCountGt []int32) ApiDcimDevicesListRequest {
	r.inventoryItemCountGt = &inventoryItemCountGt
	return r
}

func (r ApiDcimDevicesListRequest) InventoryItemCountGte(inventoryItemCountGte []int32) ApiDcimDevicesListRequest {
	r.inventoryItemCountGte = &inventoryItemCountGte
	return r
}

func (r ApiDcimDevicesListRequest) InventoryItemCountLt(inventoryItemCountLt []int32) ApiDcimDevicesListRequest {
	r.inventoryItemCountLt = &inventoryItemCountLt
	return r
}

func (r ApiDcimDevicesListRequest) InventoryItemCountLte(inventoryItemCountLte []int32) ApiDcimDevicesListRequest {
	r.inventoryItemCountLte = &inventoryItemCountLte
	return r
}

func (r ApiDcimDevicesListRequest) InventoryItemCountN(inventoryItemCountN []int32) ApiDcimDevicesListRequest {
	r.inventoryItemCountN = &inventoryItemCountN
	return r
}

// Is full depth
func (r ApiDcimDevicesListRequest) IsFullDepth(isFullDepth bool) ApiDcimDevicesListRequest {
	r.isFullDepth = &isFullDepth
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimDevicesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimDevicesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimDevicesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimDevicesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimDevicesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimDevicesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimDevicesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

func (r ApiDcimDevicesListRequest) Latitude(latitude []float64) ApiDcimDevicesListRequest {
	r.latitude = &latitude
	return r
}

func (r ApiDcimDevicesListRequest) LatitudeEmpty(latitudeEmpty bool) ApiDcimDevicesListRequest {
	r.latitudeEmpty = &latitudeEmpty
	return r
}

func (r ApiDcimDevicesListRequest) LatitudeGt(latitudeGt []float64) ApiDcimDevicesListRequest {
	r.latitudeGt = &latitudeGt
	return r
}

func (r ApiDcimDevicesListRequest) LatitudeGte(latitudeGte []float64) ApiDcimDevicesListRequest {
	r.latitudeGte = &latitudeGte
	return r
}

func (r ApiDcimDevicesListRequest) LatitudeLt(latitudeLt []float64) ApiDcimDevicesListRequest {
	r.latitudeLt = &latitudeLt
	return r
}

func (r ApiDcimDevicesListRequest) LatitudeLte(latitudeLte []float64) ApiDcimDevicesListRequest {
	r.latitudeLte = &latitudeLte
	return r
}

func (r ApiDcimDevicesListRequest) LatitudeN(latitudeN []float64) ApiDcimDevicesListRequest {
	r.latitudeN = &latitudeN
	return r
}

// Number of results to return per page.
func (r ApiDcimDevicesListRequest) Limit(limit int32) ApiDcimDevicesListRequest {
	r.limit = &limit
	return r
}

// Has local config context data
func (r ApiDcimDevicesListRequest) LocalContextData(localContextData bool) ApiDcimDevicesListRequest {
	r.localContextData = &localContextData
	return r
}

func (r ApiDcimDevicesListRequest) LocationId(locationId []string) ApiDcimDevicesListRequest {
	r.locationId = &locationId
	return r
}

func (r ApiDcimDevicesListRequest) LocationIdN(locationIdN []string) ApiDcimDevicesListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimDevicesListRequest) Longitude(longitude []float64) ApiDcimDevicesListRequest {
	r.longitude = &longitude
	return r
}

func (r ApiDcimDevicesListRequest) LongitudeEmpty(longitudeEmpty bool) ApiDcimDevicesListRequest {
	r.longitudeEmpty = &longitudeEmpty
	return r
}

func (r ApiDcimDevicesListRequest) LongitudeGt(longitudeGt []float64) ApiDcimDevicesListRequest {
	r.longitudeGt = &longitudeGt
	return r
}

func (r ApiDcimDevicesListRequest) LongitudeGte(longitudeGte []float64) ApiDcimDevicesListRequest {
	r.longitudeGte = &longitudeGte
	return r
}

func (r ApiDcimDevicesListRequest) LongitudeLt(longitudeLt []float64) ApiDcimDevicesListRequest {
	r.longitudeLt = &longitudeLt
	return r
}

func (r ApiDcimDevicesListRequest) LongitudeLte(longitudeLte []float64) ApiDcimDevicesListRequest {
	r.longitudeLte = &longitudeLte
	return r
}

func (r ApiDcimDevicesListRequest) LongitudeN(longitudeN []float64) ApiDcimDevicesListRequest {
	r.longitudeN = &longitudeN
	return r
}

func (r ApiDcimDevicesListRequest) MacAddress(macAddress []string) ApiDcimDevicesListRequest {
	r.macAddress = &macAddress
	return r
}

func (r ApiDcimDevicesListRequest) MacAddressIc(macAddressIc []string) ApiDcimDevicesListRequest {
	r.macAddressIc = &macAddressIc
	return r
}

func (r ApiDcimDevicesListRequest) MacAddressIe(macAddressIe []string) ApiDcimDevicesListRequest {
	r.macAddressIe = &macAddressIe
	return r
}

func (r ApiDcimDevicesListRequest) MacAddressIew(macAddressIew []string) ApiDcimDevicesListRequest {
	r.macAddressIew = &macAddressIew
	return r
}

func (r ApiDcimDevicesListRequest) MacAddressIsw(macAddressIsw []string) ApiDcimDevicesListRequest {
	r.macAddressIsw = &macAddressIsw
	return r
}

func (r ApiDcimDevicesListRequest) MacAddressN(macAddressN []string) ApiDcimDevicesListRequest {
	r.macAddressN = &macAddressN
	return r
}

func (r ApiDcimDevicesListRequest) MacAddressNic(macAddressNic []string) ApiDcimDevicesListRequest {
	r.macAddressNic = &macAddressNic
	return r
}

func (r ApiDcimDevicesListRequest) MacAddressNie(macAddressNie []string) ApiDcimDevicesListRequest {
	r.macAddressNie = &macAddressNie
	return r
}

func (r ApiDcimDevicesListRequest) MacAddressNiew(macAddressNiew []string) ApiDcimDevicesListRequest {
	r.macAddressNiew = &macAddressNiew
	return r
}

func (r ApiDcimDevicesListRequest) MacAddressNisw(macAddressNisw []string) ApiDcimDevicesListRequest {
	r.macAddressNisw = &macAddressNisw
	return r
}

// Manufacturer (slug)
func (r ApiDcimDevicesListRequest) Manufacturer(manufacturer []string) ApiDcimDevicesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimDevicesListRequest) ManufacturerN(manufacturerN []string) ApiDcimDevicesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimDevicesListRequest) ManufacturerId(manufacturerId []int32) ApiDcimDevicesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimDevicesListRequest) ManufacturerIdN(manufacturerIdN []int32) ApiDcimDevicesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

// Device model (slug)
func (r ApiDcimDevicesListRequest) Model(model []string) ApiDcimDevicesListRequest {
	r.model = &model
	return r
}

// Device model (slug)
func (r ApiDcimDevicesListRequest) ModelN(modelN []string) ApiDcimDevicesListRequest {
	r.modelN = &modelN
	return r
}

func (r ApiDcimDevicesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimDevicesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimDevicesListRequest) ModuleBayCount(moduleBayCount []int32) ApiDcimDevicesListRequest {
	r.moduleBayCount = &moduleBayCount
	return r
}

func (r ApiDcimDevicesListRequest) ModuleBayCountEmpty(moduleBayCountEmpty bool) ApiDcimDevicesListRequest {
	r.moduleBayCountEmpty = &moduleBayCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) ModuleBayCountGt(moduleBayCountGt []int32) ApiDcimDevicesListRequest {
	r.moduleBayCountGt = &moduleBayCountGt
	return r
}

func (r ApiDcimDevicesListRequest) ModuleBayCountGte(moduleBayCountGte []int32) ApiDcimDevicesListRequest {
	r.moduleBayCountGte = &moduleBayCountGte
	return r
}

func (r ApiDcimDevicesListRequest) ModuleBayCountLt(moduleBayCountLt []int32) ApiDcimDevicesListRequest {
	r.moduleBayCountLt = &moduleBayCountLt
	return r
}

func (r ApiDcimDevicesListRequest) ModuleBayCountLte(moduleBayCountLte []int32) ApiDcimDevicesListRequest {
	r.moduleBayCountLte = &moduleBayCountLte
	return r
}

func (r ApiDcimDevicesListRequest) ModuleBayCountN(moduleBayCountN []int32) ApiDcimDevicesListRequest {
	r.moduleBayCountN = &moduleBayCountN
	return r
}

// Has module bays
func (r ApiDcimDevicesListRequest) ModuleBays(moduleBays bool) ApiDcimDevicesListRequest {
	r.moduleBays = &moduleBays
	return r
}

func (r ApiDcimDevicesListRequest) Name(name []string) ApiDcimDevicesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimDevicesListRequest) NameEmpty(nameEmpty bool) ApiDcimDevicesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimDevicesListRequest) NameIc(nameIc []string) ApiDcimDevicesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimDevicesListRequest) NameIe(nameIe []string) ApiDcimDevicesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimDevicesListRequest) NameIew(nameIew []string) ApiDcimDevicesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimDevicesListRequest) NameIsw(nameIsw []string) ApiDcimDevicesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimDevicesListRequest) NameN(nameN []string) ApiDcimDevicesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimDevicesListRequest) NameNic(nameNic []string) ApiDcimDevicesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimDevicesListRequest) NameNie(nameNie []string) ApiDcimDevicesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimDevicesListRequest) NameNiew(nameNiew []string) ApiDcimDevicesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimDevicesListRequest) NameNisw(nameNisw []string) ApiDcimDevicesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDevicesListRequest) Offset(offset int32) ApiDcimDevicesListRequest {
	r.offset = &offset
	return r
}

// OOB IP (ID)
func (r ApiDcimDevicesListRequest) OobIpId(oobIpId []int32) ApiDcimDevicesListRequest {
	r.oobIpId = &oobIpId
	return r
}

// OOB IP (ID)
func (r ApiDcimDevicesListRequest) OobIpIdN(oobIpIdN []int32) ApiDcimDevicesListRequest {
	r.oobIpIdN = &oobIpIdN
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimDevicesListRequest) Ordering(ordering string) ApiDcimDevicesListRequest {
	r.ordering = &ordering
	return r
}

// Parent bay (ID)
func (r ApiDcimDevicesListRequest) ParentBayId(parentBayId []int32) ApiDcimDevicesListRequest {
	r.parentBayId = &parentBayId
	return r
}

// Parent bay (ID)
func (r ApiDcimDevicesListRequest) ParentBayIdN(parentBayIdN []int32) ApiDcimDevicesListRequest {
	r.parentBayIdN = &parentBayIdN
	return r
}

// Parent Device (ID)
func (r ApiDcimDevicesListRequest) ParentDeviceId(parentDeviceId []int32) ApiDcimDevicesListRequest {
	r.parentDeviceId = &parentDeviceId
	return r
}

// Parent Device (ID)
func (r ApiDcimDevicesListRequest) ParentDeviceIdN(parentDeviceIdN []int32) ApiDcimDevicesListRequest {
	r.parentDeviceIdN = &parentDeviceIdN
	return r
}

// Has pass-through ports
func (r ApiDcimDevicesListRequest) PassThroughPorts(passThroughPorts bool) ApiDcimDevicesListRequest {
	r.passThroughPorts = &passThroughPorts
	return r
}

// Platform (slug)
func (r ApiDcimDevicesListRequest) Platform(platform []string) ApiDcimDevicesListRequest {
	r.platform = &platform
	return r
}

// Platform (slug)
func (r ApiDcimDevicesListRequest) PlatformN(platformN []string) ApiDcimDevicesListRequest {
	r.platformN = &platformN
	return r
}

// Platform (ID)
func (r ApiDcimDevicesListRequest) PlatformId(platformId []*int32) ApiDcimDevicesListRequest {
	r.platformId = &platformId
	return r
}

// Platform (ID)
func (r ApiDcimDevicesListRequest) PlatformIdN(platformIdN []*int32) ApiDcimDevicesListRequest {
	r.platformIdN = &platformIdN
	return r
}

func (r ApiDcimDevicesListRequest) Position(position []float64) ApiDcimDevicesListRequest {
	r.position = &position
	return r
}

func (r ApiDcimDevicesListRequest) PositionEmpty(positionEmpty bool) ApiDcimDevicesListRequest {
	r.positionEmpty = &positionEmpty
	return r
}

func (r ApiDcimDevicesListRequest) PositionGt(positionGt []float64) ApiDcimDevicesListRequest {
	r.positionGt = &positionGt
	return r
}

func (r ApiDcimDevicesListRequest) PositionGte(positionGte []float64) ApiDcimDevicesListRequest {
	r.positionGte = &positionGte
	return r
}

func (r ApiDcimDevicesListRequest) PositionLt(positionLt []float64) ApiDcimDevicesListRequest {
	r.positionLt = &positionLt
	return r
}

func (r ApiDcimDevicesListRequest) PositionLte(positionLte []float64) ApiDcimDevicesListRequest {
	r.positionLte = &positionLte
	return r
}

func (r ApiDcimDevicesListRequest) PositionN(positionN []float64) ApiDcimDevicesListRequest {
	r.positionN = &positionN
	return r
}

func (r ApiDcimDevicesListRequest) PowerOutletCount(powerOutletCount []int32) ApiDcimDevicesListRequest {
	r.powerOutletCount = &powerOutletCount
	return r
}

func (r ApiDcimDevicesListRequest) PowerOutletCountEmpty(powerOutletCountEmpty bool) ApiDcimDevicesListRequest {
	r.powerOutletCountEmpty = &powerOutletCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) PowerOutletCountGt(powerOutletCountGt []int32) ApiDcimDevicesListRequest {
	r.powerOutletCountGt = &powerOutletCountGt
	return r
}

func (r ApiDcimDevicesListRequest) PowerOutletCountGte(powerOutletCountGte []int32) ApiDcimDevicesListRequest {
	r.powerOutletCountGte = &powerOutletCountGte
	return r
}

func (r ApiDcimDevicesListRequest) PowerOutletCountLt(powerOutletCountLt []int32) ApiDcimDevicesListRequest {
	r.powerOutletCountLt = &powerOutletCountLt
	return r
}

func (r ApiDcimDevicesListRequest) PowerOutletCountLte(powerOutletCountLte []int32) ApiDcimDevicesListRequest {
	r.powerOutletCountLte = &powerOutletCountLte
	return r
}

func (r ApiDcimDevicesListRequest) PowerOutletCountN(powerOutletCountN []int32) ApiDcimDevicesListRequest {
	r.powerOutletCountN = &powerOutletCountN
	return r
}

// Has power outlets
func (r ApiDcimDevicesListRequest) PowerOutlets(powerOutlets bool) ApiDcimDevicesListRequest {
	r.powerOutlets = &powerOutlets
	return r
}

func (r ApiDcimDevicesListRequest) PowerPortCount(powerPortCount []int32) ApiDcimDevicesListRequest {
	r.powerPortCount = &powerPortCount
	return r
}

func (r ApiDcimDevicesListRequest) PowerPortCountEmpty(powerPortCountEmpty bool) ApiDcimDevicesListRequest {
	r.powerPortCountEmpty = &powerPortCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) PowerPortCountGt(powerPortCountGt []int32) ApiDcimDevicesListRequest {
	r.powerPortCountGt = &powerPortCountGt
	return r
}

func (r ApiDcimDevicesListRequest) PowerPortCountGte(powerPortCountGte []int32) ApiDcimDevicesListRequest {
	r.powerPortCountGte = &powerPortCountGte
	return r
}

func (r ApiDcimDevicesListRequest) PowerPortCountLt(powerPortCountLt []int32) ApiDcimDevicesListRequest {
	r.powerPortCountLt = &powerPortCountLt
	return r
}

func (r ApiDcimDevicesListRequest) PowerPortCountLte(powerPortCountLte []int32) ApiDcimDevicesListRequest {
	r.powerPortCountLte = &powerPortCountLte
	return r
}

func (r ApiDcimDevicesListRequest) PowerPortCountN(powerPortCountN []int32) ApiDcimDevicesListRequest {
	r.powerPortCountN = &powerPortCountN
	return r
}

// Has power ports
func (r ApiDcimDevicesListRequest) PowerPorts(powerPorts bool) ApiDcimDevicesListRequest {
	r.powerPorts = &powerPorts
	return r
}

// Primary IPv4 (ID)
func (r ApiDcimDevicesListRequest) PrimaryIp4Id(primaryIp4Id []int32) ApiDcimDevicesListRequest {
	r.primaryIp4Id = &primaryIp4Id
	return r
}

// Primary IPv4 (ID)
func (r ApiDcimDevicesListRequest) PrimaryIp4IdN(primaryIp4IdN []int32) ApiDcimDevicesListRequest {
	r.primaryIp4IdN = &primaryIp4IdN
	return r
}

// Primary IPv6 (ID)
func (r ApiDcimDevicesListRequest) PrimaryIp6Id(primaryIp6Id []int32) ApiDcimDevicesListRequest {
	r.primaryIp6Id = &primaryIp6Id
	return r
}

// Primary IPv6 (ID)
func (r ApiDcimDevicesListRequest) PrimaryIp6IdN(primaryIp6IdN []int32) ApiDcimDevicesListRequest {
	r.primaryIp6IdN = &primaryIp6IdN
	return r
}

// Search
func (r ApiDcimDevicesListRequest) Q(q string) ApiDcimDevicesListRequest {
	r.q = &q
	return r
}

// Rack (ID)
func (r ApiDcimDevicesListRequest) RackId(rackId []int32) ApiDcimDevicesListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimDevicesListRequest) RackIdN(rackIdN []int32) ApiDcimDevicesListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimDevicesListRequest) RearPortCount(rearPortCount []int32) ApiDcimDevicesListRequest {
	r.rearPortCount = &rearPortCount
	return r
}

func (r ApiDcimDevicesListRequest) RearPortCountEmpty(rearPortCountEmpty bool) ApiDcimDevicesListRequest {
	r.rearPortCountEmpty = &rearPortCountEmpty
	return r
}

func (r ApiDcimDevicesListRequest) RearPortCountGt(rearPortCountGt []int32) ApiDcimDevicesListRequest {
	r.rearPortCountGt = &rearPortCountGt
	return r
}

func (r ApiDcimDevicesListRequest) RearPortCountGte(rearPortCountGte []int32) ApiDcimDevicesListRequest {
	r.rearPortCountGte = &rearPortCountGte
	return r
}

func (r ApiDcimDevicesListRequest) RearPortCountLt(rearPortCountLt []int32) ApiDcimDevicesListRequest {
	r.rearPortCountLt = &rearPortCountLt
	return r
}

func (r ApiDcimDevicesListRequest) RearPortCountLte(rearPortCountLte []int32) ApiDcimDevicesListRequest {
	r.rearPortCountLte = &rearPortCountLte
	return r
}

func (r ApiDcimDevicesListRequest) RearPortCountN(rearPortCountN []int32) ApiDcimDevicesListRequest {
	r.rearPortCountN = &rearPortCountN
	return r
}

func (r ApiDcimDevicesListRequest) Region(region []string) ApiDcimDevicesListRequest {
	r.region = &region
	return r
}

func (r ApiDcimDevicesListRequest) RegionN(regionN []string) ApiDcimDevicesListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimDevicesListRequest) RegionId(regionId []string) ApiDcimDevicesListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimDevicesListRequest) RegionIdN(regionIdN []string) ApiDcimDevicesListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiDcimDevicesListRequest) Role(role []string) ApiDcimDevicesListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiDcimDevicesListRequest) RoleN(roleN []string) ApiDcimDevicesListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiDcimDevicesListRequest) RoleId(roleId []int32) ApiDcimDevicesListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiDcimDevicesListRequest) RoleIdN(roleIdN []int32) ApiDcimDevicesListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiDcimDevicesListRequest) Serial(serial []string) ApiDcimDevicesListRequest {
	r.serial = &serial
	return r
}

func (r ApiDcimDevicesListRequest) SerialEmpty(serialEmpty bool) ApiDcimDevicesListRequest {
	r.serialEmpty = &serialEmpty
	return r
}

func (r ApiDcimDevicesListRequest) SerialIc(serialIc []string) ApiDcimDevicesListRequest {
	r.serialIc = &serialIc
	return r
}

func (r ApiDcimDevicesListRequest) SerialIe(serialIe []string) ApiDcimDevicesListRequest {
	r.serialIe = &serialIe
	return r
}

func (r ApiDcimDevicesListRequest) SerialIew(serialIew []string) ApiDcimDevicesListRequest {
	r.serialIew = &serialIew
	return r
}

func (r ApiDcimDevicesListRequest) SerialIsw(serialIsw []string) ApiDcimDevicesListRequest {
	r.serialIsw = &serialIsw
	return r
}

func (r ApiDcimDevicesListRequest) SerialN(serialN []string) ApiDcimDevicesListRequest {
	r.serialN = &serialN
	return r
}

func (r ApiDcimDevicesListRequest) SerialNic(serialNic []string) ApiDcimDevicesListRequest {
	r.serialNic = &serialNic
	return r
}

func (r ApiDcimDevicesListRequest) SerialNie(serialNie []string) ApiDcimDevicesListRequest {
	r.serialNie = &serialNie
	return r
}

func (r ApiDcimDevicesListRequest) SerialNiew(serialNiew []string) ApiDcimDevicesListRequest {
	r.serialNiew = &serialNiew
	return r
}

func (r ApiDcimDevicesListRequest) SerialNisw(serialNisw []string) ApiDcimDevicesListRequest {
	r.serialNisw = &serialNisw
	return r
}

// Site name (slug)
func (r ApiDcimDevicesListRequest) Site(site []string) ApiDcimDevicesListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimDevicesListRequest) SiteN(siteN []string) ApiDcimDevicesListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimDevicesListRequest) SiteGroup(siteGroup []string) ApiDcimDevicesListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimDevicesListRequest) SiteGroupN(siteGroupN []string) ApiDcimDevicesListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimDevicesListRequest) SiteGroupId(siteGroupId []string) ApiDcimDevicesListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimDevicesListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimDevicesListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimDevicesListRequest) SiteId(siteId []int32) ApiDcimDevicesListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimDevicesListRequest) SiteIdN(siteIdN []int32) ApiDcimDevicesListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimDevicesListRequest) Status(status []string) ApiDcimDevicesListRequest {
	r.status = &status
	return r
}

func (r ApiDcimDevicesListRequest) StatusN(statusN []string) ApiDcimDevicesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimDevicesListRequest) Tag(tag []string) ApiDcimDevicesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimDevicesListRequest) TagN(tagN []string) ApiDcimDevicesListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimDevicesListRequest) Tenant(tenant []string) ApiDcimDevicesListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimDevicesListRequest) TenantN(tenantN []string) ApiDcimDevicesListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiDcimDevicesListRequest) TenantGroup(tenantGroup []string) ApiDcimDevicesListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiDcimDevicesListRequest) TenantGroupN(tenantGroupN []string) ApiDcimDevicesListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiDcimDevicesListRequest) TenantGroupId(tenantGroupId []string) ApiDcimDevicesListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiDcimDevicesListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimDevicesListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimDevicesListRequest) TenantId(tenantId []*int32) ApiDcimDevicesListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimDevicesListRequest) TenantIdN(tenantIdN []*int32) ApiDcimDevicesListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimDevicesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimDevicesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimDevicesListRequest) VcPosition(vcPosition []int32) ApiDcimDevicesListRequest {
	r.vcPosition = &vcPosition
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionEmpty(vcPositionEmpty bool) ApiDcimDevicesListRequest {
	r.vcPositionEmpty = &vcPositionEmpty
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionGt(vcPositionGt []int32) ApiDcimDevicesListRequest {
	r.vcPositionGt = &vcPositionGt
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionGte(vcPositionGte []int32) ApiDcimDevicesListRequest {
	r.vcPositionGte = &vcPositionGte
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionLt(vcPositionLt []int32) ApiDcimDevicesListRequest {
	r.vcPositionLt = &vcPositionLt
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionLte(vcPositionLte []int32) ApiDcimDevicesListRequest {
	r.vcPositionLte = &vcPositionLte
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionN(vcPositionN []int32) ApiDcimDevicesListRequest {
	r.vcPositionN = &vcPositionN
	return r
}

func (r ApiDcimDevicesListRequest) VcPriority(vcPriority []int32) ApiDcimDevicesListRequest {
	r.vcPriority = &vcPriority
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityEmpty(vcPriorityEmpty bool) ApiDcimDevicesListRequest {
	r.vcPriorityEmpty = &vcPriorityEmpty
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityGt(vcPriorityGt []int32) ApiDcimDevicesListRequest {
	r.vcPriorityGt = &vcPriorityGt
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityGte(vcPriorityGte []int32) ApiDcimDevicesListRequest {
	r.vcPriorityGte = &vcPriorityGte
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityLt(vcPriorityLt []int32) ApiDcimDevicesListRequest {
	r.vcPriorityLt = &vcPriorityLt
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityLte(vcPriorityLte []int32) ApiDcimDevicesListRequest {
	r.vcPriorityLte = &vcPriorityLte
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityN(vcPriorityN []int32) ApiDcimDevicesListRequest {
	r.vcPriorityN = &vcPriorityN
	return r
}

// Virtual chassis (ID)
func (r ApiDcimDevicesListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimDevicesListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual chassis (ID)
func (r ApiDcimDevicesListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimDevicesListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

// Is a virtual chassis member
func (r ApiDcimDevicesListRequest) VirtualChassisMember(virtualChassisMember bool) ApiDcimDevicesListRequest {
	r.virtualChassisMember = &virtualChassisMember
	return r
}

func (r ApiDcimDevicesListRequest) Execute() (*PaginatedDeviceWithConfigContextList, *http.Response, error) {
	return r.ApiService.DcimDevicesListExecute(r)
}

/*
DcimDevicesList Method for DcimDevicesList

Get a list of device objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimDevicesListRequest
*/
func (a *DcimAPIService) DcimDevicesList(ctx context.Context) ApiDcimDevicesListRequest {
	return ApiDcimDevicesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedDeviceWithConfigContextList
func (a *DcimAPIService) DcimDevicesListExecute(r ApiDcimDevicesListRequest) (*PaginatedDeviceWithConfigContextList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedDeviceWithConfigContextList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.airflow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "airflow", r.airflow, "")
	}
	if r.airflowN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "airflow__n", r.airflowN, "")
	}
	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", t, "multi")
		}
	}
	if r.assetTagEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__empty", r.assetTagEmpty, "")
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", t, "multi")
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", t, "multi")
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", t, "multi")
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", t, "multi")
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", t, "multi")
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", t, "multi")
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", t, "multi")
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", t, "multi")
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", t, "multi")
		}
	}
	if r.clusterGroup != nil {
		t := *r.clusterGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", t, "multi")
		}
	}
	if r.clusterGroupN != nil {
		t := *r.clusterGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", t, "multi")
		}
	}
	if r.clusterGroupId != nil {
		t := *r.clusterGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", t, "multi")
		}
	}
	if r.clusterGroupIdN != nil {
		t := *r.clusterGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", t, "multi")
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", t, "multi")
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", t, "multi")
		}
	}
	if r.configTemplateId != nil {
		t := *r.configTemplateId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id", t, "multi")
		}
	}
	if r.configTemplateIdN != nil {
		t := *r.configTemplateIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id__n", t, "multi")
		}
	}
	if r.consolePortCount != nil {
		t := *r.consolePortCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count", t, "multi")
		}
	}
	if r.consolePortCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__empty", r.consolePortCountEmpty, "")
	}
	if r.consolePortCountGt != nil {
		t := *r.consolePortCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__gt", t, "multi")
		}
	}
	if r.consolePortCountGte != nil {
		t := *r.consolePortCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__gte", t, "multi")
		}
	}
	if r.consolePortCountLt != nil {
		t := *r.consolePortCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__lt", t, "multi")
		}
	}
	if r.consolePortCountLte != nil {
		t := *r.consolePortCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__lte", t, "multi")
		}
	}
	if r.consolePortCountN != nil {
		t := *r.consolePortCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_port_count__n", t, "multi")
		}
	}
	if r.consolePorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_ports", r.consolePorts, "")
	}
	if r.consoleServerPortCount != nil {
		t := *r.consoleServerPortCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count", t, "multi")
		}
	}
	if r.consoleServerPortCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__empty", r.consoleServerPortCountEmpty, "")
	}
	if r.consoleServerPortCountGt != nil {
		t := *r.consoleServerPortCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__gt", t, "multi")
		}
	}
	if r.consoleServerPortCountGte != nil {
		t := *r.consoleServerPortCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__gte", t, "multi")
		}
	}
	if r.consoleServerPortCountLt != nil {
		t := *r.consoleServerPortCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__lt", t, "multi")
		}
	}
	if r.consoleServerPortCountLte != nil {
		t := *r.consoleServerPortCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__lte", t, "multi")
		}
	}
	if r.consoleServerPortCountN != nil {
		t := *r.consoleServerPortCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_port_count__n", t, "multi")
		}
	}
	if r.consoleServerPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_ports", r.consoleServerPorts, "")
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceBayCount != nil {
		t := *r.deviceBayCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count", t, "multi")
		}
	}
	if r.deviceBayCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__empty", r.deviceBayCountEmpty, "")
	}
	if r.deviceBayCountGt != nil {
		t := *r.deviceBayCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__gt", t, "multi")
		}
	}
	if r.deviceBayCountGte != nil {
		t := *r.deviceBayCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__gte", t, "multi")
		}
	}
	if r.deviceBayCountLt != nil {
		t := *r.deviceBayCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__lt", t, "multi")
		}
	}
	if r.deviceBayCountLte != nil {
		t := *r.deviceBayCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__lte", t, "multi")
		}
	}
	if r.deviceBayCountN != nil {
		t := *r.deviceBayCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_bay_count__n", t, "multi")
		}
	}
	if r.deviceBays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "device_bays", r.deviceBays, "")
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.face != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "face", r.face, "")
	}
	if r.faceN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "face__n", r.faceN, "")
	}
	if r.frontPortCount != nil {
		t := *r.frontPortCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count", t, "multi")
		}
	}
	if r.frontPortCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__empty", r.frontPortCountEmpty, "")
	}
	if r.frontPortCountGt != nil {
		t := *r.frontPortCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__gt", t, "multi")
		}
	}
	if r.frontPortCountGte != nil {
		t := *r.frontPortCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__gte", t, "multi")
		}
	}
	if r.frontPortCountLt != nil {
		t := *r.frontPortCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__lt", t, "multi")
		}
	}
	if r.frontPortCountLte != nil {
		t := *r.frontPortCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__lte", t, "multi")
		}
	}
	if r.frontPortCountN != nil {
		t := *r.frontPortCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "front_port_count__n", t, "multi")
		}
	}
	if r.hasOobIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_oob_ip", r.hasOobIp, "")
	}
	if r.hasPrimaryIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_primary_ip", r.hasPrimaryIp, "")
	}
	if r.hasVirtualDeviceContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_virtual_device_context", r.hasVirtualDeviceContext, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.interfaceCount != nil {
		t := *r.interfaceCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count", t, "multi")
		}
	}
	if r.interfaceCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__empty", r.interfaceCountEmpty, "")
	}
	if r.interfaceCountGt != nil {
		t := *r.interfaceCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__gt", t, "multi")
		}
	}
	if r.interfaceCountGte != nil {
		t := *r.interfaceCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__gte", t, "multi")
		}
	}
	if r.interfaceCountLt != nil {
		t := *r.interfaceCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__lt", t, "multi")
		}
	}
	if r.interfaceCountLte != nil {
		t := *r.interfaceCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__lte", t, "multi")
		}
	}
	if r.interfaceCountN != nil {
		t := *r.interfaceCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_count__n", t, "multi")
		}
	}
	if r.interfaces != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaces", r.interfaces, "")
	}
	if r.inventoryItemCount != nil {
		t := *r.inventoryItemCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count", t, "multi")
		}
	}
	if r.inventoryItemCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__empty", r.inventoryItemCountEmpty, "")
	}
	if r.inventoryItemCountGt != nil {
		t := *r.inventoryItemCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__gt", t, "multi")
		}
	}
	if r.inventoryItemCountGte != nil {
		t := *r.inventoryItemCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__gte", t, "multi")
		}
	}
	if r.inventoryItemCountLt != nil {
		t := *r.inventoryItemCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__lt", t, "multi")
		}
	}
	if r.inventoryItemCountLte != nil {
		t := *r.inventoryItemCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__lte", t, "multi")
		}
	}
	if r.inventoryItemCountN != nil {
		t := *r.inventoryItemCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "inventory_item_count__n", t, "multi")
		}
	}
	if r.isFullDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_full_depth", r.isFullDepth, "")
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.latitude != nil {
		t := *r.latitude
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude", t, "multi")
		}
	}
	if r.latitudeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__empty", r.latitudeEmpty, "")
	}
	if r.latitudeGt != nil {
		t := *r.latitudeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gt", t, "multi")
		}
	}
	if r.latitudeGte != nil {
		t := *r.latitudeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gte", t, "multi")
		}
	}
	if r.latitudeLt != nil {
		t := *r.latitudeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lt", t, "multi")
		}
	}
	if r.latitudeLte != nil {
		t := *r.latitudeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lte", t, "multi")
		}
	}
	if r.latitudeN != nil {
		t := *r.latitudeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.localContextData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "local_context_data", r.localContextData, "")
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.longitude != nil {
		t := *r.longitude
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude", t, "multi")
		}
	}
	if r.longitudeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__empty", r.longitudeEmpty, "")
	}
	if r.longitudeGt != nil {
		t := *r.longitudeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gt", t, "multi")
		}
	}
	if r.longitudeGte != nil {
		t := *r.longitudeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gte", t, "multi")
		}
	}
	if r.longitudeLt != nil {
		t := *r.longitudeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lt", t, "multi")
		}
	}
	if r.longitudeLte != nil {
		t := *r.longitudeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lte", t, "multi")
		}
	}
	if r.longitudeN != nil {
		t := *r.longitudeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__n", t, "multi")
		}
	}
	if r.macAddress != nil {
		t := *r.macAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", t, "multi")
		}
	}
	if r.macAddressIc != nil {
		t := *r.macAddressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", t, "multi")
		}
	}
	if r.macAddressIe != nil {
		t := *r.macAddressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", t, "multi")
		}
	}
	if r.macAddressIew != nil {
		t := *r.macAddressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", t, "multi")
		}
	}
	if r.macAddressIsw != nil {
		t := *r.macAddressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", t, "multi")
		}
	}
	if r.macAddressN != nil {
		t := *r.macAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", t, "multi")
		}
	}
	if r.macAddressNic != nil {
		t := *r.macAddressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", t, "multi")
		}
	}
	if r.macAddressNie != nil {
		t := *r.macAddressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", t, "multi")
		}
	}
	if r.macAddressNiew != nil {
		t := *r.macAddressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", t, "multi")
		}
	}
	if r.macAddressNisw != nil {
		t := *r.macAddressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", t, "multi")
		}
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.model != nil {
		t := *r.model
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model", t, "multi")
		}
	}
	if r.modelN != nil {
		t := *r.modelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleBayCount != nil {
		t := *r.moduleBayCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count", t, "multi")
		}
	}
	if r.moduleBayCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__empty", r.moduleBayCountEmpty, "")
	}
	if r.moduleBayCountGt != nil {
		t := *r.moduleBayCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__gt", t, "multi")
		}
	}
	if r.moduleBayCountGte != nil {
		t := *r.moduleBayCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__gte", t, "multi")
		}
	}
	if r.moduleBayCountLt != nil {
		t := *r.moduleBayCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__lt", t, "multi")
		}
	}
	if r.moduleBayCountLte != nil {
		t := *r.moduleBayCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__lte", t, "multi")
		}
	}
	if r.moduleBayCountN != nil {
		t := *r.moduleBayCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_count__n", t, "multi")
		}
	}
	if r.moduleBays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "module_bays", r.moduleBays, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.oobIpId != nil {
		t := *r.oobIpId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "oob_ip_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "oob_ip_id", t, "multi")
		}
	}
	if r.oobIpIdN != nil {
		t := *r.oobIpIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "oob_ip_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "oob_ip_id__n", t, "multi")
		}
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parentBayId != nil {
		t := *r.parentBayId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_bay_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_bay_id", t, "multi")
		}
	}
	if r.parentBayIdN != nil {
		t := *r.parentBayIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_bay_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_bay_id__n", t, "multi")
		}
	}
	if r.parentDeviceId != nil {
		t := *r.parentDeviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_device_id", t, "multi")
		}
	}
	if r.parentDeviceIdN != nil {
		t := *r.parentDeviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_device_id__n", t, "multi")
		}
	}
	if r.passThroughPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pass_through_ports", r.passThroughPorts, "")
	}
	if r.platform != nil {
		t := *r.platform
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform", t, "multi")
		}
	}
	if r.platformN != nil {
		t := *r.platformN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", t, "multi")
		}
	}
	if r.platformId != nil {
		t := *r.platformId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", t, "multi")
		}
	}
	if r.platformIdN != nil {
		t := *r.platformIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", t, "multi")
		}
	}
	if r.position != nil {
		t := *r.position
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position", t, "multi")
		}
	}
	if r.positionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position__empty", r.positionEmpty, "")
	}
	if r.positionGt != nil {
		t := *r.positionGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__gt", t, "multi")
		}
	}
	if r.positionGte != nil {
		t := *r.positionGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__gte", t, "multi")
		}
	}
	if r.positionLt != nil {
		t := *r.positionLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__lt", t, "multi")
		}
	}
	if r.positionLte != nil {
		t := *r.positionLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__lte", t, "multi")
		}
	}
	if r.positionN != nil {
		t := *r.positionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__n", t, "multi")
		}
	}
	if r.powerOutletCount != nil {
		t := *r.powerOutletCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count", t, "multi")
		}
	}
	if r.powerOutletCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__empty", r.powerOutletCountEmpty, "")
	}
	if r.powerOutletCountGt != nil {
		t := *r.powerOutletCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__gt", t, "multi")
		}
	}
	if r.powerOutletCountGte != nil {
		t := *r.powerOutletCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__gte", t, "multi")
		}
	}
	if r.powerOutletCountLt != nil {
		t := *r.powerOutletCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__lt", t, "multi")
		}
	}
	if r.powerOutletCountLte != nil {
		t := *r.powerOutletCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__lte", t, "multi")
		}
	}
	if r.powerOutletCountN != nil {
		t := *r.powerOutletCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlet_count__n", t, "multi")
		}
	}
	if r.powerOutlets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlets", r.powerOutlets, "")
	}
	if r.powerPortCount != nil {
		t := *r.powerPortCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count", t, "multi")
		}
	}
	if r.powerPortCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__empty", r.powerPortCountEmpty, "")
	}
	if r.powerPortCountGt != nil {
		t := *r.powerPortCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__gt", t, "multi")
		}
	}
	if r.powerPortCountGte != nil {
		t := *r.powerPortCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__gte", t, "multi")
		}
	}
	if r.powerPortCountLt != nil {
		t := *r.powerPortCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__lt", t, "multi")
		}
	}
	if r.powerPortCountLte != nil {
		t := *r.powerPortCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__lte", t, "multi")
		}
	}
	if r.powerPortCountN != nil {
		t := *r.powerPortCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_count__n", t, "multi")
		}
	}
	if r.powerPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_ports", r.powerPorts, "")
	}
	if r.primaryIp4Id != nil {
		t := *r.primaryIp4Id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id", t, "multi")
		}
	}
	if r.primaryIp4IdN != nil {
		t := *r.primaryIp4IdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id__n", t, "multi")
		}
	}
	if r.primaryIp6Id != nil {
		t := *r.primaryIp6Id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id", t, "multi")
		}
	}
	if r.primaryIp6IdN != nil {
		t := *r.primaryIp6IdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.rearPortCount != nil {
		t := *r.rearPortCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count", t, "multi")
		}
	}
	if r.rearPortCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__empty", r.rearPortCountEmpty, "")
	}
	if r.rearPortCountGt != nil {
		t := *r.rearPortCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__gt", t, "multi")
		}
	}
	if r.rearPortCountGte != nil {
		t := *r.rearPortCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__gte", t, "multi")
		}
	}
	if r.rearPortCountLt != nil {
		t := *r.rearPortCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__lt", t, "multi")
		}
	}
	if r.rearPortCountLte != nil {
		t := *r.rearPortCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__lte", t, "multi")
		}
	}
	if r.rearPortCountN != nil {
		t := *r.rearPortCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_count__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", t, "multi")
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", t, "multi")
		}
	}
	if r.serial != nil {
		t := *r.serial
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial", t, "multi")
		}
	}
	if r.serialEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial__empty", r.serialEmpty, "")
	}
	if r.serialIc != nil {
		t := *r.serialIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", t, "multi")
		}
	}
	if r.serialIe != nil {
		t := *r.serialIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", t, "multi")
		}
	}
	if r.serialIew != nil {
		t := *r.serialIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", t, "multi")
		}
	}
	if r.serialIsw != nil {
		t := *r.serialIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", t, "multi")
		}
	}
	if r.serialN != nil {
		t := *r.serialN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", t, "multi")
		}
	}
	if r.serialNic != nil {
		t := *r.serialNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", t, "multi")
		}
	}
	if r.serialNie != nil {
		t := *r.serialNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", t, "multi")
		}
	}
	if r.serialNiew != nil {
		t := *r.serialNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", t, "multi")
		}
	}
	if r.serialNisw != nil {
		t := *r.serialNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.vcPosition != nil {
		t := *r.vcPosition
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position", t, "multi")
		}
	}
	if r.vcPositionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__empty", r.vcPositionEmpty, "")
	}
	if r.vcPositionGt != nil {
		t := *r.vcPositionGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__gt", t, "multi")
		}
	}
	if r.vcPositionGte != nil {
		t := *r.vcPositionGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__gte", t, "multi")
		}
	}
	if r.vcPositionLt != nil {
		t := *r.vcPositionLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__lt", t, "multi")
		}
	}
	if r.vcPositionLte != nil {
		t := *r.vcPositionLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__lte", t, "multi")
		}
	}
	if r.vcPositionN != nil {
		t := *r.vcPositionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_position__n", t, "multi")
		}
	}
	if r.vcPriority != nil {
		t := *r.vcPriority
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority", t, "multi")
		}
	}
	if r.vcPriorityEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__empty", r.vcPriorityEmpty, "")
	}
	if r.vcPriorityGt != nil {
		t := *r.vcPriorityGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__gt", t, "multi")
		}
	}
	if r.vcPriorityGte != nil {
		t := *r.vcPriorityGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__gte", t, "multi")
		}
	}
	if r.vcPriorityLt != nil {
		t := *r.vcPriorityLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__lt", t, "multi")
		}
	}
	if r.vcPriorityLte != nil {
		t := *r.vcPriorityLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__lte", t, "multi")
		}
	}
	if r.vcPriorityN != nil {
		t := *r.vcPriorityN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vc_priority__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	if r.virtualChassisMember != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_member", r.virtualChassisMember, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesPartialUpdateRequest struct {
	ctx                                           context.Context
	ApiService                                    *DcimAPIService
	id                                            int32
	patchedWritableDeviceWithConfigContextRequest *PatchedWritableDeviceWithConfigContextRequest
}

func (r ApiDcimDevicesPartialUpdateRequest) PatchedWritableDeviceWithConfigContextRequest(patchedWritableDeviceWithConfigContextRequest PatchedWritableDeviceWithConfigContextRequest) ApiDcimDevicesPartialUpdateRequest {
	r.patchedWritableDeviceWithConfigContextRequest = &patchedWritableDeviceWithConfigContextRequest
	return r
}

func (r ApiDcimDevicesPartialUpdateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesPartialUpdateExecute(r)
}

/*
DcimDevicesPartialUpdate Method for DcimDevicesPartialUpdate

Patch a device object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiDcimDevicesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimDevicesPartialUpdate(ctx context.Context, id int32) ApiDcimDevicesPartialUpdateRequest {
	return ApiDcimDevicesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *DcimAPIService) DcimDevicesPartialUpdateExecute(r ApiDcimDevicesPartialUpdateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesRenderConfigCreateRequest struct {
	ctx                                    context.Context
	ApiService                             *DcimAPIService
	id                                     int32
	writableDeviceWithConfigContextRequest *WritableDeviceWithConfigContextRequest
	format                                 *DcimDevicesRenderConfigCreateFormatParameter
}

func (r ApiDcimDevicesRenderConfigCreateRequest) WritableDeviceWithConfigContextRequest(writableDeviceWithConfigContextRequest WritableDeviceWithConfigContextRequest) ApiDcimDevicesRenderConfigCreateRequest {
	r.writableDeviceWithConfigContextRequest = &writableDeviceWithConfigContextRequest
	return r
}

func (r ApiDcimDevicesRenderConfigCreateRequest) Format(format DcimDevicesRenderConfigCreateFormatParameter) ApiDcimDevicesRenderConfigCreateRequest {
	r.format = &format
	return r
}

func (r ApiDcimDevicesRenderConfigCreateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesRenderConfigCreateExecute(r)
}

/*
DcimDevicesRenderConfigCreate Method for DcimDevicesRenderConfigCreate

Resolve and render the preferred ConfigTemplate for this Device.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiDcimDevicesRenderConfigCreateRequest
*/
func (a *DcimAPIService) DcimDevicesRenderConfigCreate(ctx context.Context, id int32) ApiDcimDevicesRenderConfigCreateRequest {
	return ApiDcimDevicesRenderConfigCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *DcimAPIService) DcimDevicesRenderConfigCreateExecute(r ApiDcimDevicesRenderConfigCreateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesRenderConfigCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/{id}/render-config/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeviceWithConfigContextRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimDevicesRetrieveRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesRetrieveExecute(r)
}

/*
DcimDevicesRetrieve Method for DcimDevicesRetrieve

Get a device object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiDcimDevicesRetrieveRequest
*/
func (a *DcimAPIService) DcimDevicesRetrieve(ctx context.Context, id int32) ApiDcimDevicesRetrieveRequest {
	return ApiDcimDevicesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *DcimAPIService) DcimDevicesRetrieveExecute(r ApiDcimDevicesRetrieveRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesUpdateRequest struct {
	ctx                                    context.Context
	ApiService                             *DcimAPIService
	id                                     int32
	writableDeviceWithConfigContextRequest *WritableDeviceWithConfigContextRequest
}

func (r ApiDcimDevicesUpdateRequest) WritableDeviceWithConfigContextRequest(writableDeviceWithConfigContextRequest WritableDeviceWithConfigContextRequest) ApiDcimDevicesUpdateRequest {
	r.writableDeviceWithConfigContextRequest = &writableDeviceWithConfigContextRequest
	return r
}

func (r ApiDcimDevicesUpdateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesUpdateExecute(r)
}

/*
DcimDevicesUpdate Method for DcimDevicesUpdate

Put a device object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this device.
	@return ApiDcimDevicesUpdateRequest
*/
func (a *DcimAPIService) DcimDevicesUpdate(ctx context.Context, id int32) ApiDcimDevicesUpdateRequest {
	return ApiDcimDevicesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DeviceWithConfigContext
func (a *DcimAPIService) DcimDevicesUpdateExecute(r ApiDcimDevicesUpdateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimDevicesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceWithConfigContextRequest == nil {
		return localVarReturnValue, nil, reportError("writableDeviceWithConfigContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceWithConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	frontPortTemplateRequest *[]FrontPortTemplateRequest
}

func (r ApiDcimFrontPortTemplatesBulkDestroyRequest) FrontPortTemplateRequest(frontPortTemplateRequest []FrontPortTemplateRequest) ApiDcimFrontPortTemplatesBulkDestroyRequest {
	r.frontPortTemplateRequest = &frontPortTemplateRequest
	return r
}

func (r ApiDcimFrontPortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesBulkDestroyExecute(r)
}

/*
DcimFrontPortTemplatesBulkDestroy Method for DcimFrontPortTemplatesBulkDestroy

Delete a list of front port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimFrontPortTemplatesBulkDestroy(ctx context.Context) ApiDcimFrontPortTemplatesBulkDestroyRequest {
	return ApiDcimFrontPortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimFrontPortTemplatesBulkDestroyExecute(r ApiDcimFrontPortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.frontPortTemplateRequest == nil {
		return nil, reportError("frontPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.frontPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	frontPortTemplateRequest *[]FrontPortTemplateRequest
}

func (r ApiDcimFrontPortTemplatesBulkPartialUpdateRequest) FrontPortTemplateRequest(frontPortTemplateRequest []FrontPortTemplateRequest) ApiDcimFrontPortTemplatesBulkPartialUpdateRequest {
	r.frontPortTemplateRequest = &frontPortTemplateRequest
	return r
}

func (r ApiDcimFrontPortTemplatesBulkPartialUpdateRequest) Execute() ([]FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimFrontPortTemplatesBulkPartialUpdate Method for DcimFrontPortTemplatesBulkPartialUpdate

Patch a list of front port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimFrontPortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimFrontPortTemplatesBulkPartialUpdateRequest {
	return ApiDcimFrontPortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []FrontPortTemplate
func (a *DcimAPIService) DcimFrontPortTemplatesBulkPartialUpdateExecute(r ApiDcimFrontPortTemplatesBulkPartialUpdateRequest) ([]FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.frontPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("frontPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.frontPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	frontPortTemplateRequest *[]FrontPortTemplateRequest
}

func (r ApiDcimFrontPortTemplatesBulkUpdateRequest) FrontPortTemplateRequest(frontPortTemplateRequest []FrontPortTemplateRequest) ApiDcimFrontPortTemplatesBulkUpdateRequest {
	r.frontPortTemplateRequest = &frontPortTemplateRequest
	return r
}

func (r ApiDcimFrontPortTemplatesBulkUpdateRequest) Execute() ([]FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesBulkUpdateExecute(r)
}

/*
DcimFrontPortTemplatesBulkUpdate Method for DcimFrontPortTemplatesBulkUpdate

Put a list of front port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimFrontPortTemplatesBulkUpdate(ctx context.Context) ApiDcimFrontPortTemplatesBulkUpdateRequest {
	return ApiDcimFrontPortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []FrontPortTemplate
func (a *DcimAPIService) DcimFrontPortTemplatesBulkUpdateExecute(r ApiDcimFrontPortTemplatesBulkUpdateRequest) ([]FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.frontPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("frontPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.frontPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesCreateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	writableFrontPortTemplateRequest *WritableFrontPortTemplateRequest
}

func (r ApiDcimFrontPortTemplatesCreateRequest) WritableFrontPortTemplateRequest(writableFrontPortTemplateRequest WritableFrontPortTemplateRequest) ApiDcimFrontPortTemplatesCreateRequest {
	r.writableFrontPortTemplateRequest = &writableFrontPortTemplateRequest
	return r
}

func (r ApiDcimFrontPortTemplatesCreateRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesCreateExecute(r)
}

/*
DcimFrontPortTemplatesCreate Method for DcimFrontPortTemplatesCreate

Post a list of front port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimFrontPortTemplatesCreate(ctx context.Context) ApiDcimFrontPortTemplatesCreateRequest {
	return ApiDcimFrontPortTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FrontPortTemplate
func (a *DcimAPIService) DcimFrontPortTemplatesCreateExecute(r ApiDcimFrontPortTemplatesCreateRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableFrontPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimFrontPortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesDestroyExecute(r)
}

/*
DcimFrontPortTemplatesDestroy Method for DcimFrontPortTemplatesDestroy

Delete a front port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this front port template.
	@return ApiDcimFrontPortTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimFrontPortTemplatesDestroy(ctx context.Context, id int32) ApiDcimFrontPortTemplatesDestroyRequest {
	return ApiDcimFrontPortTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimFrontPortTemplatesDestroyExecute(r ApiDcimFrontPortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesListRequest struct {
	ctx                   context.Context
	ApiService            *DcimAPIService
	color                 *[]string
	colorEmpty            *bool
	colorIc               *[]string
	colorIe               *[]string
	colorIew              *[]string
	colorIsw              *[]string
	colorN                *[]string
	colorNic              *[]string
	colorNie              *[]string
	colorNiew             *[]string
	colorNisw             *[]string
	created               *[]time.Time
	createdEmpty          *[]time.Time
	createdGt             *[]time.Time
	createdGte            *[]time.Time
	createdLt             *[]time.Time
	createdLte            *[]time.Time
	createdN              *[]time.Time
	createdByRequest      *string
	description           *[]string
	descriptionEmpty      *bool
	descriptionIc         *[]string
	descriptionIe         *[]string
	descriptionIew        *[]string
	descriptionIsw        *[]string
	descriptionN          *[]string
	descriptionNic        *[]string
	descriptionNie        *[]string
	descriptionNiew       *[]string
	descriptionNisw       *[]string
	deviceTypeId          *[]*int32
	deviceTypeIdN         *[]*int32
	devicetypeId          *[]*int32
	devicetypeIdN         *[]*int32
	id                    *[]int32
	idEmpty               *bool
	idGt                  *[]int32
	idGte                 *[]int32
	idLt                  *[]int32
	idLte                 *[]int32
	idN                   *[]int32
	label                 *[]string
	labelEmpty            *bool
	labelIc               *[]string
	labelIe               *[]string
	labelIew              *[]string
	labelIsw              *[]string
	labelN                *[]string
	labelNic              *[]string
	labelNie              *[]string
	labelNiew             *[]string
	labelNisw             *[]string
	lastUpdated           *[]time.Time
	lastUpdatedEmpty      *[]time.Time
	lastUpdatedGt         *[]time.Time
	lastUpdatedGte        *[]time.Time
	lastUpdatedLt         *[]time.Time
	lastUpdatedLte        *[]time.Time
	lastUpdatedN          *[]time.Time
	limit                 *int32
	modifiedByRequest     *string
	moduleTypeId          *[]*int32
	moduleTypeIdN         *[]*int32
	moduletypeId          *[]*int32
	moduletypeIdN         *[]*int32
	name                  *[]string
	nameEmpty             *bool
	nameIc                *[]string
	nameIe                *[]string
	nameIew               *[]string
	nameIsw               *[]string
	nameN                 *[]string
	nameNic               *[]string
	nameNie               *[]string
	nameNiew              *[]string
	nameNisw              *[]string
	offset                *int32
	ordering              *string
	q                     *string
	rearPortId            *[]int32
	rearPortIdN           *[]int32
	rearPortPosition      *[]int32
	rearPortPositionEmpty *bool
	rearPortPositionGt    *[]int32
	rearPortPositionGte   *[]int32
	rearPortPositionLt    *[]int32
	rearPortPositionLte   *[]int32
	rearPortPositionN     *[]int32
	type_                 *[]string
	typeN                 *[]string
	updatedByRequest      *string
}

func (r ApiDcimFrontPortTemplatesListRequest) Color(color []string) ApiDcimFrontPortTemplatesListRequest {
	r.color = &color
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorEmpty(colorEmpty bool) ApiDcimFrontPortTemplatesListRequest {
	r.colorEmpty = &colorEmpty
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorIc(colorIc []string) ApiDcimFrontPortTemplatesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorIe(colorIe []string) ApiDcimFrontPortTemplatesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorIew(colorIew []string) ApiDcimFrontPortTemplatesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorIsw(colorIsw []string) ApiDcimFrontPortTemplatesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorN(colorN []string) ApiDcimFrontPortTemplatesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorNic(colorNic []string) ApiDcimFrontPortTemplatesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorNie(colorNie []string) ApiDcimFrontPortTemplatesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorNiew(colorNiew []string) ApiDcimFrontPortTemplatesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ColorNisw(colorNisw []string) ApiDcimFrontPortTemplatesListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Created(created []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimFrontPortTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Description(description []string) ApiDcimFrontPortTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimFrontPortTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) DeviceTypeId(deviceTypeId []*int32) ApiDcimFrontPortTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []*int32) ApiDcimFrontPortTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) DevicetypeId(devicetypeId []*int32) ApiDcimFrontPortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []*int32) ApiDcimFrontPortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Id(id []int32) ApiDcimFrontPortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimFrontPortTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdGt(idGt []int32) ApiDcimFrontPortTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdGte(idGte []int32) ApiDcimFrontPortTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdLt(idLt []int32) ApiDcimFrontPortTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdLte(idLte []int32) ApiDcimFrontPortTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdN(idN []int32) ApiDcimFrontPortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Label(label []string) ApiDcimFrontPortTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimFrontPortTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelIc(labelIc []string) ApiDcimFrontPortTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelIe(labelIe []string) ApiDcimFrontPortTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelIew(labelIew []string) ApiDcimFrontPortTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimFrontPortTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelN(labelN []string) ApiDcimFrontPortTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelNic(labelNic []string) ApiDcimFrontPortTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelNie(labelNie []string) ApiDcimFrontPortTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimFrontPortTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimFrontPortTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimFrontPortTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimFrontPortTemplatesListRequest) Limit(limit int32) ApiDcimFrontPortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimFrontPortTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) ModuleTypeId(moduleTypeId []*int32) ApiDcimFrontPortTemplatesListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) ModuleTypeIdN(moduleTypeIdN []*int32) ApiDcimFrontPortTemplatesListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

// Module type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) ModuletypeId(moduletypeId []*int32) ApiDcimFrontPortTemplatesListRequest {
	r.moduletypeId = &moduletypeId
	return r
}

// Module type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) ModuletypeIdN(moduletypeIdN []*int32) ApiDcimFrontPortTemplatesListRequest {
	r.moduletypeIdN = &moduletypeIdN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Name(name []string) ApiDcimFrontPortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimFrontPortTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameIc(nameIc []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameIe(nameIe []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameIew(nameIew []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameN(nameN []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNic(nameNic []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNie(nameNie []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimFrontPortTemplatesListRequest) Offset(offset int32) ApiDcimFrontPortTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimFrontPortTemplatesListRequest) Ordering(ordering string) ApiDcimFrontPortTemplatesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimFrontPortTemplatesListRequest) Q(q string) ApiDcimFrontPortTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) RearPortId(rearPortId []int32) ApiDcimFrontPortTemplatesListRequest {
	r.rearPortId = &rearPortId
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) RearPortIdN(rearPortIdN []int32) ApiDcimFrontPortTemplatesListRequest {
	r.rearPortIdN = &rearPortIdN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) RearPortPosition(rearPortPosition []int32) ApiDcimFrontPortTemplatesListRequest {
	r.rearPortPosition = &rearPortPosition
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) RearPortPositionEmpty(rearPortPositionEmpty bool) ApiDcimFrontPortTemplatesListRequest {
	r.rearPortPositionEmpty = &rearPortPositionEmpty
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) RearPortPositionGt(rearPortPositionGt []int32) ApiDcimFrontPortTemplatesListRequest {
	r.rearPortPositionGt = &rearPortPositionGt
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) RearPortPositionGte(rearPortPositionGte []int32) ApiDcimFrontPortTemplatesListRequest {
	r.rearPortPositionGte = &rearPortPositionGte
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) RearPortPositionLt(rearPortPositionLt []int32) ApiDcimFrontPortTemplatesListRequest {
	r.rearPortPositionLt = &rearPortPositionLt
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) RearPortPositionLte(rearPortPositionLte []int32) ApiDcimFrontPortTemplatesListRequest {
	r.rearPortPositionLte = &rearPortPositionLte
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) RearPortPositionN(rearPortPositionN []int32) ApiDcimFrontPortTemplatesListRequest {
	r.rearPortPositionN = &rearPortPositionN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Type_(type_ []string) ApiDcimFrontPortTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) TypeN(typeN []string) ApiDcimFrontPortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimFrontPortTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Execute() (*PaginatedFrontPortTemplateList, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesListExecute(r)
}

/*
DcimFrontPortTemplatesList Method for DcimFrontPortTemplatesList

Get a list of front port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortTemplatesListRequest
*/
func (a *DcimAPIService) DcimFrontPortTemplatesList(ctx context.Context) ApiDcimFrontPortTemplatesListRequest {
	return ApiDcimFrontPortTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedFrontPortTemplateList
func (a *DcimAPIService) DcimFrontPortTemplatesListExecute(r ApiDcimFrontPortTemplatesListRequest) (*PaginatedFrontPortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedFrontPortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "multi")
		}
	}
	if r.colorEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "color__empty", r.colorEmpty, "")
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.moduletypeId != nil {
		t := *r.moduletypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", t, "multi")
		}
	}
	if r.moduletypeIdN != nil {
		t := *r.moduletypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rearPortId != nil {
		t := *r.rearPortId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_id", t, "multi")
		}
	}
	if r.rearPortIdN != nil {
		t := *r.rearPortIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_id__n", t, "multi")
		}
	}
	if r.rearPortPosition != nil {
		t := *r.rearPortPosition
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position", t, "multi")
		}
	}
	if r.rearPortPositionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__empty", r.rearPortPositionEmpty, "")
	}
	if r.rearPortPositionGt != nil {
		t := *r.rearPortPositionGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__gt", t, "multi")
		}
	}
	if r.rearPortPositionGte != nil {
		t := *r.rearPortPositionGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__gte", t, "multi")
		}
	}
	if r.rearPortPositionLt != nil {
		t := *r.rearPortPositionLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__lt", t, "multi")
		}
	}
	if r.rearPortPositionLte != nil {
		t := *r.rearPortPositionLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__lte", t, "multi")
		}
	}
	if r.rearPortPositionN != nil {
		t := *r.rearPortPositionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesPartialUpdateRequest struct {
	ctx                                     context.Context
	ApiService                              *DcimAPIService
	id                                      int32
	patchedWritableFrontPortTemplateRequest *PatchedWritableFrontPortTemplateRequest
}

func (r ApiDcimFrontPortTemplatesPartialUpdateRequest) PatchedWritableFrontPortTemplateRequest(patchedWritableFrontPortTemplateRequest PatchedWritableFrontPortTemplateRequest) ApiDcimFrontPortTemplatesPartialUpdateRequest {
	r.patchedWritableFrontPortTemplateRequest = &patchedWritableFrontPortTemplateRequest
	return r
}

func (r ApiDcimFrontPortTemplatesPartialUpdateRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesPartialUpdateExecute(r)
}

/*
DcimFrontPortTemplatesPartialUpdate Method for DcimFrontPortTemplatesPartialUpdate

Patch a front port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this front port template.
	@return ApiDcimFrontPortTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimFrontPortTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimFrontPortTemplatesPartialUpdateRequest {
	return ApiDcimFrontPortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return FrontPortTemplate
func (a *DcimAPIService) DcimFrontPortTemplatesPartialUpdateExecute(r ApiDcimFrontPortTemplatesPartialUpdateRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableFrontPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimFrontPortTemplatesRetrieveRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesRetrieveExecute(r)
}

/*
DcimFrontPortTemplatesRetrieve Method for DcimFrontPortTemplatesRetrieve

Get a front port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this front port template.
	@return ApiDcimFrontPortTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimFrontPortTemplatesRetrieve(ctx context.Context, id int32) ApiDcimFrontPortTemplatesRetrieveRequest {
	return ApiDcimFrontPortTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return FrontPortTemplate
func (a *DcimAPIService) DcimFrontPortTemplatesRetrieveExecute(r ApiDcimFrontPortTemplatesRetrieveRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	id                               int32
	writableFrontPortTemplateRequest *WritableFrontPortTemplateRequest
}

func (r ApiDcimFrontPortTemplatesUpdateRequest) WritableFrontPortTemplateRequest(writableFrontPortTemplateRequest WritableFrontPortTemplateRequest) ApiDcimFrontPortTemplatesUpdateRequest {
	r.writableFrontPortTemplateRequest = &writableFrontPortTemplateRequest
	return r
}

func (r ApiDcimFrontPortTemplatesUpdateRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesUpdateExecute(r)
}

/*
DcimFrontPortTemplatesUpdate Method for DcimFrontPortTemplatesUpdate

Put a front port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this front port template.
	@return ApiDcimFrontPortTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimFrontPortTemplatesUpdate(ctx context.Context, id int32) ApiDcimFrontPortTemplatesUpdateRequest {
	return ApiDcimFrontPortTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return FrontPortTemplate
func (a *DcimAPIService) DcimFrontPortTemplatesUpdateExecute(r ApiDcimFrontPortTemplatesUpdateRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableFrontPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsBulkDestroyRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	frontPortRequest *[]FrontPortRequest
}

func (r ApiDcimFrontPortsBulkDestroyRequest) FrontPortRequest(frontPortRequest []FrontPortRequest) ApiDcimFrontPortsBulkDestroyRequest {
	r.frontPortRequest = &frontPortRequest
	return r
}

func (r ApiDcimFrontPortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimFrontPortsBulkDestroyExecute(r)
}

/*
DcimFrontPortsBulkDestroy Method for DcimFrontPortsBulkDestroy

Delete a list of front port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimFrontPortsBulkDestroy(ctx context.Context) ApiDcimFrontPortsBulkDestroyRequest {
	return ApiDcimFrontPortsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimFrontPortsBulkDestroyExecute(r ApiDcimFrontPortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.frontPortRequest == nil {
		return nil, reportError("frontPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.frontPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimFrontPortsBulkPartialUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	frontPortRequest *[]FrontPortRequest
}

func (r ApiDcimFrontPortsBulkPartialUpdateRequest) FrontPortRequest(frontPortRequest []FrontPortRequest) ApiDcimFrontPortsBulkPartialUpdateRequest {
	r.frontPortRequest = &frontPortRequest
	return r
}

func (r ApiDcimFrontPortsBulkPartialUpdateRequest) Execute() ([]FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsBulkPartialUpdateExecute(r)
}

/*
DcimFrontPortsBulkPartialUpdate Method for DcimFrontPortsBulkPartialUpdate

Patch a list of front port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimFrontPortsBulkPartialUpdate(ctx context.Context) ApiDcimFrontPortsBulkPartialUpdateRequest {
	return ApiDcimFrontPortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []FrontPort
func (a *DcimAPIService) DcimFrontPortsBulkPartialUpdateExecute(r ApiDcimFrontPortsBulkPartialUpdateRequest) ([]FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.frontPortRequest == nil {
		return localVarReturnValue, nil, reportError("frontPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.frontPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsBulkUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	frontPortRequest *[]FrontPortRequest
}

func (r ApiDcimFrontPortsBulkUpdateRequest) FrontPortRequest(frontPortRequest []FrontPortRequest) ApiDcimFrontPortsBulkUpdateRequest {
	r.frontPortRequest = &frontPortRequest
	return r
}

func (r ApiDcimFrontPortsBulkUpdateRequest) Execute() ([]FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsBulkUpdateExecute(r)
}

/*
DcimFrontPortsBulkUpdate Method for DcimFrontPortsBulkUpdate

Put a list of front port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimFrontPortsBulkUpdate(ctx context.Context) ApiDcimFrontPortsBulkUpdateRequest {
	return ApiDcimFrontPortsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []FrontPort
func (a *DcimAPIService) DcimFrontPortsBulkUpdateExecute(r ApiDcimFrontPortsBulkUpdateRequest) ([]FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.frontPortRequest == nil {
		return localVarReturnValue, nil, reportError("frontPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.frontPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsCreateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	writableFrontPortRequest *WritableFrontPortRequest
}

func (r ApiDcimFrontPortsCreateRequest) WritableFrontPortRequest(writableFrontPortRequest WritableFrontPortRequest) ApiDcimFrontPortsCreateRequest {
	r.writableFrontPortRequest = &writableFrontPortRequest
	return r
}

func (r ApiDcimFrontPortsCreateRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsCreateExecute(r)
}

/*
DcimFrontPortsCreate Method for DcimFrontPortsCreate

Post a list of front port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortsCreateRequest
*/
func (a *DcimAPIService) DcimFrontPortsCreate(ctx context.Context) ApiDcimFrontPortsCreateRequest {
	return ApiDcimFrontPortsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FrontPort
func (a *DcimAPIService) DcimFrontPortsCreateExecute(r ApiDcimFrontPortsCreateRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPortRequest == nil {
		return localVarReturnValue, nil, reportError("writableFrontPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimFrontPortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimFrontPortsDestroyExecute(r)
}

/*
DcimFrontPortsDestroy Method for DcimFrontPortsDestroy

Delete a front port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this front port.
	@return ApiDcimFrontPortsDestroyRequest
*/
func (a *DcimAPIService) DcimFrontPortsDestroy(ctx context.Context, id int32) ApiDcimFrontPortsDestroyRequest {
	return ApiDcimFrontPortsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimFrontPortsDestroyExecute(r ApiDcimFrontPortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimFrontPortsListRequest struct {
	ctx                   context.Context
	ApiService            *DcimAPIService
	cableEnd              *CircuitsCircuitTerminationsListCableEndParameter
	cableEndN             *CircuitsCircuitTerminationsListCableEndParameter
	cableId               *[]*int32
	cableIdN              *[]*int32
	cabled                *bool
	color                 *[]string
	colorEmpty            *bool
	colorIc               *[]string
	colorIe               *[]string
	colorIew              *[]string
	colorIsw              *[]string
	colorN                *[]string
	colorNic              *[]string
	colorNie              *[]string
	colorNiew             *[]string
	colorNisw             *[]string
	created               *[]time.Time
	createdEmpty          *[]time.Time
	createdGt             *[]time.Time
	createdGte            *[]time.Time
	createdLt             *[]time.Time
	createdLte            *[]time.Time
	createdN              *[]time.Time
	createdByRequest      *string
	description           *[]string
	descriptionEmpty      *bool
	descriptionIc         *[]string
	descriptionIe         *[]string
	descriptionIew        *[]string
	descriptionIsw        *[]string
	descriptionN          *[]string
	descriptionNic        *[]string
	descriptionNie        *[]string
	descriptionNiew       *[]string
	descriptionNisw       *[]string
	device                *[]*string
	deviceN               *[]*string
	deviceId              *[]int32
	deviceIdN             *[]int32
	deviceRole            *[]string
	deviceRoleN           *[]string
	deviceRoleId          *[]int32
	deviceRoleIdN         *[]int32
	deviceStatus          *[]string
	deviceStatusN         *[]string
	deviceType            *[]string
	deviceTypeN           *[]string
	deviceTypeId          *[]int32
	deviceTypeIdN         *[]int32
	id                    *[]int32
	idEmpty               *bool
	idGt                  *[]int32
	idGte                 *[]int32
	idLt                  *[]int32
	idLte                 *[]int32
	idN                   *[]int32
	label                 *[]string
	labelEmpty            *bool
	labelIc               *[]string
	labelIe               *[]string
	labelIew              *[]string
	labelIsw              *[]string
	labelN                *[]string
	labelNic              *[]string
	labelNie              *[]string
	labelNiew             *[]string
	labelNisw             *[]string
	lastUpdated           *[]time.Time
	lastUpdatedEmpty      *[]time.Time
	lastUpdatedGt         *[]time.Time
	lastUpdatedGte        *[]time.Time
	lastUpdatedLt         *[]time.Time
	lastUpdatedLte        *[]time.Time
	lastUpdatedN          *[]time.Time
	limit                 *int32
	location              *[]string
	locationN             *[]string
	locationId            *[]int32
	locationIdN           *[]int32
	markConnected         *bool
	modifiedByRequest     *string
	moduleId              *[]*int32
	moduleIdN             *[]*int32
	name                  *[]string
	nameEmpty             *bool
	nameIc                *[]string
	nameIe                *[]string
	nameIew               *[]string
	nameIsw               *[]string
	nameN                 *[]string
	nameNic               *[]string
	nameNie               *[]string
	nameNiew              *[]string
	nameNisw              *[]string
	occupied              *bool
	offset                *int32
	ordering              *string
	q                     *string
	rack                  *[]string
	rackN                 *[]string
	rackId                *[]int32
	rackIdN               *[]int32
	rearPortId            *[]int32
	rearPortIdN           *[]int32
	rearPortPosition      *[]int32
	rearPortPositionEmpty *bool
	rearPortPositionGt    *[]int32
	rearPortPositionGte   *[]int32
	rearPortPositionLt    *[]int32
	rearPortPositionLte   *[]int32
	rearPortPositionN     *[]int32
	region                *[]string
	regionN               *[]string
	regionId              *[]string
	regionIdN             *[]string
	site                  *[]string
	siteN                 *[]string
	siteGroup             *[]string
	siteGroupN            *[]string
	siteGroupId           *[]string
	siteGroupIdN          *[]string
	siteId                *[]int32
	siteIdN               *[]int32
	tag                   *[]string
	tagN                  *[]string
	type_                 *[]string
	typeN                 *[]string
	updatedByRequest      *string
	virtualChassis        *[]string
	virtualChassisN       *[]string
	virtualChassisId      *[]int32
	virtualChassisIdN     *[]int32
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimFrontPortsListRequest) CableEnd(cableEnd CircuitsCircuitTerminationsListCableEndParameter) ApiDcimFrontPortsListRequest {
	r.cableEnd = &cableEnd
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimFrontPortsListRequest) CableEndN(cableEndN CircuitsCircuitTerminationsListCableEndParameter) ApiDcimFrontPortsListRequest {
	r.cableEndN = &cableEndN
	return r
}

// Cable (ID)
func (r ApiDcimFrontPortsListRequest) CableId(cableId []*int32) ApiDcimFrontPortsListRequest {
	r.cableId = &cableId
	return r
}

// Cable (ID)
func (r ApiDcimFrontPortsListRequest) CableIdN(cableIdN []*int32) ApiDcimFrontPortsListRequest {
	r.cableIdN = &cableIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) Cabled(cabled bool) ApiDcimFrontPortsListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimFrontPortsListRequest) Color(color []string) ApiDcimFrontPortsListRequest {
	r.color = &color
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorEmpty(colorEmpty bool) ApiDcimFrontPortsListRequest {
	r.colorEmpty = &colorEmpty
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorIc(colorIc []string) ApiDcimFrontPortsListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorIe(colorIe []string) ApiDcimFrontPortsListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorIew(colorIew []string) ApiDcimFrontPortsListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorIsw(colorIsw []string) ApiDcimFrontPortsListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorN(colorN []string) ApiDcimFrontPortsListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorNic(colorNic []string) ApiDcimFrontPortsListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorNie(colorNie []string) ApiDcimFrontPortsListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorNiew(colorNiew []string) ApiDcimFrontPortsListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiDcimFrontPortsListRequest) ColorNisw(colorNisw []string) ApiDcimFrontPortsListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiDcimFrontPortsListRequest) Created(created []time.Time) ApiDcimFrontPortsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimFrontPortsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimFrontPortsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimFrontPortsListRequest) CreatedGt(createdGt []time.Time) ApiDcimFrontPortsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimFrontPortsListRequest) CreatedGte(createdGte []time.Time) ApiDcimFrontPortsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimFrontPortsListRequest) CreatedLt(createdLt []time.Time) ApiDcimFrontPortsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimFrontPortsListRequest) CreatedLte(createdLte []time.Time) ApiDcimFrontPortsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimFrontPortsListRequest) CreatedN(createdN []time.Time) ApiDcimFrontPortsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimFrontPortsListRequest) CreatedByRequest(createdByRequest string) ApiDcimFrontPortsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimFrontPortsListRequest) Description(description []string) ApiDcimFrontPortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimFrontPortsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimFrontPortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimFrontPortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimFrontPortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimFrontPortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionN(descriptionN []string) ApiDcimFrontPortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimFrontPortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimFrontPortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimFrontPortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimFrontPortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimFrontPortsListRequest) Device(device []*string) ApiDcimFrontPortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimFrontPortsListRequest) DeviceN(deviceN []*string) ApiDcimFrontPortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimFrontPortsListRequest) DeviceId(deviceId []int32) ApiDcimFrontPortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimFrontPortsListRequest) DeviceIdN(deviceIdN []int32) ApiDcimFrontPortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimFrontPortsListRequest) DeviceRole(deviceRole []string) ApiDcimFrontPortsListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimFrontPortsListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimFrontPortsListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimFrontPortsListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimFrontPortsListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimFrontPortsListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimFrontPortsListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) DeviceStatus(deviceStatus []string) ApiDcimFrontPortsListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimFrontPortsListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimFrontPortsListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimFrontPortsListRequest) DeviceType(deviceType []string) ApiDcimFrontPortsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimFrontPortsListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimFrontPortsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimFrontPortsListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimFrontPortsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimFrontPortsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimFrontPortsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) Id(id []int32) ApiDcimFrontPortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimFrontPortsListRequest) IdEmpty(idEmpty bool) ApiDcimFrontPortsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimFrontPortsListRequest) IdGt(idGt []int32) ApiDcimFrontPortsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimFrontPortsListRequest) IdGte(idGte []int32) ApiDcimFrontPortsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimFrontPortsListRequest) IdLt(idLt []int32) ApiDcimFrontPortsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimFrontPortsListRequest) IdLte(idLte []int32) ApiDcimFrontPortsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimFrontPortsListRequest) IdN(idN []int32) ApiDcimFrontPortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimFrontPortsListRequest) Label(label []string) ApiDcimFrontPortsListRequest {
	r.label = &label
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelEmpty(labelEmpty bool) ApiDcimFrontPortsListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelIc(labelIc []string) ApiDcimFrontPortsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelIe(labelIe []string) ApiDcimFrontPortsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelIew(labelIew []string) ApiDcimFrontPortsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelIsw(labelIsw []string) ApiDcimFrontPortsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelN(labelN []string) ApiDcimFrontPortsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelNic(labelNic []string) ApiDcimFrontPortsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelNie(labelNie []string) ApiDcimFrontPortsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelNiew(labelNiew []string) ApiDcimFrontPortsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimFrontPortsListRequest) LabelNisw(labelNisw []string) ApiDcimFrontPortsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimFrontPortsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimFrontPortsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimFrontPortsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimFrontPortsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimFrontPortsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimFrontPortsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimFrontPortsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimFrontPortsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimFrontPortsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimFrontPortsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimFrontPortsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimFrontPortsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimFrontPortsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimFrontPortsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimFrontPortsListRequest) Limit(limit int32) ApiDcimFrontPortsListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimFrontPortsListRequest) Location(location []string) ApiDcimFrontPortsListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimFrontPortsListRequest) LocationN(locationN []string) ApiDcimFrontPortsListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimFrontPortsListRequest) LocationId(locationId []int32) ApiDcimFrontPortsListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimFrontPortsListRequest) LocationIdN(locationIdN []int32) ApiDcimFrontPortsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) MarkConnected(markConnected bool) ApiDcimFrontPortsListRequest {
	r.markConnected = &markConnected
	return r
}

func (r ApiDcimFrontPortsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimFrontPortsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module (ID)
func (r ApiDcimFrontPortsListRequest) ModuleId(moduleId []*int32) ApiDcimFrontPortsListRequest {
	r.moduleId = &moduleId
	return r
}

// Module (ID)
func (r ApiDcimFrontPortsListRequest) ModuleIdN(moduleIdN []*int32) ApiDcimFrontPortsListRequest {
	r.moduleIdN = &moduleIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) Name(name []string) ApiDcimFrontPortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimFrontPortsListRequest) NameEmpty(nameEmpty bool) ApiDcimFrontPortsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimFrontPortsListRequest) NameIc(nameIc []string) ApiDcimFrontPortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimFrontPortsListRequest) NameIe(nameIe []string) ApiDcimFrontPortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimFrontPortsListRequest) NameIew(nameIew []string) ApiDcimFrontPortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimFrontPortsListRequest) NameIsw(nameIsw []string) ApiDcimFrontPortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimFrontPortsListRequest) NameN(nameN []string) ApiDcimFrontPortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNic(nameNic []string) ApiDcimFrontPortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNie(nameNie []string) ApiDcimFrontPortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNiew(nameNiew []string) ApiDcimFrontPortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNisw(nameNisw []string) ApiDcimFrontPortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimFrontPortsListRequest) Occupied(occupied bool) ApiDcimFrontPortsListRequest {
	r.occupied = &occupied
	return r
}

// The initial index from which to return the results.
func (r ApiDcimFrontPortsListRequest) Offset(offset int32) ApiDcimFrontPortsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimFrontPortsListRequest) Ordering(ordering string) ApiDcimFrontPortsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimFrontPortsListRequest) Q(q string) ApiDcimFrontPortsListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimFrontPortsListRequest) Rack(rack []string) ApiDcimFrontPortsListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimFrontPortsListRequest) RackN(rackN []string) ApiDcimFrontPortsListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimFrontPortsListRequest) RackId(rackId []int32) ApiDcimFrontPortsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimFrontPortsListRequest) RackIdN(rackIdN []int32) ApiDcimFrontPortsListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) RearPortId(rearPortId []int32) ApiDcimFrontPortsListRequest {
	r.rearPortId = &rearPortId
	return r
}

func (r ApiDcimFrontPortsListRequest) RearPortIdN(rearPortIdN []int32) ApiDcimFrontPortsListRequest {
	r.rearPortIdN = &rearPortIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) RearPortPosition(rearPortPosition []int32) ApiDcimFrontPortsListRequest {
	r.rearPortPosition = &rearPortPosition
	return r
}

func (r ApiDcimFrontPortsListRequest) RearPortPositionEmpty(rearPortPositionEmpty bool) ApiDcimFrontPortsListRequest {
	r.rearPortPositionEmpty = &rearPortPositionEmpty
	return r
}

func (r ApiDcimFrontPortsListRequest) RearPortPositionGt(rearPortPositionGt []int32) ApiDcimFrontPortsListRequest {
	r.rearPortPositionGt = &rearPortPositionGt
	return r
}

func (r ApiDcimFrontPortsListRequest) RearPortPositionGte(rearPortPositionGte []int32) ApiDcimFrontPortsListRequest {
	r.rearPortPositionGte = &rearPortPositionGte
	return r
}

func (r ApiDcimFrontPortsListRequest) RearPortPositionLt(rearPortPositionLt []int32) ApiDcimFrontPortsListRequest {
	r.rearPortPositionLt = &rearPortPositionLt
	return r
}

func (r ApiDcimFrontPortsListRequest) RearPortPositionLte(rearPortPositionLte []int32) ApiDcimFrontPortsListRequest {
	r.rearPortPositionLte = &rearPortPositionLte
	return r
}

func (r ApiDcimFrontPortsListRequest) RearPortPositionN(rearPortPositionN []int32) ApiDcimFrontPortsListRequest {
	r.rearPortPositionN = &rearPortPositionN
	return r
}

func (r ApiDcimFrontPortsListRequest) Region(region []string) ApiDcimFrontPortsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimFrontPortsListRequest) RegionN(regionN []string) ApiDcimFrontPortsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimFrontPortsListRequest) RegionId(regionId []string) ApiDcimFrontPortsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimFrontPortsListRequest) RegionIdN(regionIdN []string) ApiDcimFrontPortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimFrontPortsListRequest) Site(site []string) ApiDcimFrontPortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimFrontPortsListRequest) SiteN(siteN []string) ApiDcimFrontPortsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimFrontPortsListRequest) SiteGroup(siteGroup []string) ApiDcimFrontPortsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimFrontPortsListRequest) SiteGroupN(siteGroupN []string) ApiDcimFrontPortsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimFrontPortsListRequest) SiteGroupId(siteGroupId []string) ApiDcimFrontPortsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimFrontPortsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimFrontPortsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimFrontPortsListRequest) SiteId(siteId []int32) ApiDcimFrontPortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimFrontPortsListRequest) SiteIdN(siteIdN []int32) ApiDcimFrontPortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) Tag(tag []string) ApiDcimFrontPortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimFrontPortsListRequest) TagN(tagN []string) ApiDcimFrontPortsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimFrontPortsListRequest) Type_(type_ []string) ApiDcimFrontPortsListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimFrontPortsListRequest) TypeN(typeN []string) ApiDcimFrontPortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimFrontPortsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimFrontPortsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiDcimFrontPortsListRequest) VirtualChassis(virtualChassis []string) ApiDcimFrontPortsListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimFrontPortsListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimFrontPortsListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimFrontPortsListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimFrontPortsListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimFrontPortsListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimFrontPortsListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) Execute() (*PaginatedFrontPortList, *http.Response, error) {
	return r.ApiService.DcimFrontPortsListExecute(r)
}

/*
DcimFrontPortsList Method for DcimFrontPortsList

Get a list of front port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimFrontPortsListRequest
*/
func (a *DcimAPIService) DcimFrontPortsList(ctx context.Context) ApiDcimFrontPortsListRequest {
	return ApiDcimFrontPortsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedFrontPortList
func (a *DcimAPIService) DcimFrontPortsListExecute(r ApiDcimFrontPortsListRequest) (*PaginatedFrontPortList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedFrontPortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cableEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end", r.cableEnd, "")
	}
	if r.cableEndN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end__n", r.cableEndN, "")
	}
	if r.cableId != nil {
		t := *r.cableId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", t, "multi")
		}
	}
	if r.cableIdN != nil {
		t := *r.cableIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", t, "multi")
		}
	}
	if r.cabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cabled", r.cabled, "")
	}
	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "multi")
		}
	}
	if r.colorEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "color__empty", r.colorEmpty, "")
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.markConnected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mark_connected", r.markConnected, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleId != nil {
		t := *r.moduleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", t, "multi")
		}
	}
	if r.moduleIdN != nil {
		t := *r.moduleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.occupied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occupied", r.occupied, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.rearPortId != nil {
		t := *r.rearPortId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_id", t, "multi")
		}
	}
	if r.rearPortIdN != nil {
		t := *r.rearPortIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_id__n", t, "multi")
		}
	}
	if r.rearPortPosition != nil {
		t := *r.rearPortPosition
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position", t, "multi")
		}
	}
	if r.rearPortPositionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__empty", r.rearPortPositionEmpty, "")
	}
	if r.rearPortPositionGt != nil {
		t := *r.rearPortPositionGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__gt", t, "multi")
		}
	}
	if r.rearPortPositionGte != nil {
		t := *r.rearPortPositionGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__gte", t, "multi")
		}
	}
	if r.rearPortPositionLt != nil {
		t := *r.rearPortPositionLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__lt", t, "multi")
		}
	}
	if r.rearPortPositionLte != nil {
		t := *r.rearPortPositionLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__lte", t, "multi")
		}
	}
	if r.rearPortPositionN != nil {
		t := *r.rearPortPositionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rear_port_position__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	id                              int32
	patchedWritableFrontPortRequest *PatchedWritableFrontPortRequest
}

func (r ApiDcimFrontPortsPartialUpdateRequest) PatchedWritableFrontPortRequest(patchedWritableFrontPortRequest PatchedWritableFrontPortRequest) ApiDcimFrontPortsPartialUpdateRequest {
	r.patchedWritableFrontPortRequest = &patchedWritableFrontPortRequest
	return r
}

func (r ApiDcimFrontPortsPartialUpdateRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsPartialUpdateExecute(r)
}

/*
DcimFrontPortsPartialUpdate Method for DcimFrontPortsPartialUpdate

Patch a front port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this front port.
	@return ApiDcimFrontPortsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimFrontPortsPartialUpdate(ctx context.Context, id int32) ApiDcimFrontPortsPartialUpdateRequest {
	return ApiDcimFrontPortsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return FrontPort
func (a *DcimAPIService) DcimFrontPortsPartialUpdateExecute(r ApiDcimFrontPortsPartialUpdateRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableFrontPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsPathsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimFrontPortsPathsRetrieveRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsPathsRetrieveExecute(r)
}

/*
DcimFrontPortsPathsRetrieve Method for DcimFrontPortsPathsRetrieve

Return all CablePaths which traverse a given pass-through port.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this front port.
	@return ApiDcimFrontPortsPathsRetrieveRequest
*/
func (a *DcimAPIService) DcimFrontPortsPathsRetrieve(ctx context.Context, id int32) ApiDcimFrontPortsPathsRetrieveRequest {
	return ApiDcimFrontPortsPathsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return FrontPort
func (a *DcimAPIService) DcimFrontPortsPathsRetrieveExecute(r ApiDcimFrontPortsPathsRetrieveRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsPathsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/{id}/paths/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimFrontPortsRetrieveRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsRetrieveExecute(r)
}

/*
DcimFrontPortsRetrieve Method for DcimFrontPortsRetrieve

Get a front port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this front port.
	@return ApiDcimFrontPortsRetrieveRequest
*/
func (a *DcimAPIService) DcimFrontPortsRetrieve(ctx context.Context, id int32) ApiDcimFrontPortsRetrieveRequest {
	return ApiDcimFrontPortsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return FrontPort
func (a *DcimAPIService) DcimFrontPortsRetrieveExecute(r ApiDcimFrontPortsRetrieveRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	writableFrontPortRequest *WritableFrontPortRequest
}

func (r ApiDcimFrontPortsUpdateRequest) WritableFrontPortRequest(writableFrontPortRequest WritableFrontPortRequest) ApiDcimFrontPortsUpdateRequest {
	r.writableFrontPortRequest = &writableFrontPortRequest
	return r
}

func (r ApiDcimFrontPortsUpdateRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsUpdateExecute(r)
}

/*
DcimFrontPortsUpdate Method for DcimFrontPortsUpdate

Put a front port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this front port.
	@return ApiDcimFrontPortsUpdateRequest
*/
func (a *DcimAPIService) DcimFrontPortsUpdate(ctx context.Context, id int32) ApiDcimFrontPortsUpdateRequest {
	return ApiDcimFrontPortsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return FrontPort
func (a *DcimAPIService) DcimFrontPortsUpdateExecute(r ApiDcimFrontPortsUpdateRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimFrontPortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/front-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPortRequest == nil {
		return localVarReturnValue, nil, reportError("writableFrontPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	interfaceTemplateRequest *[]InterfaceTemplateRequest
}

func (r ApiDcimInterfaceTemplatesBulkDestroyRequest) InterfaceTemplateRequest(interfaceTemplateRequest []InterfaceTemplateRequest) ApiDcimInterfaceTemplatesBulkDestroyRequest {
	r.interfaceTemplateRequest = &interfaceTemplateRequest
	return r
}

func (r ApiDcimInterfaceTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesBulkDestroyExecute(r)
}

/*
DcimInterfaceTemplatesBulkDestroy Method for DcimInterfaceTemplatesBulkDestroy

Delete a list of interface template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfaceTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimInterfaceTemplatesBulkDestroy(ctx context.Context) ApiDcimInterfaceTemplatesBulkDestroyRequest {
	return ApiDcimInterfaceTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInterfaceTemplatesBulkDestroyExecute(r ApiDcimInterfaceTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfaceTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfaceTemplateRequest == nil {
		return nil, reportError("interfaceTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfaceTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	interfaceTemplateRequest *[]InterfaceTemplateRequest
}

func (r ApiDcimInterfaceTemplatesBulkPartialUpdateRequest) InterfaceTemplateRequest(interfaceTemplateRequest []InterfaceTemplateRequest) ApiDcimInterfaceTemplatesBulkPartialUpdateRequest {
	r.interfaceTemplateRequest = &interfaceTemplateRequest
	return r
}

func (r ApiDcimInterfaceTemplatesBulkPartialUpdateRequest) Execute() ([]InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimInterfaceTemplatesBulkPartialUpdate Method for DcimInterfaceTemplatesBulkPartialUpdate

Patch a list of interface template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfaceTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInterfaceTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimInterfaceTemplatesBulkPartialUpdateRequest {
	return ApiDcimInterfaceTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InterfaceTemplate
func (a *DcimAPIService) DcimInterfaceTemplatesBulkPartialUpdateExecute(r ApiDcimInterfaceTemplatesBulkPartialUpdateRequest) ([]InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfaceTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfaceTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("interfaceTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfaceTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	interfaceTemplateRequest *[]InterfaceTemplateRequest
}

func (r ApiDcimInterfaceTemplatesBulkUpdateRequest) InterfaceTemplateRequest(interfaceTemplateRequest []InterfaceTemplateRequest) ApiDcimInterfaceTemplatesBulkUpdateRequest {
	r.interfaceTemplateRequest = &interfaceTemplateRequest
	return r
}

func (r ApiDcimInterfaceTemplatesBulkUpdateRequest) Execute() ([]InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesBulkUpdateExecute(r)
}

/*
DcimInterfaceTemplatesBulkUpdate Method for DcimInterfaceTemplatesBulkUpdate

Put a list of interface template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfaceTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimInterfaceTemplatesBulkUpdate(ctx context.Context) ApiDcimInterfaceTemplatesBulkUpdateRequest {
	return ApiDcimInterfaceTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InterfaceTemplate
func (a *DcimAPIService) DcimInterfaceTemplatesBulkUpdateExecute(r ApiDcimInterfaceTemplatesBulkUpdateRequest) ([]InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfaceTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfaceTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("interfaceTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfaceTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesCreateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	writableInterfaceTemplateRequest *WritableInterfaceTemplateRequest
}

func (r ApiDcimInterfaceTemplatesCreateRequest) WritableInterfaceTemplateRequest(writableInterfaceTemplateRequest WritableInterfaceTemplateRequest) ApiDcimInterfaceTemplatesCreateRequest {
	r.writableInterfaceTemplateRequest = &writableInterfaceTemplateRequest
	return r
}

func (r ApiDcimInterfaceTemplatesCreateRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesCreateExecute(r)
}

/*
DcimInterfaceTemplatesCreate Method for DcimInterfaceTemplatesCreate

Post a list of interface template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfaceTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimInterfaceTemplatesCreate(ctx context.Context) ApiDcimInterfaceTemplatesCreateRequest {
	return ApiDcimInterfaceTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InterfaceTemplate
func (a *DcimAPIService) DcimInterfaceTemplatesCreateExecute(r ApiDcimInterfaceTemplatesCreateRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfaceTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterfaceTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableInterfaceTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterfaceTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInterfaceTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesDestroyExecute(r)
}

/*
DcimInterfaceTemplatesDestroy Method for DcimInterfaceTemplatesDestroy

Delete a interface template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this interface template.
	@return ApiDcimInterfaceTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimInterfaceTemplatesDestroy(ctx context.Context, id int32) ApiDcimInterfaceTemplatesDestroyRequest {
	return ApiDcimInterfaceTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInterfaceTemplatesDestroyExecute(r ApiDcimInterfaceTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfaceTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interface-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	bridgeId          *[]int32
	bridgeIdN         *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceTypeId      *[]*int32
	deviceTypeIdN     *[]*int32
	devicetypeId      *[]*int32
	devicetypeIdN     *[]*int32
	enabled           *bool
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	mgmtOnly          *bool
	modifiedByRequest *string
	moduleTypeId      *[]*int32
	moduleTypeIdN     *[]*int32
	moduletypeId      *[]*int32
	moduletypeIdN     *[]*int32
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	poeMode           *[]string
	poeModeN          *[]string
	poeType           *[]string
	poeTypeN          *[]string
	q                 *string
	rfRole            *[]string
	rfRoleN           *[]string
	type_             *[]string
	typeN             *[]string
	updatedByRequest  *string
}

func (r ApiDcimInterfaceTemplatesListRequest) BridgeId(bridgeId []int32) ApiDcimInterfaceTemplatesListRequest {
	r.bridgeId = &bridgeId
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) BridgeIdN(bridgeIdN []int32) ApiDcimInterfaceTemplatesListRequest {
	r.bridgeIdN = &bridgeIdN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Created(created []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimInterfaceTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Description(description []string) ApiDcimInterfaceTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimInterfaceTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) DeviceTypeId(deviceTypeId []*int32) ApiDcimInterfaceTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []*int32) ApiDcimInterfaceTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) DevicetypeId(devicetypeId []*int32) ApiDcimInterfaceTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) DevicetypeIdN(devicetypeIdN []*int32) ApiDcimInterfaceTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Enabled(enabled bool) ApiDcimInterfaceTemplatesListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Id(id []int32) ApiDcimInterfaceTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimInterfaceTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdGt(idGt []int32) ApiDcimInterfaceTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdGte(idGte []int32) ApiDcimInterfaceTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdLt(idLt []int32) ApiDcimInterfaceTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdLte(idLte []int32) ApiDcimInterfaceTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdN(idN []int32) ApiDcimInterfaceTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Label(label []string) ApiDcimInterfaceTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimInterfaceTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelIc(labelIc []string) ApiDcimInterfaceTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelIe(labelIe []string) ApiDcimInterfaceTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelIew(labelIew []string) ApiDcimInterfaceTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimInterfaceTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelN(labelN []string) ApiDcimInterfaceTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelNic(labelNic []string) ApiDcimInterfaceTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelNie(labelNie []string) ApiDcimInterfaceTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimInterfaceTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimInterfaceTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimInterfaceTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimInterfaceTemplatesListRequest) Limit(limit int32) ApiDcimInterfaceTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) MgmtOnly(mgmtOnly bool) ApiDcimInterfaceTemplatesListRequest {
	r.mgmtOnly = &mgmtOnly
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimInterfaceTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) ModuleTypeId(moduleTypeId []*int32) ApiDcimInterfaceTemplatesListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) ModuleTypeIdN(moduleTypeIdN []*int32) ApiDcimInterfaceTemplatesListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

// Module type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) ModuletypeId(moduletypeId []*int32) ApiDcimInterfaceTemplatesListRequest {
	r.moduletypeId = &moduletypeId
	return r
}

// Module type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) ModuletypeIdN(moduletypeIdN []*int32) ApiDcimInterfaceTemplatesListRequest {
	r.moduletypeIdN = &moduletypeIdN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Name(name []string) ApiDcimInterfaceTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimInterfaceTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameIc(nameIc []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameIe(nameIe []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameIew(nameIew []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameN(nameN []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNic(nameNic []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNie(nameNie []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimInterfaceTemplatesListRequest) Offset(offset int32) ApiDcimInterfaceTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimInterfaceTemplatesListRequest) Ordering(ordering string) ApiDcimInterfaceTemplatesListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) PoeMode(poeMode []string) ApiDcimInterfaceTemplatesListRequest {
	r.poeMode = &poeMode
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) PoeModeN(poeModeN []string) ApiDcimInterfaceTemplatesListRequest {
	r.poeModeN = &poeModeN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) PoeType(poeType []string) ApiDcimInterfaceTemplatesListRequest {
	r.poeType = &poeType
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) PoeTypeN(poeTypeN []string) ApiDcimInterfaceTemplatesListRequest {
	r.poeTypeN = &poeTypeN
	return r
}

// Search
func (r ApiDcimInterfaceTemplatesListRequest) Q(q string) ApiDcimInterfaceTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) RfRole(rfRole []string) ApiDcimInterfaceTemplatesListRequest {
	r.rfRole = &rfRole
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) RfRoleN(rfRoleN []string) ApiDcimInterfaceTemplatesListRequest {
	r.rfRoleN = &rfRoleN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Type_(type_ []string) ApiDcimInterfaceTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) TypeN(typeN []string) ApiDcimInterfaceTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimInterfaceTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Execute() (*PaginatedInterfaceTemplateList, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesListExecute(r)
}

/*
DcimInterfaceTemplatesList Method for DcimInterfaceTemplatesList

Get a list of interface template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfaceTemplatesListRequest
*/
func (a *DcimAPIService) DcimInterfaceTemplatesList(ctx context.Context) ApiDcimInterfaceTemplatesListRequest {
	return ApiDcimInterfaceTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedInterfaceTemplateList
func (a *DcimAPIService) DcimInterfaceTemplatesListExecute(r ApiDcimInterfaceTemplatesListRequest) (*PaginatedInterfaceTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedInterfaceTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfaceTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bridgeId != nil {
		t := *r.bridgeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bridge_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bridge_id", t, "multi")
		}
	}
	if r.bridgeIdN != nil {
		t := *r.bridgeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bridge_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bridge_id__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.mgmtOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mgmt_only", r.mgmtOnly, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.moduletypeId != nil {
		t := *r.moduletypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", t, "multi")
		}
	}
	if r.moduletypeIdN != nil {
		t := *r.moduletypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.poeMode != nil {
		t := *r.poeMode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "poe_mode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "poe_mode", t, "multi")
		}
	}
	if r.poeModeN != nil {
		t := *r.poeModeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "poe_mode__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "poe_mode__n", t, "multi")
		}
	}
	if r.poeType != nil {
		t := *r.poeType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "poe_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "poe_type", t, "multi")
		}
	}
	if r.poeTypeN != nil {
		t := *r.poeTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "poe_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "poe_type__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rfRole != nil {
		t := *r.rfRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_role", t, "multi")
		}
	}
	if r.rfRoleN != nil {
		t := *r.rfRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_role__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesPartialUpdateRequest struct {
	ctx                                     context.Context
	ApiService                              *DcimAPIService
	id                                      int32
	patchedWritableInterfaceTemplateRequest *PatchedWritableInterfaceTemplateRequest
}

func (r ApiDcimInterfaceTemplatesPartialUpdateRequest) PatchedWritableInterfaceTemplateRequest(patchedWritableInterfaceTemplateRequest PatchedWritableInterfaceTemplateRequest) ApiDcimInterfaceTemplatesPartialUpdateRequest {
	r.patchedWritableInterfaceTemplateRequest = &patchedWritableInterfaceTemplateRequest
	return r
}

func (r ApiDcimInterfaceTemplatesPartialUpdateRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesPartialUpdateExecute(r)
}

/*
DcimInterfaceTemplatesPartialUpdate Method for DcimInterfaceTemplatesPartialUpdate

Patch a interface template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this interface template.
	@return ApiDcimInterfaceTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInterfaceTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimInterfaceTemplatesPartialUpdateRequest {
	return ApiDcimInterfaceTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InterfaceTemplate
func (a *DcimAPIService) DcimInterfaceTemplatesPartialUpdateExecute(r ApiDcimInterfaceTemplatesPartialUpdateRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfaceTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interface-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInterfaceTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInterfaceTemplatesRetrieveRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesRetrieveExecute(r)
}

/*
DcimInterfaceTemplatesRetrieve Method for DcimInterfaceTemplatesRetrieve

Get a interface template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this interface template.
	@return ApiDcimInterfaceTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimInterfaceTemplatesRetrieve(ctx context.Context, id int32) ApiDcimInterfaceTemplatesRetrieveRequest {
	return ApiDcimInterfaceTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InterfaceTemplate
func (a *DcimAPIService) DcimInterfaceTemplatesRetrieveExecute(r ApiDcimInterfaceTemplatesRetrieveRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfaceTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interface-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	id                               int32
	writableInterfaceTemplateRequest *WritableInterfaceTemplateRequest
}

func (r ApiDcimInterfaceTemplatesUpdateRequest) WritableInterfaceTemplateRequest(writableInterfaceTemplateRequest WritableInterfaceTemplateRequest) ApiDcimInterfaceTemplatesUpdateRequest {
	r.writableInterfaceTemplateRequest = &writableInterfaceTemplateRequest
	return r
}

func (r ApiDcimInterfaceTemplatesUpdateRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesUpdateExecute(r)
}

/*
DcimInterfaceTemplatesUpdate Method for DcimInterfaceTemplatesUpdate

Put a interface template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this interface template.
	@return ApiDcimInterfaceTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimInterfaceTemplatesUpdate(ctx context.Context, id int32) ApiDcimInterfaceTemplatesUpdateRequest {
	return ApiDcimInterfaceTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InterfaceTemplate
func (a *DcimAPIService) DcimInterfaceTemplatesUpdateExecute(r ApiDcimInterfaceTemplatesUpdateRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfaceTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interface-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterfaceTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableInterfaceTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterfaceTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesBulkDestroyRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	interfaceRequest *[]InterfaceRequest
}

func (r ApiDcimInterfacesBulkDestroyRequest) InterfaceRequest(interfaceRequest []InterfaceRequest) ApiDcimInterfacesBulkDestroyRequest {
	r.interfaceRequest = &interfaceRequest
	return r
}

func (r ApiDcimInterfacesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInterfacesBulkDestroyExecute(r)
}

/*
DcimInterfacesBulkDestroy Method for DcimInterfacesBulkDestroy

Delete a list of interface objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfacesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimInterfacesBulkDestroy(ctx context.Context) ApiDcimInterfacesBulkDestroyRequest {
	return ApiDcimInterfacesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInterfacesBulkDestroyExecute(r ApiDcimInterfacesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfaceRequest == nil {
		return nil, reportError("interfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInterfacesBulkPartialUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	interfaceRequest *[]InterfaceRequest
}

func (r ApiDcimInterfacesBulkPartialUpdateRequest) InterfaceRequest(interfaceRequest []InterfaceRequest) ApiDcimInterfacesBulkPartialUpdateRequest {
	r.interfaceRequest = &interfaceRequest
	return r
}

func (r ApiDcimInterfacesBulkPartialUpdateRequest) Execute() ([]Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesBulkPartialUpdateExecute(r)
}

/*
DcimInterfacesBulkPartialUpdate Method for DcimInterfacesBulkPartialUpdate

Patch a list of interface objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfacesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInterfacesBulkPartialUpdate(ctx context.Context) ApiDcimInterfacesBulkPartialUpdateRequest {
	return ApiDcimInterfacesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Interface
func (a *DcimAPIService) DcimInterfacesBulkPartialUpdateExecute(r ApiDcimInterfacesBulkPartialUpdateRequest) ([]Interface, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfaceRequest == nil {
		return localVarReturnValue, nil, reportError("interfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesBulkUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	interfaceRequest *[]InterfaceRequest
}

func (r ApiDcimInterfacesBulkUpdateRequest) InterfaceRequest(interfaceRequest []InterfaceRequest) ApiDcimInterfacesBulkUpdateRequest {
	r.interfaceRequest = &interfaceRequest
	return r
}

func (r ApiDcimInterfacesBulkUpdateRequest) Execute() ([]Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesBulkUpdateExecute(r)
}

/*
DcimInterfacesBulkUpdate Method for DcimInterfacesBulkUpdate

Put a list of interface objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfacesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimInterfacesBulkUpdate(ctx context.Context) ApiDcimInterfacesBulkUpdateRequest {
	return ApiDcimInterfacesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Interface
func (a *DcimAPIService) DcimInterfacesBulkUpdateExecute(r ApiDcimInterfacesBulkUpdateRequest) ([]Interface, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interfaceRequest == nil {
		return localVarReturnValue, nil, reportError("interfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.interfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesCreateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	writableInterfaceRequest *WritableInterfaceRequest
}

func (r ApiDcimInterfacesCreateRequest) WritableInterfaceRequest(writableInterfaceRequest WritableInterfaceRequest) ApiDcimInterfacesCreateRequest {
	r.writableInterfaceRequest = &writableInterfaceRequest
	return r
}

func (r ApiDcimInterfacesCreateRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesCreateExecute(r)
}

/*
DcimInterfacesCreate Method for DcimInterfacesCreate

Post a list of interface objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfacesCreateRequest
*/
func (a *DcimAPIService) DcimInterfacesCreate(ctx context.Context) ApiDcimInterfacesCreateRequest {
	return ApiDcimInterfacesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Interface
func (a *DcimAPIService) DcimInterfacesCreateExecute(r ApiDcimInterfacesCreateRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("writableInterfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInterfacesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInterfacesDestroyExecute(r)
}

/*
DcimInterfacesDestroy Method for DcimInterfacesDestroy

Delete a interface object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this interface.
	@return ApiDcimInterfacesDestroyRequest
*/
func (a *DcimAPIService) DcimInterfacesDestroy(ctx context.Context, id int32) ApiDcimInterfacesDestroyRequest {
	return ApiDcimInterfacesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInterfacesDestroyExecute(r ApiDcimInterfacesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInterfacesListRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	bridgeId                *[]int32
	bridgeIdN               *[]int32
	cableEnd                *CircuitsCircuitTerminationsListCableEndParameter
	cableEndN               *CircuitsCircuitTerminationsListCableEndParameter
	cableId                 *[]*int32
	cableIdN                *[]*int32
	cabled                  *bool
	connected               *bool
	created                 *[]time.Time
	createdEmpty            *[]time.Time
	createdGt               *[]time.Time
	createdGte              *[]time.Time
	createdLt               *[]time.Time
	createdLte              *[]time.Time
	createdN                *[]time.Time
	createdByRequest        *string
	description             *[]string
	descriptionEmpty        *bool
	descriptionIc           *[]string
	descriptionIe           *[]string
	descriptionIew          *[]string
	descriptionIsw          *[]string
	descriptionN            *[]string
	descriptionNic          *[]string
	descriptionNie          *[]string
	descriptionNiew         *[]string
	descriptionNisw         *[]string
	device                  *[]*string
	deviceN                 *[]*string
	deviceId                *[]int32
	deviceIdN               *[]int32
	deviceRole              *[]string
	deviceRoleN             *[]string
	deviceRoleId            *[]int32
	deviceRoleIdN           *[]int32
	deviceStatus            *[]string
	deviceStatusN           *[]string
	deviceType              *[]string
	deviceTypeN             *[]string
	deviceTypeId            *[]int32
	deviceTypeIdN           *[]int32
	duplex                  *[]*string
	duplexN                 *[]*string
	enabled                 *bool
	id                      *[]int32
	idEmpty                 *bool
	idGt                    *[]int32
	idGte                   *[]int32
	idLt                    *[]int32
	idLte                   *[]int32
	idN                     *[]int32
	kind                    *string
	l2vpn                   *[]*int64
	l2vpnN                  *[]*int64
	l2vpnId                 *[]int32
	l2vpnIdN                *[]int32
	label                   *[]string
	labelEmpty              *bool
	labelIc                 *[]string
	labelIe                 *[]string
	labelIew                *[]string
	labelIsw                *[]string
	labelN                  *[]string
	labelNic                *[]string
	labelNie                *[]string
	labelNiew               *[]string
	labelNisw               *[]string
	lagId                   *[]int32
	lagIdN                  *[]int32
	lastUpdated             *[]time.Time
	lastUpdatedEmpty        *[]time.Time
	lastUpdatedGt           *[]time.Time
	lastUpdatedGte          *[]time.Time
	lastUpdatedLt           *[]time.Time
	lastUpdatedLte          *[]time.Time
	lastUpdatedN            *[]time.Time
	limit                   *int32
	location                *[]string
	locationN               *[]string
	locationId              *[]int32
	locationIdN             *[]int32
	macAddress              *[]string
	macAddressIc            *[]string
	macAddressIe            *[]string
	macAddressIew           *[]string
	macAddressIsw           *[]string
	macAddressN             *[]string
	macAddressNic           *[]string
	macAddressNie           *[]string
	macAddressNiew          *[]string
	macAddressNisw          *[]string
	markConnected           *bool
	mgmtOnly                *bool
	mode                    *DcimInterfacesListModeParameter
	modeN                   *DcimInterfacesListModeParameter
	modifiedByRequest       *string
	moduleId                *[]*int32
	moduleIdN               *[]*int32
	mtu                     *[]int32
	mtuEmpty                *bool
	mtuGt                   *[]int32
	mtuGte                  *[]int32
	mtuLt                   *[]int32
	mtuLte                  *[]int32
	mtuN                    *[]int32
	name                    *[]string
	nameEmpty               *bool
	nameIc                  *[]string
	nameIe                  *[]string
	nameIew                 *[]string
	nameIsw                 *[]string
	nameN                   *[]string
	nameNic                 *[]string
	nameNie                 *[]string
	nameNiew                *[]string
	nameNisw                *[]string
	occupied                *bool
	offset                  *int32
	ordering                *string
	parentId                *[]int32
	parentIdN               *[]int32
	poeMode                 *[]string
	poeModeN                *[]string
	poeType                 *[]string
	poeTypeN                *[]string
	q                       *string
	rack                    *[]string
	rackN                   *[]string
	rackId                  *[]int32
	rackIdN                 *[]int32
	region                  *[]string
	regionN                 *[]string
	regionId                *[]string
	regionIdN               *[]string
	rfChannel               *[]string
	rfChannelN              *[]string
	rfChannelFrequency      *[]float64
	rfChannelFrequencyEmpty *bool
	rfChannelFrequencyGt    *[]float64
	rfChannelFrequencyGte   *[]float64
	rfChannelFrequencyLt    *[]float64
	rfChannelFrequencyLte   *[]float64
	rfChannelFrequencyN     *[]float64
	rfChannelWidth          *[]float64
	rfChannelWidthEmpty     *bool
	rfChannelWidthGt        *[]float64
	rfChannelWidthGte       *[]float64
	rfChannelWidthLt        *[]float64
	rfChannelWidthLte       *[]float64
	rfChannelWidthN         *[]float64
	rfRole                  *[]string
	rfRoleN                 *[]string
	site                    *[]string
	siteN                   *[]string
	siteGroup               *[]string
	siteGroupN              *[]string
	siteGroupId             *[]string
	siteGroupIdN            *[]string
	siteId                  *[]int32
	siteIdN                 *[]int32
	speed                   *[]int32
	speedEmpty              *[]int32
	speedGt                 *[]int32
	speedGte                *[]int32
	speedLt                 *[]int32
	speedLte                *[]int32
	speedN                  *[]int32
	tag                     *[]string
	tagN                    *[]string
	txPower                 *[]int32
	txPowerEmpty            *bool
	txPowerGt               *[]int32
	txPowerGte              *[]int32
	txPowerLt               *[]int32
	txPowerLte              *[]int32
	txPowerN                *[]int32
	type_                   *[]string
	typeN                   *[]string
	updatedByRequest        *string
	vdc                     *[]string
	vdcN                    *[]string
	vdcId                   *[]int32
	vdcIdN                  *[]int32
	vdcIdentifier           *[]*int32
	vdcIdentifierN          *[]*int32
	virtualChassis          *[]string
	virtualChassisN         *[]string
	virtualChassisId        *[]int32
	virtualChassisIdN       *[]int32
	virtualChassisMember    *[]string
	virtualChassisMemberId  *[]int32
	vlan                    *string
	vlanId                  *string
	vrf                     *[]*string
	vrfN                    *[]*string
	vrfId                   *[]int32
	vrfIdN                  *[]int32
	wirelessLanId           *[]int32
	wirelessLanIdN          *[]int32
	wirelessLinkId          *[]*int32
	wirelessLinkIdN         *[]*int32
	wwn                     *[]string
	wwnIc                   *[]string
	wwnIe                   *[]string
	wwnIew                  *[]string
	wwnIsw                  *[]string
	wwnN                    *[]string
	wwnNic                  *[]string
	wwnNie                  *[]string
	wwnNiew                 *[]string
	wwnNisw                 *[]string
}

// Bridged interface (ID)
func (r ApiDcimInterfacesListRequest) BridgeId(bridgeId []int32) ApiDcimInterfacesListRequest {
	r.bridgeId = &bridgeId
	return r
}

// Bridged interface (ID)
func (r ApiDcimInterfacesListRequest) BridgeIdN(bridgeIdN []int32) ApiDcimInterfacesListRequest {
	r.bridgeIdN = &bridgeIdN
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimInterfacesListRequest) CableEnd(cableEnd CircuitsCircuitTerminationsListCableEndParameter) ApiDcimInterfacesListRequest {
	r.cableEnd = &cableEnd
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimInterfacesListRequest) CableEndN(cableEndN CircuitsCircuitTerminationsListCableEndParameter) ApiDcimInterfacesListRequest {
	r.cableEndN = &cableEndN
	return r
}

// Cable (ID)
func (r ApiDcimInterfacesListRequest) CableId(cableId []*int32) ApiDcimInterfacesListRequest {
	r.cableId = &cableId
	return r
}

// Cable (ID)
func (r ApiDcimInterfacesListRequest) CableIdN(cableIdN []*int32) ApiDcimInterfacesListRequest {
	r.cableIdN = &cableIdN
	return r
}

func (r ApiDcimInterfacesListRequest) Cabled(cabled bool) ApiDcimInterfacesListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimInterfacesListRequest) Connected(connected bool) ApiDcimInterfacesListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimInterfacesListRequest) Created(created []time.Time) ApiDcimInterfacesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimInterfacesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimInterfacesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) CreatedGt(createdGt []time.Time) ApiDcimInterfacesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimInterfacesListRequest) CreatedGte(createdGte []time.Time) ApiDcimInterfacesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimInterfacesListRequest) CreatedLt(createdLt []time.Time) ApiDcimInterfacesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimInterfacesListRequest) CreatedLte(createdLte []time.Time) ApiDcimInterfacesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimInterfacesListRequest) CreatedN(createdN []time.Time) ApiDcimInterfacesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimInterfacesListRequest) CreatedByRequest(createdByRequest string) ApiDcimInterfacesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimInterfacesListRequest) Description(description []string) ApiDcimInterfacesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimInterfacesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionIc(descriptionIc []string) ApiDcimInterfacesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionIe(descriptionIe []string) ApiDcimInterfacesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionIew(descriptionIew []string) ApiDcimInterfacesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimInterfacesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionN(descriptionN []string) ApiDcimInterfacesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNic(descriptionNic []string) ApiDcimInterfacesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNie(descriptionNie []string) ApiDcimInterfacesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimInterfacesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimInterfacesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimInterfacesListRequest) Device(device []*string) ApiDcimInterfacesListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimInterfacesListRequest) DeviceN(deviceN []*string) ApiDcimInterfacesListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimInterfacesListRequest) DeviceId(deviceId []int32) ApiDcimInterfacesListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimInterfacesListRequest) DeviceIdN(deviceIdN []int32) ApiDcimInterfacesListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimInterfacesListRequest) DeviceRole(deviceRole []string) ApiDcimInterfacesListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimInterfacesListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimInterfacesListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimInterfacesListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimInterfacesListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimInterfacesListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimInterfacesListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimInterfacesListRequest) DeviceStatus(deviceStatus []string) ApiDcimInterfacesListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimInterfacesListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimInterfacesListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimInterfacesListRequest) DeviceType(deviceType []string) ApiDcimInterfacesListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimInterfacesListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimInterfacesListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimInterfacesListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimInterfacesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimInterfacesListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimInterfacesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimInterfacesListRequest) Duplex(duplex []*string) ApiDcimInterfacesListRequest {
	r.duplex = &duplex
	return r
}

func (r ApiDcimInterfacesListRequest) DuplexN(duplexN []*string) ApiDcimInterfacesListRequest {
	r.duplexN = &duplexN
	return r
}

func (r ApiDcimInterfacesListRequest) Enabled(enabled bool) ApiDcimInterfacesListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiDcimInterfacesListRequest) Id(id []int32) ApiDcimInterfacesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimInterfacesListRequest) IdEmpty(idEmpty bool) ApiDcimInterfacesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) IdGt(idGt []int32) ApiDcimInterfacesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimInterfacesListRequest) IdGte(idGte []int32) ApiDcimInterfacesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimInterfacesListRequest) IdLt(idLt []int32) ApiDcimInterfacesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimInterfacesListRequest) IdLte(idLte []int32) ApiDcimInterfacesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimInterfacesListRequest) IdN(idN []int32) ApiDcimInterfacesListRequest {
	r.idN = &idN
	return r
}

// Kind of interface
func (r ApiDcimInterfacesListRequest) Kind(kind string) ApiDcimInterfacesListRequest {
	r.kind = &kind
	return r
}

// L2VPN
func (r ApiDcimInterfacesListRequest) L2vpn(l2vpn []*int64) ApiDcimInterfacesListRequest {
	r.l2vpn = &l2vpn
	return r
}

// L2VPN
func (r ApiDcimInterfacesListRequest) L2vpnN(l2vpnN []*int64) ApiDcimInterfacesListRequest {
	r.l2vpnN = &l2vpnN
	return r
}

// L2VPN (ID)
func (r ApiDcimInterfacesListRequest) L2vpnId(l2vpnId []int32) ApiDcimInterfacesListRequest {
	r.l2vpnId = &l2vpnId
	return r
}

// L2VPN (ID)
func (r ApiDcimInterfacesListRequest) L2vpnIdN(l2vpnIdN []int32) ApiDcimInterfacesListRequest {
	r.l2vpnIdN = &l2vpnIdN
	return r
}

func (r ApiDcimInterfacesListRequest) Label(label []string) ApiDcimInterfacesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimInterfacesListRequest) LabelEmpty(labelEmpty bool) ApiDcimInterfacesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) LabelIc(labelIc []string) ApiDcimInterfacesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimInterfacesListRequest) LabelIe(labelIe []string) ApiDcimInterfacesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimInterfacesListRequest) LabelIew(labelIew []string) ApiDcimInterfacesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimInterfacesListRequest) LabelIsw(labelIsw []string) ApiDcimInterfacesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimInterfacesListRequest) LabelN(labelN []string) ApiDcimInterfacesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimInterfacesListRequest) LabelNic(labelNic []string) ApiDcimInterfacesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimInterfacesListRequest) LabelNie(labelNie []string) ApiDcimInterfacesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimInterfacesListRequest) LabelNiew(labelNiew []string) ApiDcimInterfacesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimInterfacesListRequest) LabelNisw(labelNisw []string) ApiDcimInterfacesListRequest {
	r.labelNisw = &labelNisw
	return r
}

// LAG interface (ID)
func (r ApiDcimInterfacesListRequest) LagId(lagId []int32) ApiDcimInterfacesListRequest {
	r.lagId = &lagId
	return r
}

// LAG interface (ID)
func (r ApiDcimInterfacesListRequest) LagIdN(lagIdN []int32) ApiDcimInterfacesListRequest {
	r.lagIdN = &lagIdN
	return r
}

func (r ApiDcimInterfacesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimInterfacesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimInterfacesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimInterfacesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimInterfacesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimInterfacesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimInterfacesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimInterfacesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimInterfacesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimInterfacesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimInterfacesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimInterfacesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimInterfacesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimInterfacesListRequest) Limit(limit int32) ApiDcimInterfacesListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimInterfacesListRequest) Location(location []string) ApiDcimInterfacesListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimInterfacesListRequest) LocationN(locationN []string) ApiDcimInterfacesListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimInterfacesListRequest) LocationId(locationId []int32) ApiDcimInterfacesListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimInterfacesListRequest) LocationIdN(locationIdN []int32) ApiDcimInterfacesListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddress(macAddress []string) ApiDcimInterfacesListRequest {
	r.macAddress = &macAddress
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressIc(macAddressIc []string) ApiDcimInterfacesListRequest {
	r.macAddressIc = &macAddressIc
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressIe(macAddressIe []string) ApiDcimInterfacesListRequest {
	r.macAddressIe = &macAddressIe
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressIew(macAddressIew []string) ApiDcimInterfacesListRequest {
	r.macAddressIew = &macAddressIew
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressIsw(macAddressIsw []string) ApiDcimInterfacesListRequest {
	r.macAddressIsw = &macAddressIsw
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressN(macAddressN []string) ApiDcimInterfacesListRequest {
	r.macAddressN = &macAddressN
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNic(macAddressNic []string) ApiDcimInterfacesListRequest {
	r.macAddressNic = &macAddressNic
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNie(macAddressNie []string) ApiDcimInterfacesListRequest {
	r.macAddressNie = &macAddressNie
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNiew(macAddressNiew []string) ApiDcimInterfacesListRequest {
	r.macAddressNiew = &macAddressNiew
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNisw(macAddressNisw []string) ApiDcimInterfacesListRequest {
	r.macAddressNisw = &macAddressNisw
	return r
}

func (r ApiDcimInterfacesListRequest) MarkConnected(markConnected bool) ApiDcimInterfacesListRequest {
	r.markConnected = &markConnected
	return r
}

func (r ApiDcimInterfacesListRequest) MgmtOnly(mgmtOnly bool) ApiDcimInterfacesListRequest {
	r.mgmtOnly = &mgmtOnly
	return r
}

// IEEE 802.1Q tagging strategy  * &#x60;access&#x60; - Access * &#x60;tagged&#x60; - Tagged * &#x60;tagged-all&#x60; - Tagged (All)
func (r ApiDcimInterfacesListRequest) Mode(mode DcimInterfacesListModeParameter) ApiDcimInterfacesListRequest {
	r.mode = &mode
	return r
}

// IEEE 802.1Q tagging strategy  * &#x60;access&#x60; - Access * &#x60;tagged&#x60; - Tagged * &#x60;tagged-all&#x60; - Tagged (All)
func (r ApiDcimInterfacesListRequest) ModeN(modeN DcimInterfacesListModeParameter) ApiDcimInterfacesListRequest {
	r.modeN = &modeN
	return r
}

func (r ApiDcimInterfacesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimInterfacesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module (ID)
func (r ApiDcimInterfacesListRequest) ModuleId(moduleId []*int32) ApiDcimInterfacesListRequest {
	r.moduleId = &moduleId
	return r
}

// Module (ID)
func (r ApiDcimInterfacesListRequest) ModuleIdN(moduleIdN []*int32) ApiDcimInterfacesListRequest {
	r.moduleIdN = &moduleIdN
	return r
}

func (r ApiDcimInterfacesListRequest) Mtu(mtu []int32) ApiDcimInterfacesListRequest {
	r.mtu = &mtu
	return r
}

func (r ApiDcimInterfacesListRequest) MtuEmpty(mtuEmpty bool) ApiDcimInterfacesListRequest {
	r.mtuEmpty = &mtuEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) MtuGt(mtuGt []int32) ApiDcimInterfacesListRequest {
	r.mtuGt = &mtuGt
	return r
}

func (r ApiDcimInterfacesListRequest) MtuGte(mtuGte []int32) ApiDcimInterfacesListRequest {
	r.mtuGte = &mtuGte
	return r
}

func (r ApiDcimInterfacesListRequest) MtuLt(mtuLt []int32) ApiDcimInterfacesListRequest {
	r.mtuLt = &mtuLt
	return r
}

func (r ApiDcimInterfacesListRequest) MtuLte(mtuLte []int32) ApiDcimInterfacesListRequest {
	r.mtuLte = &mtuLte
	return r
}

func (r ApiDcimInterfacesListRequest) MtuN(mtuN []int32) ApiDcimInterfacesListRequest {
	r.mtuN = &mtuN
	return r
}

func (r ApiDcimInterfacesListRequest) Name(name []string) ApiDcimInterfacesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimInterfacesListRequest) NameEmpty(nameEmpty bool) ApiDcimInterfacesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) NameIc(nameIc []string) ApiDcimInterfacesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimInterfacesListRequest) NameIe(nameIe []string) ApiDcimInterfacesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimInterfacesListRequest) NameIew(nameIew []string) ApiDcimInterfacesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimInterfacesListRequest) NameIsw(nameIsw []string) ApiDcimInterfacesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimInterfacesListRequest) NameN(nameN []string) ApiDcimInterfacesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimInterfacesListRequest) NameNic(nameNic []string) ApiDcimInterfacesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimInterfacesListRequest) NameNie(nameNie []string) ApiDcimInterfacesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimInterfacesListRequest) NameNiew(nameNiew []string) ApiDcimInterfacesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimInterfacesListRequest) NameNisw(nameNisw []string) ApiDcimInterfacesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimInterfacesListRequest) Occupied(occupied bool) ApiDcimInterfacesListRequest {
	r.occupied = &occupied
	return r
}

// The initial index from which to return the results.
func (r ApiDcimInterfacesListRequest) Offset(offset int32) ApiDcimInterfacesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimInterfacesListRequest) Ordering(ordering string) ApiDcimInterfacesListRequest {
	r.ordering = &ordering
	return r
}

// Parent interface (ID)
func (r ApiDcimInterfacesListRequest) ParentId(parentId []int32) ApiDcimInterfacesListRequest {
	r.parentId = &parentId
	return r
}

// Parent interface (ID)
func (r ApiDcimInterfacesListRequest) ParentIdN(parentIdN []int32) ApiDcimInterfacesListRequest {
	r.parentIdN = &parentIdN
	return r
}

func (r ApiDcimInterfacesListRequest) PoeMode(poeMode []string) ApiDcimInterfacesListRequest {
	r.poeMode = &poeMode
	return r
}

func (r ApiDcimInterfacesListRequest) PoeModeN(poeModeN []string) ApiDcimInterfacesListRequest {
	r.poeModeN = &poeModeN
	return r
}

func (r ApiDcimInterfacesListRequest) PoeType(poeType []string) ApiDcimInterfacesListRequest {
	r.poeType = &poeType
	return r
}

func (r ApiDcimInterfacesListRequest) PoeTypeN(poeTypeN []string) ApiDcimInterfacesListRequest {
	r.poeTypeN = &poeTypeN
	return r
}

// Search
func (r ApiDcimInterfacesListRequest) Q(q string) ApiDcimInterfacesListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimInterfacesListRequest) Rack(rack []string) ApiDcimInterfacesListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimInterfacesListRequest) RackN(rackN []string) ApiDcimInterfacesListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimInterfacesListRequest) RackId(rackId []int32) ApiDcimInterfacesListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimInterfacesListRequest) RackIdN(rackIdN []int32) ApiDcimInterfacesListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimInterfacesListRequest) Region(region []string) ApiDcimInterfacesListRequest {
	r.region = &region
	return r
}

func (r ApiDcimInterfacesListRequest) RegionN(regionN []string) ApiDcimInterfacesListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimInterfacesListRequest) RegionId(regionId []string) ApiDcimInterfacesListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimInterfacesListRequest) RegionIdN(regionIdN []string) ApiDcimInterfacesListRequest {
	r.regionIdN = &regionIdN
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannel(rfChannel []string) ApiDcimInterfacesListRequest {
	r.rfChannel = &rfChannel
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelN(rfChannelN []string) ApiDcimInterfacesListRequest {
	r.rfChannelN = &rfChannelN
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelFrequency(rfChannelFrequency []float64) ApiDcimInterfacesListRequest {
	r.rfChannelFrequency = &rfChannelFrequency
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelFrequencyEmpty(rfChannelFrequencyEmpty bool) ApiDcimInterfacesListRequest {
	r.rfChannelFrequencyEmpty = &rfChannelFrequencyEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelFrequencyGt(rfChannelFrequencyGt []float64) ApiDcimInterfacesListRequest {
	r.rfChannelFrequencyGt = &rfChannelFrequencyGt
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelFrequencyGte(rfChannelFrequencyGte []float64) ApiDcimInterfacesListRequest {
	r.rfChannelFrequencyGte = &rfChannelFrequencyGte
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelFrequencyLt(rfChannelFrequencyLt []float64) ApiDcimInterfacesListRequest {
	r.rfChannelFrequencyLt = &rfChannelFrequencyLt
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelFrequencyLte(rfChannelFrequencyLte []float64) ApiDcimInterfacesListRequest {
	r.rfChannelFrequencyLte = &rfChannelFrequencyLte
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelFrequencyN(rfChannelFrequencyN []float64) ApiDcimInterfacesListRequest {
	r.rfChannelFrequencyN = &rfChannelFrequencyN
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelWidth(rfChannelWidth []float64) ApiDcimInterfacesListRequest {
	r.rfChannelWidth = &rfChannelWidth
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelWidthEmpty(rfChannelWidthEmpty bool) ApiDcimInterfacesListRequest {
	r.rfChannelWidthEmpty = &rfChannelWidthEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelWidthGt(rfChannelWidthGt []float64) ApiDcimInterfacesListRequest {
	r.rfChannelWidthGt = &rfChannelWidthGt
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelWidthGte(rfChannelWidthGte []float64) ApiDcimInterfacesListRequest {
	r.rfChannelWidthGte = &rfChannelWidthGte
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelWidthLt(rfChannelWidthLt []float64) ApiDcimInterfacesListRequest {
	r.rfChannelWidthLt = &rfChannelWidthLt
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelWidthLte(rfChannelWidthLte []float64) ApiDcimInterfacesListRequest {
	r.rfChannelWidthLte = &rfChannelWidthLte
	return r
}

func (r ApiDcimInterfacesListRequest) RfChannelWidthN(rfChannelWidthN []float64) ApiDcimInterfacesListRequest {
	r.rfChannelWidthN = &rfChannelWidthN
	return r
}

func (r ApiDcimInterfacesListRequest) RfRole(rfRole []string) ApiDcimInterfacesListRequest {
	r.rfRole = &rfRole
	return r
}

func (r ApiDcimInterfacesListRequest) RfRoleN(rfRoleN []string) ApiDcimInterfacesListRequest {
	r.rfRoleN = &rfRoleN
	return r
}

// Site name (slug)
func (r ApiDcimInterfacesListRequest) Site(site []string) ApiDcimInterfacesListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimInterfacesListRequest) SiteN(siteN []string) ApiDcimInterfacesListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimInterfacesListRequest) SiteGroup(siteGroup []string) ApiDcimInterfacesListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimInterfacesListRequest) SiteGroupN(siteGroupN []string) ApiDcimInterfacesListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimInterfacesListRequest) SiteGroupId(siteGroupId []string) ApiDcimInterfacesListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimInterfacesListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimInterfacesListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimInterfacesListRequest) SiteId(siteId []int32) ApiDcimInterfacesListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimInterfacesListRequest) SiteIdN(siteIdN []int32) ApiDcimInterfacesListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimInterfacesListRequest) Speed(speed []int32) ApiDcimInterfacesListRequest {
	r.speed = &speed
	return r
}

func (r ApiDcimInterfacesListRequest) SpeedEmpty(speedEmpty []int32) ApiDcimInterfacesListRequest {
	r.speedEmpty = &speedEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) SpeedGt(speedGt []int32) ApiDcimInterfacesListRequest {
	r.speedGt = &speedGt
	return r
}

func (r ApiDcimInterfacesListRequest) SpeedGte(speedGte []int32) ApiDcimInterfacesListRequest {
	r.speedGte = &speedGte
	return r
}

func (r ApiDcimInterfacesListRequest) SpeedLt(speedLt []int32) ApiDcimInterfacesListRequest {
	r.speedLt = &speedLt
	return r
}

func (r ApiDcimInterfacesListRequest) SpeedLte(speedLte []int32) ApiDcimInterfacesListRequest {
	r.speedLte = &speedLte
	return r
}

func (r ApiDcimInterfacesListRequest) SpeedN(speedN []int32) ApiDcimInterfacesListRequest {
	r.speedN = &speedN
	return r
}

func (r ApiDcimInterfacesListRequest) Tag(tag []string) ApiDcimInterfacesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimInterfacesListRequest) TagN(tagN []string) ApiDcimInterfacesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimInterfacesListRequest) TxPower(txPower []int32) ApiDcimInterfacesListRequest {
	r.txPower = &txPower
	return r
}

func (r ApiDcimInterfacesListRequest) TxPowerEmpty(txPowerEmpty bool) ApiDcimInterfacesListRequest {
	r.txPowerEmpty = &txPowerEmpty
	return r
}

func (r ApiDcimInterfacesListRequest) TxPowerGt(txPowerGt []int32) ApiDcimInterfacesListRequest {
	r.txPowerGt = &txPowerGt
	return r
}

func (r ApiDcimInterfacesListRequest) TxPowerGte(txPowerGte []int32) ApiDcimInterfacesListRequest {
	r.txPowerGte = &txPowerGte
	return r
}

func (r ApiDcimInterfacesListRequest) TxPowerLt(txPowerLt []int32) ApiDcimInterfacesListRequest {
	r.txPowerLt = &txPowerLt
	return r
}

func (r ApiDcimInterfacesListRequest) TxPowerLte(txPowerLte []int32) ApiDcimInterfacesListRequest {
	r.txPowerLte = &txPowerLte
	return r
}

func (r ApiDcimInterfacesListRequest) TxPowerN(txPowerN []int32) ApiDcimInterfacesListRequest {
	r.txPowerN = &txPowerN
	return r
}

func (r ApiDcimInterfacesListRequest) Type_(type_ []string) ApiDcimInterfacesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimInterfacesListRequest) TypeN(typeN []string) ApiDcimInterfacesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimInterfacesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimInterfacesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Device Context
func (r ApiDcimInterfacesListRequest) Vdc(vdc []string) ApiDcimInterfacesListRequest {
	r.vdc = &vdc
	return r
}

// Virtual Device Context
func (r ApiDcimInterfacesListRequest) VdcN(vdcN []string) ApiDcimInterfacesListRequest {
	r.vdcN = &vdcN
	return r
}

// Virtual Device Context
func (r ApiDcimInterfacesListRequest) VdcId(vdcId []int32) ApiDcimInterfacesListRequest {
	r.vdcId = &vdcId
	return r
}

// Virtual Device Context
func (r ApiDcimInterfacesListRequest) VdcIdN(vdcIdN []int32) ApiDcimInterfacesListRequest {
	r.vdcIdN = &vdcIdN
	return r
}

// Virtual Device Context (Identifier)
func (r ApiDcimInterfacesListRequest) VdcIdentifier(vdcIdentifier []*int32) ApiDcimInterfacesListRequest {
	r.vdcIdentifier = &vdcIdentifier
	return r
}

// Virtual Device Context (Identifier)
func (r ApiDcimInterfacesListRequest) VdcIdentifierN(vdcIdentifierN []*int32) ApiDcimInterfacesListRequest {
	r.vdcIdentifierN = &vdcIdentifierN
	return r
}

// Virtual Chassis
func (r ApiDcimInterfacesListRequest) VirtualChassis(virtualChassis []string) ApiDcimInterfacesListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimInterfacesListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimInterfacesListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimInterfacesListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimInterfacesListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimInterfacesListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimInterfacesListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimInterfacesListRequest) VirtualChassisMember(virtualChassisMember []string) ApiDcimInterfacesListRequest {
	r.virtualChassisMember = &virtualChassisMember
	return r
}

func (r ApiDcimInterfacesListRequest) VirtualChassisMemberId(virtualChassisMemberId []int32) ApiDcimInterfacesListRequest {
	r.virtualChassisMemberId = &virtualChassisMemberId
	return r
}

// Assigned VID
func (r ApiDcimInterfacesListRequest) Vlan(vlan string) ApiDcimInterfacesListRequest {
	r.vlan = &vlan
	return r
}

// Assigned VLAN
func (r ApiDcimInterfacesListRequest) VlanId(vlanId string) ApiDcimInterfacesListRequest {
	r.vlanId = &vlanId
	return r
}

// VRF (RD)
func (r ApiDcimInterfacesListRequest) Vrf(vrf []*string) ApiDcimInterfacesListRequest {
	r.vrf = &vrf
	return r
}

// VRF (RD)
func (r ApiDcimInterfacesListRequest) VrfN(vrfN []*string) ApiDcimInterfacesListRequest {
	r.vrfN = &vrfN
	return r
}

// VRF
func (r ApiDcimInterfacesListRequest) VrfId(vrfId []int32) ApiDcimInterfacesListRequest {
	r.vrfId = &vrfId
	return r
}

// VRF
func (r ApiDcimInterfacesListRequest) VrfIdN(vrfIdN []int32) ApiDcimInterfacesListRequest {
	r.vrfIdN = &vrfIdN
	return r
}

// Wireless LAN
func (r ApiDcimInterfacesListRequest) WirelessLanId(wirelessLanId []int32) ApiDcimInterfacesListRequest {
	r.wirelessLanId = &wirelessLanId
	return r
}

// Wireless LAN
func (r ApiDcimInterfacesListRequest) WirelessLanIdN(wirelessLanIdN []int32) ApiDcimInterfacesListRequest {
	r.wirelessLanIdN = &wirelessLanIdN
	return r
}

// Wireless link
func (r ApiDcimInterfacesListRequest) WirelessLinkId(wirelessLinkId []*int32) ApiDcimInterfacesListRequest {
	r.wirelessLinkId = &wirelessLinkId
	return r
}

// Wireless link
func (r ApiDcimInterfacesListRequest) WirelessLinkIdN(wirelessLinkIdN []*int32) ApiDcimInterfacesListRequest {
	r.wirelessLinkIdN = &wirelessLinkIdN
	return r
}

func (r ApiDcimInterfacesListRequest) Wwn(wwn []string) ApiDcimInterfacesListRequest {
	r.wwn = &wwn
	return r
}

func (r ApiDcimInterfacesListRequest) WwnIc(wwnIc []string) ApiDcimInterfacesListRequest {
	r.wwnIc = &wwnIc
	return r
}

func (r ApiDcimInterfacesListRequest) WwnIe(wwnIe []string) ApiDcimInterfacesListRequest {
	r.wwnIe = &wwnIe
	return r
}

func (r ApiDcimInterfacesListRequest) WwnIew(wwnIew []string) ApiDcimInterfacesListRequest {
	r.wwnIew = &wwnIew
	return r
}

func (r ApiDcimInterfacesListRequest) WwnIsw(wwnIsw []string) ApiDcimInterfacesListRequest {
	r.wwnIsw = &wwnIsw
	return r
}

func (r ApiDcimInterfacesListRequest) WwnN(wwnN []string) ApiDcimInterfacesListRequest {
	r.wwnN = &wwnN
	return r
}

func (r ApiDcimInterfacesListRequest) WwnNic(wwnNic []string) ApiDcimInterfacesListRequest {
	r.wwnNic = &wwnNic
	return r
}

func (r ApiDcimInterfacesListRequest) WwnNie(wwnNie []string) ApiDcimInterfacesListRequest {
	r.wwnNie = &wwnNie
	return r
}

func (r ApiDcimInterfacesListRequest) WwnNiew(wwnNiew []string) ApiDcimInterfacesListRequest {
	r.wwnNiew = &wwnNiew
	return r
}

func (r ApiDcimInterfacesListRequest) WwnNisw(wwnNisw []string) ApiDcimInterfacesListRequest {
	r.wwnNisw = &wwnNisw
	return r
}

func (r ApiDcimInterfacesListRequest) Execute() (*PaginatedInterfaceList, *http.Response, error) {
	return r.ApiService.DcimInterfacesListExecute(r)
}

/*
DcimInterfacesList Method for DcimInterfacesList

Get a list of interface objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInterfacesListRequest
*/
func (a *DcimAPIService) DcimInterfacesList(ctx context.Context) ApiDcimInterfacesListRequest {
	return ApiDcimInterfacesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedInterfaceList
func (a *DcimAPIService) DcimInterfacesListExecute(r ApiDcimInterfacesListRequest) (*PaginatedInterfaceList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedInterfaceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.bridgeId != nil {
		t := *r.bridgeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bridge_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bridge_id", t, "multi")
		}
	}
	if r.bridgeIdN != nil {
		t := *r.bridgeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bridge_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bridge_id__n", t, "multi")
		}
	}
	if r.cableEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end", r.cableEnd, "")
	}
	if r.cableEndN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end__n", r.cableEndN, "")
	}
	if r.cableId != nil {
		t := *r.cableId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", t, "multi")
		}
	}
	if r.cableIdN != nil {
		t := *r.cableIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", t, "multi")
		}
	}
	if r.cabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cabled", r.cabled, "")
	}
	if r.connected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connected", r.connected, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.duplex != nil {
		t := *r.duplex
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "duplex", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "duplex", t, "multi")
		}
	}
	if r.duplexN != nil {
		t := *r.duplexN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "duplex__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "duplex__n", t, "multi")
		}
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.kind != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "kind", r.kind, "")
	}
	if r.l2vpn != nil {
		t := *r.l2vpn
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "l2vpn", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "l2vpn", t, "multi")
		}
	}
	if r.l2vpnN != nil {
		t := *r.l2vpnN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "l2vpn__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "l2vpn__n", t, "multi")
		}
	}
	if r.l2vpnId != nil {
		t := *r.l2vpnId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "l2vpn_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "l2vpn_id", t, "multi")
		}
	}
	if r.l2vpnIdN != nil {
		t := *r.l2vpnIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "l2vpn_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "l2vpn_id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lagId != nil {
		t := *r.lagId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "lag_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "lag_id", t, "multi")
		}
	}
	if r.lagIdN != nil {
		t := *r.lagIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "lag_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "lag_id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.macAddress != nil {
		t := *r.macAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address", t, "multi")
		}
	}
	if r.macAddressIc != nil {
		t := *r.macAddressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ic", t, "multi")
		}
	}
	if r.macAddressIe != nil {
		t := *r.macAddressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__ie", t, "multi")
		}
	}
	if r.macAddressIew != nil {
		t := *r.macAddressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__iew", t, "multi")
		}
	}
	if r.macAddressIsw != nil {
		t := *r.macAddressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__isw", t, "multi")
		}
	}
	if r.macAddressN != nil {
		t := *r.macAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__n", t, "multi")
		}
	}
	if r.macAddressNic != nil {
		t := *r.macAddressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nic", t, "multi")
		}
	}
	if r.macAddressNie != nil {
		t := *r.macAddressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nie", t, "multi")
		}
	}
	if r.macAddressNiew != nil {
		t := *r.macAddressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__niew", t, "multi")
		}
	}
	if r.macAddressNisw != nil {
		t := *r.macAddressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mac_address__nisw", t, "multi")
		}
	}
	if r.markConnected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mark_connected", r.markConnected, "")
	}
	if r.mgmtOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mgmt_only", r.mgmtOnly, "")
	}
	if r.mode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mode", r.mode, "")
	}
	if r.modeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mode__n", r.modeN, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleId != nil {
		t := *r.moduleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", t, "multi")
		}
	}
	if r.moduleIdN != nil {
		t := *r.moduleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", t, "multi")
		}
	}
	if r.mtu != nil {
		t := *r.mtu
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu", t, "multi")
		}
	}
	if r.mtuEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__empty", r.mtuEmpty, "")
	}
	if r.mtuGt != nil {
		t := *r.mtuGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__gt", t, "multi")
		}
	}
	if r.mtuGte != nil {
		t := *r.mtuGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__gte", t, "multi")
		}
	}
	if r.mtuLt != nil {
		t := *r.mtuLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__lt", t, "multi")
		}
	}
	if r.mtuLte != nil {
		t := *r.mtuLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__lte", t, "multi")
		}
	}
	if r.mtuN != nil {
		t := *r.mtuN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mtu__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.occupied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occupied", r.occupied, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", t, "multi")
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", t, "multi")
		}
	}
	if r.poeMode != nil {
		t := *r.poeMode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "poe_mode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "poe_mode", t, "multi")
		}
	}
	if r.poeModeN != nil {
		t := *r.poeModeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "poe_mode__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "poe_mode__n", t, "multi")
		}
	}
	if r.poeType != nil {
		t := *r.poeType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "poe_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "poe_type", t, "multi")
		}
	}
	if r.poeTypeN != nil {
		t := *r.poeTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "poe_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "poe_type__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.rfChannel != nil {
		t := *r.rfChannel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel", t, "multi")
		}
	}
	if r.rfChannelN != nil {
		t := *r.rfChannelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel__n", t, "multi")
		}
	}
	if r.rfChannelFrequency != nil {
		t := *r.rfChannelFrequency
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency", t, "multi")
		}
	}
	if r.rfChannelFrequencyEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__empty", r.rfChannelFrequencyEmpty, "")
	}
	if r.rfChannelFrequencyGt != nil {
		t := *r.rfChannelFrequencyGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__gt", t, "multi")
		}
	}
	if r.rfChannelFrequencyGte != nil {
		t := *r.rfChannelFrequencyGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__gte", t, "multi")
		}
	}
	if r.rfChannelFrequencyLt != nil {
		t := *r.rfChannelFrequencyLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__lt", t, "multi")
		}
	}
	if r.rfChannelFrequencyLte != nil {
		t := *r.rfChannelFrequencyLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__lte", t, "multi")
		}
	}
	if r.rfChannelFrequencyN != nil {
		t := *r.rfChannelFrequencyN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_frequency__n", t, "multi")
		}
	}
	if r.rfChannelWidth != nil {
		t := *r.rfChannelWidth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width", t, "multi")
		}
	}
	if r.rfChannelWidthEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__empty", r.rfChannelWidthEmpty, "")
	}
	if r.rfChannelWidthGt != nil {
		t := *r.rfChannelWidthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__gt", t, "multi")
		}
	}
	if r.rfChannelWidthGte != nil {
		t := *r.rfChannelWidthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__gte", t, "multi")
		}
	}
	if r.rfChannelWidthLt != nil {
		t := *r.rfChannelWidthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__lt", t, "multi")
		}
	}
	if r.rfChannelWidthLte != nil {
		t := *r.rfChannelWidthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__lte", t, "multi")
		}
	}
	if r.rfChannelWidthN != nil {
		t := *r.rfChannelWidthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_channel_width__n", t, "multi")
		}
	}
	if r.rfRole != nil {
		t := *r.rfRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_role", t, "multi")
		}
	}
	if r.rfRoleN != nil {
		t := *r.rfRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rf_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rf_role__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.speed != nil {
		t := *r.speed
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "speed", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "speed", t, "multi")
		}
	}
	if r.speedEmpty != nil {
		t := *r.speedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "speed__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "speed__empty", t, "multi")
		}
	}
	if r.speedGt != nil {
		t := *r.speedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "speed__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "speed__gt", t, "multi")
		}
	}
	if r.speedGte != nil {
		t := *r.speedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "speed__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "speed__gte", t, "multi")
		}
	}
	if r.speedLt != nil {
		t := *r.speedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "speed__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "speed__lt", t, "multi")
		}
	}
	if r.speedLte != nil {
		t := *r.speedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "speed__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "speed__lte", t, "multi")
		}
	}
	if r.speedN != nil {
		t := *r.speedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "speed__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "speed__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.txPower != nil {
		t := *r.txPower
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power", t, "multi")
		}
	}
	if r.txPowerEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__empty", r.txPowerEmpty, "")
	}
	if r.txPowerGt != nil {
		t := *r.txPowerGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__gt", t, "multi")
		}
	}
	if r.txPowerGte != nil {
		t := *r.txPowerGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__gte", t, "multi")
		}
	}
	if r.txPowerLt != nil {
		t := *r.txPowerLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__lt", t, "multi")
		}
	}
	if r.txPowerLte != nil {
		t := *r.txPowerLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__lte", t, "multi")
		}
	}
	if r.txPowerN != nil {
		t := *r.txPowerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tx_power__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.vdc != nil {
		t := *r.vdc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vdc", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vdc", t, "multi")
		}
	}
	if r.vdcN != nil {
		t := *r.vdcN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vdc__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vdc__n", t, "multi")
		}
	}
	if r.vdcId != nil {
		t := *r.vdcId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vdc_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vdc_id", t, "multi")
		}
	}
	if r.vdcIdN != nil {
		t := *r.vdcIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vdc_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vdc_id__n", t, "multi")
		}
	}
	if r.vdcIdentifier != nil {
		t := *r.vdcIdentifier
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vdc_identifier", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vdc_identifier", t, "multi")
		}
	}
	if r.vdcIdentifierN != nil {
		t := *r.vdcIdentifierN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vdc_identifier__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vdc_identifier__n", t, "multi")
		}
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	if r.virtualChassisMember != nil {
		t := *r.virtualChassisMember
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_member", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_member", t, "multi")
		}
	}
	if r.virtualChassisMemberId != nil {
		t := *r.virtualChassisMemberId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_member_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_member_id", t, "multi")
		}
	}
	if r.vlan != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlan", r.vlan, "")
	}
	if r.vlanId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vlan_id", r.vlanId, "")
	}
	if r.vrf != nil {
		t := *r.vrf
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vrf", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vrf", t, "multi")
		}
	}
	if r.vrfN != nil {
		t := *r.vrfN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vrf__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vrf__n", t, "multi")
		}
	}
	if r.vrfId != nil {
		t := *r.vrfId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vrf_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vrf_id", t, "multi")
		}
	}
	if r.vrfIdN != nil {
		t := *r.vrfIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vrf_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vrf_id__n", t, "multi")
		}
	}
	if r.wirelessLanId != nil {
		t := *r.wirelessLanId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wireless_lan_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wireless_lan_id", t, "multi")
		}
	}
	if r.wirelessLanIdN != nil {
		t := *r.wirelessLanIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wireless_lan_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wireless_lan_id__n", t, "multi")
		}
	}
	if r.wirelessLinkId != nil {
		t := *r.wirelessLinkId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wireless_link_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wireless_link_id", t, "multi")
		}
	}
	if r.wirelessLinkIdN != nil {
		t := *r.wirelessLinkIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wireless_link_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wireless_link_id__n", t, "multi")
		}
	}
	if r.wwn != nil {
		t := *r.wwn
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn", t, "multi")
		}
	}
	if r.wwnIc != nil {
		t := *r.wwnIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__ic", t, "multi")
		}
	}
	if r.wwnIe != nil {
		t := *r.wwnIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__ie", t, "multi")
		}
	}
	if r.wwnIew != nil {
		t := *r.wwnIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__iew", t, "multi")
		}
	}
	if r.wwnIsw != nil {
		t := *r.wwnIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__isw", t, "multi")
		}
	}
	if r.wwnN != nil {
		t := *r.wwnN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__n", t, "multi")
		}
	}
	if r.wwnNic != nil {
		t := *r.wwnNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__nic", t, "multi")
		}
	}
	if r.wwnNie != nil {
		t := *r.wwnNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__nie", t, "multi")
		}
	}
	if r.wwnNiew != nil {
		t := *r.wwnNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__niew", t, "multi")
		}
	}
	if r.wwnNisw != nil {
		t := *r.wwnNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "wwn__nisw", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	id                              int32
	patchedWritableInterfaceRequest *PatchedWritableInterfaceRequest
}

func (r ApiDcimInterfacesPartialUpdateRequest) PatchedWritableInterfaceRequest(patchedWritableInterfaceRequest PatchedWritableInterfaceRequest) ApiDcimInterfacesPartialUpdateRequest {
	r.patchedWritableInterfaceRequest = &patchedWritableInterfaceRequest
	return r
}

func (r ApiDcimInterfacesPartialUpdateRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesPartialUpdateExecute(r)
}

/*
DcimInterfacesPartialUpdate Method for DcimInterfacesPartialUpdate

Patch a interface object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this interface.
	@return ApiDcimInterfacesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInterfacesPartialUpdate(ctx context.Context, id int32) ApiDcimInterfacesPartialUpdateRequest {
	return ApiDcimInterfacesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Interface
func (a *DcimAPIService) DcimInterfacesPartialUpdateExecute(r ApiDcimInterfacesPartialUpdateRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInterfacesRetrieveRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesRetrieveExecute(r)
}

/*
DcimInterfacesRetrieve Method for DcimInterfacesRetrieve

Get a interface object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this interface.
	@return ApiDcimInterfacesRetrieveRequest
*/
func (a *DcimAPIService) DcimInterfacesRetrieve(ctx context.Context, id int32) ApiDcimInterfacesRetrieveRequest {
	return ApiDcimInterfacesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Interface
func (a *DcimAPIService) DcimInterfacesRetrieveExecute(r ApiDcimInterfacesRetrieveRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesTraceRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInterfacesTraceRetrieveRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesTraceRetrieveExecute(r)
}

/*
DcimInterfacesTraceRetrieve Method for DcimInterfacesTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this interface.
	@return ApiDcimInterfacesTraceRetrieveRequest
*/
func (a *DcimAPIService) DcimInterfacesTraceRetrieve(ctx context.Context, id int32) ApiDcimInterfacesTraceRetrieveRequest {
	return ApiDcimInterfacesTraceRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Interface
func (a *DcimAPIService) DcimInterfacesTraceRetrieveExecute(r ApiDcimInterfacesTraceRetrieveRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	writableInterfaceRequest *WritableInterfaceRequest
}

func (r ApiDcimInterfacesUpdateRequest) WritableInterfaceRequest(writableInterfaceRequest WritableInterfaceRequest) ApiDcimInterfacesUpdateRequest {
	r.writableInterfaceRequest = &writableInterfaceRequest
	return r
}

func (r ApiDcimInterfacesUpdateRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesUpdateExecute(r)
}

/*
DcimInterfacesUpdate Method for DcimInterfacesUpdate

Put a interface object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this interface.
	@return ApiDcimInterfacesUpdateRequest
*/
func (a *DcimAPIService) DcimInterfacesUpdate(ctx context.Context, id int32) ApiDcimInterfacesUpdateRequest {
	return ApiDcimInterfacesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Interface
func (a *DcimAPIService) DcimInterfacesUpdateExecute(r ApiDcimInterfacesUpdateRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInterfacesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterfaceRequest == nil {
		return localVarReturnValue, nil, reportError("writableInterfaceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterfaceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemRolesBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	inventoryItemRoleRequest *[]InventoryItemRoleRequest
}

func (r ApiDcimInventoryItemRolesBulkDestroyRequest) InventoryItemRoleRequest(inventoryItemRoleRequest []InventoryItemRoleRequest) ApiDcimInventoryItemRolesBulkDestroyRequest {
	r.inventoryItemRoleRequest = &inventoryItemRoleRequest
	return r
}

func (r ApiDcimInventoryItemRolesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInventoryItemRolesBulkDestroyExecute(r)
}

/*
DcimInventoryItemRolesBulkDestroy Method for DcimInventoryItemRolesBulkDestroy

Delete a list of inventory item role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemRolesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimInventoryItemRolesBulkDestroy(ctx context.Context) ApiDcimInventoryItemRolesBulkDestroyRequest {
	return ApiDcimInventoryItemRolesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInventoryItemRolesBulkDestroyExecute(r ApiDcimInventoryItemRolesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemRolesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRoleRequest == nil {
		return nil, reportError("inventoryItemRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInventoryItemRolesBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	inventoryItemRoleRequest *[]InventoryItemRoleRequest
}

func (r ApiDcimInventoryItemRolesBulkPartialUpdateRequest) InventoryItemRoleRequest(inventoryItemRoleRequest []InventoryItemRoleRequest) ApiDcimInventoryItemRolesBulkPartialUpdateRequest {
	r.inventoryItemRoleRequest = &inventoryItemRoleRequest
	return r
}

func (r ApiDcimInventoryItemRolesBulkPartialUpdateRequest) Execute() ([]InventoryItemRole, *http.Response, error) {
	return r.ApiService.DcimInventoryItemRolesBulkPartialUpdateExecute(r)
}

/*
DcimInventoryItemRolesBulkPartialUpdate Method for DcimInventoryItemRolesBulkPartialUpdate

Patch a list of inventory item role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemRolesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemRolesBulkPartialUpdate(ctx context.Context) ApiDcimInventoryItemRolesBulkPartialUpdateRequest {
	return ApiDcimInventoryItemRolesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItemRole
func (a *DcimAPIService) DcimInventoryItemRolesBulkPartialUpdateExecute(r ApiDcimInventoryItemRolesBulkPartialUpdateRequest) ([]InventoryItemRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItemRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemRolesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRoleRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemRolesBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	inventoryItemRoleRequest *[]InventoryItemRoleRequest
}

func (r ApiDcimInventoryItemRolesBulkUpdateRequest) InventoryItemRoleRequest(inventoryItemRoleRequest []InventoryItemRoleRequest) ApiDcimInventoryItemRolesBulkUpdateRequest {
	r.inventoryItemRoleRequest = &inventoryItemRoleRequest
	return r
}

func (r ApiDcimInventoryItemRolesBulkUpdateRequest) Execute() ([]InventoryItemRole, *http.Response, error) {
	return r.ApiService.DcimInventoryItemRolesBulkUpdateExecute(r)
}

/*
DcimInventoryItemRolesBulkUpdate Method for DcimInventoryItemRolesBulkUpdate

Put a list of inventory item role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemRolesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemRolesBulkUpdate(ctx context.Context) ApiDcimInventoryItemRolesBulkUpdateRequest {
	return ApiDcimInventoryItemRolesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItemRole
func (a *DcimAPIService) DcimInventoryItemRolesBulkUpdateExecute(r ApiDcimInventoryItemRolesBulkUpdateRequest) ([]InventoryItemRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItemRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemRolesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRoleRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemRolesCreateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	inventoryItemRoleRequest *InventoryItemRoleRequest
}

func (r ApiDcimInventoryItemRolesCreateRequest) InventoryItemRoleRequest(inventoryItemRoleRequest InventoryItemRoleRequest) ApiDcimInventoryItemRolesCreateRequest {
	r.inventoryItemRoleRequest = &inventoryItemRoleRequest
	return r
}

func (r ApiDcimInventoryItemRolesCreateRequest) Execute() (*InventoryItemRole, *http.Response, error) {
	return r.ApiService.DcimInventoryItemRolesCreateExecute(r)
}

/*
DcimInventoryItemRolesCreate Method for DcimInventoryItemRolesCreate

Post a list of inventory item role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemRolesCreateRequest
*/
func (a *DcimAPIService) DcimInventoryItemRolesCreate(ctx context.Context) ApiDcimInventoryItemRolesCreateRequest {
	return ApiDcimInventoryItemRolesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InventoryItemRole
func (a *DcimAPIService) DcimInventoryItemRolesCreateExecute(r ApiDcimInventoryItemRolesCreateRequest) (*InventoryItemRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemRolesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRoleRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemRolesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInventoryItemRolesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInventoryItemRolesDestroyExecute(r)
}

/*
DcimInventoryItemRolesDestroy Method for DcimInventoryItemRolesDestroy

Delete a inventory item role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item role.
	@return ApiDcimInventoryItemRolesDestroyRequest
*/
func (a *DcimAPIService) DcimInventoryItemRolesDestroy(ctx context.Context, id int32) ApiDcimInventoryItemRolesDestroyRequest {
	return ApiDcimInventoryItemRolesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInventoryItemRolesDestroyExecute(r ApiDcimInventoryItemRolesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemRolesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInventoryItemRolesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	color             *[]string
	colorEmpty        *bool
	colorIc           *[]string
	colorIe           *[]string
	colorIew          *[]string
	colorIsw          *[]string
	colorN            *[]string
	colorNic          *[]string
	colorNie          *[]string
	colorNiew         *[]string
	colorNisw         *[]string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiDcimInventoryItemRolesListRequest) Color(color []string) ApiDcimInventoryItemRolesListRequest {
	r.color = &color
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorEmpty(colorEmpty bool) ApiDcimInventoryItemRolesListRequest {
	r.colorEmpty = &colorEmpty
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorIc(colorIc []string) ApiDcimInventoryItemRolesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorIe(colorIe []string) ApiDcimInventoryItemRolesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorIew(colorIew []string) ApiDcimInventoryItemRolesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorIsw(colorIsw []string) ApiDcimInventoryItemRolesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorN(colorN []string) ApiDcimInventoryItemRolesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorNic(colorNic []string) ApiDcimInventoryItemRolesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorNie(colorNie []string) ApiDcimInventoryItemRolesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorNiew(colorNiew []string) ApiDcimInventoryItemRolesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ColorNisw(colorNisw []string) ApiDcimInventoryItemRolesListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) Created(created []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) CreatedGt(createdGt []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) CreatedGte(createdGte []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) CreatedLt(createdLt []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) CreatedLte(createdLte []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) CreatedN(createdN []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) CreatedByRequest(createdByRequest string) ApiDcimInventoryItemRolesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) Description(description []string) ApiDcimInventoryItemRolesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimInventoryItemRolesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionIc(descriptionIc []string) ApiDcimInventoryItemRolesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionIe(descriptionIe []string) ApiDcimInventoryItemRolesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionIew(descriptionIew []string) ApiDcimInventoryItemRolesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimInventoryItemRolesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionN(descriptionN []string) ApiDcimInventoryItemRolesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionNic(descriptionNic []string) ApiDcimInventoryItemRolesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionNie(descriptionNie []string) ApiDcimInventoryItemRolesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimInventoryItemRolesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimInventoryItemRolesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) Id(id []int32) ApiDcimInventoryItemRolesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) IdEmpty(idEmpty bool) ApiDcimInventoryItemRolesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) IdGt(idGt []int32) ApiDcimInventoryItemRolesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) IdGte(idGte []int32) ApiDcimInventoryItemRolesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) IdLt(idLt []int32) ApiDcimInventoryItemRolesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) IdLte(idLte []int32) ApiDcimInventoryItemRolesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) IdN(idN []int32) ApiDcimInventoryItemRolesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimInventoryItemRolesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimInventoryItemRolesListRequest) Limit(limit int32) ApiDcimInventoryItemRolesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimInventoryItemRolesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) Name(name []string) ApiDcimInventoryItemRolesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameEmpty(nameEmpty bool) ApiDcimInventoryItemRolesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameIc(nameIc []string) ApiDcimInventoryItemRolesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameIe(nameIe []string) ApiDcimInventoryItemRolesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameIew(nameIew []string) ApiDcimInventoryItemRolesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameIsw(nameIsw []string) ApiDcimInventoryItemRolesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameN(nameN []string) ApiDcimInventoryItemRolesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameNic(nameNic []string) ApiDcimInventoryItemRolesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameNie(nameNie []string) ApiDcimInventoryItemRolesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameNiew(nameNiew []string) ApiDcimInventoryItemRolesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) NameNisw(nameNisw []string) ApiDcimInventoryItemRolesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimInventoryItemRolesListRequest) Offset(offset int32) ApiDcimInventoryItemRolesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimInventoryItemRolesListRequest) Ordering(ordering string) ApiDcimInventoryItemRolesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimInventoryItemRolesListRequest) Q(q string) ApiDcimInventoryItemRolesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) Slug(slug []string) ApiDcimInventoryItemRolesListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugEmpty(slugEmpty bool) ApiDcimInventoryItemRolesListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugIc(slugIc []string) ApiDcimInventoryItemRolesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugIe(slugIe []string) ApiDcimInventoryItemRolesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugIew(slugIew []string) ApiDcimInventoryItemRolesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugIsw(slugIsw []string) ApiDcimInventoryItemRolesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugN(slugN []string) ApiDcimInventoryItemRolesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugNic(slugNic []string) ApiDcimInventoryItemRolesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugNie(slugNie []string) ApiDcimInventoryItemRolesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugNiew(slugNiew []string) ApiDcimInventoryItemRolesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) SlugNisw(slugNisw []string) ApiDcimInventoryItemRolesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) Tag(tag []string) ApiDcimInventoryItemRolesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) TagN(tagN []string) ApiDcimInventoryItemRolesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimInventoryItemRolesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimInventoryItemRolesListRequest) Execute() (*PaginatedInventoryItemRoleList, *http.Response, error) {
	return r.ApiService.DcimInventoryItemRolesListExecute(r)
}

/*
DcimInventoryItemRolesList Method for DcimInventoryItemRolesList

Get a list of inventory item role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemRolesListRequest
*/
func (a *DcimAPIService) DcimInventoryItemRolesList(ctx context.Context) ApiDcimInventoryItemRolesListRequest {
	return ApiDcimInventoryItemRolesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedInventoryItemRoleList
func (a *DcimAPIService) DcimInventoryItemRolesListExecute(r ApiDcimInventoryItemRolesListRequest) (*PaginatedInventoryItemRoleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedInventoryItemRoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemRolesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "multi")
		}
	}
	if r.colorEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "color__empty", r.colorEmpty, "")
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemRolesPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	id                              int32
	patchedInventoryItemRoleRequest *PatchedInventoryItemRoleRequest
}

func (r ApiDcimInventoryItemRolesPartialUpdateRequest) PatchedInventoryItemRoleRequest(patchedInventoryItemRoleRequest PatchedInventoryItemRoleRequest) ApiDcimInventoryItemRolesPartialUpdateRequest {
	r.patchedInventoryItemRoleRequest = &patchedInventoryItemRoleRequest
	return r
}

func (r ApiDcimInventoryItemRolesPartialUpdateRequest) Execute() (*InventoryItemRole, *http.Response, error) {
	return r.ApiService.DcimInventoryItemRolesPartialUpdateExecute(r)
}

/*
DcimInventoryItemRolesPartialUpdate Method for DcimInventoryItemRolesPartialUpdate

Patch a inventory item role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item role.
	@return ApiDcimInventoryItemRolesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemRolesPartialUpdate(ctx context.Context, id int32) ApiDcimInventoryItemRolesPartialUpdateRequest {
	return ApiDcimInventoryItemRolesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemRole
func (a *DcimAPIService) DcimInventoryItemRolesPartialUpdateExecute(r ApiDcimInventoryItemRolesPartialUpdateRequest) (*InventoryItemRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemRolesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedInventoryItemRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemRolesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInventoryItemRolesRetrieveRequest) Execute() (*InventoryItemRole, *http.Response, error) {
	return r.ApiService.DcimInventoryItemRolesRetrieveExecute(r)
}

/*
DcimInventoryItemRolesRetrieve Method for DcimInventoryItemRolesRetrieve

Get a inventory item role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item role.
	@return ApiDcimInventoryItemRolesRetrieveRequest
*/
func (a *DcimAPIService) DcimInventoryItemRolesRetrieve(ctx context.Context, id int32) ApiDcimInventoryItemRolesRetrieveRequest {
	return ApiDcimInventoryItemRolesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemRole
func (a *DcimAPIService) DcimInventoryItemRolesRetrieveExecute(r ApiDcimInventoryItemRolesRetrieveRequest) (*InventoryItemRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemRolesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemRolesUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	inventoryItemRoleRequest *InventoryItemRoleRequest
}

func (r ApiDcimInventoryItemRolesUpdateRequest) InventoryItemRoleRequest(inventoryItemRoleRequest InventoryItemRoleRequest) ApiDcimInventoryItemRolesUpdateRequest {
	r.inventoryItemRoleRequest = &inventoryItemRoleRequest
	return r
}

func (r ApiDcimInventoryItemRolesUpdateRequest) Execute() (*InventoryItemRole, *http.Response, error) {
	return r.ApiService.DcimInventoryItemRolesUpdateExecute(r)
}

/*
DcimInventoryItemRolesUpdate Method for DcimInventoryItemRolesUpdate

Put a inventory item role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item role.
	@return ApiDcimInventoryItemRolesUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemRolesUpdate(ctx context.Context, id int32) ApiDcimInventoryItemRolesUpdateRequest {
	return ApiDcimInventoryItemRolesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemRole
func (a *DcimAPIService) DcimInventoryItemRolesUpdateExecute(r ApiDcimInventoryItemRolesUpdateRequest) (*InventoryItemRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemRolesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRoleRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemTemplatesBulkDestroyRequest struct {
	ctx                          context.Context
	ApiService                   *DcimAPIService
	inventoryItemTemplateRequest *[]InventoryItemTemplateRequest
}

func (r ApiDcimInventoryItemTemplatesBulkDestroyRequest) InventoryItemTemplateRequest(inventoryItemTemplateRequest []InventoryItemTemplateRequest) ApiDcimInventoryItemTemplatesBulkDestroyRequest {
	r.inventoryItemTemplateRequest = &inventoryItemTemplateRequest
	return r
}

func (r ApiDcimInventoryItemTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInventoryItemTemplatesBulkDestroyExecute(r)
}

/*
DcimInventoryItemTemplatesBulkDestroy Method for DcimInventoryItemTemplatesBulkDestroy

Delete a list of inventory item template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimInventoryItemTemplatesBulkDestroy(ctx context.Context) ApiDcimInventoryItemTemplatesBulkDestroyRequest {
	return ApiDcimInventoryItemTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInventoryItemTemplatesBulkDestroyExecute(r ApiDcimInventoryItemTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemTemplateRequest == nil {
		return nil, reportError("inventoryItemTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInventoryItemTemplatesBulkPartialUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *DcimAPIService
	inventoryItemTemplateRequest *[]InventoryItemTemplateRequest
}

func (r ApiDcimInventoryItemTemplatesBulkPartialUpdateRequest) InventoryItemTemplateRequest(inventoryItemTemplateRequest []InventoryItemTemplateRequest) ApiDcimInventoryItemTemplatesBulkPartialUpdateRequest {
	r.inventoryItemTemplateRequest = &inventoryItemTemplateRequest
	return r
}

func (r ApiDcimInventoryItemTemplatesBulkPartialUpdateRequest) Execute() ([]InventoryItemTemplate, *http.Response, error) {
	return r.ApiService.DcimInventoryItemTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimInventoryItemTemplatesBulkPartialUpdate Method for DcimInventoryItemTemplatesBulkPartialUpdate

Patch a list of inventory item template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimInventoryItemTemplatesBulkPartialUpdateRequest {
	return ApiDcimInventoryItemTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItemTemplate
func (a *DcimAPIService) DcimInventoryItemTemplatesBulkPartialUpdateExecute(r ApiDcimInventoryItemTemplatesBulkPartialUpdateRequest) ([]InventoryItemTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItemTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemTemplatesBulkUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *DcimAPIService
	inventoryItemTemplateRequest *[]InventoryItemTemplateRequest
}

func (r ApiDcimInventoryItemTemplatesBulkUpdateRequest) InventoryItemTemplateRequest(inventoryItemTemplateRequest []InventoryItemTemplateRequest) ApiDcimInventoryItemTemplatesBulkUpdateRequest {
	r.inventoryItemTemplateRequest = &inventoryItemTemplateRequest
	return r
}

func (r ApiDcimInventoryItemTemplatesBulkUpdateRequest) Execute() ([]InventoryItemTemplate, *http.Response, error) {
	return r.ApiService.DcimInventoryItemTemplatesBulkUpdateExecute(r)
}

/*
DcimInventoryItemTemplatesBulkUpdate Method for DcimInventoryItemTemplatesBulkUpdate

Put a list of inventory item template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemTemplatesBulkUpdate(ctx context.Context) ApiDcimInventoryItemTemplatesBulkUpdateRequest {
	return ApiDcimInventoryItemTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItemTemplate
func (a *DcimAPIService) DcimInventoryItemTemplatesBulkUpdateExecute(r ApiDcimInventoryItemTemplatesBulkUpdateRequest) ([]InventoryItemTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItemTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemTemplatesCreateRequest struct {
	ctx                          context.Context
	ApiService                   *DcimAPIService
	inventoryItemTemplateRequest *InventoryItemTemplateRequest
}

func (r ApiDcimInventoryItemTemplatesCreateRequest) InventoryItemTemplateRequest(inventoryItemTemplateRequest InventoryItemTemplateRequest) ApiDcimInventoryItemTemplatesCreateRequest {
	r.inventoryItemTemplateRequest = &inventoryItemTemplateRequest
	return r
}

func (r ApiDcimInventoryItemTemplatesCreateRequest) Execute() (*InventoryItemTemplate, *http.Response, error) {
	return r.ApiService.DcimInventoryItemTemplatesCreateExecute(r)
}

/*
DcimInventoryItemTemplatesCreate Method for DcimInventoryItemTemplatesCreate

Post a list of inventory item template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimInventoryItemTemplatesCreate(ctx context.Context) ApiDcimInventoryItemTemplatesCreateRequest {
	return ApiDcimInventoryItemTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InventoryItemTemplate
func (a *DcimAPIService) DcimInventoryItemTemplatesCreateExecute(r ApiDcimInventoryItemTemplatesCreateRequest) (*InventoryItemTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInventoryItemTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInventoryItemTemplatesDestroyExecute(r)
}

/*
DcimInventoryItemTemplatesDestroy Method for DcimInventoryItemTemplatesDestroy

Delete a inventory item template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item template.
	@return ApiDcimInventoryItemTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimInventoryItemTemplatesDestroy(ctx context.Context, id int32) ApiDcimInventoryItemTemplatesDestroyRequest {
	return ApiDcimInventoryItemTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInventoryItemTemplatesDestroyExecute(r ApiDcimInventoryItemTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInventoryItemTemplatesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	componentId       *[]int32
	componentIdEmpty  *[]int32
	componentIdGt     *[]int32
	componentIdGte    *[]int32
	componentIdLt     *[]int32
	componentIdLte    *[]int32
	componentIdN      *[]int32
	componentType     *string
	componentTypeN    *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	devicetypeId      *[]int32
	devicetypeIdN     *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	manufacturer      *[]string
	manufacturerN     *[]string
	manufacturerId    *[]*int32
	manufacturerIdN   *[]*int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	parentId          *[]*int32
	parentIdN         *[]*int32
	partId            *[]string
	partIdEmpty       *bool
	partIdIc          *[]string
	partIdIe          *[]string
	partIdIew         *[]string
	partIdIsw         *[]string
	partIdN           *[]string
	partIdNic         *[]string
	partIdNie         *[]string
	partIdNiew        *[]string
	partIdNisw        *[]string
	q                 *string
	role              *[]string
	roleN             *[]string
	roleId            *[]*int32
	roleIdN           *[]*int32
	updatedByRequest  *string
}

func (r ApiDcimInventoryItemTemplatesListRequest) ComponentId(componentId []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.componentId = &componentId
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) ComponentIdEmpty(componentIdEmpty []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.componentIdEmpty = &componentIdEmpty
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) ComponentIdGt(componentIdGt []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.componentIdGt = &componentIdGt
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) ComponentIdGte(componentIdGte []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.componentIdGte = &componentIdGte
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) ComponentIdLt(componentIdLt []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.componentIdLt = &componentIdLt
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) ComponentIdLte(componentIdLte []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.componentIdLte = &componentIdLte
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) ComponentIdN(componentIdN []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.componentIdN = &componentIdN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) ComponentType(componentType string) ApiDcimInventoryItemTemplatesListRequest {
	r.componentType = &componentType
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) ComponentTypeN(componentTypeN string) ApiDcimInventoryItemTemplatesListRequest {
	r.componentTypeN = &componentTypeN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) Created(created []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimInventoryItemTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) Description(description []string) ApiDcimInventoryItemTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimInventoryItemTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) DevicetypeId(devicetypeId []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) DevicetypeIdN(devicetypeIdN []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) Id(id []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimInventoryItemTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) IdGt(idGt []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) IdGte(idGte []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) IdLt(idLt []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) IdLte(idLte []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) IdN(idN []int32) ApiDcimInventoryItemTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) Label(label []string) ApiDcimInventoryItemTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimInventoryItemTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelIc(labelIc []string) ApiDcimInventoryItemTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelIe(labelIe []string) ApiDcimInventoryItemTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelIew(labelIew []string) ApiDcimInventoryItemTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimInventoryItemTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelN(labelN []string) ApiDcimInventoryItemTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelNic(labelNic []string) ApiDcimInventoryItemTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelNie(labelNie []string) ApiDcimInventoryItemTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimInventoryItemTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimInventoryItemTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimInventoryItemTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimInventoryItemTemplatesListRequest) Limit(limit int32) ApiDcimInventoryItemTemplatesListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiDcimInventoryItemTemplatesListRequest) Manufacturer(manufacturer []string) ApiDcimInventoryItemTemplatesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimInventoryItemTemplatesListRequest) ManufacturerN(manufacturerN []string) ApiDcimInventoryItemTemplatesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) ManufacturerId(manufacturerId []*int32) ApiDcimInventoryItemTemplatesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) ManufacturerIdN(manufacturerIdN []*int32) ApiDcimInventoryItemTemplatesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimInventoryItemTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) Name(name []string) ApiDcimInventoryItemTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimInventoryItemTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameIc(nameIc []string) ApiDcimInventoryItemTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameIe(nameIe []string) ApiDcimInventoryItemTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameIew(nameIew []string) ApiDcimInventoryItemTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimInventoryItemTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameN(nameN []string) ApiDcimInventoryItemTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameNic(nameNic []string) ApiDcimInventoryItemTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameNie(nameNie []string) ApiDcimInventoryItemTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimInventoryItemTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimInventoryItemTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimInventoryItemTemplatesListRequest) Offset(offset int32) ApiDcimInventoryItemTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimInventoryItemTemplatesListRequest) Ordering(ordering string) ApiDcimInventoryItemTemplatesListRequest {
	r.ordering = &ordering
	return r
}

// Parent inventory item (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) ParentId(parentId []*int32) ApiDcimInventoryItemTemplatesListRequest {
	r.parentId = &parentId
	return r
}

// Parent inventory item (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) ParentIdN(parentIdN []*int32) ApiDcimInventoryItemTemplatesListRequest {
	r.parentIdN = &parentIdN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartId(partId []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partId = &partId
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdEmpty(partIdEmpty bool) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdEmpty = &partIdEmpty
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdIc(partIdIc []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdIc = &partIdIc
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdIe(partIdIe []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdIe = &partIdIe
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdIew(partIdIew []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdIew = &partIdIew
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdIsw(partIdIsw []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdIsw = &partIdIsw
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdN(partIdN []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdN = &partIdN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdNic(partIdNic []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdNic = &partIdNic
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdNie(partIdNie []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdNie = &partIdNie
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdNiew(partIdNiew []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdNiew = &partIdNiew
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) PartIdNisw(partIdNisw []string) ApiDcimInventoryItemTemplatesListRequest {
	r.partIdNisw = &partIdNisw
	return r
}

// Search
func (r ApiDcimInventoryItemTemplatesListRequest) Q(q string) ApiDcimInventoryItemTemplatesListRequest {
	r.q = &q
	return r
}

// Role (slug)
func (r ApiDcimInventoryItemTemplatesListRequest) Role(role []string) ApiDcimInventoryItemTemplatesListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiDcimInventoryItemTemplatesListRequest) RoleN(roleN []string) ApiDcimInventoryItemTemplatesListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) RoleId(roleId []*int32) ApiDcimInventoryItemTemplatesListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiDcimInventoryItemTemplatesListRequest) RoleIdN(roleIdN []*int32) ApiDcimInventoryItemTemplatesListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimInventoryItemTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimInventoryItemTemplatesListRequest) Execute() (*PaginatedInventoryItemTemplateList, *http.Response, error) {
	return r.ApiService.DcimInventoryItemTemplatesListExecute(r)
}

/*
DcimInventoryItemTemplatesList Method for DcimInventoryItemTemplatesList

Get a list of inventory item template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemTemplatesListRequest
*/
func (a *DcimAPIService) DcimInventoryItemTemplatesList(ctx context.Context) ApiDcimInventoryItemTemplatesListRequest {
	return ApiDcimInventoryItemTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedInventoryItemTemplateList
func (a *DcimAPIService) DcimInventoryItemTemplatesListExecute(r ApiDcimInventoryItemTemplatesListRequest) (*PaginatedInventoryItemTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedInventoryItemTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.componentId != nil {
		t := *r.componentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id", t, "multi")
		}
	}
	if r.componentIdEmpty != nil {
		t := *r.componentIdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__empty", t, "multi")
		}
	}
	if r.componentIdGt != nil {
		t := *r.componentIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gt", t, "multi")
		}
	}
	if r.componentIdGte != nil {
		t := *r.componentIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gte", t, "multi")
		}
	}
	if r.componentIdLt != nil {
		t := *r.componentIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lt", t, "multi")
		}
	}
	if r.componentIdLte != nil {
		t := *r.componentIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lte", t, "multi")
		}
	}
	if r.componentIdN != nil {
		t := *r.componentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__n", t, "multi")
		}
	}
	if r.componentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component_type", r.componentType, "")
	}
	if r.componentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component_type__n", r.componentTypeN, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", t, "multi")
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", t, "multi")
		}
	}
	if r.partId != nil {
		t := *r.partId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id", t, "multi")
		}
	}
	if r.partIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__empty", r.partIdEmpty, "")
	}
	if r.partIdIc != nil {
		t := *r.partIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ic", t, "multi")
		}
	}
	if r.partIdIe != nil {
		t := *r.partIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ie", t, "multi")
		}
	}
	if r.partIdIew != nil {
		t := *r.partIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__iew", t, "multi")
		}
	}
	if r.partIdIsw != nil {
		t := *r.partIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__isw", t, "multi")
		}
	}
	if r.partIdN != nil {
		t := *r.partIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__n", t, "multi")
		}
	}
	if r.partIdNic != nil {
		t := *r.partIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nic", t, "multi")
		}
	}
	if r.partIdNie != nil {
		t := *r.partIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nie", t, "multi")
		}
	}
	if r.partIdNiew != nil {
		t := *r.partIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__niew", t, "multi")
		}
	}
	if r.partIdNisw != nil {
		t := *r.partIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nisw", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", t, "multi")
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemTemplatesPartialUpdateRequest struct {
	ctx                                 context.Context
	ApiService                          *DcimAPIService
	id                                  int32
	patchedInventoryItemTemplateRequest *PatchedInventoryItemTemplateRequest
}

func (r ApiDcimInventoryItemTemplatesPartialUpdateRequest) PatchedInventoryItemTemplateRequest(patchedInventoryItemTemplateRequest PatchedInventoryItemTemplateRequest) ApiDcimInventoryItemTemplatesPartialUpdateRequest {
	r.patchedInventoryItemTemplateRequest = &patchedInventoryItemTemplateRequest
	return r
}

func (r ApiDcimInventoryItemTemplatesPartialUpdateRequest) Execute() (*InventoryItemTemplate, *http.Response, error) {
	return r.ApiService.DcimInventoryItemTemplatesPartialUpdateExecute(r)
}

/*
DcimInventoryItemTemplatesPartialUpdate Method for DcimInventoryItemTemplatesPartialUpdate

Patch a inventory item template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item template.
	@return ApiDcimInventoryItemTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimInventoryItemTemplatesPartialUpdateRequest {
	return ApiDcimInventoryItemTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemTemplate
func (a *DcimAPIService) DcimInventoryItemTemplatesPartialUpdateExecute(r ApiDcimInventoryItemTemplatesPartialUpdateRequest) (*InventoryItemTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedInventoryItemTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInventoryItemTemplatesRetrieveRequest) Execute() (*InventoryItemTemplate, *http.Response, error) {
	return r.ApiService.DcimInventoryItemTemplatesRetrieveExecute(r)
}

/*
DcimInventoryItemTemplatesRetrieve Method for DcimInventoryItemTemplatesRetrieve

Get a inventory item template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item template.
	@return ApiDcimInventoryItemTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimInventoryItemTemplatesRetrieve(ctx context.Context, id int32) ApiDcimInventoryItemTemplatesRetrieveRequest {
	return ApiDcimInventoryItemTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemTemplate
func (a *DcimAPIService) DcimInventoryItemTemplatesRetrieveExecute(r ApiDcimInventoryItemTemplatesRetrieveRequest) (*InventoryItemTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemTemplatesUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *DcimAPIService
	id                           int32
	inventoryItemTemplateRequest *InventoryItemTemplateRequest
}

func (r ApiDcimInventoryItemTemplatesUpdateRequest) InventoryItemTemplateRequest(inventoryItemTemplateRequest InventoryItemTemplateRequest) ApiDcimInventoryItemTemplatesUpdateRequest {
	r.inventoryItemTemplateRequest = &inventoryItemTemplateRequest
	return r
}

func (r ApiDcimInventoryItemTemplatesUpdateRequest) Execute() (*InventoryItemTemplate, *http.Response, error) {
	return r.ApiService.DcimInventoryItemTemplatesUpdateExecute(r)
}

/*
DcimInventoryItemTemplatesUpdate Method for DcimInventoryItemTemplatesUpdate

Put a inventory item template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item template.
	@return ApiDcimInventoryItemTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemTemplatesUpdate(ctx context.Context, id int32) ApiDcimInventoryItemTemplatesUpdateRequest {
	return ApiDcimInventoryItemTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItemTemplate
func (a *DcimAPIService) DcimInventoryItemTemplatesUpdateExecute(r ApiDcimInventoryItemTemplatesUpdateRequest) (*InventoryItemTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItemTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-item-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsBulkDestroyRequest struct {
	ctx                  context.Context
	ApiService           *DcimAPIService
	inventoryItemRequest *[]InventoryItemRequest
}

func (r ApiDcimInventoryItemsBulkDestroyRequest) InventoryItemRequest(inventoryItemRequest []InventoryItemRequest) ApiDcimInventoryItemsBulkDestroyRequest {
	r.inventoryItemRequest = &inventoryItemRequest
	return r
}

func (r ApiDcimInventoryItemsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInventoryItemsBulkDestroyExecute(r)
}

/*
DcimInventoryItemsBulkDestroy Method for DcimInventoryItemsBulkDestroy

Delete a list of inventory item objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimInventoryItemsBulkDestroy(ctx context.Context) ApiDcimInventoryItemsBulkDestroyRequest {
	return ApiDcimInventoryItemsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInventoryItemsBulkDestroyExecute(r ApiDcimInventoryItemsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRequest == nil {
		return nil, reportError("inventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsBulkPartialUpdateRequest struct {
	ctx                  context.Context
	ApiService           *DcimAPIService
	inventoryItemRequest *[]InventoryItemRequest
}

func (r ApiDcimInventoryItemsBulkPartialUpdateRequest) InventoryItemRequest(inventoryItemRequest []InventoryItemRequest) ApiDcimInventoryItemsBulkPartialUpdateRequest {
	r.inventoryItemRequest = &inventoryItemRequest
	return r
}

func (r ApiDcimInventoryItemsBulkPartialUpdateRequest) Execute() ([]InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsBulkPartialUpdateExecute(r)
}

/*
DcimInventoryItemsBulkPartialUpdate Method for DcimInventoryItemsBulkPartialUpdate

Patch a list of inventory item objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemsBulkPartialUpdate(ctx context.Context) ApiDcimInventoryItemsBulkPartialUpdateRequest {
	return ApiDcimInventoryItemsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItem
func (a *DcimAPIService) DcimInventoryItemsBulkPartialUpdateExecute(r ApiDcimInventoryItemsBulkPartialUpdateRequest) ([]InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsBulkUpdateRequest struct {
	ctx                  context.Context
	ApiService           *DcimAPIService
	inventoryItemRequest *[]InventoryItemRequest
}

func (r ApiDcimInventoryItemsBulkUpdateRequest) InventoryItemRequest(inventoryItemRequest []InventoryItemRequest) ApiDcimInventoryItemsBulkUpdateRequest {
	r.inventoryItemRequest = &inventoryItemRequest
	return r
}

func (r ApiDcimInventoryItemsBulkUpdateRequest) Execute() ([]InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsBulkUpdateExecute(r)
}

/*
DcimInventoryItemsBulkUpdate Method for DcimInventoryItemsBulkUpdate

Put a list of inventory item objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemsBulkUpdate(ctx context.Context) ApiDcimInventoryItemsBulkUpdateRequest {
	return ApiDcimInventoryItemsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InventoryItem
func (a *DcimAPIService) DcimInventoryItemsBulkUpdateExecute(r ApiDcimInventoryItemsBulkUpdateRequest) ([]InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsCreateRequest struct {
	ctx                  context.Context
	ApiService           *DcimAPIService
	inventoryItemRequest *InventoryItemRequest
}

func (r ApiDcimInventoryItemsCreateRequest) InventoryItemRequest(inventoryItemRequest InventoryItemRequest) ApiDcimInventoryItemsCreateRequest {
	r.inventoryItemRequest = &inventoryItemRequest
	return r
}

func (r ApiDcimInventoryItemsCreateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsCreateExecute(r)
}

/*
DcimInventoryItemsCreate Method for DcimInventoryItemsCreate

Post a list of inventory item objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemsCreateRequest
*/
func (a *DcimAPIService) DcimInventoryItemsCreate(ctx context.Context) ApiDcimInventoryItemsCreateRequest {
	return ApiDcimInventoryItemsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InventoryItem
func (a *DcimAPIService) DcimInventoryItemsCreateExecute(r ApiDcimInventoryItemsCreateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInventoryItemsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInventoryItemsDestroyExecute(r)
}

/*
DcimInventoryItemsDestroy Method for DcimInventoryItemsDestroy

Delete a inventory item object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item.
	@return ApiDcimInventoryItemsDestroyRequest
*/
func (a *DcimAPIService) DcimInventoryItemsDestroy(ctx context.Context, id int32) ApiDcimInventoryItemsDestroyRequest {
	return ApiDcimInventoryItemsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimInventoryItemsDestroyExecute(r ApiDcimInventoryItemsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	assetTag          *[]string
	assetTagEmpty     *bool
	assetTagIc        *[]string
	assetTagIe        *[]string
	assetTagIew       *[]string
	assetTagIsw       *[]string
	assetTagN         *[]string
	assetTagNic       *[]string
	assetTagNie       *[]string
	assetTagNiew      *[]string
	assetTagNisw      *[]string
	componentId       *[]int32
	componentIdEmpty  *[]int32
	componentIdGt     *[]int32
	componentIdGte    *[]int32
	componentIdLt     *[]int32
	componentIdLte    *[]int32
	componentIdN      *[]int32
	componentType     *string
	componentTypeN    *string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	deviceRole        *[]string
	deviceRoleN       *[]string
	deviceRoleId      *[]int32
	deviceRoleIdN     *[]int32
	deviceStatus      *[]string
	deviceStatusN     *[]string
	deviceType        *[]string
	deviceTypeN       *[]string
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	discovered        *bool
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	location          *[]string
	locationN         *[]string
	locationId        *[]int32
	locationIdN       *[]int32
	manufacturer      *[]string
	manufacturerN     *[]string
	manufacturerId    *[]*int32
	manufacturerIdN   *[]*int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	parentId          *[]*int32
	parentIdN         *[]*int32
	partId            *[]string
	partIdEmpty       *bool
	partIdIc          *[]string
	partIdIe          *[]string
	partIdIew         *[]string
	partIdIsw         *[]string
	partIdN           *[]string
	partIdNic         *[]string
	partIdNie         *[]string
	partIdNiew        *[]string
	partIdNisw        *[]string
	q                 *string
	rack              *[]string
	rackN             *[]string
	rackId            *[]int32
	rackIdN           *[]int32
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	role              *[]string
	roleN             *[]string
	roleId            *[]*int32
	roleIdN           *[]*int32
	serial            *[]string
	serialEmpty       *bool
	serialIc          *[]string
	serialIe          *[]string
	serialIew         *[]string
	serialIsw         *[]string
	serialN           *[]string
	serialNic         *[]string
	serialNie         *[]string
	serialNiew        *[]string
	serialNisw        *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]string
	siteGroupIdN      *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
	virtualChassis    *[]string
	virtualChassisN   *[]string
	virtualChassisId  *[]int32
	virtualChassisIdN *[]int32
}

func (r ApiDcimInventoryItemsListRequest) AssetTag(assetTag []string) ApiDcimInventoryItemsListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagEmpty(assetTagEmpty bool) ApiDcimInventoryItemsListRequest {
	r.assetTagEmpty = &assetTagEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagIc(assetTagIc []string) ApiDcimInventoryItemsListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagIe(assetTagIe []string) ApiDcimInventoryItemsListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagIew(assetTagIew []string) ApiDcimInventoryItemsListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagIsw(assetTagIsw []string) ApiDcimInventoryItemsListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagN(assetTagN []string) ApiDcimInventoryItemsListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNic(assetTagNic []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNie(assetTagNie []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNiew(assetTagNiew []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNisw(assetTagNisw []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

func (r ApiDcimInventoryItemsListRequest) ComponentId(componentId []int32) ApiDcimInventoryItemsListRequest {
	r.componentId = &componentId
	return r
}

func (r ApiDcimInventoryItemsListRequest) ComponentIdEmpty(componentIdEmpty []int32) ApiDcimInventoryItemsListRequest {
	r.componentIdEmpty = &componentIdEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) ComponentIdGt(componentIdGt []int32) ApiDcimInventoryItemsListRequest {
	r.componentIdGt = &componentIdGt
	return r
}

func (r ApiDcimInventoryItemsListRequest) ComponentIdGte(componentIdGte []int32) ApiDcimInventoryItemsListRequest {
	r.componentIdGte = &componentIdGte
	return r
}

func (r ApiDcimInventoryItemsListRequest) ComponentIdLt(componentIdLt []int32) ApiDcimInventoryItemsListRequest {
	r.componentIdLt = &componentIdLt
	return r
}

func (r ApiDcimInventoryItemsListRequest) ComponentIdLte(componentIdLte []int32) ApiDcimInventoryItemsListRequest {
	r.componentIdLte = &componentIdLte
	return r
}

func (r ApiDcimInventoryItemsListRequest) ComponentIdN(componentIdN []int32) ApiDcimInventoryItemsListRequest {
	r.componentIdN = &componentIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) ComponentType(componentType string) ApiDcimInventoryItemsListRequest {
	r.componentType = &componentType
	return r
}

func (r ApiDcimInventoryItemsListRequest) ComponentTypeN(componentTypeN string) ApiDcimInventoryItemsListRequest {
	r.componentTypeN = &componentTypeN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Created(created []time.Time) ApiDcimInventoryItemsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimInventoryItemsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimInventoryItemsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) CreatedGt(createdGt []time.Time) ApiDcimInventoryItemsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimInventoryItemsListRequest) CreatedGte(createdGte []time.Time) ApiDcimInventoryItemsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimInventoryItemsListRequest) CreatedLt(createdLt []time.Time) ApiDcimInventoryItemsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimInventoryItemsListRequest) CreatedLte(createdLte []time.Time) ApiDcimInventoryItemsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimInventoryItemsListRequest) CreatedN(createdN []time.Time) ApiDcimInventoryItemsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) CreatedByRequest(createdByRequest string) ApiDcimInventoryItemsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimInventoryItemsListRequest) Description(description []string) ApiDcimInventoryItemsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimInventoryItemsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionIc(descriptionIc []string) ApiDcimInventoryItemsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionIe(descriptionIe []string) ApiDcimInventoryItemsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionIew(descriptionIew []string) ApiDcimInventoryItemsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimInventoryItemsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionN(descriptionN []string) ApiDcimInventoryItemsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionNic(descriptionNic []string) ApiDcimInventoryItemsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionNie(descriptionNie []string) ApiDcimInventoryItemsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimInventoryItemsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimInventoryItemsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimInventoryItemsListRequest) Device(device []*string) ApiDcimInventoryItemsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimInventoryItemsListRequest) DeviceN(deviceN []*string) ApiDcimInventoryItemsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimInventoryItemsListRequest) DeviceId(deviceId []int32) ApiDcimInventoryItemsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimInventoryItemsListRequest) DeviceIdN(deviceIdN []int32) ApiDcimInventoryItemsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimInventoryItemsListRequest) DeviceRole(deviceRole []string) ApiDcimInventoryItemsListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimInventoryItemsListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimInventoryItemsListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimInventoryItemsListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimInventoryItemsListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimInventoryItemsListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimInventoryItemsListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) DeviceStatus(deviceStatus []string) ApiDcimInventoryItemsListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimInventoryItemsListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimInventoryItemsListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimInventoryItemsListRequest) DeviceType(deviceType []string) ApiDcimInventoryItemsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimInventoryItemsListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimInventoryItemsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimInventoryItemsListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimInventoryItemsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimInventoryItemsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimInventoryItemsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Discovered(discovered bool) ApiDcimInventoryItemsListRequest {
	r.discovered = &discovered
	return r
}

func (r ApiDcimInventoryItemsListRequest) Id(id []int32) ApiDcimInventoryItemsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdEmpty(idEmpty bool) ApiDcimInventoryItemsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdGt(idGt []int32) ApiDcimInventoryItemsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdGte(idGte []int32) ApiDcimInventoryItemsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdLt(idLt []int32) ApiDcimInventoryItemsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdLte(idLte []int32) ApiDcimInventoryItemsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdN(idN []int32) ApiDcimInventoryItemsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Label(label []string) ApiDcimInventoryItemsListRequest {
	r.label = &label
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelEmpty(labelEmpty bool) ApiDcimInventoryItemsListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelIc(labelIc []string) ApiDcimInventoryItemsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelIe(labelIe []string) ApiDcimInventoryItemsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelIew(labelIew []string) ApiDcimInventoryItemsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelIsw(labelIsw []string) ApiDcimInventoryItemsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelN(labelN []string) ApiDcimInventoryItemsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelNic(labelNic []string) ApiDcimInventoryItemsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelNie(labelNie []string) ApiDcimInventoryItemsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelNiew(labelNiew []string) ApiDcimInventoryItemsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) LabelNisw(labelNisw []string) ApiDcimInventoryItemsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimInventoryItemsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimInventoryItemsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimInventoryItemsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimInventoryItemsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimInventoryItemsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimInventoryItemsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimInventoryItemsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimInventoryItemsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimInventoryItemsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimInventoryItemsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimInventoryItemsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimInventoryItemsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimInventoryItemsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimInventoryItemsListRequest) Limit(limit int32) ApiDcimInventoryItemsListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimInventoryItemsListRequest) Location(location []string) ApiDcimInventoryItemsListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimInventoryItemsListRequest) LocationN(locationN []string) ApiDcimInventoryItemsListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimInventoryItemsListRequest) LocationId(locationId []int32) ApiDcimInventoryItemsListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimInventoryItemsListRequest) LocationIdN(locationIdN []int32) ApiDcimInventoryItemsListRequest {
	r.locationIdN = &locationIdN
	return r
}

// Manufacturer (slug)
func (r ApiDcimInventoryItemsListRequest) Manufacturer(manufacturer []string) ApiDcimInventoryItemsListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimInventoryItemsListRequest) ManufacturerN(manufacturerN []string) ApiDcimInventoryItemsListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimInventoryItemsListRequest) ManufacturerId(manufacturerId []*int32) ApiDcimInventoryItemsListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimInventoryItemsListRequest) ManufacturerIdN(manufacturerIdN []*int32) ApiDcimInventoryItemsListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimInventoryItemsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimInventoryItemsListRequest) Name(name []string) ApiDcimInventoryItemsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameEmpty(nameEmpty bool) ApiDcimInventoryItemsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameIc(nameIc []string) ApiDcimInventoryItemsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameIe(nameIe []string) ApiDcimInventoryItemsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameIew(nameIew []string) ApiDcimInventoryItemsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameIsw(nameIsw []string) ApiDcimInventoryItemsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameN(nameN []string) ApiDcimInventoryItemsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNic(nameNic []string) ApiDcimInventoryItemsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNie(nameNie []string) ApiDcimInventoryItemsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNiew(nameNiew []string) ApiDcimInventoryItemsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNisw(nameNisw []string) ApiDcimInventoryItemsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimInventoryItemsListRequest) Offset(offset int32) ApiDcimInventoryItemsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimInventoryItemsListRequest) Ordering(ordering string) ApiDcimInventoryItemsListRequest {
	r.ordering = &ordering
	return r
}

// Parent inventory item (ID)
func (r ApiDcimInventoryItemsListRequest) ParentId(parentId []*int32) ApiDcimInventoryItemsListRequest {
	r.parentId = &parentId
	return r
}

// Parent inventory item (ID)
func (r ApiDcimInventoryItemsListRequest) ParentIdN(parentIdN []*int32) ApiDcimInventoryItemsListRequest {
	r.parentIdN = &parentIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartId(partId []string) ApiDcimInventoryItemsListRequest {
	r.partId = &partId
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdEmpty(partIdEmpty bool) ApiDcimInventoryItemsListRequest {
	r.partIdEmpty = &partIdEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdIc(partIdIc []string) ApiDcimInventoryItemsListRequest {
	r.partIdIc = &partIdIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdIe(partIdIe []string) ApiDcimInventoryItemsListRequest {
	r.partIdIe = &partIdIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdIew(partIdIew []string) ApiDcimInventoryItemsListRequest {
	r.partIdIew = &partIdIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdIsw(partIdIsw []string) ApiDcimInventoryItemsListRequest {
	r.partIdIsw = &partIdIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdN(partIdN []string) ApiDcimInventoryItemsListRequest {
	r.partIdN = &partIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNic(partIdNic []string) ApiDcimInventoryItemsListRequest {
	r.partIdNic = &partIdNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNie(partIdNie []string) ApiDcimInventoryItemsListRequest {
	r.partIdNie = &partIdNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNiew(partIdNiew []string) ApiDcimInventoryItemsListRequest {
	r.partIdNiew = &partIdNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNisw(partIdNisw []string) ApiDcimInventoryItemsListRequest {
	r.partIdNisw = &partIdNisw
	return r
}

// Search
func (r ApiDcimInventoryItemsListRequest) Q(q string) ApiDcimInventoryItemsListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimInventoryItemsListRequest) Rack(rack []string) ApiDcimInventoryItemsListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimInventoryItemsListRequest) RackN(rackN []string) ApiDcimInventoryItemsListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimInventoryItemsListRequest) RackId(rackId []int32) ApiDcimInventoryItemsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimInventoryItemsListRequest) RackIdN(rackIdN []int32) ApiDcimInventoryItemsListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Region(region []string) ApiDcimInventoryItemsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimInventoryItemsListRequest) RegionN(regionN []string) ApiDcimInventoryItemsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimInventoryItemsListRequest) RegionId(regionId []string) ApiDcimInventoryItemsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimInventoryItemsListRequest) RegionIdN(regionIdN []string) ApiDcimInventoryItemsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiDcimInventoryItemsListRequest) Role(role []string) ApiDcimInventoryItemsListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiDcimInventoryItemsListRequest) RoleN(roleN []string) ApiDcimInventoryItemsListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiDcimInventoryItemsListRequest) RoleId(roleId []*int32) ApiDcimInventoryItemsListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiDcimInventoryItemsListRequest) RoleIdN(roleIdN []*int32) ApiDcimInventoryItemsListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Serial(serial []string) ApiDcimInventoryItemsListRequest {
	r.serial = &serial
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialEmpty(serialEmpty bool) ApiDcimInventoryItemsListRequest {
	r.serialEmpty = &serialEmpty
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialIc(serialIc []string) ApiDcimInventoryItemsListRequest {
	r.serialIc = &serialIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialIe(serialIe []string) ApiDcimInventoryItemsListRequest {
	r.serialIe = &serialIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialIew(serialIew []string) ApiDcimInventoryItemsListRequest {
	r.serialIew = &serialIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialIsw(serialIsw []string) ApiDcimInventoryItemsListRequest {
	r.serialIsw = &serialIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialN(serialN []string) ApiDcimInventoryItemsListRequest {
	r.serialN = &serialN
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialNic(serialNic []string) ApiDcimInventoryItemsListRequest {
	r.serialNic = &serialNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialNie(serialNie []string) ApiDcimInventoryItemsListRequest {
	r.serialNie = &serialNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialNiew(serialNiew []string) ApiDcimInventoryItemsListRequest {
	r.serialNiew = &serialNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) SerialNisw(serialNisw []string) ApiDcimInventoryItemsListRequest {
	r.serialNisw = &serialNisw
	return r
}

// Site name (slug)
func (r ApiDcimInventoryItemsListRequest) Site(site []string) ApiDcimInventoryItemsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimInventoryItemsListRequest) SiteN(siteN []string) ApiDcimInventoryItemsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimInventoryItemsListRequest) SiteGroup(siteGroup []string) ApiDcimInventoryItemsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimInventoryItemsListRequest) SiteGroupN(siteGroupN []string) ApiDcimInventoryItemsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimInventoryItemsListRequest) SiteGroupId(siteGroupId []string) ApiDcimInventoryItemsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimInventoryItemsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimInventoryItemsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimInventoryItemsListRequest) SiteId(siteId []int32) ApiDcimInventoryItemsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimInventoryItemsListRequest) SiteIdN(siteIdN []int32) ApiDcimInventoryItemsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Tag(tag []string) ApiDcimInventoryItemsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimInventoryItemsListRequest) TagN(tagN []string) ApiDcimInventoryItemsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimInventoryItemsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimInventoryItemsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiDcimInventoryItemsListRequest) VirtualChassis(virtualChassis []string) ApiDcimInventoryItemsListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimInventoryItemsListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimInventoryItemsListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimInventoryItemsListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimInventoryItemsListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimInventoryItemsListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimInventoryItemsListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Execute() (*PaginatedInventoryItemList, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsListExecute(r)
}

/*
DcimInventoryItemsList Method for DcimInventoryItemsList

Get a list of inventory item objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimInventoryItemsListRequest
*/
func (a *DcimAPIService) DcimInventoryItemsList(ctx context.Context) ApiDcimInventoryItemsListRequest {
	return ApiDcimInventoryItemsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedInventoryItemList
func (a *DcimAPIService) DcimInventoryItemsListExecute(r ApiDcimInventoryItemsListRequest) (*PaginatedInventoryItemList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedInventoryItemList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", t, "multi")
		}
	}
	if r.assetTagEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__empty", r.assetTagEmpty, "")
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", t, "multi")
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", t, "multi")
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", t, "multi")
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", t, "multi")
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", t, "multi")
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", t, "multi")
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", t, "multi")
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", t, "multi")
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", t, "multi")
		}
	}
	if r.componentId != nil {
		t := *r.componentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id", t, "multi")
		}
	}
	if r.componentIdEmpty != nil {
		t := *r.componentIdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__empty", t, "multi")
		}
	}
	if r.componentIdGt != nil {
		t := *r.componentIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gt", t, "multi")
		}
	}
	if r.componentIdGte != nil {
		t := *r.componentIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__gte", t, "multi")
		}
	}
	if r.componentIdLt != nil {
		t := *r.componentIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lt", t, "multi")
		}
	}
	if r.componentIdLte != nil {
		t := *r.componentIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__lte", t, "multi")
		}
	}
	if r.componentIdN != nil {
		t := *r.componentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "component_id__n", t, "multi")
		}
	}
	if r.componentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component_type", r.componentType, "")
	}
	if r.componentTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component_type__n", r.componentTypeN, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.discovered != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "discovered", r.discovered, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", t, "multi")
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", t, "multi")
		}
	}
	if r.partId != nil {
		t := *r.partId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id", t, "multi")
		}
	}
	if r.partIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__empty", r.partIdEmpty, "")
	}
	if r.partIdIc != nil {
		t := *r.partIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ic", t, "multi")
		}
	}
	if r.partIdIe != nil {
		t := *r.partIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__ie", t, "multi")
		}
	}
	if r.partIdIew != nil {
		t := *r.partIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__iew", t, "multi")
		}
	}
	if r.partIdIsw != nil {
		t := *r.partIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__isw", t, "multi")
		}
	}
	if r.partIdN != nil {
		t := *r.partIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__n", t, "multi")
		}
	}
	if r.partIdNic != nil {
		t := *r.partIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nic", t, "multi")
		}
	}
	if r.partIdNie != nil {
		t := *r.partIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nie", t, "multi")
		}
	}
	if r.partIdNiew != nil {
		t := *r.partIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__niew", t, "multi")
		}
	}
	if r.partIdNisw != nil {
		t := *r.partIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_id__nisw", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", t, "multi")
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", t, "multi")
		}
	}
	if r.serial != nil {
		t := *r.serial
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial", t, "multi")
		}
	}
	if r.serialEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial__empty", r.serialEmpty, "")
	}
	if r.serialIc != nil {
		t := *r.serialIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", t, "multi")
		}
	}
	if r.serialIe != nil {
		t := *r.serialIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", t, "multi")
		}
	}
	if r.serialIew != nil {
		t := *r.serialIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", t, "multi")
		}
	}
	if r.serialIsw != nil {
		t := *r.serialIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", t, "multi")
		}
	}
	if r.serialN != nil {
		t := *r.serialN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", t, "multi")
		}
	}
	if r.serialNic != nil {
		t := *r.serialNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", t, "multi")
		}
	}
	if r.serialNie != nil {
		t := *r.serialNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", t, "multi")
		}
	}
	if r.serialNiew != nil {
		t := *r.serialNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", t, "multi")
		}
	}
	if r.serialNisw != nil {
		t := *r.serialNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *DcimAPIService
	id                          int32
	patchedInventoryItemRequest *PatchedInventoryItemRequest
}

func (r ApiDcimInventoryItemsPartialUpdateRequest) PatchedInventoryItemRequest(patchedInventoryItemRequest PatchedInventoryItemRequest) ApiDcimInventoryItemsPartialUpdateRequest {
	r.patchedInventoryItemRequest = &patchedInventoryItemRequest
	return r
}

func (r ApiDcimInventoryItemsPartialUpdateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsPartialUpdateExecute(r)
}

/*
DcimInventoryItemsPartialUpdate Method for DcimInventoryItemsPartialUpdate

Patch a inventory item object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item.
	@return ApiDcimInventoryItemsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemsPartialUpdate(ctx context.Context, id int32) ApiDcimInventoryItemsPartialUpdateRequest {
	return ApiDcimInventoryItemsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItem
func (a *DcimAPIService) DcimInventoryItemsPartialUpdateExecute(r ApiDcimInventoryItemsPartialUpdateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedInventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimInventoryItemsRetrieveRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsRetrieveExecute(r)
}

/*
DcimInventoryItemsRetrieve Method for DcimInventoryItemsRetrieve

Get a inventory item object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item.
	@return ApiDcimInventoryItemsRetrieveRequest
*/
func (a *DcimAPIService) DcimInventoryItemsRetrieve(ctx context.Context, id int32) ApiDcimInventoryItemsRetrieveRequest {
	return ApiDcimInventoryItemsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItem
func (a *DcimAPIService) DcimInventoryItemsRetrieveExecute(r ApiDcimInventoryItemsRetrieveRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsUpdateRequest struct {
	ctx                  context.Context
	ApiService           *DcimAPIService
	id                   int32
	inventoryItemRequest *InventoryItemRequest
}

func (r ApiDcimInventoryItemsUpdateRequest) InventoryItemRequest(inventoryItemRequest InventoryItemRequest) ApiDcimInventoryItemsUpdateRequest {
	r.inventoryItemRequest = &inventoryItemRequest
	return r
}

func (r ApiDcimInventoryItemsUpdateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsUpdateExecute(r)
}

/*
DcimInventoryItemsUpdate Method for DcimInventoryItemsUpdate

Put a inventory item object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this inventory item.
	@return ApiDcimInventoryItemsUpdateRequest
*/
func (a *DcimAPIService) DcimInventoryItemsUpdate(ctx context.Context, id int32) ApiDcimInventoryItemsUpdateRequest {
	return ApiDcimInventoryItemsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InventoryItem
func (a *DcimAPIService) DcimInventoryItemsUpdateExecute(r ApiDcimInventoryItemsUpdateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimInventoryItemsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inventoryItemRequest == nil {
		return localVarReturnValue, nil, reportError("inventoryItemRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inventoryItemRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimLocationsBulkDestroyRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	locationRequest *[]LocationRequest
}

func (r ApiDcimLocationsBulkDestroyRequest) LocationRequest(locationRequest []LocationRequest) ApiDcimLocationsBulkDestroyRequest {
	r.locationRequest = &locationRequest
	return r
}

func (r ApiDcimLocationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimLocationsBulkDestroyExecute(r)
}

/*
DcimLocationsBulkDestroy Method for DcimLocationsBulkDestroy

Delete a list of location objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimLocationsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimLocationsBulkDestroy(ctx context.Context) ApiDcimLocationsBulkDestroyRequest {
	return ApiDcimLocationsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimLocationsBulkDestroyExecute(r ApiDcimLocationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimLocationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/locations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.locationRequest == nil {
		return nil, reportError("locationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.locationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimLocationsBulkPartialUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	locationRequest *[]LocationRequest
}

func (r ApiDcimLocationsBulkPartialUpdateRequest) LocationRequest(locationRequest []LocationRequest) ApiDcimLocationsBulkPartialUpdateRequest {
	r.locationRequest = &locationRequest
	return r
}

func (r ApiDcimLocationsBulkPartialUpdateRequest) Execute() ([]Location, *http.Response, error) {
	return r.ApiService.DcimLocationsBulkPartialUpdateExecute(r)
}

/*
DcimLocationsBulkPartialUpdate Method for DcimLocationsBulkPartialUpdate

Patch a list of location objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimLocationsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimLocationsBulkPartialUpdate(ctx context.Context) ApiDcimLocationsBulkPartialUpdateRequest {
	return ApiDcimLocationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Location
func (a *DcimAPIService) DcimLocationsBulkPartialUpdateExecute(r ApiDcimLocationsBulkPartialUpdateRequest) ([]Location, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Location
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimLocationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/locations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.locationRequest == nil {
		return localVarReturnValue, nil, reportError("locationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.locationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimLocationsBulkUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	locationRequest *[]LocationRequest
}

func (r ApiDcimLocationsBulkUpdateRequest) LocationRequest(locationRequest []LocationRequest) ApiDcimLocationsBulkUpdateRequest {
	r.locationRequest = &locationRequest
	return r
}

func (r ApiDcimLocationsBulkUpdateRequest) Execute() ([]Location, *http.Response, error) {
	return r.ApiService.DcimLocationsBulkUpdateExecute(r)
}

/*
DcimLocationsBulkUpdate Method for DcimLocationsBulkUpdate

Put a list of location objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimLocationsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimLocationsBulkUpdate(ctx context.Context) ApiDcimLocationsBulkUpdateRequest {
	return ApiDcimLocationsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Location
func (a *DcimAPIService) DcimLocationsBulkUpdateExecute(r ApiDcimLocationsBulkUpdateRequest) ([]Location, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Location
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimLocationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/locations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.locationRequest == nil {
		return localVarReturnValue, nil, reportError("locationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.locationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimLocationsCreateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	writableLocationRequest *WritableLocationRequest
}

func (r ApiDcimLocationsCreateRequest) WritableLocationRequest(writableLocationRequest WritableLocationRequest) ApiDcimLocationsCreateRequest {
	r.writableLocationRequest = &writableLocationRequest
	return r
}

func (r ApiDcimLocationsCreateRequest) Execute() (*Location, *http.Response, error) {
	return r.ApiService.DcimLocationsCreateExecute(r)
}

/*
DcimLocationsCreate Method for DcimLocationsCreate

Post a list of location objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimLocationsCreateRequest
*/
func (a *DcimAPIService) DcimLocationsCreate(ctx context.Context) ApiDcimLocationsCreateRequest {
	return ApiDcimLocationsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Location
func (a *DcimAPIService) DcimLocationsCreateExecute(r ApiDcimLocationsCreateRequest) (*Location, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Location
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimLocationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/locations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableLocationRequest == nil {
		return localVarReturnValue, nil, reportError("writableLocationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableLocationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimLocationsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimLocationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimLocationsDestroyExecute(r)
}

/*
DcimLocationsDestroy Method for DcimLocationsDestroy

Delete a location object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this location.
	@return ApiDcimLocationsDestroyRequest
*/
func (a *DcimAPIService) DcimLocationsDestroy(ctx context.Context, id int32) ApiDcimLocationsDestroyRequest {
	return ApiDcimLocationsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimLocationsDestroyExecute(r ApiDcimLocationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimLocationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/locations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimLocationsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	ancestor          *[]string
	ancestorN         *[]string
	ancestorId        *[]string
	ancestorIdN       *[]string
	contact           *[]int32
	contactN          *[]int32
	contactGroup      *[]string
	contactGroupN     *[]string
	contactRole       *[]int32
	contactRoleN      *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	facility          *[]string
	facilityEmpty     *bool
	facilityIc        *[]string
	facilityIe        *[]string
	facilityIew       *[]string
	facilityIsw       *[]string
	facilityN         *[]string
	facilityNic       *[]string
	facilityNie       *[]string
	facilityNiew      *[]string
	facilityNisw      *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	parent            *[]string
	parentN           *[]string
	parentId          *[]*int32
	parentIdN         *[]*int32
	q                 *string
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]string
	siteGroupIdN      *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	status            *[]string
	statusN           *[]string
	tag               *[]string
	tagN              *[]string
	tenant            *[]string
	tenantN           *[]string
	tenantGroup       *[]string
	tenantGroupN      *[]string
	tenantGroupId     *[]string
	tenantGroupIdN    *[]string
	tenantId          *[]*int32
	tenantIdN         *[]*int32
	updatedByRequest  *string
}

func (r ApiDcimLocationsListRequest) Ancestor(ancestor []string) ApiDcimLocationsListRequest {
	r.ancestor = &ancestor
	return r
}

func (r ApiDcimLocationsListRequest) AncestorN(ancestorN []string) ApiDcimLocationsListRequest {
	r.ancestorN = &ancestorN
	return r
}

func (r ApiDcimLocationsListRequest) AncestorId(ancestorId []string) ApiDcimLocationsListRequest {
	r.ancestorId = &ancestorId
	return r
}

func (r ApiDcimLocationsListRequest) AncestorIdN(ancestorIdN []string) ApiDcimLocationsListRequest {
	r.ancestorIdN = &ancestorIdN
	return r
}

// Contact
func (r ApiDcimLocationsListRequest) Contact(contact []int32) ApiDcimLocationsListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiDcimLocationsListRequest) ContactN(contactN []int32) ApiDcimLocationsListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiDcimLocationsListRequest) ContactGroup(contactGroup []string) ApiDcimLocationsListRequest {
	r.contactGroup = &contactGroup
	return r
}

func (r ApiDcimLocationsListRequest) ContactGroupN(contactGroupN []string) ApiDcimLocationsListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiDcimLocationsListRequest) ContactRole(contactRole []int32) ApiDcimLocationsListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiDcimLocationsListRequest) ContactRoleN(contactRoleN []int32) ApiDcimLocationsListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiDcimLocationsListRequest) Created(created []time.Time) ApiDcimLocationsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimLocationsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimLocationsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimLocationsListRequest) CreatedGt(createdGt []time.Time) ApiDcimLocationsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimLocationsListRequest) CreatedGte(createdGte []time.Time) ApiDcimLocationsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimLocationsListRequest) CreatedLt(createdLt []time.Time) ApiDcimLocationsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimLocationsListRequest) CreatedLte(createdLte []time.Time) ApiDcimLocationsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimLocationsListRequest) CreatedN(createdN []time.Time) ApiDcimLocationsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimLocationsListRequest) CreatedByRequest(createdByRequest string) ApiDcimLocationsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimLocationsListRequest) Description(description []string) ApiDcimLocationsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimLocationsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionIc(descriptionIc []string) ApiDcimLocationsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionIe(descriptionIe []string) ApiDcimLocationsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionIew(descriptionIew []string) ApiDcimLocationsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimLocationsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionN(descriptionN []string) ApiDcimLocationsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionNic(descriptionNic []string) ApiDcimLocationsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionNie(descriptionNie []string) ApiDcimLocationsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimLocationsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimLocationsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimLocationsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimLocationsListRequest) Facility(facility []string) ApiDcimLocationsListRequest {
	r.facility = &facility
	return r
}

func (r ApiDcimLocationsListRequest) FacilityEmpty(facilityEmpty bool) ApiDcimLocationsListRequest {
	r.facilityEmpty = &facilityEmpty
	return r
}

func (r ApiDcimLocationsListRequest) FacilityIc(facilityIc []string) ApiDcimLocationsListRequest {
	r.facilityIc = &facilityIc
	return r
}

func (r ApiDcimLocationsListRequest) FacilityIe(facilityIe []string) ApiDcimLocationsListRequest {
	r.facilityIe = &facilityIe
	return r
}

func (r ApiDcimLocationsListRequest) FacilityIew(facilityIew []string) ApiDcimLocationsListRequest {
	r.facilityIew = &facilityIew
	return r
}

func (r ApiDcimLocationsListRequest) FacilityIsw(facilityIsw []string) ApiDcimLocationsListRequest {
	r.facilityIsw = &facilityIsw
	return r
}

func (r ApiDcimLocationsListRequest) FacilityN(facilityN []string) ApiDcimLocationsListRequest {
	r.facilityN = &facilityN
	return r
}

func (r ApiDcimLocationsListRequest) FacilityNic(facilityNic []string) ApiDcimLocationsListRequest {
	r.facilityNic = &facilityNic
	return r
}

func (r ApiDcimLocationsListRequest) FacilityNie(facilityNie []string) ApiDcimLocationsListRequest {
	r.facilityNie = &facilityNie
	return r
}

func (r ApiDcimLocationsListRequest) FacilityNiew(facilityNiew []string) ApiDcimLocationsListRequest {
	r.facilityNiew = &facilityNiew
	return r
}

func (r ApiDcimLocationsListRequest) FacilityNisw(facilityNisw []string) ApiDcimLocationsListRequest {
	r.facilityNisw = &facilityNisw
	return r
}

func (r ApiDcimLocationsListRequest) Id(id []int32) ApiDcimLocationsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimLocationsListRequest) IdEmpty(idEmpty bool) ApiDcimLocationsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimLocationsListRequest) IdGt(idGt []int32) ApiDcimLocationsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimLocationsListRequest) IdGte(idGte []int32) ApiDcimLocationsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimLocationsListRequest) IdLt(idLt []int32) ApiDcimLocationsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimLocationsListRequest) IdLte(idLte []int32) ApiDcimLocationsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimLocationsListRequest) IdN(idN []int32) ApiDcimLocationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimLocationsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimLocationsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimLocationsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimLocationsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimLocationsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimLocationsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimLocationsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimLocationsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimLocationsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimLocationsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimLocationsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimLocationsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimLocationsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimLocationsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimLocationsListRequest) Limit(limit int32) ApiDcimLocationsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimLocationsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimLocationsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimLocationsListRequest) Name(name []string) ApiDcimLocationsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimLocationsListRequest) NameEmpty(nameEmpty bool) ApiDcimLocationsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimLocationsListRequest) NameIc(nameIc []string) ApiDcimLocationsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimLocationsListRequest) NameIe(nameIe []string) ApiDcimLocationsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimLocationsListRequest) NameIew(nameIew []string) ApiDcimLocationsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimLocationsListRequest) NameIsw(nameIsw []string) ApiDcimLocationsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimLocationsListRequest) NameN(nameN []string) ApiDcimLocationsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimLocationsListRequest) NameNic(nameNic []string) ApiDcimLocationsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimLocationsListRequest) NameNie(nameNie []string) ApiDcimLocationsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimLocationsListRequest) NameNiew(nameNiew []string) ApiDcimLocationsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimLocationsListRequest) NameNisw(nameNisw []string) ApiDcimLocationsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimLocationsListRequest) Offset(offset int32) ApiDcimLocationsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimLocationsListRequest) Ordering(ordering string) ApiDcimLocationsListRequest {
	r.ordering = &ordering
	return r
}

// Parent location (slug)
func (r ApiDcimLocationsListRequest) Parent(parent []string) ApiDcimLocationsListRequest {
	r.parent = &parent
	return r
}

// Parent location (slug)
func (r ApiDcimLocationsListRequest) ParentN(parentN []string) ApiDcimLocationsListRequest {
	r.parentN = &parentN
	return r
}

// Parent location (ID)
func (r ApiDcimLocationsListRequest) ParentId(parentId []*int32) ApiDcimLocationsListRequest {
	r.parentId = &parentId
	return r
}

// Parent location (ID)
func (r ApiDcimLocationsListRequest) ParentIdN(parentIdN []*int32) ApiDcimLocationsListRequest {
	r.parentIdN = &parentIdN
	return r
}

// Search
func (r ApiDcimLocationsListRequest) Q(q string) ApiDcimLocationsListRequest {
	r.q = &q
	return r
}

func (r ApiDcimLocationsListRequest) Region(region []string) ApiDcimLocationsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimLocationsListRequest) RegionN(regionN []string) ApiDcimLocationsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimLocationsListRequest) RegionId(regionId []string) ApiDcimLocationsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimLocationsListRequest) RegionIdN(regionIdN []string) ApiDcimLocationsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site (slug)
func (r ApiDcimLocationsListRequest) Site(site []string) ApiDcimLocationsListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiDcimLocationsListRequest) SiteN(siteN []string) ApiDcimLocationsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimLocationsListRequest) SiteGroup(siteGroup []string) ApiDcimLocationsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimLocationsListRequest) SiteGroupN(siteGroupN []string) ApiDcimLocationsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimLocationsListRequest) SiteGroupId(siteGroupId []string) ApiDcimLocationsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimLocationsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimLocationsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimLocationsListRequest) SiteId(siteId []int32) ApiDcimLocationsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimLocationsListRequest) SiteIdN(siteIdN []int32) ApiDcimLocationsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimLocationsListRequest) Slug(slug []string) ApiDcimLocationsListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimLocationsListRequest) SlugEmpty(slugEmpty bool) ApiDcimLocationsListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimLocationsListRequest) SlugIc(slugIc []string) ApiDcimLocationsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimLocationsListRequest) SlugIe(slugIe []string) ApiDcimLocationsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimLocationsListRequest) SlugIew(slugIew []string) ApiDcimLocationsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimLocationsListRequest) SlugIsw(slugIsw []string) ApiDcimLocationsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimLocationsListRequest) SlugN(slugN []string) ApiDcimLocationsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimLocationsListRequest) SlugNic(slugNic []string) ApiDcimLocationsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimLocationsListRequest) SlugNie(slugNie []string) ApiDcimLocationsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimLocationsListRequest) SlugNiew(slugNiew []string) ApiDcimLocationsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimLocationsListRequest) SlugNisw(slugNisw []string) ApiDcimLocationsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimLocationsListRequest) Status(status []string) ApiDcimLocationsListRequest {
	r.status = &status
	return r
}

func (r ApiDcimLocationsListRequest) StatusN(statusN []string) ApiDcimLocationsListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimLocationsListRequest) Tag(tag []string) ApiDcimLocationsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimLocationsListRequest) TagN(tagN []string) ApiDcimLocationsListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimLocationsListRequest) Tenant(tenant []string) ApiDcimLocationsListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimLocationsListRequest) TenantN(tenantN []string) ApiDcimLocationsListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiDcimLocationsListRequest) TenantGroup(tenantGroup []string) ApiDcimLocationsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiDcimLocationsListRequest) TenantGroupN(tenantGroupN []string) ApiDcimLocationsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiDcimLocationsListRequest) TenantGroupId(tenantGroupId []string) ApiDcimLocationsListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiDcimLocationsListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimLocationsListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimLocationsListRequest) TenantId(tenantId []*int32) ApiDcimLocationsListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimLocationsListRequest) TenantIdN(tenantIdN []*int32) ApiDcimLocationsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimLocationsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimLocationsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimLocationsListRequest) Execute() (*PaginatedLocationList, *http.Response, error) {
	return r.ApiService.DcimLocationsListExecute(r)
}

/*
DcimLocationsList Method for DcimLocationsList

Get a list of location objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimLocationsListRequest
*/
func (a *DcimAPIService) DcimLocationsList(ctx context.Context) ApiDcimLocationsListRequest {
	return ApiDcimLocationsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedLocationList
func (a *DcimAPIService) DcimLocationsListExecute(r ApiDcimLocationsListRequest) (*PaginatedLocationList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedLocationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimLocationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/locations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ancestor != nil {
		t := *r.ancestor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor", t, "multi")
		}
	}
	if r.ancestorN != nil {
		t := *r.ancestorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor__n", t, "multi")
		}
	}
	if r.ancestorId != nil {
		t := *r.ancestorId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id", t, "multi")
		}
	}
	if r.ancestorIdN != nil {
		t := *r.ancestorIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id__n", t, "multi")
		}
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.facility != nil {
		t := *r.facility
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility", t, "multi")
		}
	}
	if r.facilityEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facility__empty", r.facilityEmpty, "")
	}
	if r.facilityIc != nil {
		t := *r.facilityIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__ic", t, "multi")
		}
	}
	if r.facilityIe != nil {
		t := *r.facilityIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__ie", t, "multi")
		}
	}
	if r.facilityIew != nil {
		t := *r.facilityIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__iew", t, "multi")
		}
	}
	if r.facilityIsw != nil {
		t := *r.facilityIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__isw", t, "multi")
		}
	}
	if r.facilityN != nil {
		t := *r.facilityN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__n", t, "multi")
		}
	}
	if r.facilityNic != nil {
		t := *r.facilityNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nic", t, "multi")
		}
	}
	if r.facilityNie != nil {
		t := *r.facilityNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nie", t, "multi")
		}
	}
	if r.facilityNiew != nil {
		t := *r.facilityNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__niew", t, "multi")
		}
	}
	if r.facilityNisw != nil {
		t := *r.facilityNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parent != nil {
		t := *r.parent
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent", t, "multi")
		}
	}
	if r.parentN != nil {
		t := *r.parentN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", t, "multi")
		}
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", t, "multi")
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimLocationsPartialUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *DcimAPIService
	id                             int32
	patchedWritableLocationRequest *PatchedWritableLocationRequest
}

func (r ApiDcimLocationsPartialUpdateRequest) PatchedWritableLocationRequest(patchedWritableLocationRequest PatchedWritableLocationRequest) ApiDcimLocationsPartialUpdateRequest {
	r.patchedWritableLocationRequest = &patchedWritableLocationRequest
	return r
}

func (r ApiDcimLocationsPartialUpdateRequest) Execute() (*Location, *http.Response, error) {
	return r.ApiService.DcimLocationsPartialUpdateExecute(r)
}

/*
DcimLocationsPartialUpdate Method for DcimLocationsPartialUpdate

Patch a location object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this location.
	@return ApiDcimLocationsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimLocationsPartialUpdate(ctx context.Context, id int32) ApiDcimLocationsPartialUpdateRequest {
	return ApiDcimLocationsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Location
func (a *DcimAPIService) DcimLocationsPartialUpdateExecute(r ApiDcimLocationsPartialUpdateRequest) (*Location, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Location
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimLocationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/locations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableLocationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimLocationsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimLocationsRetrieveRequest) Execute() (*Location, *http.Response, error) {
	return r.ApiService.DcimLocationsRetrieveExecute(r)
}

/*
DcimLocationsRetrieve Method for DcimLocationsRetrieve

Get a location object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this location.
	@return ApiDcimLocationsRetrieveRequest
*/
func (a *DcimAPIService) DcimLocationsRetrieve(ctx context.Context, id int32) ApiDcimLocationsRetrieveRequest {
	return ApiDcimLocationsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Location
func (a *DcimAPIService) DcimLocationsRetrieveExecute(r ApiDcimLocationsRetrieveRequest) (*Location, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Location
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimLocationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/locations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimLocationsUpdateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	id                      int32
	writableLocationRequest *WritableLocationRequest
}

func (r ApiDcimLocationsUpdateRequest) WritableLocationRequest(writableLocationRequest WritableLocationRequest) ApiDcimLocationsUpdateRequest {
	r.writableLocationRequest = &writableLocationRequest
	return r
}

func (r ApiDcimLocationsUpdateRequest) Execute() (*Location, *http.Response, error) {
	return r.ApiService.DcimLocationsUpdateExecute(r)
}

/*
DcimLocationsUpdate Method for DcimLocationsUpdate

Put a location object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this location.
	@return ApiDcimLocationsUpdateRequest
*/
func (a *DcimAPIService) DcimLocationsUpdate(ctx context.Context, id int32) ApiDcimLocationsUpdateRequest {
	return ApiDcimLocationsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Location
func (a *DcimAPIService) DcimLocationsUpdateExecute(r ApiDcimLocationsUpdateRequest) (*Location, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Location
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimLocationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/locations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableLocationRequest == nil {
		return localVarReturnValue, nil, reportError("writableLocationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableLocationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersBulkDestroyRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	manufacturerRequest *[]ManufacturerRequest
}

func (r ApiDcimManufacturersBulkDestroyRequest) ManufacturerRequest(manufacturerRequest []ManufacturerRequest) ApiDcimManufacturersBulkDestroyRequest {
	r.manufacturerRequest = &manufacturerRequest
	return r
}

func (r ApiDcimManufacturersBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimManufacturersBulkDestroyExecute(r)
}

/*
DcimManufacturersBulkDestroy Method for DcimManufacturersBulkDestroy

Delete a list of manufacturer objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimManufacturersBulkDestroyRequest
*/
func (a *DcimAPIService) DcimManufacturersBulkDestroy(ctx context.Context) ApiDcimManufacturersBulkDestroyRequest {
	return ApiDcimManufacturersBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimManufacturersBulkDestroyExecute(r ApiDcimManufacturersBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimManufacturersBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturerRequest == nil {
		return nil, reportError("manufacturerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manufacturerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimManufacturersBulkPartialUpdateRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	manufacturerRequest *[]ManufacturerRequest
}

func (r ApiDcimManufacturersBulkPartialUpdateRequest) ManufacturerRequest(manufacturerRequest []ManufacturerRequest) ApiDcimManufacturersBulkPartialUpdateRequest {
	r.manufacturerRequest = &manufacturerRequest
	return r
}

func (r ApiDcimManufacturersBulkPartialUpdateRequest) Execute() ([]Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersBulkPartialUpdateExecute(r)
}

/*
DcimManufacturersBulkPartialUpdate Method for DcimManufacturersBulkPartialUpdate

Patch a list of manufacturer objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimManufacturersBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimManufacturersBulkPartialUpdate(ctx context.Context) ApiDcimManufacturersBulkPartialUpdateRequest {
	return ApiDcimManufacturersBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Manufacturer
func (a *DcimAPIService) DcimManufacturersBulkPartialUpdateExecute(r ApiDcimManufacturersBulkPartialUpdateRequest) ([]Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimManufacturersBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturerRequest == nil {
		return localVarReturnValue, nil, reportError("manufacturerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manufacturerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersBulkUpdateRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	manufacturerRequest *[]ManufacturerRequest
}

func (r ApiDcimManufacturersBulkUpdateRequest) ManufacturerRequest(manufacturerRequest []ManufacturerRequest) ApiDcimManufacturersBulkUpdateRequest {
	r.manufacturerRequest = &manufacturerRequest
	return r
}

func (r ApiDcimManufacturersBulkUpdateRequest) Execute() ([]Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersBulkUpdateExecute(r)
}

/*
DcimManufacturersBulkUpdate Method for DcimManufacturersBulkUpdate

Put a list of manufacturer objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimManufacturersBulkUpdateRequest
*/
func (a *DcimAPIService) DcimManufacturersBulkUpdate(ctx context.Context) ApiDcimManufacturersBulkUpdateRequest {
	return ApiDcimManufacturersBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Manufacturer
func (a *DcimAPIService) DcimManufacturersBulkUpdateExecute(r ApiDcimManufacturersBulkUpdateRequest) ([]Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimManufacturersBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturerRequest == nil {
		return localVarReturnValue, nil, reportError("manufacturerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manufacturerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersCreateRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	manufacturerRequest *ManufacturerRequest
}

func (r ApiDcimManufacturersCreateRequest) ManufacturerRequest(manufacturerRequest ManufacturerRequest) ApiDcimManufacturersCreateRequest {
	r.manufacturerRequest = &manufacturerRequest
	return r
}

func (r ApiDcimManufacturersCreateRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersCreateExecute(r)
}

/*
DcimManufacturersCreate Method for DcimManufacturersCreate

Post a list of manufacturer objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimManufacturersCreateRequest
*/
func (a *DcimAPIService) DcimManufacturersCreate(ctx context.Context) ApiDcimManufacturersCreateRequest {
	return ApiDcimManufacturersCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Manufacturer
func (a *DcimAPIService) DcimManufacturersCreateExecute(r ApiDcimManufacturersCreateRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimManufacturersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturerRequest == nil {
		return localVarReturnValue, nil, reportError("manufacturerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manufacturerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimManufacturersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimManufacturersDestroyExecute(r)
}

/*
DcimManufacturersDestroy Method for DcimManufacturersDestroy

Delete a manufacturer object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this manufacturer.
	@return ApiDcimManufacturersDestroyRequest
*/
func (a *DcimAPIService) DcimManufacturersDestroy(ctx context.Context, id int32) ApiDcimManufacturersDestroyRequest {
	return ApiDcimManufacturersDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimManufacturersDestroyExecute(r ApiDcimManufacturersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimManufacturersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/manufacturers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimManufacturersListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	contact           *[]int32
	contactN          *[]int32
	contactGroup      *[]string
	contactGroupN     *[]string
	contactRole       *[]int32
	contactRoleN      *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

// Contact
func (r ApiDcimManufacturersListRequest) Contact(contact []int32) ApiDcimManufacturersListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiDcimManufacturersListRequest) ContactN(contactN []int32) ApiDcimManufacturersListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiDcimManufacturersListRequest) ContactGroup(contactGroup []string) ApiDcimManufacturersListRequest {
	r.contactGroup = &contactGroup
	return r
}

func (r ApiDcimManufacturersListRequest) ContactGroupN(contactGroupN []string) ApiDcimManufacturersListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiDcimManufacturersListRequest) ContactRole(contactRole []int32) ApiDcimManufacturersListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiDcimManufacturersListRequest) ContactRoleN(contactRoleN []int32) ApiDcimManufacturersListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiDcimManufacturersListRequest) Created(created []time.Time) ApiDcimManufacturersListRequest {
	r.created = &created
	return r
}

func (r ApiDcimManufacturersListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimManufacturersListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimManufacturersListRequest) CreatedGt(createdGt []time.Time) ApiDcimManufacturersListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimManufacturersListRequest) CreatedGte(createdGte []time.Time) ApiDcimManufacturersListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimManufacturersListRequest) CreatedLt(createdLt []time.Time) ApiDcimManufacturersListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimManufacturersListRequest) CreatedLte(createdLte []time.Time) ApiDcimManufacturersListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimManufacturersListRequest) CreatedN(createdN []time.Time) ApiDcimManufacturersListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimManufacturersListRequest) CreatedByRequest(createdByRequest string) ApiDcimManufacturersListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimManufacturersListRequest) Description(description []string) ApiDcimManufacturersListRequest {
	r.description = &description
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimManufacturersListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionIc(descriptionIc []string) ApiDcimManufacturersListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionIe(descriptionIe []string) ApiDcimManufacturersListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionIew(descriptionIew []string) ApiDcimManufacturersListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimManufacturersListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionN(descriptionN []string) ApiDcimManufacturersListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNic(descriptionNic []string) ApiDcimManufacturersListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNie(descriptionNie []string) ApiDcimManufacturersListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimManufacturersListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimManufacturersListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimManufacturersListRequest) Id(id []int32) ApiDcimManufacturersListRequest {
	r.id = &id
	return r
}

func (r ApiDcimManufacturersListRequest) IdEmpty(idEmpty bool) ApiDcimManufacturersListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimManufacturersListRequest) IdGt(idGt []int32) ApiDcimManufacturersListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimManufacturersListRequest) IdGte(idGte []int32) ApiDcimManufacturersListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimManufacturersListRequest) IdLt(idLt []int32) ApiDcimManufacturersListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimManufacturersListRequest) IdLte(idLte []int32) ApiDcimManufacturersListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimManufacturersListRequest) IdN(idN []int32) ApiDcimManufacturersListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimManufacturersListRequest) Limit(limit int32) ApiDcimManufacturersListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimManufacturersListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimManufacturersListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimManufacturersListRequest) Name(name []string) ApiDcimManufacturersListRequest {
	r.name = &name
	return r
}

func (r ApiDcimManufacturersListRequest) NameEmpty(nameEmpty bool) ApiDcimManufacturersListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimManufacturersListRequest) NameIc(nameIc []string) ApiDcimManufacturersListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimManufacturersListRequest) NameIe(nameIe []string) ApiDcimManufacturersListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimManufacturersListRequest) NameIew(nameIew []string) ApiDcimManufacturersListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimManufacturersListRequest) NameIsw(nameIsw []string) ApiDcimManufacturersListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimManufacturersListRequest) NameN(nameN []string) ApiDcimManufacturersListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimManufacturersListRequest) NameNic(nameNic []string) ApiDcimManufacturersListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimManufacturersListRequest) NameNie(nameNie []string) ApiDcimManufacturersListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimManufacturersListRequest) NameNiew(nameNiew []string) ApiDcimManufacturersListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimManufacturersListRequest) NameNisw(nameNisw []string) ApiDcimManufacturersListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimManufacturersListRequest) Offset(offset int32) ApiDcimManufacturersListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimManufacturersListRequest) Ordering(ordering string) ApiDcimManufacturersListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimManufacturersListRequest) Q(q string) ApiDcimManufacturersListRequest {
	r.q = &q
	return r
}

func (r ApiDcimManufacturersListRequest) Slug(slug []string) ApiDcimManufacturersListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimManufacturersListRequest) SlugEmpty(slugEmpty bool) ApiDcimManufacturersListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimManufacturersListRequest) SlugIc(slugIc []string) ApiDcimManufacturersListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimManufacturersListRequest) SlugIe(slugIe []string) ApiDcimManufacturersListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimManufacturersListRequest) SlugIew(slugIew []string) ApiDcimManufacturersListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimManufacturersListRequest) SlugIsw(slugIsw []string) ApiDcimManufacturersListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimManufacturersListRequest) SlugN(slugN []string) ApiDcimManufacturersListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNic(slugNic []string) ApiDcimManufacturersListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNie(slugNie []string) ApiDcimManufacturersListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNiew(slugNiew []string) ApiDcimManufacturersListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNisw(slugNisw []string) ApiDcimManufacturersListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimManufacturersListRequest) Tag(tag []string) ApiDcimManufacturersListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimManufacturersListRequest) TagN(tagN []string) ApiDcimManufacturersListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimManufacturersListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimManufacturersListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimManufacturersListRequest) Execute() (*PaginatedManufacturerList, *http.Response, error) {
	return r.ApiService.DcimManufacturersListExecute(r)
}

/*
DcimManufacturersList Method for DcimManufacturersList

Get a list of manufacturer objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimManufacturersListRequest
*/
func (a *DcimAPIService) DcimManufacturersList(ctx context.Context) ApiDcimManufacturersListRequest {
	return ApiDcimManufacturersListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedManufacturerList
func (a *DcimAPIService) DcimManufacturersListExecute(r ApiDcimManufacturersListRequest) (*PaginatedManufacturerList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedManufacturerList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimManufacturersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersPartialUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	id                         int32
	patchedManufacturerRequest *PatchedManufacturerRequest
}

func (r ApiDcimManufacturersPartialUpdateRequest) PatchedManufacturerRequest(patchedManufacturerRequest PatchedManufacturerRequest) ApiDcimManufacturersPartialUpdateRequest {
	r.patchedManufacturerRequest = &patchedManufacturerRequest
	return r
}

func (r ApiDcimManufacturersPartialUpdateRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersPartialUpdateExecute(r)
}

/*
DcimManufacturersPartialUpdate Method for DcimManufacturersPartialUpdate

Patch a manufacturer object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this manufacturer.
	@return ApiDcimManufacturersPartialUpdateRequest
*/
func (a *DcimAPIService) DcimManufacturersPartialUpdate(ctx context.Context, id int32) ApiDcimManufacturersPartialUpdateRequest {
	return ApiDcimManufacturersPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Manufacturer
func (a *DcimAPIService) DcimManufacturersPartialUpdateExecute(r ApiDcimManufacturersPartialUpdateRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimManufacturersPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/manufacturers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedManufacturerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimManufacturersRetrieveRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersRetrieveExecute(r)
}

/*
DcimManufacturersRetrieve Method for DcimManufacturersRetrieve

Get a manufacturer object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this manufacturer.
	@return ApiDcimManufacturersRetrieveRequest
*/
func (a *DcimAPIService) DcimManufacturersRetrieve(ctx context.Context, id int32) ApiDcimManufacturersRetrieveRequest {
	return ApiDcimManufacturersRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Manufacturer
func (a *DcimAPIService) DcimManufacturersRetrieveExecute(r ApiDcimManufacturersRetrieveRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimManufacturersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/manufacturers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersUpdateRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	id                  int32
	manufacturerRequest *ManufacturerRequest
}

func (r ApiDcimManufacturersUpdateRequest) ManufacturerRequest(manufacturerRequest ManufacturerRequest) ApiDcimManufacturersUpdateRequest {
	r.manufacturerRequest = &manufacturerRequest
	return r
}

func (r ApiDcimManufacturersUpdateRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersUpdateExecute(r)
}

/*
DcimManufacturersUpdate Method for DcimManufacturersUpdate

Put a manufacturer object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this manufacturer.
	@return ApiDcimManufacturersUpdateRequest
*/
func (a *DcimAPIService) DcimManufacturersUpdate(ctx context.Context, id int32) ApiDcimManufacturersUpdateRequest {
	return ApiDcimManufacturersUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Manufacturer
func (a *DcimAPIService) DcimManufacturersUpdateExecute(r ApiDcimManufacturersUpdateRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimManufacturersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/manufacturers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturerRequest == nil {
		return localVarReturnValue, nil, reportError("manufacturerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manufacturerRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBayTemplatesBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	moduleBayTemplateRequest *[]ModuleBayTemplateRequest
}

func (r ApiDcimModuleBayTemplatesBulkDestroyRequest) ModuleBayTemplateRequest(moduleBayTemplateRequest []ModuleBayTemplateRequest) ApiDcimModuleBayTemplatesBulkDestroyRequest {
	r.moduleBayTemplateRequest = &moduleBayTemplateRequest
	return r
}

func (r ApiDcimModuleBayTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimModuleBayTemplatesBulkDestroyExecute(r)
}

/*
DcimModuleBayTemplatesBulkDestroy Method for DcimModuleBayTemplatesBulkDestroy

Delete a list of module bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBayTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimModuleBayTemplatesBulkDestroy(ctx context.Context) ApiDcimModuleBayTemplatesBulkDestroyRequest {
	return ApiDcimModuleBayTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimModuleBayTemplatesBulkDestroyExecute(r ApiDcimModuleBayTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBayTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayTemplateRequest == nil {
		return nil, reportError("moduleBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimModuleBayTemplatesBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	moduleBayTemplateRequest *[]ModuleBayTemplateRequest
}

func (r ApiDcimModuleBayTemplatesBulkPartialUpdateRequest) ModuleBayTemplateRequest(moduleBayTemplateRequest []ModuleBayTemplateRequest) ApiDcimModuleBayTemplatesBulkPartialUpdateRequest {
	r.moduleBayTemplateRequest = &moduleBayTemplateRequest
	return r
}

func (r ApiDcimModuleBayTemplatesBulkPartialUpdateRequest) Execute() ([]ModuleBayTemplate, *http.Response, error) {
	return r.ApiService.DcimModuleBayTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimModuleBayTemplatesBulkPartialUpdate Method for DcimModuleBayTemplatesBulkPartialUpdate

Patch a list of module bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBayTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimModuleBayTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimModuleBayTemplatesBulkPartialUpdateRequest {
	return ApiDcimModuleBayTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ModuleBayTemplate
func (a *DcimAPIService) DcimModuleBayTemplatesBulkPartialUpdateExecute(r ApiDcimModuleBayTemplatesBulkPartialUpdateRequest) ([]ModuleBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ModuleBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBayTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("moduleBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBayTemplatesBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	moduleBayTemplateRequest *[]ModuleBayTemplateRequest
}

func (r ApiDcimModuleBayTemplatesBulkUpdateRequest) ModuleBayTemplateRequest(moduleBayTemplateRequest []ModuleBayTemplateRequest) ApiDcimModuleBayTemplatesBulkUpdateRequest {
	r.moduleBayTemplateRequest = &moduleBayTemplateRequest
	return r
}

func (r ApiDcimModuleBayTemplatesBulkUpdateRequest) Execute() ([]ModuleBayTemplate, *http.Response, error) {
	return r.ApiService.DcimModuleBayTemplatesBulkUpdateExecute(r)
}

/*
DcimModuleBayTemplatesBulkUpdate Method for DcimModuleBayTemplatesBulkUpdate

Put a list of module bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBayTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimModuleBayTemplatesBulkUpdate(ctx context.Context) ApiDcimModuleBayTemplatesBulkUpdateRequest {
	return ApiDcimModuleBayTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ModuleBayTemplate
func (a *DcimAPIService) DcimModuleBayTemplatesBulkUpdateExecute(r ApiDcimModuleBayTemplatesBulkUpdateRequest) ([]ModuleBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ModuleBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBayTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("moduleBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBayTemplatesCreateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	moduleBayTemplateRequest *ModuleBayTemplateRequest
}

func (r ApiDcimModuleBayTemplatesCreateRequest) ModuleBayTemplateRequest(moduleBayTemplateRequest ModuleBayTemplateRequest) ApiDcimModuleBayTemplatesCreateRequest {
	r.moduleBayTemplateRequest = &moduleBayTemplateRequest
	return r
}

func (r ApiDcimModuleBayTemplatesCreateRequest) Execute() (*ModuleBayTemplate, *http.Response, error) {
	return r.ApiService.DcimModuleBayTemplatesCreateExecute(r)
}

/*
DcimModuleBayTemplatesCreate Method for DcimModuleBayTemplatesCreate

Post a list of module bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBayTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimModuleBayTemplatesCreate(ctx context.Context) ApiDcimModuleBayTemplatesCreateRequest {
	return ApiDcimModuleBayTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModuleBayTemplate
func (a *DcimAPIService) DcimModuleBayTemplatesCreateExecute(r ApiDcimModuleBayTemplatesCreateRequest) (*ModuleBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBayTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("moduleBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBayTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimModuleBayTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimModuleBayTemplatesDestroyExecute(r)
}

/*
DcimModuleBayTemplatesDestroy Method for DcimModuleBayTemplatesDestroy

Delete a module bay template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module bay template.
	@return ApiDcimModuleBayTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimModuleBayTemplatesDestroy(ctx context.Context, id int32) ApiDcimModuleBayTemplatesDestroyRequest {
	return ApiDcimModuleBayTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimModuleBayTemplatesDestroyExecute(r ApiDcimModuleBayTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBayTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimModuleBayTemplatesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	devicetypeId      *[]int32
	devicetypeIdN     *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	position          *[]string
	positionEmpty     *bool
	positionIc        *[]string
	positionIe        *[]string
	positionIew       *[]string
	positionIsw       *[]string
	positionN         *[]string
	positionNic       *[]string
	positionNie       *[]string
	positionNiew      *[]string
	positionNisw      *[]string
	q                 *string
	updatedByRequest  *string
}

func (r ApiDcimModuleBayTemplatesListRequest) Created(created []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimModuleBayTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) Description(description []string) ApiDcimModuleBayTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimModuleBayTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimModuleBayTemplatesListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimModuleBayTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimModuleBayTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimModuleBayTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimModuleBayTemplatesListRequest) DevicetypeId(devicetypeId []int32) ApiDcimModuleBayTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimModuleBayTemplatesListRequest) DevicetypeIdN(devicetypeIdN []int32) ApiDcimModuleBayTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) Id(id []int32) ApiDcimModuleBayTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimModuleBayTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) IdGt(idGt []int32) ApiDcimModuleBayTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) IdGte(idGte []int32) ApiDcimModuleBayTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) IdLt(idLt []int32) ApiDcimModuleBayTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) IdLte(idLte []int32) ApiDcimModuleBayTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) IdN(idN []int32) ApiDcimModuleBayTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) Label(label []string) ApiDcimModuleBayTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimModuleBayTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelIc(labelIc []string) ApiDcimModuleBayTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelIe(labelIe []string) ApiDcimModuleBayTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelIew(labelIew []string) ApiDcimModuleBayTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimModuleBayTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelN(labelN []string) ApiDcimModuleBayTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelNic(labelNic []string) ApiDcimModuleBayTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelNie(labelNie []string) ApiDcimModuleBayTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimModuleBayTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimModuleBayTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimModuleBayTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimModuleBayTemplatesListRequest) Limit(limit int32) ApiDcimModuleBayTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimModuleBayTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) Name(name []string) ApiDcimModuleBayTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimModuleBayTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameIc(nameIc []string) ApiDcimModuleBayTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameIe(nameIe []string) ApiDcimModuleBayTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameIew(nameIew []string) ApiDcimModuleBayTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimModuleBayTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameN(nameN []string) ApiDcimModuleBayTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameNic(nameNic []string) ApiDcimModuleBayTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameNie(nameNie []string) ApiDcimModuleBayTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimModuleBayTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimModuleBayTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimModuleBayTemplatesListRequest) Offset(offset int32) ApiDcimModuleBayTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimModuleBayTemplatesListRequest) Ordering(ordering string) ApiDcimModuleBayTemplatesListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) Position(position []string) ApiDcimModuleBayTemplatesListRequest {
	r.position = &position
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionEmpty(positionEmpty bool) ApiDcimModuleBayTemplatesListRequest {
	r.positionEmpty = &positionEmpty
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionIc(positionIc []string) ApiDcimModuleBayTemplatesListRequest {
	r.positionIc = &positionIc
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionIe(positionIe []string) ApiDcimModuleBayTemplatesListRequest {
	r.positionIe = &positionIe
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionIew(positionIew []string) ApiDcimModuleBayTemplatesListRequest {
	r.positionIew = &positionIew
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionIsw(positionIsw []string) ApiDcimModuleBayTemplatesListRequest {
	r.positionIsw = &positionIsw
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionN(positionN []string) ApiDcimModuleBayTemplatesListRequest {
	r.positionN = &positionN
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionNic(positionNic []string) ApiDcimModuleBayTemplatesListRequest {
	r.positionNic = &positionNic
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionNie(positionNie []string) ApiDcimModuleBayTemplatesListRequest {
	r.positionNie = &positionNie
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionNiew(positionNiew []string) ApiDcimModuleBayTemplatesListRequest {
	r.positionNiew = &positionNiew
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) PositionNisw(positionNisw []string) ApiDcimModuleBayTemplatesListRequest {
	r.positionNisw = &positionNisw
	return r
}

// Search
func (r ApiDcimModuleBayTemplatesListRequest) Q(q string) ApiDcimModuleBayTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimModuleBayTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimModuleBayTemplatesListRequest) Execute() (*PaginatedModuleBayTemplateList, *http.Response, error) {
	return r.ApiService.DcimModuleBayTemplatesListExecute(r)
}

/*
DcimModuleBayTemplatesList Method for DcimModuleBayTemplatesList

Get a list of module bay template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBayTemplatesListRequest
*/
func (a *DcimAPIService) DcimModuleBayTemplatesList(ctx context.Context) ApiDcimModuleBayTemplatesListRequest {
	return ApiDcimModuleBayTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedModuleBayTemplateList
func (a *DcimAPIService) DcimModuleBayTemplatesListExecute(r ApiDcimModuleBayTemplatesListRequest) (*PaginatedModuleBayTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedModuleBayTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBayTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.position != nil {
		t := *r.position
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position", t, "multi")
		}
	}
	if r.positionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position__empty", r.positionEmpty, "")
	}
	if r.positionIc != nil {
		t := *r.positionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__ic", t, "multi")
		}
	}
	if r.positionIe != nil {
		t := *r.positionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__ie", t, "multi")
		}
	}
	if r.positionIew != nil {
		t := *r.positionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__iew", t, "multi")
		}
	}
	if r.positionIsw != nil {
		t := *r.positionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__isw", t, "multi")
		}
	}
	if r.positionN != nil {
		t := *r.positionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__n", t, "multi")
		}
	}
	if r.positionNic != nil {
		t := *r.positionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__nic", t, "multi")
		}
	}
	if r.positionNie != nil {
		t := *r.positionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__nie", t, "multi")
		}
	}
	if r.positionNiew != nil {
		t := *r.positionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__niew", t, "multi")
		}
	}
	if r.positionNisw != nil {
		t := *r.positionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__nisw", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBayTemplatesPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	id                              int32
	patchedModuleBayTemplateRequest *PatchedModuleBayTemplateRequest
}

func (r ApiDcimModuleBayTemplatesPartialUpdateRequest) PatchedModuleBayTemplateRequest(patchedModuleBayTemplateRequest PatchedModuleBayTemplateRequest) ApiDcimModuleBayTemplatesPartialUpdateRequest {
	r.patchedModuleBayTemplateRequest = &patchedModuleBayTemplateRequest
	return r
}

func (r ApiDcimModuleBayTemplatesPartialUpdateRequest) Execute() (*ModuleBayTemplate, *http.Response, error) {
	return r.ApiService.DcimModuleBayTemplatesPartialUpdateExecute(r)
}

/*
DcimModuleBayTemplatesPartialUpdate Method for DcimModuleBayTemplatesPartialUpdate

Patch a module bay template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module bay template.
	@return ApiDcimModuleBayTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimModuleBayTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimModuleBayTemplatesPartialUpdateRequest {
	return ApiDcimModuleBayTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ModuleBayTemplate
func (a *DcimAPIService) DcimModuleBayTemplatesPartialUpdateExecute(r ApiDcimModuleBayTemplatesPartialUpdateRequest) (*ModuleBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBayTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedModuleBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBayTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimModuleBayTemplatesRetrieveRequest) Execute() (*ModuleBayTemplate, *http.Response, error) {
	return r.ApiService.DcimModuleBayTemplatesRetrieveExecute(r)
}

/*
DcimModuleBayTemplatesRetrieve Method for DcimModuleBayTemplatesRetrieve

Get a module bay template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module bay template.
	@return ApiDcimModuleBayTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimModuleBayTemplatesRetrieve(ctx context.Context, id int32) ApiDcimModuleBayTemplatesRetrieveRequest {
	return ApiDcimModuleBayTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ModuleBayTemplate
func (a *DcimAPIService) DcimModuleBayTemplatesRetrieveExecute(r ApiDcimModuleBayTemplatesRetrieveRequest) (*ModuleBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBayTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBayTemplatesUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	moduleBayTemplateRequest *ModuleBayTemplateRequest
}

func (r ApiDcimModuleBayTemplatesUpdateRequest) ModuleBayTemplateRequest(moduleBayTemplateRequest ModuleBayTemplateRequest) ApiDcimModuleBayTemplatesUpdateRequest {
	r.moduleBayTemplateRequest = &moduleBayTemplateRequest
	return r
}

func (r ApiDcimModuleBayTemplatesUpdateRequest) Execute() (*ModuleBayTemplate, *http.Response, error) {
	return r.ApiService.DcimModuleBayTemplatesUpdateExecute(r)
}

/*
DcimModuleBayTemplatesUpdate Method for DcimModuleBayTemplatesUpdate

Put a module bay template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module bay template.
	@return ApiDcimModuleBayTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimModuleBayTemplatesUpdate(ctx context.Context, id int32) ApiDcimModuleBayTemplatesUpdateRequest {
	return ApiDcimModuleBayTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ModuleBayTemplate
func (a *DcimAPIService) DcimModuleBayTemplatesUpdateExecute(r ApiDcimModuleBayTemplatesUpdateRequest) (*ModuleBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBayTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("moduleBayTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBaysBulkDestroyRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	moduleBayRequest *[]ModuleBayRequest
}

func (r ApiDcimModuleBaysBulkDestroyRequest) ModuleBayRequest(moduleBayRequest []ModuleBayRequest) ApiDcimModuleBaysBulkDestroyRequest {
	r.moduleBayRequest = &moduleBayRequest
	return r
}

func (r ApiDcimModuleBaysBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimModuleBaysBulkDestroyExecute(r)
}

/*
DcimModuleBaysBulkDestroy Method for DcimModuleBaysBulkDestroy

Delete a list of module bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBaysBulkDestroyRequest
*/
func (a *DcimAPIService) DcimModuleBaysBulkDestroy(ctx context.Context) ApiDcimModuleBaysBulkDestroyRequest {
	return ApiDcimModuleBaysBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimModuleBaysBulkDestroyExecute(r ApiDcimModuleBaysBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBaysBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayRequest == nil {
		return nil, reportError("moduleBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimModuleBaysBulkPartialUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	moduleBayRequest *[]ModuleBayRequest
}

func (r ApiDcimModuleBaysBulkPartialUpdateRequest) ModuleBayRequest(moduleBayRequest []ModuleBayRequest) ApiDcimModuleBaysBulkPartialUpdateRequest {
	r.moduleBayRequest = &moduleBayRequest
	return r
}

func (r ApiDcimModuleBaysBulkPartialUpdateRequest) Execute() ([]ModuleBay, *http.Response, error) {
	return r.ApiService.DcimModuleBaysBulkPartialUpdateExecute(r)
}

/*
DcimModuleBaysBulkPartialUpdate Method for DcimModuleBaysBulkPartialUpdate

Patch a list of module bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBaysBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimModuleBaysBulkPartialUpdate(ctx context.Context) ApiDcimModuleBaysBulkPartialUpdateRequest {
	return ApiDcimModuleBaysBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ModuleBay
func (a *DcimAPIService) DcimModuleBaysBulkPartialUpdateExecute(r ApiDcimModuleBaysBulkPartialUpdateRequest) ([]ModuleBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ModuleBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBaysBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayRequest == nil {
		return localVarReturnValue, nil, reportError("moduleBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBaysBulkUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	moduleBayRequest *[]ModuleBayRequest
}

func (r ApiDcimModuleBaysBulkUpdateRequest) ModuleBayRequest(moduleBayRequest []ModuleBayRequest) ApiDcimModuleBaysBulkUpdateRequest {
	r.moduleBayRequest = &moduleBayRequest
	return r
}

func (r ApiDcimModuleBaysBulkUpdateRequest) Execute() ([]ModuleBay, *http.Response, error) {
	return r.ApiService.DcimModuleBaysBulkUpdateExecute(r)
}

/*
DcimModuleBaysBulkUpdate Method for DcimModuleBaysBulkUpdate

Put a list of module bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBaysBulkUpdateRequest
*/
func (a *DcimAPIService) DcimModuleBaysBulkUpdate(ctx context.Context) ApiDcimModuleBaysBulkUpdateRequest {
	return ApiDcimModuleBaysBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ModuleBay
func (a *DcimAPIService) DcimModuleBaysBulkUpdateExecute(r ApiDcimModuleBaysBulkUpdateRequest) ([]ModuleBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ModuleBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBaysBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayRequest == nil {
		return localVarReturnValue, nil, reportError("moduleBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBaysCreateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	moduleBayRequest *ModuleBayRequest
}

func (r ApiDcimModuleBaysCreateRequest) ModuleBayRequest(moduleBayRequest ModuleBayRequest) ApiDcimModuleBaysCreateRequest {
	r.moduleBayRequest = &moduleBayRequest
	return r
}

func (r ApiDcimModuleBaysCreateRequest) Execute() (*ModuleBay, *http.Response, error) {
	return r.ApiService.DcimModuleBaysCreateExecute(r)
}

/*
DcimModuleBaysCreate Method for DcimModuleBaysCreate

Post a list of module bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBaysCreateRequest
*/
func (a *DcimAPIService) DcimModuleBaysCreate(ctx context.Context) ApiDcimModuleBaysCreateRequest {
	return ApiDcimModuleBaysCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModuleBay
func (a *DcimAPIService) DcimModuleBaysCreateExecute(r ApiDcimModuleBaysCreateRequest) (*ModuleBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBaysCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayRequest == nil {
		return localVarReturnValue, nil, reportError("moduleBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBaysDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimModuleBaysDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimModuleBaysDestroyExecute(r)
}

/*
DcimModuleBaysDestroy Method for DcimModuleBaysDestroy

Delete a module bay object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module bay.
	@return ApiDcimModuleBaysDestroyRequest
*/
func (a *DcimAPIService) DcimModuleBaysDestroy(ctx context.Context, id int32) ApiDcimModuleBaysDestroyRequest {
	return ApiDcimModuleBaysDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimModuleBaysDestroyExecute(r ApiDcimModuleBaysDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBaysDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimModuleBaysListRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	description        *[]string
	descriptionEmpty   *bool
	descriptionIc      *[]string
	descriptionIe      *[]string
	descriptionIew     *[]string
	descriptionIsw     *[]string
	descriptionN       *[]string
	descriptionNic     *[]string
	descriptionNie     *[]string
	descriptionNiew    *[]string
	descriptionNisw    *[]string
	device             *[]*string
	deviceN            *[]*string
	deviceId           *[]int32
	deviceIdN          *[]int32
	deviceRole         *[]string
	deviceRoleN        *[]string
	deviceRoleId       *[]int32
	deviceRoleIdN      *[]int32
	deviceStatus       *[]string
	deviceStatusN      *[]string
	deviceType         *[]string
	deviceTypeN        *[]string
	deviceTypeId       *[]int32
	deviceTypeIdN      *[]int32
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	installedModuleId  *[]int32
	installedModuleIdN *[]int32
	label              *[]string
	labelEmpty         *bool
	labelIc            *[]string
	labelIe            *[]string
	labelIew           *[]string
	labelIsw           *[]string
	labelN             *[]string
	labelNic           *[]string
	labelNie           *[]string
	labelNiew          *[]string
	labelNisw          *[]string
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	location           *[]string
	locationN          *[]string
	locationId         *[]int32
	locationIdN        *[]int32
	modifiedByRequest  *string
	name               *[]string
	nameEmpty          *bool
	nameIc             *[]string
	nameIe             *[]string
	nameIew            *[]string
	nameIsw            *[]string
	nameN              *[]string
	nameNic            *[]string
	nameNie            *[]string
	nameNiew           *[]string
	nameNisw           *[]string
	offset             *int32
	ordering           *string
	position           *[]string
	positionEmpty      *bool
	positionIc         *[]string
	positionIe         *[]string
	positionIew        *[]string
	positionIsw        *[]string
	positionN          *[]string
	positionNic        *[]string
	positionNie        *[]string
	positionNiew       *[]string
	positionNisw       *[]string
	q                  *string
	rack               *[]string
	rackN              *[]string
	rackId             *[]int32
	rackIdN            *[]int32
	region             *[]string
	regionN            *[]string
	regionId           *[]string
	regionIdN          *[]string
	site               *[]string
	siteN              *[]string
	siteGroup          *[]string
	siteGroupN         *[]string
	siteGroupId        *[]string
	siteGroupIdN       *[]string
	siteId             *[]int32
	siteIdN            *[]int32
	tag                *[]string
	tagN               *[]string
	updatedByRequest   *string
	virtualChassis     *[]string
	virtualChassisN    *[]string
	virtualChassisId   *[]int32
	virtualChassisIdN  *[]int32
}

func (r ApiDcimModuleBaysListRequest) Created(created []time.Time) ApiDcimModuleBaysListRequest {
	r.created = &created
	return r
}

func (r ApiDcimModuleBaysListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimModuleBaysListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimModuleBaysListRequest) CreatedGt(createdGt []time.Time) ApiDcimModuleBaysListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimModuleBaysListRequest) CreatedGte(createdGte []time.Time) ApiDcimModuleBaysListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimModuleBaysListRequest) CreatedLt(createdLt []time.Time) ApiDcimModuleBaysListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimModuleBaysListRequest) CreatedLte(createdLte []time.Time) ApiDcimModuleBaysListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimModuleBaysListRequest) CreatedN(createdN []time.Time) ApiDcimModuleBaysListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimModuleBaysListRequest) CreatedByRequest(createdByRequest string) ApiDcimModuleBaysListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimModuleBaysListRequest) Description(description []string) ApiDcimModuleBaysListRequest {
	r.description = &description
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimModuleBaysListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionIc(descriptionIc []string) ApiDcimModuleBaysListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionIe(descriptionIe []string) ApiDcimModuleBaysListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionIew(descriptionIew []string) ApiDcimModuleBaysListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimModuleBaysListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionN(descriptionN []string) ApiDcimModuleBaysListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionNic(descriptionNic []string) ApiDcimModuleBaysListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionNie(descriptionNie []string) ApiDcimModuleBaysListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimModuleBaysListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimModuleBaysListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimModuleBaysListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimModuleBaysListRequest) Device(device []*string) ApiDcimModuleBaysListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimModuleBaysListRequest) DeviceN(deviceN []*string) ApiDcimModuleBaysListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimModuleBaysListRequest) DeviceId(deviceId []int32) ApiDcimModuleBaysListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimModuleBaysListRequest) DeviceIdN(deviceIdN []int32) ApiDcimModuleBaysListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimModuleBaysListRequest) DeviceRole(deviceRole []string) ApiDcimModuleBaysListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimModuleBaysListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimModuleBaysListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimModuleBaysListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimModuleBaysListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimModuleBaysListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimModuleBaysListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimModuleBaysListRequest) DeviceStatus(deviceStatus []string) ApiDcimModuleBaysListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimModuleBaysListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimModuleBaysListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimModuleBaysListRequest) DeviceType(deviceType []string) ApiDcimModuleBaysListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimModuleBaysListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimModuleBaysListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimModuleBaysListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimModuleBaysListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimModuleBaysListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimModuleBaysListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimModuleBaysListRequest) Id(id []int32) ApiDcimModuleBaysListRequest {
	r.id = &id
	return r
}

func (r ApiDcimModuleBaysListRequest) IdEmpty(idEmpty bool) ApiDcimModuleBaysListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimModuleBaysListRequest) IdGt(idGt []int32) ApiDcimModuleBaysListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimModuleBaysListRequest) IdGte(idGte []int32) ApiDcimModuleBaysListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimModuleBaysListRequest) IdLt(idLt []int32) ApiDcimModuleBaysListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimModuleBaysListRequest) IdLte(idLte []int32) ApiDcimModuleBaysListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimModuleBaysListRequest) IdN(idN []int32) ApiDcimModuleBaysListRequest {
	r.idN = &idN
	return r
}

// Installed module (ID)
func (r ApiDcimModuleBaysListRequest) InstalledModuleId(installedModuleId []int32) ApiDcimModuleBaysListRequest {
	r.installedModuleId = &installedModuleId
	return r
}

// Installed module (ID)
func (r ApiDcimModuleBaysListRequest) InstalledModuleIdN(installedModuleIdN []int32) ApiDcimModuleBaysListRequest {
	r.installedModuleIdN = &installedModuleIdN
	return r
}

func (r ApiDcimModuleBaysListRequest) Label(label []string) ApiDcimModuleBaysListRequest {
	r.label = &label
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelEmpty(labelEmpty bool) ApiDcimModuleBaysListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelIc(labelIc []string) ApiDcimModuleBaysListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelIe(labelIe []string) ApiDcimModuleBaysListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelIew(labelIew []string) ApiDcimModuleBaysListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelIsw(labelIsw []string) ApiDcimModuleBaysListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelN(labelN []string) ApiDcimModuleBaysListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelNic(labelNic []string) ApiDcimModuleBaysListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelNie(labelNie []string) ApiDcimModuleBaysListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelNiew(labelNiew []string) ApiDcimModuleBaysListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimModuleBaysListRequest) LabelNisw(labelNisw []string) ApiDcimModuleBaysListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimModuleBaysListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimModuleBaysListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimModuleBaysListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimModuleBaysListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimModuleBaysListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimModuleBaysListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimModuleBaysListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimModuleBaysListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimModuleBaysListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimModuleBaysListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimModuleBaysListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimModuleBaysListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimModuleBaysListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimModuleBaysListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimModuleBaysListRequest) Limit(limit int32) ApiDcimModuleBaysListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimModuleBaysListRequest) Location(location []string) ApiDcimModuleBaysListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimModuleBaysListRequest) LocationN(locationN []string) ApiDcimModuleBaysListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimModuleBaysListRequest) LocationId(locationId []int32) ApiDcimModuleBaysListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimModuleBaysListRequest) LocationIdN(locationIdN []int32) ApiDcimModuleBaysListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimModuleBaysListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimModuleBaysListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimModuleBaysListRequest) Name(name []string) ApiDcimModuleBaysListRequest {
	r.name = &name
	return r
}

func (r ApiDcimModuleBaysListRequest) NameEmpty(nameEmpty bool) ApiDcimModuleBaysListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimModuleBaysListRequest) NameIc(nameIc []string) ApiDcimModuleBaysListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimModuleBaysListRequest) NameIe(nameIe []string) ApiDcimModuleBaysListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimModuleBaysListRequest) NameIew(nameIew []string) ApiDcimModuleBaysListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimModuleBaysListRequest) NameIsw(nameIsw []string) ApiDcimModuleBaysListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimModuleBaysListRequest) NameN(nameN []string) ApiDcimModuleBaysListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimModuleBaysListRequest) NameNic(nameNic []string) ApiDcimModuleBaysListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimModuleBaysListRequest) NameNie(nameNie []string) ApiDcimModuleBaysListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimModuleBaysListRequest) NameNiew(nameNiew []string) ApiDcimModuleBaysListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimModuleBaysListRequest) NameNisw(nameNisw []string) ApiDcimModuleBaysListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimModuleBaysListRequest) Offset(offset int32) ApiDcimModuleBaysListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimModuleBaysListRequest) Ordering(ordering string) ApiDcimModuleBaysListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimModuleBaysListRequest) Position(position []string) ApiDcimModuleBaysListRequest {
	r.position = &position
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionEmpty(positionEmpty bool) ApiDcimModuleBaysListRequest {
	r.positionEmpty = &positionEmpty
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionIc(positionIc []string) ApiDcimModuleBaysListRequest {
	r.positionIc = &positionIc
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionIe(positionIe []string) ApiDcimModuleBaysListRequest {
	r.positionIe = &positionIe
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionIew(positionIew []string) ApiDcimModuleBaysListRequest {
	r.positionIew = &positionIew
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionIsw(positionIsw []string) ApiDcimModuleBaysListRequest {
	r.positionIsw = &positionIsw
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionN(positionN []string) ApiDcimModuleBaysListRequest {
	r.positionN = &positionN
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionNic(positionNic []string) ApiDcimModuleBaysListRequest {
	r.positionNic = &positionNic
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionNie(positionNie []string) ApiDcimModuleBaysListRequest {
	r.positionNie = &positionNie
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionNiew(positionNiew []string) ApiDcimModuleBaysListRequest {
	r.positionNiew = &positionNiew
	return r
}

func (r ApiDcimModuleBaysListRequest) PositionNisw(positionNisw []string) ApiDcimModuleBaysListRequest {
	r.positionNisw = &positionNisw
	return r
}

// Search
func (r ApiDcimModuleBaysListRequest) Q(q string) ApiDcimModuleBaysListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimModuleBaysListRequest) Rack(rack []string) ApiDcimModuleBaysListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimModuleBaysListRequest) RackN(rackN []string) ApiDcimModuleBaysListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimModuleBaysListRequest) RackId(rackId []int32) ApiDcimModuleBaysListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimModuleBaysListRequest) RackIdN(rackIdN []int32) ApiDcimModuleBaysListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimModuleBaysListRequest) Region(region []string) ApiDcimModuleBaysListRequest {
	r.region = &region
	return r
}

func (r ApiDcimModuleBaysListRequest) RegionN(regionN []string) ApiDcimModuleBaysListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimModuleBaysListRequest) RegionId(regionId []string) ApiDcimModuleBaysListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimModuleBaysListRequest) RegionIdN(regionIdN []string) ApiDcimModuleBaysListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimModuleBaysListRequest) Site(site []string) ApiDcimModuleBaysListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimModuleBaysListRequest) SiteN(siteN []string) ApiDcimModuleBaysListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimModuleBaysListRequest) SiteGroup(siteGroup []string) ApiDcimModuleBaysListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimModuleBaysListRequest) SiteGroupN(siteGroupN []string) ApiDcimModuleBaysListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimModuleBaysListRequest) SiteGroupId(siteGroupId []string) ApiDcimModuleBaysListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimModuleBaysListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimModuleBaysListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimModuleBaysListRequest) SiteId(siteId []int32) ApiDcimModuleBaysListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimModuleBaysListRequest) SiteIdN(siteIdN []int32) ApiDcimModuleBaysListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimModuleBaysListRequest) Tag(tag []string) ApiDcimModuleBaysListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimModuleBaysListRequest) TagN(tagN []string) ApiDcimModuleBaysListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimModuleBaysListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimModuleBaysListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiDcimModuleBaysListRequest) VirtualChassis(virtualChassis []string) ApiDcimModuleBaysListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimModuleBaysListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimModuleBaysListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimModuleBaysListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimModuleBaysListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimModuleBaysListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimModuleBaysListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimModuleBaysListRequest) Execute() (*PaginatedModuleBayList, *http.Response, error) {
	return r.ApiService.DcimModuleBaysListExecute(r)
}

/*
DcimModuleBaysList Method for DcimModuleBaysList

Get a list of module bay objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleBaysListRequest
*/
func (a *DcimAPIService) DcimModuleBaysList(ctx context.Context) ApiDcimModuleBaysListRequest {
	return ApiDcimModuleBaysListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedModuleBayList
func (a *DcimAPIService) DcimModuleBaysListExecute(r ApiDcimModuleBaysListRequest) (*PaginatedModuleBayList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedModuleBayList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBaysList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.installedModuleId != nil {
		t := *r.installedModuleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_module_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_module_id", t, "multi")
		}
	}
	if r.installedModuleIdN != nil {
		t := *r.installedModuleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "installed_module_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "installed_module_id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.position != nil {
		t := *r.position
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position", t, "multi")
		}
	}
	if r.positionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position__empty", r.positionEmpty, "")
	}
	if r.positionIc != nil {
		t := *r.positionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__ic", t, "multi")
		}
	}
	if r.positionIe != nil {
		t := *r.positionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__ie", t, "multi")
		}
	}
	if r.positionIew != nil {
		t := *r.positionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__iew", t, "multi")
		}
	}
	if r.positionIsw != nil {
		t := *r.positionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__isw", t, "multi")
		}
	}
	if r.positionN != nil {
		t := *r.positionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__n", t, "multi")
		}
	}
	if r.positionNic != nil {
		t := *r.positionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__nic", t, "multi")
		}
	}
	if r.positionNie != nil {
		t := *r.positionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__nie", t, "multi")
		}
	}
	if r.positionNiew != nil {
		t := *r.positionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__niew", t, "multi")
		}
	}
	if r.positionNisw != nil {
		t := *r.positionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "position__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "position__nisw", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBaysPartialUpdateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	id                      int32
	patchedModuleBayRequest *PatchedModuleBayRequest
}

func (r ApiDcimModuleBaysPartialUpdateRequest) PatchedModuleBayRequest(patchedModuleBayRequest PatchedModuleBayRequest) ApiDcimModuleBaysPartialUpdateRequest {
	r.patchedModuleBayRequest = &patchedModuleBayRequest
	return r
}

func (r ApiDcimModuleBaysPartialUpdateRequest) Execute() (*ModuleBay, *http.Response, error) {
	return r.ApiService.DcimModuleBaysPartialUpdateExecute(r)
}

/*
DcimModuleBaysPartialUpdate Method for DcimModuleBaysPartialUpdate

Patch a module bay object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module bay.
	@return ApiDcimModuleBaysPartialUpdateRequest
*/
func (a *DcimAPIService) DcimModuleBaysPartialUpdate(ctx context.Context, id int32) ApiDcimModuleBaysPartialUpdateRequest {
	return ApiDcimModuleBaysPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ModuleBay
func (a *DcimAPIService) DcimModuleBaysPartialUpdateExecute(r ApiDcimModuleBaysPartialUpdateRequest) (*ModuleBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBaysPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedModuleBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBaysRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimModuleBaysRetrieveRequest) Execute() (*ModuleBay, *http.Response, error) {
	return r.ApiService.DcimModuleBaysRetrieveExecute(r)
}

/*
DcimModuleBaysRetrieve Method for DcimModuleBaysRetrieve

Get a module bay object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module bay.
	@return ApiDcimModuleBaysRetrieveRequest
*/
func (a *DcimAPIService) DcimModuleBaysRetrieve(ctx context.Context, id int32) ApiDcimModuleBaysRetrieveRequest {
	return ApiDcimModuleBaysRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ModuleBay
func (a *DcimAPIService) DcimModuleBaysRetrieveExecute(r ApiDcimModuleBaysRetrieveRequest) (*ModuleBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBaysRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleBaysUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	id               int32
	moduleBayRequest *ModuleBayRequest
}

func (r ApiDcimModuleBaysUpdateRequest) ModuleBayRequest(moduleBayRequest ModuleBayRequest) ApiDcimModuleBaysUpdateRequest {
	r.moduleBayRequest = &moduleBayRequest
	return r
}

func (r ApiDcimModuleBaysUpdateRequest) Execute() (*ModuleBay, *http.Response, error) {
	return r.ApiService.DcimModuleBaysUpdateExecute(r)
}

/*
DcimModuleBaysUpdate Method for DcimModuleBaysUpdate

Put a module bay object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module bay.
	@return ApiDcimModuleBaysUpdateRequest
*/
func (a *DcimAPIService) DcimModuleBaysUpdate(ctx context.Context, id int32) ApiDcimModuleBaysUpdateRequest {
	return ApiDcimModuleBaysUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ModuleBay
func (a *DcimAPIService) DcimModuleBaysUpdateExecute(r ApiDcimModuleBaysUpdateRequest) (*ModuleBay, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleBaysUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleBayRequest == nil {
		return localVarReturnValue, nil, reportError("moduleBayRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleBayRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleTypesBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	moduleTypeRequest *[]ModuleTypeRequest
}

func (r ApiDcimModuleTypesBulkDestroyRequest) ModuleTypeRequest(moduleTypeRequest []ModuleTypeRequest) ApiDcimModuleTypesBulkDestroyRequest {
	r.moduleTypeRequest = &moduleTypeRequest
	return r
}

func (r ApiDcimModuleTypesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimModuleTypesBulkDestroyExecute(r)
}

/*
DcimModuleTypesBulkDestroy Method for DcimModuleTypesBulkDestroy

Delete a list of module type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleTypesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimModuleTypesBulkDestroy(ctx context.Context) ApiDcimModuleTypesBulkDestroyRequest {
	return ApiDcimModuleTypesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimModuleTypesBulkDestroyExecute(r ApiDcimModuleTypesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleTypesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleTypeRequest == nil {
		return nil, reportError("moduleTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimModuleTypesBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	moduleTypeRequest *[]ModuleTypeRequest
}

func (r ApiDcimModuleTypesBulkPartialUpdateRequest) ModuleTypeRequest(moduleTypeRequest []ModuleTypeRequest) ApiDcimModuleTypesBulkPartialUpdateRequest {
	r.moduleTypeRequest = &moduleTypeRequest
	return r
}

func (r ApiDcimModuleTypesBulkPartialUpdateRequest) Execute() ([]ModuleType, *http.Response, error) {
	return r.ApiService.DcimModuleTypesBulkPartialUpdateExecute(r)
}

/*
DcimModuleTypesBulkPartialUpdate Method for DcimModuleTypesBulkPartialUpdate

Patch a list of module type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleTypesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimModuleTypesBulkPartialUpdate(ctx context.Context) ApiDcimModuleTypesBulkPartialUpdateRequest {
	return ApiDcimModuleTypesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ModuleType
func (a *DcimAPIService) DcimModuleTypesBulkPartialUpdateExecute(r ApiDcimModuleTypesBulkPartialUpdateRequest) ([]ModuleType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ModuleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleTypesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleTypeRequest == nil {
		return localVarReturnValue, nil, reportError("moduleTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleTypesBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	moduleTypeRequest *[]ModuleTypeRequest
}

func (r ApiDcimModuleTypesBulkUpdateRequest) ModuleTypeRequest(moduleTypeRequest []ModuleTypeRequest) ApiDcimModuleTypesBulkUpdateRequest {
	r.moduleTypeRequest = &moduleTypeRequest
	return r
}

func (r ApiDcimModuleTypesBulkUpdateRequest) Execute() ([]ModuleType, *http.Response, error) {
	return r.ApiService.DcimModuleTypesBulkUpdateExecute(r)
}

/*
DcimModuleTypesBulkUpdate Method for DcimModuleTypesBulkUpdate

Put a list of module type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleTypesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimModuleTypesBulkUpdate(ctx context.Context) ApiDcimModuleTypesBulkUpdateRequest {
	return ApiDcimModuleTypesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ModuleType
func (a *DcimAPIService) DcimModuleTypesBulkUpdateExecute(r ApiDcimModuleTypesBulkUpdateRequest) ([]ModuleType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ModuleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleTypesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleTypeRequest == nil {
		return localVarReturnValue, nil, reportError("moduleTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleTypesCreateRequest struct {
	ctx                       context.Context
	ApiService                *DcimAPIService
	writableModuleTypeRequest *WritableModuleTypeRequest
}

func (r ApiDcimModuleTypesCreateRequest) WritableModuleTypeRequest(writableModuleTypeRequest WritableModuleTypeRequest) ApiDcimModuleTypesCreateRequest {
	r.writableModuleTypeRequest = &writableModuleTypeRequest
	return r
}

func (r ApiDcimModuleTypesCreateRequest) Execute() (*ModuleType, *http.Response, error) {
	return r.ApiService.DcimModuleTypesCreateExecute(r)
}

/*
DcimModuleTypesCreate Method for DcimModuleTypesCreate

Post a list of module type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleTypesCreateRequest
*/
func (a *DcimAPIService) DcimModuleTypesCreate(ctx context.Context) ApiDcimModuleTypesCreateRequest {
	return ApiDcimModuleTypesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ModuleType
func (a *DcimAPIService) DcimModuleTypesCreateExecute(r ApiDcimModuleTypesCreateRequest) (*ModuleType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleTypesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableModuleTypeRequest == nil {
		return localVarReturnValue, nil, reportError("writableModuleTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableModuleTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleTypesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimModuleTypesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimModuleTypesDestroyExecute(r)
}

/*
DcimModuleTypesDestroy Method for DcimModuleTypesDestroy

Delete a module type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module type.
	@return ApiDcimModuleTypesDestroyRequest
*/
func (a *DcimAPIService) DcimModuleTypesDestroy(ctx context.Context, id int32) ApiDcimModuleTypesDestroyRequest {
	return ApiDcimModuleTypesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimModuleTypesDestroyExecute(r ApiDcimModuleTypesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleTypesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimModuleTypesListRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	consolePorts       *bool
	consoleServerPorts *bool
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	description        *[]string
	descriptionEmpty   *bool
	descriptionIc      *[]string
	descriptionIe      *[]string
	descriptionIew     *[]string
	descriptionIsw     *[]string
	descriptionN       *[]string
	descriptionNic     *[]string
	descriptionNie     *[]string
	descriptionNiew    *[]string
	descriptionNisw    *[]string
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	interfaces         *bool
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	manufacturer       *[]string
	manufacturerN      *[]string
	manufacturerId     *[]int32
	manufacturerIdN    *[]int32
	model              *[]string
	modelEmpty         *bool
	modelIc            *[]string
	modelIe            *[]string
	modelIew           *[]string
	modelIsw           *[]string
	modelN             *[]string
	modelNic           *[]string
	modelNie           *[]string
	modelNiew          *[]string
	modelNisw          *[]string
	modifiedByRequest  *string
	offset             *int32
	ordering           *string
	partNumber         *[]string
	partNumberEmpty    *bool
	partNumberIc       *[]string
	partNumberIe       *[]string
	partNumberIew      *[]string
	partNumberIsw      *[]string
	partNumberN        *[]string
	partNumberNic      *[]string
	partNumberNie      *[]string
	partNumberNiew     *[]string
	partNumberNisw     *[]string
	passThroughPorts   *bool
	powerOutlets       *bool
	powerPorts         *bool
	q                  *string
	tag                *[]string
	tagN               *[]string
	updatedByRequest   *string
	weight             *[]float64
	weightEmpty        *bool
	weightGt           *[]float64
	weightGte          *[]float64
	weightLt           *[]float64
	weightLte          *[]float64
	weightN            *[]float64
	weightUnit         *DcimDeviceTypesListWeightUnitParameter
	weightUnitN        *DcimDeviceTypesListWeightUnitParameter
}

// Has console ports
func (r ApiDcimModuleTypesListRequest) ConsolePorts(consolePorts bool) ApiDcimModuleTypesListRequest {
	r.consolePorts = &consolePorts
	return r
}

// Has console server ports
func (r ApiDcimModuleTypesListRequest) ConsoleServerPorts(consoleServerPorts bool) ApiDcimModuleTypesListRequest {
	r.consoleServerPorts = &consoleServerPorts
	return r
}

func (r ApiDcimModuleTypesListRequest) Created(created []time.Time) ApiDcimModuleTypesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimModuleTypesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimModuleTypesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimModuleTypesListRequest) CreatedGt(createdGt []time.Time) ApiDcimModuleTypesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimModuleTypesListRequest) CreatedGte(createdGte []time.Time) ApiDcimModuleTypesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimModuleTypesListRequest) CreatedLt(createdLt []time.Time) ApiDcimModuleTypesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimModuleTypesListRequest) CreatedLte(createdLte []time.Time) ApiDcimModuleTypesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimModuleTypesListRequest) CreatedN(createdN []time.Time) ApiDcimModuleTypesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimModuleTypesListRequest) CreatedByRequest(createdByRequest string) ApiDcimModuleTypesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimModuleTypesListRequest) Description(description []string) ApiDcimModuleTypesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimModuleTypesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionIc(descriptionIc []string) ApiDcimModuleTypesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionIe(descriptionIe []string) ApiDcimModuleTypesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionIew(descriptionIew []string) ApiDcimModuleTypesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimModuleTypesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionN(descriptionN []string) ApiDcimModuleTypesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionNic(descriptionNic []string) ApiDcimModuleTypesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionNie(descriptionNie []string) ApiDcimModuleTypesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimModuleTypesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimModuleTypesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimModuleTypesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimModuleTypesListRequest) Id(id []int32) ApiDcimModuleTypesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimModuleTypesListRequest) IdEmpty(idEmpty bool) ApiDcimModuleTypesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimModuleTypesListRequest) IdGt(idGt []int32) ApiDcimModuleTypesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimModuleTypesListRequest) IdGte(idGte []int32) ApiDcimModuleTypesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimModuleTypesListRequest) IdLt(idLt []int32) ApiDcimModuleTypesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimModuleTypesListRequest) IdLte(idLte []int32) ApiDcimModuleTypesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimModuleTypesListRequest) IdN(idN []int32) ApiDcimModuleTypesListRequest {
	r.idN = &idN
	return r
}

// Has interfaces
func (r ApiDcimModuleTypesListRequest) Interfaces(interfaces bool) ApiDcimModuleTypesListRequest {
	r.interfaces = &interfaces
	return r
}

func (r ApiDcimModuleTypesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimModuleTypesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimModuleTypesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimModuleTypesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimModuleTypesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimModuleTypesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimModuleTypesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimModuleTypesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimModuleTypesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimModuleTypesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimModuleTypesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimModuleTypesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimModuleTypesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimModuleTypesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimModuleTypesListRequest) Limit(limit int32) ApiDcimModuleTypesListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiDcimModuleTypesListRequest) Manufacturer(manufacturer []string) ApiDcimModuleTypesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimModuleTypesListRequest) ManufacturerN(manufacturerN []string) ApiDcimModuleTypesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimModuleTypesListRequest) ManufacturerId(manufacturerId []int32) ApiDcimModuleTypesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimModuleTypesListRequest) ManufacturerIdN(manufacturerIdN []int32) ApiDcimModuleTypesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiDcimModuleTypesListRequest) Model(model []string) ApiDcimModuleTypesListRequest {
	r.model = &model
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelEmpty(modelEmpty bool) ApiDcimModuleTypesListRequest {
	r.modelEmpty = &modelEmpty
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelIc(modelIc []string) ApiDcimModuleTypesListRequest {
	r.modelIc = &modelIc
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelIe(modelIe []string) ApiDcimModuleTypesListRequest {
	r.modelIe = &modelIe
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelIew(modelIew []string) ApiDcimModuleTypesListRequest {
	r.modelIew = &modelIew
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelIsw(modelIsw []string) ApiDcimModuleTypesListRequest {
	r.modelIsw = &modelIsw
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelN(modelN []string) ApiDcimModuleTypesListRequest {
	r.modelN = &modelN
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelNic(modelNic []string) ApiDcimModuleTypesListRequest {
	r.modelNic = &modelNic
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelNie(modelNie []string) ApiDcimModuleTypesListRequest {
	r.modelNie = &modelNie
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelNiew(modelNiew []string) ApiDcimModuleTypesListRequest {
	r.modelNiew = &modelNiew
	return r
}

func (r ApiDcimModuleTypesListRequest) ModelNisw(modelNisw []string) ApiDcimModuleTypesListRequest {
	r.modelNisw = &modelNisw
	return r
}

func (r ApiDcimModuleTypesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimModuleTypesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiDcimModuleTypesListRequest) Offset(offset int32) ApiDcimModuleTypesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimModuleTypesListRequest) Ordering(ordering string) ApiDcimModuleTypesListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumber(partNumber []string) ApiDcimModuleTypesListRequest {
	r.partNumber = &partNumber
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberEmpty(partNumberEmpty bool) ApiDcimModuleTypesListRequest {
	r.partNumberEmpty = &partNumberEmpty
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberIc(partNumberIc []string) ApiDcimModuleTypesListRequest {
	r.partNumberIc = &partNumberIc
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberIe(partNumberIe []string) ApiDcimModuleTypesListRequest {
	r.partNumberIe = &partNumberIe
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberIew(partNumberIew []string) ApiDcimModuleTypesListRequest {
	r.partNumberIew = &partNumberIew
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberIsw(partNumberIsw []string) ApiDcimModuleTypesListRequest {
	r.partNumberIsw = &partNumberIsw
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberN(partNumberN []string) ApiDcimModuleTypesListRequest {
	r.partNumberN = &partNumberN
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberNic(partNumberNic []string) ApiDcimModuleTypesListRequest {
	r.partNumberNic = &partNumberNic
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberNie(partNumberNie []string) ApiDcimModuleTypesListRequest {
	r.partNumberNie = &partNumberNie
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberNiew(partNumberNiew []string) ApiDcimModuleTypesListRequest {
	r.partNumberNiew = &partNumberNiew
	return r
}

func (r ApiDcimModuleTypesListRequest) PartNumberNisw(partNumberNisw []string) ApiDcimModuleTypesListRequest {
	r.partNumberNisw = &partNumberNisw
	return r
}

// Has pass-through ports
func (r ApiDcimModuleTypesListRequest) PassThroughPorts(passThroughPorts bool) ApiDcimModuleTypesListRequest {
	r.passThroughPorts = &passThroughPorts
	return r
}

// Has power outlets
func (r ApiDcimModuleTypesListRequest) PowerOutlets(powerOutlets bool) ApiDcimModuleTypesListRequest {
	r.powerOutlets = &powerOutlets
	return r
}

// Has power ports
func (r ApiDcimModuleTypesListRequest) PowerPorts(powerPorts bool) ApiDcimModuleTypesListRequest {
	r.powerPorts = &powerPorts
	return r
}

// Search
func (r ApiDcimModuleTypesListRequest) Q(q string) ApiDcimModuleTypesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimModuleTypesListRequest) Tag(tag []string) ApiDcimModuleTypesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimModuleTypesListRequest) TagN(tagN []string) ApiDcimModuleTypesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimModuleTypesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimModuleTypesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimModuleTypesListRequest) Weight(weight []float64) ApiDcimModuleTypesListRequest {
	r.weight = &weight
	return r
}

func (r ApiDcimModuleTypesListRequest) WeightEmpty(weightEmpty bool) ApiDcimModuleTypesListRequest {
	r.weightEmpty = &weightEmpty
	return r
}

func (r ApiDcimModuleTypesListRequest) WeightGt(weightGt []float64) ApiDcimModuleTypesListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiDcimModuleTypesListRequest) WeightGte(weightGte []float64) ApiDcimModuleTypesListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiDcimModuleTypesListRequest) WeightLt(weightLt []float64) ApiDcimModuleTypesListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiDcimModuleTypesListRequest) WeightLte(weightLte []float64) ApiDcimModuleTypesListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiDcimModuleTypesListRequest) WeightN(weightN []float64) ApiDcimModuleTypesListRequest {
	r.weightN = &weightN
	return r
}

// * &#x60;kg&#x60; - Kilograms * &#x60;g&#x60; - Grams * &#x60;lb&#x60; - Pounds * &#x60;oz&#x60; - Ounces
func (r ApiDcimModuleTypesListRequest) WeightUnit(weightUnit DcimDeviceTypesListWeightUnitParameter) ApiDcimModuleTypesListRequest {
	r.weightUnit = &weightUnit
	return r
}

// * &#x60;kg&#x60; - Kilograms * &#x60;g&#x60; - Grams * &#x60;lb&#x60; - Pounds * &#x60;oz&#x60; - Ounces
func (r ApiDcimModuleTypesListRequest) WeightUnitN(weightUnitN DcimDeviceTypesListWeightUnitParameter) ApiDcimModuleTypesListRequest {
	r.weightUnitN = &weightUnitN
	return r
}

func (r ApiDcimModuleTypesListRequest) Execute() (*PaginatedModuleTypeList, *http.Response, error) {
	return r.ApiService.DcimModuleTypesListExecute(r)
}

/*
DcimModuleTypesList Method for DcimModuleTypesList

Get a list of module type objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModuleTypesListRequest
*/
func (a *DcimAPIService) DcimModuleTypesList(ctx context.Context) ApiDcimModuleTypesListRequest {
	return ApiDcimModuleTypesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedModuleTypeList
func (a *DcimAPIService) DcimModuleTypesListExecute(r ApiDcimModuleTypesListRequest) (*PaginatedModuleTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedModuleTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.consolePorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_ports", r.consolePorts, "")
	}
	if r.consoleServerPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "console_server_ports", r.consoleServerPorts, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.interfaces != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaces", r.interfaces, "")
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.model != nil {
		t := *r.model
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model", t, "multi")
		}
	}
	if r.modelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model__empty", r.modelEmpty, "")
	}
	if r.modelIc != nil {
		t := *r.modelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__ic", t, "multi")
		}
	}
	if r.modelIe != nil {
		t := *r.modelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__ie", t, "multi")
		}
	}
	if r.modelIew != nil {
		t := *r.modelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__iew", t, "multi")
		}
	}
	if r.modelIsw != nil {
		t := *r.modelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__isw", t, "multi")
		}
	}
	if r.modelN != nil {
		t := *r.modelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__n", t, "multi")
		}
	}
	if r.modelNic != nil {
		t := *r.modelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nic", t, "multi")
		}
	}
	if r.modelNie != nil {
		t := *r.modelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nie", t, "multi")
		}
	}
	if r.modelNiew != nil {
		t := *r.modelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__niew", t, "multi")
		}
	}
	if r.modelNisw != nil {
		t := *r.modelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "model__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "model__nisw", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.partNumber != nil {
		t := *r.partNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number", t, "multi")
		}
	}
	if r.partNumberEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__empty", r.partNumberEmpty, "")
	}
	if r.partNumberIc != nil {
		t := *r.partNumberIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ic", t, "multi")
		}
	}
	if r.partNumberIe != nil {
		t := *r.partNumberIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__ie", t, "multi")
		}
	}
	if r.partNumberIew != nil {
		t := *r.partNumberIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__iew", t, "multi")
		}
	}
	if r.partNumberIsw != nil {
		t := *r.partNumberIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__isw", t, "multi")
		}
	}
	if r.partNumberN != nil {
		t := *r.partNumberN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__n", t, "multi")
		}
	}
	if r.partNumberNic != nil {
		t := *r.partNumberNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nic", t, "multi")
		}
	}
	if r.partNumberNie != nil {
		t := *r.partNumberNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nie", t, "multi")
		}
	}
	if r.partNumberNiew != nil {
		t := *r.partNumberNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__niew", t, "multi")
		}
	}
	if r.partNumberNisw != nil {
		t := *r.partNumberNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "part_number__nisw", t, "multi")
		}
	}
	if r.passThroughPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pass_through_ports", r.passThroughPorts, "")
	}
	if r.powerOutlets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_outlets", r.powerOutlets, "")
	}
	if r.powerPorts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "power_ports", r.powerPorts, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "multi")
		}
	}
	if r.weightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight__empty", r.weightEmpty, "")
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "multi")
		}
	}
	if r.weightUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight_unit", r.weightUnit, "")
	}
	if r.weightUnitN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight_unit__n", r.weightUnitN, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleTypesPartialUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	id                               int32
	patchedWritableModuleTypeRequest *PatchedWritableModuleTypeRequest
}

func (r ApiDcimModuleTypesPartialUpdateRequest) PatchedWritableModuleTypeRequest(patchedWritableModuleTypeRequest PatchedWritableModuleTypeRequest) ApiDcimModuleTypesPartialUpdateRequest {
	r.patchedWritableModuleTypeRequest = &patchedWritableModuleTypeRequest
	return r
}

func (r ApiDcimModuleTypesPartialUpdateRequest) Execute() (*ModuleType, *http.Response, error) {
	return r.ApiService.DcimModuleTypesPartialUpdateExecute(r)
}

/*
DcimModuleTypesPartialUpdate Method for DcimModuleTypesPartialUpdate

Patch a module type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module type.
	@return ApiDcimModuleTypesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimModuleTypesPartialUpdate(ctx context.Context, id int32) ApiDcimModuleTypesPartialUpdateRequest {
	return ApiDcimModuleTypesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ModuleType
func (a *DcimAPIService) DcimModuleTypesPartialUpdateExecute(r ApiDcimModuleTypesPartialUpdateRequest) (*ModuleType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleTypesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableModuleTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleTypesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimModuleTypesRetrieveRequest) Execute() (*ModuleType, *http.Response, error) {
	return r.ApiService.DcimModuleTypesRetrieveExecute(r)
}

/*
DcimModuleTypesRetrieve Method for DcimModuleTypesRetrieve

Get a module type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module type.
	@return ApiDcimModuleTypesRetrieveRequest
*/
func (a *DcimAPIService) DcimModuleTypesRetrieve(ctx context.Context, id int32) ApiDcimModuleTypesRetrieveRequest {
	return ApiDcimModuleTypesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ModuleType
func (a *DcimAPIService) DcimModuleTypesRetrieveExecute(r ApiDcimModuleTypesRetrieveRequest) (*ModuleType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModuleTypesUpdateRequest struct {
	ctx                       context.Context
	ApiService                *DcimAPIService
	id                        int32
	writableModuleTypeRequest *WritableModuleTypeRequest
}

func (r ApiDcimModuleTypesUpdateRequest) WritableModuleTypeRequest(writableModuleTypeRequest WritableModuleTypeRequest) ApiDcimModuleTypesUpdateRequest {
	r.writableModuleTypeRequest = &writableModuleTypeRequest
	return r
}

func (r ApiDcimModuleTypesUpdateRequest) Execute() (*ModuleType, *http.Response, error) {
	return r.ApiService.DcimModuleTypesUpdateExecute(r)
}

/*
DcimModuleTypesUpdate Method for DcimModuleTypesUpdate

Put a module type object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module type.
	@return ApiDcimModuleTypesUpdateRequest
*/
func (a *DcimAPIService) DcimModuleTypesUpdate(ctx context.Context, id int32) ApiDcimModuleTypesUpdateRequest {
	return ApiDcimModuleTypesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ModuleType
func (a *DcimAPIService) DcimModuleTypesUpdateExecute(r ApiDcimModuleTypesUpdateRequest) (*ModuleType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ModuleType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModuleTypesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/module-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableModuleTypeRequest == nil {
		return localVarReturnValue, nil, reportError("writableModuleTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableModuleTypeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModulesBulkDestroyRequest struct {
	ctx           context.Context
	ApiService    *DcimAPIService
	moduleRequest *[]ModuleRequest
}

func (r ApiDcimModulesBulkDestroyRequest) ModuleRequest(moduleRequest []ModuleRequest) ApiDcimModulesBulkDestroyRequest {
	r.moduleRequest = &moduleRequest
	return r
}

func (r ApiDcimModulesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimModulesBulkDestroyExecute(r)
}

/*
DcimModulesBulkDestroy Method for DcimModulesBulkDestroy

Delete a list of module objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModulesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimModulesBulkDestroy(ctx context.Context) ApiDcimModulesBulkDestroyRequest {
	return ApiDcimModulesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimModulesBulkDestroyExecute(r ApiDcimModulesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModulesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleRequest == nil {
		return nil, reportError("moduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimModulesBulkPartialUpdateRequest struct {
	ctx           context.Context
	ApiService    *DcimAPIService
	moduleRequest *[]ModuleRequest
}

func (r ApiDcimModulesBulkPartialUpdateRequest) ModuleRequest(moduleRequest []ModuleRequest) ApiDcimModulesBulkPartialUpdateRequest {
	r.moduleRequest = &moduleRequest
	return r
}

func (r ApiDcimModulesBulkPartialUpdateRequest) Execute() ([]Module, *http.Response, error) {
	return r.ApiService.DcimModulesBulkPartialUpdateExecute(r)
}

/*
DcimModulesBulkPartialUpdate Method for DcimModulesBulkPartialUpdate

Patch a list of module objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModulesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimModulesBulkPartialUpdate(ctx context.Context) ApiDcimModulesBulkPartialUpdateRequest {
	return ApiDcimModulesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Module
func (a *DcimAPIService) DcimModulesBulkPartialUpdateExecute(r ApiDcimModulesBulkPartialUpdateRequest) ([]Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModulesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleRequest == nil {
		return localVarReturnValue, nil, reportError("moduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModulesBulkUpdateRequest struct {
	ctx           context.Context
	ApiService    *DcimAPIService
	moduleRequest *[]ModuleRequest
}

func (r ApiDcimModulesBulkUpdateRequest) ModuleRequest(moduleRequest []ModuleRequest) ApiDcimModulesBulkUpdateRequest {
	r.moduleRequest = &moduleRequest
	return r
}

func (r ApiDcimModulesBulkUpdateRequest) Execute() ([]Module, *http.Response, error) {
	return r.ApiService.DcimModulesBulkUpdateExecute(r)
}

/*
DcimModulesBulkUpdate Method for DcimModulesBulkUpdate

Put a list of module objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModulesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimModulesBulkUpdate(ctx context.Context) ApiDcimModulesBulkUpdateRequest {
	return ApiDcimModulesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Module
func (a *DcimAPIService) DcimModulesBulkUpdateExecute(r ApiDcimModulesBulkUpdateRequest) ([]Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModulesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.moduleRequest == nil {
		return localVarReturnValue, nil, reportError("moduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.moduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModulesCreateRequest struct {
	ctx                   context.Context
	ApiService            *DcimAPIService
	writableModuleRequest *WritableModuleRequest
}

func (r ApiDcimModulesCreateRequest) WritableModuleRequest(writableModuleRequest WritableModuleRequest) ApiDcimModulesCreateRequest {
	r.writableModuleRequest = &writableModuleRequest
	return r
}

func (r ApiDcimModulesCreateRequest) Execute() (*Module, *http.Response, error) {
	return r.ApiService.DcimModulesCreateExecute(r)
}

/*
DcimModulesCreate Method for DcimModulesCreate

Post a list of module objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModulesCreateRequest
*/
func (a *DcimAPIService) DcimModulesCreate(ctx context.Context) ApiDcimModulesCreateRequest {
	return ApiDcimModulesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Module
func (a *DcimAPIService) DcimModulesCreateExecute(r ApiDcimModulesCreateRequest) (*Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModulesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableModuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableModuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableModuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModulesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimModulesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimModulesDestroyExecute(r)
}

/*
DcimModulesDestroy Method for DcimModulesDestroy

Delete a module object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module.
	@return ApiDcimModulesDestroyRequest
*/
func (a *DcimAPIService) DcimModulesDestroy(ctx context.Context, id int32) ApiDcimModulesDestroyRequest {
	return ApiDcimModulesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimModulesDestroyExecute(r ApiDcimModulesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModulesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/modules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimModulesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	assetTag          *[]string
	assetTagEmpty     *bool
	assetTagIc        *[]string
	assetTagIe        *[]string
	assetTagIew       *[]string
	assetTagIsw       *[]string
	assetTagN         *[]string
	assetTagNic       *[]string
	assetTagNie       *[]string
	assetTagNiew      *[]string
	assetTagNisw      *[]string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceId          *[]int32
	deviceIdN         *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	manufacturer      *[]string
	manufacturerN     *[]string
	manufacturerId    *[]int32
	manufacturerIdN   *[]int32
	modifiedByRequest *string
	moduleBayId       *[]int32
	moduleBayIdN      *[]int32
	moduleType        *[]string
	moduleTypeN       *[]string
	moduleTypeId      *[]int32
	moduleTypeIdN     *[]int32
	offset            *int32
	ordering          *string
	q                 *string
	serial            *[]string
	serialEmpty       *bool
	serialIc          *[]string
	serialIe          *[]string
	serialIew         *[]string
	serialIsw         *[]string
	serialN           *[]string
	serialNic         *[]string
	serialNie         *[]string
	serialNiew        *[]string
	serialNisw        *[]string
	status            *[]string
	statusN           *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiDcimModulesListRequest) AssetTag(assetTag []string) ApiDcimModulesListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiDcimModulesListRequest) AssetTagEmpty(assetTagEmpty bool) ApiDcimModulesListRequest {
	r.assetTagEmpty = &assetTagEmpty
	return r
}

func (r ApiDcimModulesListRequest) AssetTagIc(assetTagIc []string) ApiDcimModulesListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiDcimModulesListRequest) AssetTagIe(assetTagIe []string) ApiDcimModulesListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiDcimModulesListRequest) AssetTagIew(assetTagIew []string) ApiDcimModulesListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiDcimModulesListRequest) AssetTagIsw(assetTagIsw []string) ApiDcimModulesListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiDcimModulesListRequest) AssetTagN(assetTagN []string) ApiDcimModulesListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiDcimModulesListRequest) AssetTagNic(assetTagNic []string) ApiDcimModulesListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiDcimModulesListRequest) AssetTagNie(assetTagNie []string) ApiDcimModulesListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiDcimModulesListRequest) AssetTagNiew(assetTagNiew []string) ApiDcimModulesListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiDcimModulesListRequest) AssetTagNisw(assetTagNisw []string) ApiDcimModulesListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

func (r ApiDcimModulesListRequest) Created(created []time.Time) ApiDcimModulesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimModulesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimModulesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimModulesListRequest) CreatedGt(createdGt []time.Time) ApiDcimModulesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimModulesListRequest) CreatedGte(createdGte []time.Time) ApiDcimModulesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimModulesListRequest) CreatedLt(createdLt []time.Time) ApiDcimModulesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimModulesListRequest) CreatedLte(createdLte []time.Time) ApiDcimModulesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimModulesListRequest) CreatedN(createdN []time.Time) ApiDcimModulesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimModulesListRequest) CreatedByRequest(createdByRequest string) ApiDcimModulesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimModulesListRequest) Description(description []string) ApiDcimModulesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimModulesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimModulesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimModulesListRequest) DescriptionIc(descriptionIc []string) ApiDcimModulesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimModulesListRequest) DescriptionIe(descriptionIe []string) ApiDcimModulesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimModulesListRequest) DescriptionIew(descriptionIew []string) ApiDcimModulesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimModulesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimModulesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimModulesListRequest) DescriptionN(descriptionN []string) ApiDcimModulesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimModulesListRequest) DescriptionNic(descriptionNic []string) ApiDcimModulesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimModulesListRequest) DescriptionNie(descriptionNie []string) ApiDcimModulesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimModulesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimModulesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimModulesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimModulesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (ID)
func (r ApiDcimModulesListRequest) DeviceId(deviceId []int32) ApiDcimModulesListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimModulesListRequest) DeviceIdN(deviceIdN []int32) ApiDcimModulesListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiDcimModulesListRequest) Id(id []int32) ApiDcimModulesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimModulesListRequest) IdEmpty(idEmpty bool) ApiDcimModulesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimModulesListRequest) IdGt(idGt []int32) ApiDcimModulesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimModulesListRequest) IdGte(idGte []int32) ApiDcimModulesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimModulesListRequest) IdLt(idLt []int32) ApiDcimModulesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimModulesListRequest) IdLte(idLte []int32) ApiDcimModulesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimModulesListRequest) IdN(idN []int32) ApiDcimModulesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimModulesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimModulesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimModulesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimModulesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimModulesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimModulesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimModulesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimModulesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimModulesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimModulesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimModulesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimModulesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimModulesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimModulesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimModulesListRequest) Limit(limit int32) ApiDcimModulesListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiDcimModulesListRequest) Manufacturer(manufacturer []string) ApiDcimModulesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimModulesListRequest) ManufacturerN(manufacturerN []string) ApiDcimModulesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimModulesListRequest) ManufacturerId(manufacturerId []int32) ApiDcimModulesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimModulesListRequest) ManufacturerIdN(manufacturerIdN []int32) ApiDcimModulesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiDcimModulesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimModulesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module Bay (ID)
func (r ApiDcimModulesListRequest) ModuleBayId(moduleBayId []int32) ApiDcimModulesListRequest {
	r.moduleBayId = &moduleBayId
	return r
}

// Module Bay (ID)
func (r ApiDcimModulesListRequest) ModuleBayIdN(moduleBayIdN []int32) ApiDcimModulesListRequest {
	r.moduleBayIdN = &moduleBayIdN
	return r
}

// Module type (model)
func (r ApiDcimModulesListRequest) ModuleType(moduleType []string) ApiDcimModulesListRequest {
	r.moduleType = &moduleType
	return r
}

// Module type (model)
func (r ApiDcimModulesListRequest) ModuleTypeN(moduleTypeN []string) ApiDcimModulesListRequest {
	r.moduleTypeN = &moduleTypeN
	return r
}

// Module type (ID)
func (r ApiDcimModulesListRequest) ModuleTypeId(moduleTypeId []int32) ApiDcimModulesListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiDcimModulesListRequest) ModuleTypeIdN(moduleTypeIdN []int32) ApiDcimModulesListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

// The initial index from which to return the results.
func (r ApiDcimModulesListRequest) Offset(offset int32) ApiDcimModulesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimModulesListRequest) Ordering(ordering string) ApiDcimModulesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimModulesListRequest) Q(q string) ApiDcimModulesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimModulesListRequest) Serial(serial []string) ApiDcimModulesListRequest {
	r.serial = &serial
	return r
}

func (r ApiDcimModulesListRequest) SerialEmpty(serialEmpty bool) ApiDcimModulesListRequest {
	r.serialEmpty = &serialEmpty
	return r
}

func (r ApiDcimModulesListRequest) SerialIc(serialIc []string) ApiDcimModulesListRequest {
	r.serialIc = &serialIc
	return r
}

func (r ApiDcimModulesListRequest) SerialIe(serialIe []string) ApiDcimModulesListRequest {
	r.serialIe = &serialIe
	return r
}

func (r ApiDcimModulesListRequest) SerialIew(serialIew []string) ApiDcimModulesListRequest {
	r.serialIew = &serialIew
	return r
}

func (r ApiDcimModulesListRequest) SerialIsw(serialIsw []string) ApiDcimModulesListRequest {
	r.serialIsw = &serialIsw
	return r
}

func (r ApiDcimModulesListRequest) SerialN(serialN []string) ApiDcimModulesListRequest {
	r.serialN = &serialN
	return r
}

func (r ApiDcimModulesListRequest) SerialNic(serialNic []string) ApiDcimModulesListRequest {
	r.serialNic = &serialNic
	return r
}

func (r ApiDcimModulesListRequest) SerialNie(serialNie []string) ApiDcimModulesListRequest {
	r.serialNie = &serialNie
	return r
}

func (r ApiDcimModulesListRequest) SerialNiew(serialNiew []string) ApiDcimModulesListRequest {
	r.serialNiew = &serialNiew
	return r
}

func (r ApiDcimModulesListRequest) SerialNisw(serialNisw []string) ApiDcimModulesListRequest {
	r.serialNisw = &serialNisw
	return r
}

func (r ApiDcimModulesListRequest) Status(status []string) ApiDcimModulesListRequest {
	r.status = &status
	return r
}

func (r ApiDcimModulesListRequest) StatusN(statusN []string) ApiDcimModulesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimModulesListRequest) Tag(tag []string) ApiDcimModulesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimModulesListRequest) TagN(tagN []string) ApiDcimModulesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimModulesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimModulesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimModulesListRequest) Execute() (*PaginatedModuleList, *http.Response, error) {
	return r.ApiService.DcimModulesListExecute(r)
}

/*
DcimModulesList Method for DcimModulesList

Get a list of module objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimModulesListRequest
*/
func (a *DcimAPIService) DcimModulesList(ctx context.Context) ApiDcimModulesListRequest {
	return ApiDcimModulesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedModuleList
func (a *DcimAPIService) DcimModulesListExecute(r ApiDcimModulesListRequest) (*PaginatedModuleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedModuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModulesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/modules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", t, "multi")
		}
	}
	if r.assetTagEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__empty", r.assetTagEmpty, "")
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", t, "multi")
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", t, "multi")
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", t, "multi")
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", t, "multi")
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", t, "multi")
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", t, "multi")
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", t, "multi")
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", t, "multi")
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleBayId != nil {
		t := *r.moduleBayId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_id", t, "multi")
		}
	}
	if r.moduleBayIdN != nil {
		t := *r.moduleBayIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_bay_id__n", t, "multi")
		}
	}
	if r.moduleType != nil {
		t := *r.moduleType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type", t, "multi")
		}
	}
	if r.moduleTypeN != nil {
		t := *r.moduleTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type__n", t, "multi")
		}
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.serial != nil {
		t := *r.serial
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial", t, "multi")
		}
	}
	if r.serialEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial__empty", r.serialEmpty, "")
	}
	if r.serialIc != nil {
		t := *r.serialIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", t, "multi")
		}
	}
	if r.serialIe != nil {
		t := *r.serialIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", t, "multi")
		}
	}
	if r.serialIew != nil {
		t := *r.serialIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", t, "multi")
		}
	}
	if r.serialIsw != nil {
		t := *r.serialIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", t, "multi")
		}
	}
	if r.serialN != nil {
		t := *r.serialN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", t, "multi")
		}
	}
	if r.serialNic != nil {
		t := *r.serialNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", t, "multi")
		}
	}
	if r.serialNie != nil {
		t := *r.serialNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", t, "multi")
		}
	}
	if r.serialNiew != nil {
		t := *r.serialNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", t, "multi")
		}
	}
	if r.serialNisw != nil {
		t := *r.serialNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModulesPartialUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *DcimAPIService
	id                           int32
	patchedWritableModuleRequest *PatchedWritableModuleRequest
}

func (r ApiDcimModulesPartialUpdateRequest) PatchedWritableModuleRequest(patchedWritableModuleRequest PatchedWritableModuleRequest) ApiDcimModulesPartialUpdateRequest {
	r.patchedWritableModuleRequest = &patchedWritableModuleRequest
	return r
}

func (r ApiDcimModulesPartialUpdateRequest) Execute() (*Module, *http.Response, error) {
	return r.ApiService.DcimModulesPartialUpdateExecute(r)
}

/*
DcimModulesPartialUpdate Method for DcimModulesPartialUpdate

Patch a module object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module.
	@return ApiDcimModulesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimModulesPartialUpdate(ctx context.Context, id int32) ApiDcimModulesPartialUpdateRequest {
	return ApiDcimModulesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Module
func (a *DcimAPIService) DcimModulesPartialUpdateExecute(r ApiDcimModulesPartialUpdateRequest) (*Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModulesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/modules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableModuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModulesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimModulesRetrieveRequest) Execute() (*Module, *http.Response, error) {
	return r.ApiService.DcimModulesRetrieveExecute(r)
}

/*
DcimModulesRetrieve Method for DcimModulesRetrieve

Get a module object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module.
	@return ApiDcimModulesRetrieveRequest
*/
func (a *DcimAPIService) DcimModulesRetrieve(ctx context.Context, id int32) ApiDcimModulesRetrieveRequest {
	return ApiDcimModulesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Module
func (a *DcimAPIService) DcimModulesRetrieveExecute(r ApiDcimModulesRetrieveRequest) (*Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModulesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/modules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimModulesUpdateRequest struct {
	ctx                   context.Context
	ApiService            *DcimAPIService
	id                    int32
	writableModuleRequest *WritableModuleRequest
}

func (r ApiDcimModulesUpdateRequest) WritableModuleRequest(writableModuleRequest WritableModuleRequest) ApiDcimModulesUpdateRequest {
	r.writableModuleRequest = &writableModuleRequest
	return r
}

func (r ApiDcimModulesUpdateRequest) Execute() (*Module, *http.Response, error) {
	return r.ApiService.DcimModulesUpdateExecute(r)
}

/*
DcimModulesUpdate Method for DcimModulesUpdate

Put a module object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this module.
	@return ApiDcimModulesUpdateRequest
*/
func (a *DcimAPIService) DcimModulesUpdate(ctx context.Context, id int32) ApiDcimModulesUpdateRequest {
	return ApiDcimModulesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Module
func (a *DcimAPIService) DcimModulesUpdateExecute(r ApiDcimModulesUpdateRequest) (*Module, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Module
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimModulesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/modules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableModuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableModuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableModuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsBulkDestroyRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	platformRequest *[]PlatformRequest
}

func (r ApiDcimPlatformsBulkDestroyRequest) PlatformRequest(platformRequest []PlatformRequest) ApiDcimPlatformsBulkDestroyRequest {
	r.platformRequest = &platformRequest
	return r
}

func (r ApiDcimPlatformsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPlatformsBulkDestroyExecute(r)
}

/*
DcimPlatformsBulkDestroy Method for DcimPlatformsBulkDestroy

Delete a list of platform objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPlatformsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimPlatformsBulkDestroy(ctx context.Context) ApiDcimPlatformsBulkDestroyRequest {
	return ApiDcimPlatformsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPlatformsBulkDestroyExecute(r ApiDcimPlatformsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPlatformsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.platformRequest == nil {
		return nil, reportError("platformRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.platformRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPlatformsBulkPartialUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	platformRequest *[]PlatformRequest
}

func (r ApiDcimPlatformsBulkPartialUpdateRequest) PlatformRequest(platformRequest []PlatformRequest) ApiDcimPlatformsBulkPartialUpdateRequest {
	r.platformRequest = &platformRequest
	return r
}

func (r ApiDcimPlatformsBulkPartialUpdateRequest) Execute() ([]Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsBulkPartialUpdateExecute(r)
}

/*
DcimPlatformsBulkPartialUpdate Method for DcimPlatformsBulkPartialUpdate

Patch a list of platform objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPlatformsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPlatformsBulkPartialUpdate(ctx context.Context) ApiDcimPlatformsBulkPartialUpdateRequest {
	return ApiDcimPlatformsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Platform
func (a *DcimAPIService) DcimPlatformsBulkPartialUpdateExecute(r ApiDcimPlatformsBulkPartialUpdateRequest) ([]Platform, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPlatformsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.platformRequest == nil {
		return localVarReturnValue, nil, reportError("platformRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.platformRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsBulkUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	platformRequest *[]PlatformRequest
}

func (r ApiDcimPlatformsBulkUpdateRequest) PlatformRequest(platformRequest []PlatformRequest) ApiDcimPlatformsBulkUpdateRequest {
	r.platformRequest = &platformRequest
	return r
}

func (r ApiDcimPlatformsBulkUpdateRequest) Execute() ([]Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsBulkUpdateExecute(r)
}

/*
DcimPlatformsBulkUpdate Method for DcimPlatformsBulkUpdate

Put a list of platform objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPlatformsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimPlatformsBulkUpdate(ctx context.Context) ApiDcimPlatformsBulkUpdateRequest {
	return ApiDcimPlatformsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Platform
func (a *DcimAPIService) DcimPlatformsBulkUpdateExecute(r ApiDcimPlatformsBulkUpdateRequest) ([]Platform, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPlatformsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.platformRequest == nil {
		return localVarReturnValue, nil, reportError("platformRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.platformRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsCreateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	platformRequest *PlatformRequest
}

func (r ApiDcimPlatformsCreateRequest) PlatformRequest(platformRequest PlatformRequest) ApiDcimPlatformsCreateRequest {
	r.platformRequest = &platformRequest
	return r
}

func (r ApiDcimPlatformsCreateRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsCreateExecute(r)
}

/*
DcimPlatformsCreate Method for DcimPlatformsCreate

Post a list of platform objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPlatformsCreateRequest
*/
func (a *DcimAPIService) DcimPlatformsCreate(ctx context.Context) ApiDcimPlatformsCreateRequest {
	return ApiDcimPlatformsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Platform
func (a *DcimAPIService) DcimPlatformsCreateExecute(r ApiDcimPlatformsCreateRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPlatformsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.platformRequest == nil {
		return localVarReturnValue, nil, reportError("platformRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.platformRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPlatformsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPlatformsDestroyExecute(r)
}

/*
DcimPlatformsDestroy Method for DcimPlatformsDestroy

Delete a platform object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this platform.
	@return ApiDcimPlatformsDestroyRequest
*/
func (a *DcimAPIService) DcimPlatformsDestroy(ctx context.Context, id int32) ApiDcimPlatformsDestroyRequest {
	return ApiDcimPlatformsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPlatformsDestroyExecute(r ApiDcimPlatformsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPlatformsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/platforms/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPlatformsListRequest struct {
	ctx                    context.Context
	ApiService             *DcimAPIService
	availableForDeviceType *string
	configTemplateId       *[]*int32
	configTemplateIdN      *[]*int32
	created                *[]time.Time
	createdEmpty           *[]time.Time
	createdGt              *[]time.Time
	createdGte             *[]time.Time
	createdLt              *[]time.Time
	createdLte             *[]time.Time
	createdN               *[]time.Time
	createdByRequest       *string
	description            *[]string
	descriptionEmpty       *bool
	descriptionIc          *[]string
	descriptionIe          *[]string
	descriptionIew         *[]string
	descriptionIsw         *[]string
	descriptionN           *[]string
	descriptionNic         *[]string
	descriptionNie         *[]string
	descriptionNiew        *[]string
	descriptionNisw        *[]string
	id                     *[]int32
	idEmpty                *bool
	idGt                   *[]int32
	idGte                  *[]int32
	idLt                   *[]int32
	idLte                  *[]int32
	idN                    *[]int32
	lastUpdated            *[]time.Time
	lastUpdatedEmpty       *[]time.Time
	lastUpdatedGt          *[]time.Time
	lastUpdatedGte         *[]time.Time
	lastUpdatedLt          *[]time.Time
	lastUpdatedLte         *[]time.Time
	lastUpdatedN           *[]time.Time
	limit                  *int32
	manufacturer           *[]string
	manufacturerN          *[]string
	manufacturerId         *[]int32
	manufacturerIdN        *[]int32
	modifiedByRequest      *string
	name                   *[]string
	nameEmpty              *bool
	nameIc                 *[]string
	nameIe                 *[]string
	nameIew                *[]string
	nameIsw                *[]string
	nameN                  *[]string
	nameNic                *[]string
	nameNie                *[]string
	nameNiew               *[]string
	nameNisw               *[]string
	offset                 *int32
	ordering               *string
	q                      *string
	slug                   *[]string
	slugEmpty              *bool
	slugIc                 *[]string
	slugIe                 *[]string
	slugIew                *[]string
	slugIsw                *[]string
	slugN                  *[]string
	slugNic                *[]string
	slugNie                *[]string
	slugNiew               *[]string
	slugNisw               *[]string
	tag                    *[]string
	tagN                   *[]string
	updatedByRequest       *string
}

func (r ApiDcimPlatformsListRequest) AvailableForDeviceType(availableForDeviceType string) ApiDcimPlatformsListRequest {
	r.availableForDeviceType = &availableForDeviceType
	return r
}

// Config template (ID)
func (r ApiDcimPlatformsListRequest) ConfigTemplateId(configTemplateId []*int32) ApiDcimPlatformsListRequest {
	r.configTemplateId = &configTemplateId
	return r
}

// Config template (ID)
func (r ApiDcimPlatformsListRequest) ConfigTemplateIdN(configTemplateIdN []*int32) ApiDcimPlatformsListRequest {
	r.configTemplateIdN = &configTemplateIdN
	return r
}

func (r ApiDcimPlatformsListRequest) Created(created []time.Time) ApiDcimPlatformsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPlatformsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimPlatformsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimPlatformsListRequest) CreatedGt(createdGt []time.Time) ApiDcimPlatformsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimPlatformsListRequest) CreatedGte(createdGte []time.Time) ApiDcimPlatformsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPlatformsListRequest) CreatedLt(createdLt []time.Time) ApiDcimPlatformsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimPlatformsListRequest) CreatedLte(createdLte []time.Time) ApiDcimPlatformsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPlatformsListRequest) CreatedN(createdN []time.Time) ApiDcimPlatformsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimPlatformsListRequest) CreatedByRequest(createdByRequest string) ApiDcimPlatformsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimPlatformsListRequest) Description(description []string) ApiDcimPlatformsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimPlatformsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionIc(descriptionIc []string) ApiDcimPlatformsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionIe(descriptionIe []string) ApiDcimPlatformsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionIew(descriptionIew []string) ApiDcimPlatformsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPlatformsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionN(descriptionN []string) ApiDcimPlatformsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNic(descriptionNic []string) ApiDcimPlatformsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNie(descriptionNie []string) ApiDcimPlatformsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPlatformsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPlatformsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimPlatformsListRequest) Id(id []int32) ApiDcimPlatformsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPlatformsListRequest) IdEmpty(idEmpty bool) ApiDcimPlatformsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimPlatformsListRequest) IdGt(idGt []int32) ApiDcimPlatformsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimPlatformsListRequest) IdGte(idGte []int32) ApiDcimPlatformsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimPlatformsListRequest) IdLt(idLt []int32) ApiDcimPlatformsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimPlatformsListRequest) IdLte(idLte []int32) ApiDcimPlatformsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimPlatformsListRequest) IdN(idN []int32) ApiDcimPlatformsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimPlatformsListRequest) Limit(limit int32) ApiDcimPlatformsListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiDcimPlatformsListRequest) Manufacturer(manufacturer []string) ApiDcimPlatformsListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimPlatformsListRequest) ManufacturerN(manufacturerN []string) ApiDcimPlatformsListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimPlatformsListRequest) ManufacturerId(manufacturerId []int32) ApiDcimPlatformsListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimPlatformsListRequest) ManufacturerIdN(manufacturerIdN []int32) ApiDcimPlatformsListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiDcimPlatformsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimPlatformsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimPlatformsListRequest) Name(name []string) ApiDcimPlatformsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPlatformsListRequest) NameEmpty(nameEmpty bool) ApiDcimPlatformsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimPlatformsListRequest) NameIc(nameIc []string) ApiDcimPlatformsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPlatformsListRequest) NameIe(nameIe []string) ApiDcimPlatformsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPlatformsListRequest) NameIew(nameIew []string) ApiDcimPlatformsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPlatformsListRequest) NameIsw(nameIsw []string) ApiDcimPlatformsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPlatformsListRequest) NameN(nameN []string) ApiDcimPlatformsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPlatformsListRequest) NameNic(nameNic []string) ApiDcimPlatformsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPlatformsListRequest) NameNie(nameNie []string) ApiDcimPlatformsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPlatformsListRequest) NameNiew(nameNiew []string) ApiDcimPlatformsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPlatformsListRequest) NameNisw(nameNisw []string) ApiDcimPlatformsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPlatformsListRequest) Offset(offset int32) ApiDcimPlatformsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimPlatformsListRequest) Ordering(ordering string) ApiDcimPlatformsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimPlatformsListRequest) Q(q string) ApiDcimPlatformsListRequest {
	r.q = &q
	return r
}

func (r ApiDcimPlatformsListRequest) Slug(slug []string) ApiDcimPlatformsListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimPlatformsListRequest) SlugEmpty(slugEmpty bool) ApiDcimPlatformsListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimPlatformsListRequest) SlugIc(slugIc []string) ApiDcimPlatformsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimPlatformsListRequest) SlugIe(slugIe []string) ApiDcimPlatformsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimPlatformsListRequest) SlugIew(slugIew []string) ApiDcimPlatformsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimPlatformsListRequest) SlugIsw(slugIsw []string) ApiDcimPlatformsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimPlatformsListRequest) SlugN(slugN []string) ApiDcimPlatformsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNic(slugNic []string) ApiDcimPlatformsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNie(slugNie []string) ApiDcimPlatformsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNiew(slugNiew []string) ApiDcimPlatformsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNisw(slugNisw []string) ApiDcimPlatformsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimPlatformsListRequest) Tag(tag []string) ApiDcimPlatformsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimPlatformsListRequest) TagN(tagN []string) ApiDcimPlatformsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimPlatformsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimPlatformsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimPlatformsListRequest) Execute() (*PaginatedPlatformList, *http.Response, error) {
	return r.ApiService.DcimPlatformsListExecute(r)
}

/*
DcimPlatformsList Method for DcimPlatformsList

Get a list of platform objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPlatformsListRequest
*/
func (a *DcimAPIService) DcimPlatformsList(ctx context.Context) ApiDcimPlatformsListRequest {
	return ApiDcimPlatformsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPlatformList
func (a *DcimAPIService) DcimPlatformsListExecute(r ApiDcimPlatformsListRequest) (*PaginatedPlatformList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPlatformList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPlatformsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.availableForDeviceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "available_for_device_type", r.availableForDeviceType, "")
	}
	if r.configTemplateId != nil {
		t := *r.configTemplateId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id", t, "multi")
		}
	}
	if r.configTemplateIdN != nil {
		t := *r.configTemplateIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "config_template_id__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer", t, "multi")
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer__n", t, "multi")
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id", t, "multi")
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "manufacturer_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsPartialUpdateRequest struct {
	ctx                    context.Context
	ApiService             *DcimAPIService
	id                     int32
	patchedPlatformRequest *PatchedPlatformRequest
}

func (r ApiDcimPlatformsPartialUpdateRequest) PatchedPlatformRequest(patchedPlatformRequest PatchedPlatformRequest) ApiDcimPlatformsPartialUpdateRequest {
	r.patchedPlatformRequest = &patchedPlatformRequest
	return r
}

func (r ApiDcimPlatformsPartialUpdateRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsPartialUpdateExecute(r)
}

/*
DcimPlatformsPartialUpdate Method for DcimPlatformsPartialUpdate

Patch a platform object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this platform.
	@return ApiDcimPlatformsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPlatformsPartialUpdate(ctx context.Context, id int32) ApiDcimPlatformsPartialUpdateRequest {
	return ApiDcimPlatformsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Platform
func (a *DcimAPIService) DcimPlatformsPartialUpdateExecute(r ApiDcimPlatformsPartialUpdateRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPlatformsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/platforms/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedPlatformRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPlatformsRetrieveRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsRetrieveExecute(r)
}

/*
DcimPlatformsRetrieve Method for DcimPlatformsRetrieve

Get a platform object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this platform.
	@return ApiDcimPlatformsRetrieveRequest
*/
func (a *DcimAPIService) DcimPlatformsRetrieve(ctx context.Context, id int32) ApiDcimPlatformsRetrieveRequest {
	return ApiDcimPlatformsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Platform
func (a *DcimAPIService) DcimPlatformsRetrieveExecute(r ApiDcimPlatformsRetrieveRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPlatformsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/platforms/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	id              int32
	platformRequest *PlatformRequest
}

func (r ApiDcimPlatformsUpdateRequest) PlatformRequest(platformRequest PlatformRequest) ApiDcimPlatformsUpdateRequest {
	r.platformRequest = &platformRequest
	return r
}

func (r ApiDcimPlatformsUpdateRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsUpdateExecute(r)
}

/*
DcimPlatformsUpdate Method for DcimPlatformsUpdate

Put a platform object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this platform.
	@return ApiDcimPlatformsUpdateRequest
*/
func (a *DcimAPIService) DcimPlatformsUpdate(ctx context.Context, id int32) ApiDcimPlatformsUpdateRequest {
	return ApiDcimPlatformsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Platform
func (a *DcimAPIService) DcimPlatformsUpdateExecute(r ApiDcimPlatformsUpdateRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPlatformsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/platforms/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.platformRequest == nil {
		return localVarReturnValue, nil, reportError("platformRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.platformRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsBulkDestroyRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	powerFeedRequest *[]PowerFeedRequest
}

func (r ApiDcimPowerFeedsBulkDestroyRequest) PowerFeedRequest(powerFeedRequest []PowerFeedRequest) ApiDcimPowerFeedsBulkDestroyRequest {
	r.powerFeedRequest = &powerFeedRequest
	return r
}

func (r ApiDcimPowerFeedsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerFeedsBulkDestroyExecute(r)
}

/*
DcimPowerFeedsBulkDestroy Method for DcimPowerFeedsBulkDestroy

Delete a list of power feed objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerFeedsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimPowerFeedsBulkDestroy(ctx context.Context) ApiDcimPowerFeedsBulkDestroyRequest {
	return ApiDcimPowerFeedsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerFeedsBulkDestroyExecute(r ApiDcimPowerFeedsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerFeedRequest == nil {
		return nil, reportError("powerFeedRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerFeedRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsBulkPartialUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	powerFeedRequest *[]PowerFeedRequest
}

func (r ApiDcimPowerFeedsBulkPartialUpdateRequest) PowerFeedRequest(powerFeedRequest []PowerFeedRequest) ApiDcimPowerFeedsBulkPartialUpdateRequest {
	r.powerFeedRequest = &powerFeedRequest
	return r
}

func (r ApiDcimPowerFeedsBulkPartialUpdateRequest) Execute() ([]PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsBulkPartialUpdateExecute(r)
}

/*
DcimPowerFeedsBulkPartialUpdate Method for DcimPowerFeedsBulkPartialUpdate

Patch a list of power feed objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerFeedsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerFeedsBulkPartialUpdate(ctx context.Context) ApiDcimPowerFeedsBulkPartialUpdateRequest {
	return ApiDcimPowerFeedsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerFeed
func (a *DcimAPIService) DcimPowerFeedsBulkPartialUpdateExecute(r ApiDcimPowerFeedsBulkPartialUpdateRequest) ([]PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerFeedRequest == nil {
		return localVarReturnValue, nil, reportError("powerFeedRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerFeedRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsBulkUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	powerFeedRequest *[]PowerFeedRequest
}

func (r ApiDcimPowerFeedsBulkUpdateRequest) PowerFeedRequest(powerFeedRequest []PowerFeedRequest) ApiDcimPowerFeedsBulkUpdateRequest {
	r.powerFeedRequest = &powerFeedRequest
	return r
}

func (r ApiDcimPowerFeedsBulkUpdateRequest) Execute() ([]PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsBulkUpdateExecute(r)
}

/*
DcimPowerFeedsBulkUpdate Method for DcimPowerFeedsBulkUpdate

Put a list of power feed objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerFeedsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimPowerFeedsBulkUpdate(ctx context.Context) ApiDcimPowerFeedsBulkUpdateRequest {
	return ApiDcimPowerFeedsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerFeed
func (a *DcimAPIService) DcimPowerFeedsBulkUpdateExecute(r ApiDcimPowerFeedsBulkUpdateRequest) ([]PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerFeedRequest == nil {
		return localVarReturnValue, nil, reportError("powerFeedRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerFeedRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsCreateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	writablePowerFeedRequest *WritablePowerFeedRequest
}

func (r ApiDcimPowerFeedsCreateRequest) WritablePowerFeedRequest(writablePowerFeedRequest WritablePowerFeedRequest) ApiDcimPowerFeedsCreateRequest {
	r.writablePowerFeedRequest = &writablePowerFeedRequest
	return r
}

func (r ApiDcimPowerFeedsCreateRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsCreateExecute(r)
}

/*
DcimPowerFeedsCreate Method for DcimPowerFeedsCreate

Post a list of power feed objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerFeedsCreateRequest
*/
func (a *DcimAPIService) DcimPowerFeedsCreate(ctx context.Context) ApiDcimPowerFeedsCreateRequest {
	return ApiDcimPowerFeedsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PowerFeed
func (a *DcimAPIService) DcimPowerFeedsCreateExecute(r ApiDcimPowerFeedsCreateRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerFeedRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerFeedRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerFeedRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerFeedsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerFeedsDestroyExecute(r)
}

/*
DcimPowerFeedsDestroy Method for DcimPowerFeedsDestroy

Delete a power feed object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power feed.
	@return ApiDcimPowerFeedsDestroyRequest
*/
func (a *DcimAPIService) DcimPowerFeedsDestroy(ctx context.Context, id int32) ApiDcimPowerFeedsDestroyRequest {
	return ApiDcimPowerFeedsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerFeedsDestroyExecute(r ApiDcimPowerFeedsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsListRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	amperage            *[]int32
	amperageEmpty       *bool
	amperageGt          *[]int32
	amperageGte         *[]int32
	amperageLt          *[]int32
	amperageLte         *[]int32
	amperageN           *[]int32
	availablePower      *[]int32
	availablePowerEmpty *bool
	availablePowerGt    *[]int32
	availablePowerGte   *[]int32
	availablePowerLt    *[]int32
	availablePowerLte   *[]int32
	availablePowerN     *[]int32
	cableEnd            *CircuitsCircuitTerminationsListCableEndParameter
	cableEndN           *CircuitsCircuitTerminationsListCableEndParameter
	cableId             *[]*int32
	cableIdN            *[]*int32
	cabled              *bool
	connected           *bool
	created             *[]time.Time
	createdEmpty        *[]time.Time
	createdGt           *[]time.Time
	createdGte          *[]time.Time
	createdLt           *[]time.Time
	createdLte          *[]time.Time
	createdN            *[]time.Time
	createdByRequest    *string
	description         *[]string
	descriptionEmpty    *bool
	descriptionIc       *[]string
	descriptionIe       *[]string
	descriptionIew      *[]string
	descriptionIsw      *[]string
	descriptionN        *[]string
	descriptionNic      *[]string
	descriptionNie      *[]string
	descriptionNiew     *[]string
	descriptionNisw     *[]string
	id                  *[]int32
	idEmpty             *bool
	idGt                *[]int32
	idGte               *[]int32
	idLt                *[]int32
	idLte               *[]int32
	idN                 *[]int32
	lastUpdated         *[]time.Time
	lastUpdatedEmpty    *[]time.Time
	lastUpdatedGt       *[]time.Time
	lastUpdatedGte      *[]time.Time
	lastUpdatedLt       *[]time.Time
	lastUpdatedLte      *[]time.Time
	lastUpdatedN        *[]time.Time
	limit               *int32
	markConnected       *bool
	maxUtilization      *[]int32
	maxUtilizationEmpty *bool
	maxUtilizationGt    *[]int32
	maxUtilizationGte   *[]int32
	maxUtilizationLt    *[]int32
	maxUtilizationLte   *[]int32
	maxUtilizationN     *[]int32
	modifiedByRequest   *string
	name                *[]string
	nameEmpty           *bool
	nameIc              *[]string
	nameIe              *[]string
	nameIew             *[]string
	nameIsw             *[]string
	nameN               *[]string
	nameNic             *[]string
	nameNie             *[]string
	nameNiew            *[]string
	nameNisw            *[]string
	occupied            *bool
	offset              *int32
	ordering            *string
	phase               *DcimPowerFeedsListPhaseParameter
	phaseN              *DcimPowerFeedsListPhaseParameter
	powerPanelId        *[]int32
	powerPanelIdN       *[]int32
	q                   *string
	rackId              *[]int32
	rackIdN             *[]int32
	region              *[]string
	regionN             *[]string
	regionId            *[]string
	regionIdN           *[]string
	site                *[]string
	siteN               *[]string
	siteGroup           *[]string
	siteGroupN          *[]string
	siteGroupId         *[]string
	siteGroupIdN        *[]string
	siteId              *[]int32
	siteIdN             *[]int32
	status              *[]string
	statusN             *[]string
	supply              *DcimPowerFeedsListSupplyParameter
	supplyN             *DcimPowerFeedsListSupplyParameter
	tag                 *[]string
	tagN                *[]string
	tenant              *[]string
	tenantN             *[]string
	tenantGroup         *[]string
	tenantGroupN        *[]string
	tenantGroupId       *[]string
	tenantGroupIdN      *[]string
	tenantId            *[]*int32
	tenantIdN           *[]*int32
	type_               *DcimPowerFeedsListTypeParameter
	typeN               *DcimPowerFeedsListTypeParameter
	updatedByRequest    *string
	voltage             *[]int32
	voltageEmpty        *bool
	voltageGt           *[]int32
	voltageGte          *[]int32
	voltageLt           *[]int32
	voltageLte          *[]int32
	voltageN            *[]int32
}

func (r ApiDcimPowerFeedsListRequest) Amperage(amperage []int32) ApiDcimPowerFeedsListRequest {
	r.amperage = &amperage
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageEmpty(amperageEmpty bool) ApiDcimPowerFeedsListRequest {
	r.amperageEmpty = &amperageEmpty
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageGt(amperageGt []int32) ApiDcimPowerFeedsListRequest {
	r.amperageGt = &amperageGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageGte(amperageGte []int32) ApiDcimPowerFeedsListRequest {
	r.amperageGte = &amperageGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageLt(amperageLt []int32) ApiDcimPowerFeedsListRequest {
	r.amperageLt = &amperageLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageLte(amperageLte []int32) ApiDcimPowerFeedsListRequest {
	r.amperageLte = &amperageLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageN(amperageN []int32) ApiDcimPowerFeedsListRequest {
	r.amperageN = &amperageN
	return r
}

func (r ApiDcimPowerFeedsListRequest) AvailablePower(availablePower []int32) ApiDcimPowerFeedsListRequest {
	r.availablePower = &availablePower
	return r
}

func (r ApiDcimPowerFeedsListRequest) AvailablePowerEmpty(availablePowerEmpty bool) ApiDcimPowerFeedsListRequest {
	r.availablePowerEmpty = &availablePowerEmpty
	return r
}

func (r ApiDcimPowerFeedsListRequest) AvailablePowerGt(availablePowerGt []int32) ApiDcimPowerFeedsListRequest {
	r.availablePowerGt = &availablePowerGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) AvailablePowerGte(availablePowerGte []int32) ApiDcimPowerFeedsListRequest {
	r.availablePowerGte = &availablePowerGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) AvailablePowerLt(availablePowerLt []int32) ApiDcimPowerFeedsListRequest {
	r.availablePowerLt = &availablePowerLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) AvailablePowerLte(availablePowerLte []int32) ApiDcimPowerFeedsListRequest {
	r.availablePowerLte = &availablePowerLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) AvailablePowerN(availablePowerN []int32) ApiDcimPowerFeedsListRequest {
	r.availablePowerN = &availablePowerN
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimPowerFeedsListRequest) CableEnd(cableEnd CircuitsCircuitTerminationsListCableEndParameter) ApiDcimPowerFeedsListRequest {
	r.cableEnd = &cableEnd
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimPowerFeedsListRequest) CableEndN(cableEndN CircuitsCircuitTerminationsListCableEndParameter) ApiDcimPowerFeedsListRequest {
	r.cableEndN = &cableEndN
	return r
}

// Cable (ID)
func (r ApiDcimPowerFeedsListRequest) CableId(cableId []*int32) ApiDcimPowerFeedsListRequest {
	r.cableId = &cableId
	return r
}

// Cable (ID)
func (r ApiDcimPowerFeedsListRequest) CableIdN(cableIdN []*int32) ApiDcimPowerFeedsListRequest {
	r.cableIdN = &cableIdN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Cabled(cabled bool) ApiDcimPowerFeedsListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimPowerFeedsListRequest) Connected(connected bool) ApiDcimPowerFeedsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimPowerFeedsListRequest) Created(created []time.Time) ApiDcimPowerFeedsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPowerFeedsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimPowerFeedsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimPowerFeedsListRequest) CreatedGt(createdGt []time.Time) ApiDcimPowerFeedsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) CreatedGte(createdGte []time.Time) ApiDcimPowerFeedsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) CreatedLt(createdLt []time.Time) ApiDcimPowerFeedsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) CreatedLte(createdLte []time.Time) ApiDcimPowerFeedsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) CreatedN(createdN []time.Time) ApiDcimPowerFeedsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimPowerFeedsListRequest) CreatedByRequest(createdByRequest string) ApiDcimPowerFeedsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimPowerFeedsListRequest) Description(description []string) ApiDcimPowerFeedsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimPowerFeedsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionIc(descriptionIc []string) ApiDcimPowerFeedsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionIe(descriptionIe []string) ApiDcimPowerFeedsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionIew(descriptionIew []string) ApiDcimPowerFeedsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPowerFeedsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionN(descriptionN []string) ApiDcimPowerFeedsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionNic(descriptionNic []string) ApiDcimPowerFeedsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionNie(descriptionNie []string) ApiDcimPowerFeedsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPowerFeedsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPowerFeedsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPowerFeedsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimPowerFeedsListRequest) Id(id []int32) ApiDcimPowerFeedsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdEmpty(idEmpty bool) ApiDcimPowerFeedsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdGt(idGt []int32) ApiDcimPowerFeedsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdGte(idGte []int32) ApiDcimPowerFeedsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdLt(idLt []int32) ApiDcimPowerFeedsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdLte(idLte []int32) ApiDcimPowerFeedsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdN(idN []int32) ApiDcimPowerFeedsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerFeedsListRequest) Limit(limit int32) ApiDcimPowerFeedsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerFeedsListRequest) MarkConnected(markConnected bool) ApiDcimPowerFeedsListRequest {
	r.markConnected = &markConnected
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilization(maxUtilization []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilization = &maxUtilization
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationEmpty(maxUtilizationEmpty bool) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationEmpty = &maxUtilizationEmpty
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationGt(maxUtilizationGt []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationGt = &maxUtilizationGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationGte(maxUtilizationGte []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationGte = &maxUtilizationGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationLt(maxUtilizationLt []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationLt = &maxUtilizationLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationLte(maxUtilizationLte []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationLte = &maxUtilizationLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationN(maxUtilizationN []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationN = &maxUtilizationN
	return r
}

func (r ApiDcimPowerFeedsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimPowerFeedsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimPowerFeedsListRequest) Name(name []string) ApiDcimPowerFeedsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameEmpty(nameEmpty bool) ApiDcimPowerFeedsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameIc(nameIc []string) ApiDcimPowerFeedsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameIe(nameIe []string) ApiDcimPowerFeedsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameIew(nameIew []string) ApiDcimPowerFeedsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameIsw(nameIsw []string) ApiDcimPowerFeedsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameN(nameN []string) ApiDcimPowerFeedsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNic(nameNic []string) ApiDcimPowerFeedsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNie(nameNie []string) ApiDcimPowerFeedsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNiew(nameNiew []string) ApiDcimPowerFeedsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNisw(nameNisw []string) ApiDcimPowerFeedsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerFeedsListRequest) Occupied(occupied bool) ApiDcimPowerFeedsListRequest {
	r.occupied = &occupied
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerFeedsListRequest) Offset(offset int32) ApiDcimPowerFeedsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimPowerFeedsListRequest) Ordering(ordering string) ApiDcimPowerFeedsListRequest {
	r.ordering = &ordering
	return r
}

// * &#x60;single-phase&#x60; - Single phase * &#x60;three-phase&#x60; - Three-phase
func (r ApiDcimPowerFeedsListRequest) Phase(phase DcimPowerFeedsListPhaseParameter) ApiDcimPowerFeedsListRequest {
	r.phase = &phase
	return r
}

// * &#x60;single-phase&#x60; - Single phase * &#x60;three-phase&#x60; - Three-phase
func (r ApiDcimPowerFeedsListRequest) PhaseN(phaseN DcimPowerFeedsListPhaseParameter) ApiDcimPowerFeedsListRequest {
	r.phaseN = &phaseN
	return r
}

// Power panel (ID)
func (r ApiDcimPowerFeedsListRequest) PowerPanelId(powerPanelId []int32) ApiDcimPowerFeedsListRequest {
	r.powerPanelId = &powerPanelId
	return r
}

// Power panel (ID)
func (r ApiDcimPowerFeedsListRequest) PowerPanelIdN(powerPanelIdN []int32) ApiDcimPowerFeedsListRequest {
	r.powerPanelIdN = &powerPanelIdN
	return r
}

// Search
func (r ApiDcimPowerFeedsListRequest) Q(q string) ApiDcimPowerFeedsListRequest {
	r.q = &q
	return r
}

// Rack (ID)
func (r ApiDcimPowerFeedsListRequest) RackId(rackId []int32) ApiDcimPowerFeedsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimPowerFeedsListRequest) RackIdN(rackIdN []int32) ApiDcimPowerFeedsListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Region(region []string) ApiDcimPowerFeedsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimPowerFeedsListRequest) RegionN(regionN []string) ApiDcimPowerFeedsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimPowerFeedsListRequest) RegionId(regionId []string) ApiDcimPowerFeedsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimPowerFeedsListRequest) RegionIdN(regionIdN []string) ApiDcimPowerFeedsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimPowerFeedsListRequest) Site(site []string) ApiDcimPowerFeedsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimPowerFeedsListRequest) SiteN(siteN []string) ApiDcimPowerFeedsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimPowerFeedsListRequest) SiteGroup(siteGroup []string) ApiDcimPowerFeedsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimPowerFeedsListRequest) SiteGroupN(siteGroupN []string) ApiDcimPowerFeedsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimPowerFeedsListRequest) SiteGroupId(siteGroupId []string) ApiDcimPowerFeedsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimPowerFeedsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimPowerFeedsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimPowerFeedsListRequest) SiteId(siteId []int32) ApiDcimPowerFeedsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimPowerFeedsListRequest) SiteIdN(siteIdN []int32) ApiDcimPowerFeedsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Status(status []string) ApiDcimPowerFeedsListRequest {
	r.status = &status
	return r
}

func (r ApiDcimPowerFeedsListRequest) StatusN(statusN []string) ApiDcimPowerFeedsListRequest {
	r.statusN = &statusN
	return r
}

// * &#x60;ac&#x60; - AC * &#x60;dc&#x60; - DC
func (r ApiDcimPowerFeedsListRequest) Supply(supply DcimPowerFeedsListSupplyParameter) ApiDcimPowerFeedsListRequest {
	r.supply = &supply
	return r
}

// * &#x60;ac&#x60; - AC * &#x60;dc&#x60; - DC
func (r ApiDcimPowerFeedsListRequest) SupplyN(supplyN DcimPowerFeedsListSupplyParameter) ApiDcimPowerFeedsListRequest {
	r.supplyN = &supplyN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Tag(tag []string) ApiDcimPowerFeedsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimPowerFeedsListRequest) TagN(tagN []string) ApiDcimPowerFeedsListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimPowerFeedsListRequest) Tenant(tenant []string) ApiDcimPowerFeedsListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimPowerFeedsListRequest) TenantN(tenantN []string) ApiDcimPowerFeedsListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiDcimPowerFeedsListRequest) TenantGroup(tenantGroup []string) ApiDcimPowerFeedsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiDcimPowerFeedsListRequest) TenantGroupN(tenantGroupN []string) ApiDcimPowerFeedsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiDcimPowerFeedsListRequest) TenantGroupId(tenantGroupId []string) ApiDcimPowerFeedsListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiDcimPowerFeedsListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimPowerFeedsListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimPowerFeedsListRequest) TenantId(tenantId []*int32) ApiDcimPowerFeedsListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimPowerFeedsListRequest) TenantIdN(tenantIdN []*int32) ApiDcimPowerFeedsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

// * &#x60;primary&#x60; - Primary * &#x60;redundant&#x60; - Redundant
func (r ApiDcimPowerFeedsListRequest) Type_(type_ DcimPowerFeedsListTypeParameter) ApiDcimPowerFeedsListRequest {
	r.type_ = &type_
	return r
}

// * &#x60;primary&#x60; - Primary * &#x60;redundant&#x60; - Redundant
func (r ApiDcimPowerFeedsListRequest) TypeN(typeN DcimPowerFeedsListTypeParameter) ApiDcimPowerFeedsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerFeedsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimPowerFeedsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimPowerFeedsListRequest) Voltage(voltage []int32) ApiDcimPowerFeedsListRequest {
	r.voltage = &voltage
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageEmpty(voltageEmpty bool) ApiDcimPowerFeedsListRequest {
	r.voltageEmpty = &voltageEmpty
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageGt(voltageGt []int32) ApiDcimPowerFeedsListRequest {
	r.voltageGt = &voltageGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageGte(voltageGte []int32) ApiDcimPowerFeedsListRequest {
	r.voltageGte = &voltageGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageLt(voltageLt []int32) ApiDcimPowerFeedsListRequest {
	r.voltageLt = &voltageLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageLte(voltageLte []int32) ApiDcimPowerFeedsListRequest {
	r.voltageLte = &voltageLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageN(voltageN []int32) ApiDcimPowerFeedsListRequest {
	r.voltageN = &voltageN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Execute() (*PaginatedPowerFeedList, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsListExecute(r)
}

/*
DcimPowerFeedsList Method for DcimPowerFeedsList

Get a list of power feed objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerFeedsListRequest
*/
func (a *DcimAPIService) DcimPowerFeedsList(ctx context.Context) ApiDcimPowerFeedsListRequest {
	return ApiDcimPowerFeedsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPowerFeedList
func (a *DcimAPIService) DcimPowerFeedsListExecute(r ApiDcimPowerFeedsListRequest) (*PaginatedPowerFeedList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPowerFeedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.amperage != nil {
		t := *r.amperage
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "amperage", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "amperage", t, "multi")
		}
	}
	if r.amperageEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__empty", r.amperageEmpty, "")
	}
	if r.amperageGt != nil {
		t := *r.amperageGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__gt", t, "multi")
		}
	}
	if r.amperageGte != nil {
		t := *r.amperageGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__gte", t, "multi")
		}
	}
	if r.amperageLt != nil {
		t := *r.amperageLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__lt", t, "multi")
		}
	}
	if r.amperageLte != nil {
		t := *r.amperageLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__lte", t, "multi")
		}
	}
	if r.amperageN != nil {
		t := *r.amperageN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "amperage__n", t, "multi")
		}
	}
	if r.availablePower != nil {
		t := *r.availablePower
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "available_power", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "available_power", t, "multi")
		}
	}
	if r.availablePowerEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__empty", r.availablePowerEmpty, "")
	}
	if r.availablePowerGt != nil {
		t := *r.availablePowerGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__gt", t, "multi")
		}
	}
	if r.availablePowerGte != nil {
		t := *r.availablePowerGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__gte", t, "multi")
		}
	}
	if r.availablePowerLt != nil {
		t := *r.availablePowerLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__lt", t, "multi")
		}
	}
	if r.availablePowerLte != nil {
		t := *r.availablePowerLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__lte", t, "multi")
		}
	}
	if r.availablePowerN != nil {
		t := *r.availablePowerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "available_power__n", t, "multi")
		}
	}
	if r.cableEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end", r.cableEnd, "")
	}
	if r.cableEndN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end__n", r.cableEndN, "")
	}
	if r.cableId != nil {
		t := *r.cableId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", t, "multi")
		}
	}
	if r.cableIdN != nil {
		t := *r.cableIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", t, "multi")
		}
	}
	if r.cabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cabled", r.cabled, "")
	}
	if r.connected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connected", r.connected, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.markConnected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mark_connected", r.markConnected, "")
	}
	if r.maxUtilization != nil {
		t := *r.maxUtilization
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization", t, "multi")
		}
	}
	if r.maxUtilizationEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__empty", r.maxUtilizationEmpty, "")
	}
	if r.maxUtilizationGt != nil {
		t := *r.maxUtilizationGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__gt", t, "multi")
		}
	}
	if r.maxUtilizationGte != nil {
		t := *r.maxUtilizationGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__gte", t, "multi")
		}
	}
	if r.maxUtilizationLt != nil {
		t := *r.maxUtilizationLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__lt", t, "multi")
		}
	}
	if r.maxUtilizationLte != nil {
		t := *r.maxUtilizationLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__lte", t, "multi")
		}
	}
	if r.maxUtilizationN != nil {
		t := *r.maxUtilizationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_utilization__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.occupied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occupied", r.occupied, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.phase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "phase", r.phase, "")
	}
	if r.phaseN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "phase__n", r.phaseN, "")
	}
	if r.powerPanelId != nil {
		t := *r.powerPanelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_panel_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_panel_id", t, "multi")
		}
	}
	if r.powerPanelIdN != nil {
		t := *r.powerPanelIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_panel_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_panel_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.supply != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supply", r.supply, "")
	}
	if r.supplyN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supply__n", r.supplyN, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.typeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", r.typeN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.voltage != nil {
		t := *r.voltage
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "voltage", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "voltage", t, "multi")
		}
	}
	if r.voltageEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__empty", r.voltageEmpty, "")
	}
	if r.voltageGt != nil {
		t := *r.voltageGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__gt", t, "multi")
		}
	}
	if r.voltageGte != nil {
		t := *r.voltageGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__gte", t, "multi")
		}
	}
	if r.voltageLt != nil {
		t := *r.voltageLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__lt", t, "multi")
		}
	}
	if r.voltageLte != nil {
		t := *r.voltageLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__lte", t, "multi")
		}
	}
	if r.voltageN != nil {
		t := *r.voltageN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "voltage__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	id                              int32
	patchedWritablePowerFeedRequest *PatchedWritablePowerFeedRequest
}

func (r ApiDcimPowerFeedsPartialUpdateRequest) PatchedWritablePowerFeedRequest(patchedWritablePowerFeedRequest PatchedWritablePowerFeedRequest) ApiDcimPowerFeedsPartialUpdateRequest {
	r.patchedWritablePowerFeedRequest = &patchedWritablePowerFeedRequest
	return r
}

func (r ApiDcimPowerFeedsPartialUpdateRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsPartialUpdateExecute(r)
}

/*
DcimPowerFeedsPartialUpdate Method for DcimPowerFeedsPartialUpdate

Patch a power feed object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power feed.
	@return ApiDcimPowerFeedsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerFeedsPartialUpdate(ctx context.Context, id int32) ApiDcimPowerFeedsPartialUpdateRequest {
	return ApiDcimPowerFeedsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerFeed
func (a *DcimAPIService) DcimPowerFeedsPartialUpdateExecute(r ApiDcimPowerFeedsPartialUpdateRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerFeedRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerFeedsRetrieveRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsRetrieveExecute(r)
}

/*
DcimPowerFeedsRetrieve Method for DcimPowerFeedsRetrieve

Get a power feed object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power feed.
	@return ApiDcimPowerFeedsRetrieveRequest
*/
func (a *DcimAPIService) DcimPowerFeedsRetrieve(ctx context.Context, id int32) ApiDcimPowerFeedsRetrieveRequest {
	return ApiDcimPowerFeedsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerFeed
func (a *DcimAPIService) DcimPowerFeedsRetrieveExecute(r ApiDcimPowerFeedsRetrieveRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsTraceRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerFeedsTraceRetrieveRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsTraceRetrieveExecute(r)
}

/*
DcimPowerFeedsTraceRetrieve Method for DcimPowerFeedsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power feed.
	@return ApiDcimPowerFeedsTraceRetrieveRequest
*/
func (a *DcimAPIService) DcimPowerFeedsTraceRetrieve(ctx context.Context, id int32) ApiDcimPowerFeedsTraceRetrieveRequest {
	return ApiDcimPowerFeedsTraceRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerFeed
func (a *DcimAPIService) DcimPowerFeedsTraceRetrieveExecute(r ApiDcimPowerFeedsTraceRetrieveRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	writablePowerFeedRequest *WritablePowerFeedRequest
}

func (r ApiDcimPowerFeedsUpdateRequest) WritablePowerFeedRequest(writablePowerFeedRequest WritablePowerFeedRequest) ApiDcimPowerFeedsUpdateRequest {
	r.writablePowerFeedRequest = &writablePowerFeedRequest
	return r
}

func (r ApiDcimPowerFeedsUpdateRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsUpdateExecute(r)
}

/*
DcimPowerFeedsUpdate Method for DcimPowerFeedsUpdate

Put a power feed object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power feed.
	@return ApiDcimPowerFeedsUpdateRequest
*/
func (a *DcimAPIService) DcimPowerFeedsUpdate(ctx context.Context, id int32) ApiDcimPowerFeedsUpdateRequest {
	return ApiDcimPowerFeedsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerFeed
func (a *DcimAPIService) DcimPowerFeedsUpdateExecute(r ApiDcimPowerFeedsUpdateRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerFeedsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-feeds/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerFeedRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerFeedRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerFeedRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesBulkDestroyRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	powerOutletTemplateRequest *[]PowerOutletTemplateRequest
}

func (r ApiDcimPowerOutletTemplatesBulkDestroyRequest) PowerOutletTemplateRequest(powerOutletTemplateRequest []PowerOutletTemplateRequest) ApiDcimPowerOutletTemplatesBulkDestroyRequest {
	r.powerOutletTemplateRequest = &powerOutletTemplateRequest
	return r
}

func (r ApiDcimPowerOutletTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesBulkDestroyExecute(r)
}

/*
DcimPowerOutletTemplatesBulkDestroy Method for DcimPowerOutletTemplatesBulkDestroy

Delete a list of power outlet template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimPowerOutletTemplatesBulkDestroy(ctx context.Context) ApiDcimPowerOutletTemplatesBulkDestroyRequest {
	return ApiDcimPowerOutletTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerOutletTemplatesBulkDestroyExecute(r ApiDcimPowerOutletTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerOutletTemplateRequest == nil {
		return nil, reportError("powerOutletTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerOutletTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	powerOutletTemplateRequest *[]PowerOutletTemplateRequest
}

func (r ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest) PowerOutletTemplateRequest(powerOutletTemplateRequest []PowerOutletTemplateRequest) ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest {
	r.powerOutletTemplateRequest = &powerOutletTemplateRequest
	return r
}

func (r ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest) Execute() ([]PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimPowerOutletTemplatesBulkPartialUpdate Method for DcimPowerOutletTemplatesBulkPartialUpdate

Patch a list of power outlet template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerOutletTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest {
	return ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerOutletTemplate
func (a *DcimAPIService) DcimPowerOutletTemplatesBulkPartialUpdateExecute(r ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest) ([]PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerOutletTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("powerOutletTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerOutletTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesBulkUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	powerOutletTemplateRequest *[]PowerOutletTemplateRequest
}

func (r ApiDcimPowerOutletTemplatesBulkUpdateRequest) PowerOutletTemplateRequest(powerOutletTemplateRequest []PowerOutletTemplateRequest) ApiDcimPowerOutletTemplatesBulkUpdateRequest {
	r.powerOutletTemplateRequest = &powerOutletTemplateRequest
	return r
}

func (r ApiDcimPowerOutletTemplatesBulkUpdateRequest) Execute() ([]PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesBulkUpdateExecute(r)
}

/*
DcimPowerOutletTemplatesBulkUpdate Method for DcimPowerOutletTemplatesBulkUpdate

Put a list of power outlet template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimPowerOutletTemplatesBulkUpdate(ctx context.Context) ApiDcimPowerOutletTemplatesBulkUpdateRequest {
	return ApiDcimPowerOutletTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerOutletTemplate
func (a *DcimAPIService) DcimPowerOutletTemplatesBulkUpdateExecute(r ApiDcimPowerOutletTemplatesBulkUpdateRequest) ([]PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerOutletTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("powerOutletTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerOutletTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesCreateRequest struct {
	ctx                                context.Context
	ApiService                         *DcimAPIService
	writablePowerOutletTemplateRequest *WritablePowerOutletTemplateRequest
}

func (r ApiDcimPowerOutletTemplatesCreateRequest) WritablePowerOutletTemplateRequest(writablePowerOutletTemplateRequest WritablePowerOutletTemplateRequest) ApiDcimPowerOutletTemplatesCreateRequest {
	r.writablePowerOutletTemplateRequest = &writablePowerOutletTemplateRequest
	return r
}

func (r ApiDcimPowerOutletTemplatesCreateRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesCreateExecute(r)
}

/*
DcimPowerOutletTemplatesCreate Method for DcimPowerOutletTemplatesCreate

Post a list of power outlet template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimPowerOutletTemplatesCreate(ctx context.Context) ApiDcimPowerOutletTemplatesCreateRequest {
	return ApiDcimPowerOutletTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PowerOutletTemplate
func (a *DcimAPIService) DcimPowerOutletTemplatesCreateExecute(r ApiDcimPowerOutletTemplatesCreateRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutletTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutletTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutletTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerOutletTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesDestroyExecute(r)
}

/*
DcimPowerOutletTemplatesDestroy Method for DcimPowerOutletTemplatesDestroy

Delete a power outlet template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power outlet template.
	@return ApiDcimPowerOutletTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimPowerOutletTemplatesDestroy(ctx context.Context, id int32) ApiDcimPowerOutletTemplatesDestroyRequest {
	return ApiDcimPowerOutletTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerOutletTemplatesDestroyExecute(r ApiDcimPowerOutletTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlet-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceTypeId      *[]*int32
	deviceTypeIdN     *[]*int32
	devicetypeId      *[]*int32
	devicetypeIdN     *[]*int32
	feedLeg           *[]string
	feedLegN          *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	moduleTypeId      *[]*int32
	moduleTypeIdN     *[]*int32
	moduletypeId      *[]*int32
	moduletypeIdN     *[]*int32
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	powerPortId       *[]*int32
	powerPortIdN      *[]*int32
	q                 *string
	type_             *DcimPowerOutletTemplatesListTypeParameter
	typeN             *DcimPowerOutletTemplatesListTypeParameter
	updatedByRequest  *string
}

func (r ApiDcimPowerOutletTemplatesListRequest) Created(created []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimPowerOutletTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) Description(description []string) ApiDcimPowerOutletTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) DeviceTypeId(deviceTypeId []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) DevicetypeId(devicetypeId []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) DevicetypeIdN(devicetypeIdN []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

// Phase (for three-phase feeds)
func (r ApiDcimPowerOutletTemplatesListRequest) FeedLeg(feedLeg []string) ApiDcimPowerOutletTemplatesListRequest {
	r.feedLeg = &feedLeg
	return r
}

// Phase (for three-phase feeds)
func (r ApiDcimPowerOutletTemplatesListRequest) FeedLegN(feedLegN []string) ApiDcimPowerOutletTemplatesListRequest {
	r.feedLegN = &feedLegN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) Id(id []int32) ApiDcimPowerOutletTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimPowerOutletTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdGt(idGt []int32) ApiDcimPowerOutletTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdGte(idGte []int32) ApiDcimPowerOutletTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdLt(idLt []int32) ApiDcimPowerOutletTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdLte(idLte []int32) ApiDcimPowerOutletTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdN(idN []int32) ApiDcimPowerOutletTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) Label(label []string) ApiDcimPowerOutletTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimPowerOutletTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelIc(labelIc []string) ApiDcimPowerOutletTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelIe(labelIe []string) ApiDcimPowerOutletTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelIew(labelIew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelN(labelN []string) ApiDcimPowerOutletTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelNic(labelNic []string) ApiDcimPowerOutletTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelNie(labelNie []string) ApiDcimPowerOutletTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimPowerOutletTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerOutletTemplatesListRequest) Limit(limit int32) ApiDcimPowerOutletTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimPowerOutletTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) ModuleTypeId(moduleTypeId []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) ModuleTypeIdN(moduleTypeIdN []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

// Module type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) ModuletypeId(moduletypeId []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.moduletypeId = &moduletypeId
	return r
}

// Module type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) ModuletypeIdN(moduletypeIdN []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.moduletypeIdN = &moduletypeIdN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) Name(name []string) ApiDcimPowerOutletTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimPowerOutletTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameIc(nameIc []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameIe(nameIe []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameIew(nameIew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameN(nameN []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNic(nameNic []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNie(nameNie []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerOutletTemplatesListRequest) Offset(offset int32) ApiDcimPowerOutletTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimPowerOutletTemplatesListRequest) Ordering(ordering string) ApiDcimPowerOutletTemplatesListRequest {
	r.ordering = &ordering
	return r
}

// Power port (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) PowerPortId(powerPortId []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.powerPortId = &powerPortId
	return r
}

// Power port (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) PowerPortIdN(powerPortIdN []*int32) ApiDcimPowerOutletTemplatesListRequest {
	r.powerPortIdN = &powerPortIdN
	return r
}

// Search
func (r ApiDcimPowerOutletTemplatesListRequest) Q(q string) ApiDcimPowerOutletTemplatesListRequest {
	r.q = &q
	return r
}

// * &#x60;IEC 60320&#x60; - [(&#39;iec-60320-c5&#39;, &#39;C5&#39;), (&#39;iec-60320-c7&#39;, &#39;C7&#39;), (&#39;iec-60320-c13&#39;, &#39;C13&#39;), (&#39;iec-60320-c15&#39;, &#39;C15&#39;), (&#39;iec-60320-c19&#39;, &#39;C19&#39;), (&#39;iec-60320-c21&#39;, &#39;C21&#39;)] * &#x60;IEC 60309&#x60; - [(&#39;iec-60309-p-n-e-4h&#39;, &#39;P+N+E 4H&#39;), (&#39;iec-60309-p-n-e-6h&#39;, &#39;P+N+E 6H&#39;), (&#39;iec-60309-p-n-e-9h&#39;, &#39;P+N+E 9H&#39;), (&#39;iec-60309-2p-e-4h&#39;, &#39;2P+E 4H&#39;), (&#39;iec-60309-2p-e-6h&#39;, &#39;2P+E 6H&#39;), (&#39;iec-60309-2p-e-9h&#39;, &#39;2P+E 9H&#39;), (&#39;iec-60309-3p-e-4h&#39;, &#39;3P+E 4H&#39;), (&#39;iec-60309-3p-e-6h&#39;, &#39;3P+E 6H&#39;), (&#39;iec-60309-3p-e-9h&#39;, &#39;3P+E 9H&#39;), (&#39;iec-60309-3p-n-e-4h&#39;, &#39;3P+N+E 4H&#39;), (&#39;iec-60309-3p-n-e-6h&#39;, &#39;3P+N+E 6H&#39;), (&#39;iec-60309-3p-n-e-9h&#39;, &#39;3P+N+E 9H&#39;)] * &#x60;IEC 60906-1&#x60; - [(&#39;iec-60906-1&#39;, &#39;IEC 60906-1&#39;), (&#39;nbr-14136-10a&#39;, &#39;2P+T 10A (NBR 14136)&#39;), (&#39;nbr-14136-20a&#39;, &#39;2P+T 20A (NBR 14136)&#39;)] * &#x60;NEMA (Non-locking)&#x60; - [(&#39;nema-1-15r&#39;, &#39;NEMA 1-15R&#39;), (&#39;nema-5-15r&#39;, &#39;NEMA 5-15R&#39;), (&#39;nema-5-20r&#39;, &#39;NEMA 5-20R&#39;), (&#39;nema-5-30r&#39;, &#39;NEMA 5-30R&#39;), (&#39;nema-5-50r&#39;, &#39;NEMA 5-50R&#39;), (&#39;nema-6-15r&#39;, &#39;NEMA 6-15R&#39;), (&#39;nema-6-20r&#39;, &#39;NEMA 6-20R&#39;), (&#39;nema-6-30r&#39;, &#39;NEMA 6-30R&#39;), (&#39;nema-6-50r&#39;, &#39;NEMA 6-50R&#39;), (&#39;nema-10-30r&#39;, &#39;NEMA 10-30R&#39;), (&#39;nema-10-50r&#39;, &#39;NEMA 10-50R&#39;), (&#39;nema-14-20r&#39;, &#39;NEMA 14-20R&#39;), (&#39;nema-14-30r&#39;, &#39;NEMA 14-30R&#39;), (&#39;nema-14-50r&#39;, &#39;NEMA 14-50R&#39;), (&#39;nema-14-60r&#39;, &#39;NEMA 14-60R&#39;), (&#39;nema-15-15r&#39;, &#39;NEMA 15-15R&#39;), (&#39;nema-15-20r&#39;, &#39;NEMA 15-20R&#39;), (&#39;nema-15-30r&#39;, &#39;NEMA 15-30R&#39;), (&#39;nema-15-50r&#39;, &#39;NEMA 15-50R&#39;), (&#39;nema-15-60r&#39;, &#39;NEMA 15-60R&#39;)] * &#x60;NEMA (Locking)&#x60; - [(&#39;nema-l1-15r&#39;, &#39;NEMA L1-15R&#39;), (&#39;nema-l5-15r&#39;, &#39;NEMA L5-15R&#39;), (&#39;nema-l5-20r&#39;, &#39;NEMA L5-20R&#39;), (&#39;nema-l5-30r&#39;, &#39;NEMA L5-30R&#39;), (&#39;nema-l5-50r&#39;, &#39;NEMA L5-50R&#39;), (&#39;nema-l6-15r&#39;, &#39;NEMA L6-15R&#39;), (&#39;nema-l6-20r&#39;, &#39;NEMA L6-20R&#39;), (&#39;nema-l6-30r&#39;, &#39;NEMA L6-30R&#39;), (&#39;nema-l6-50r&#39;, &#39;NEMA L6-50R&#39;), (&#39;nema-l10-30r&#39;, &#39;NEMA L10-30R&#39;), (&#39;nema-l14-20r&#39;, &#39;NEMA L14-20R&#39;), (&#39;nema-l14-30r&#39;, &#39;NEMA L14-30R&#39;), (&#39;nema-l14-50r&#39;, &#39;NEMA L14-50R&#39;), (&#39;nema-l14-60r&#39;, &#39;NEMA L14-60R&#39;), (&#39;nema-l15-20r&#39;, &#39;NEMA L15-20R&#39;), (&#39;nema-l15-30r&#39;, &#39;NEMA L15-30R&#39;), (&#39;nema-l15-50r&#39;, &#39;NEMA L15-50R&#39;), (&#39;nema-l15-60r&#39;, &#39;NEMA L15-60R&#39;), (&#39;nema-l21-20r&#39;, &#39;NEMA L21-20R&#39;), (&#39;nema-l21-30r&#39;, &#39;NEMA L21-30R&#39;), (&#39;nema-l22-30r&#39;, &#39;NEMA L22-30R&#39;)] * &#x60;California Style&#x60; - [(&#39;CS6360C&#39;, &#39;CS6360C&#39;), (&#39;CS6364C&#39;, &#39;CS6364C&#39;), (&#39;CS8164C&#39;, &#39;CS8164C&#39;), (&#39;CS8264C&#39;, &#39;CS8264C&#39;), (&#39;CS8364C&#39;, &#39;CS8364C&#39;), (&#39;CS8464C&#39;, &#39;CS8464C&#39;)] * &#x60;ITA/International&#x60; - [(&#39;ita-e&#39;, &#39;ITA Type E (CEE 7/5)&#39;), (&#39;ita-f&#39;, &#39;ITA Type F (CEE 7/3)&#39;), (&#39;ita-g&#39;, &#39;ITA Type G (BS 1363)&#39;), (&#39;ita-h&#39;, &#39;ITA Type H&#39;), (&#39;ita-i&#39;, &#39;ITA Type I&#39;), (&#39;ita-j&#39;, &#39;ITA Type J&#39;), (&#39;ita-k&#39;, &#39;ITA Type K&#39;), (&#39;ita-l&#39;, &#39;ITA Type L (CEI 23-50)&#39;), (&#39;ita-m&#39;, &#39;ITA Type M (BS 546)&#39;), (&#39;ita-n&#39;, &#39;ITA Type N&#39;), (&#39;ita-o&#39;, &#39;ITA Type O&#39;), (&#39;ita-multistandard&#39;, &#39;ITA Multistandard&#39;)] * &#x60;USB&#x60; - [(&#39;usb-a&#39;, &#39;USB Type A&#39;), (&#39;usb-micro-b&#39;, &#39;USB Micro B&#39;), (&#39;usb-c&#39;, &#39;USB Type C&#39;)] * &#x60;Molex&#x60; - [(&#39;molex-micro-fit-1x2&#39;, &#39;Molex Micro-Fit 1x2&#39;), (&#39;molex-micro-fit-2x2&#39;, &#39;Molex Micro-Fit 2x2&#39;), (&#39;molex-micro-fit-2x4&#39;, &#39;Molex Micro-Fit 2x4&#39;)] * &#x60;DC&#x60; - [(&#39;dc-terminal&#39;, &#39;DC Terminal&#39;)] * &#x60;Proprietary&#x60; - [(&#39;hdot-cx&#39;, &#39;HDOT Cx&#39;), (&#39;saf-d-grid&#39;, &#39;Saf-D-Grid&#39;), (&#39;neutrik-powercon-20a&#39;, &#39;Neutrik powerCON (20A)&#39;), (&#39;neutrik-powercon-32a&#39;, &#39;Neutrik powerCON (32A)&#39;), (&#39;neutrik-powercon-true1&#39;, &#39;Neutrik powerCON TRUE1&#39;), (&#39;neutrik-powercon-true1-top&#39;, &#39;Neutrik powerCON TRUE1 TOP&#39;), (&#39;ubiquiti-smartpower&#39;, &#39;Ubiquiti SmartPower&#39;)] * &#x60;Other&#x60; - [(&#39;hardwired&#39;, &#39;Hardwired&#39;), (&#39;other&#39;, &#39;Other&#39;)]
func (r ApiDcimPowerOutletTemplatesListRequest) Type_(type_ DcimPowerOutletTemplatesListTypeParameter) ApiDcimPowerOutletTemplatesListRequest {
	r.type_ = &type_
	return r
}

// * &#x60;IEC 60320&#x60; - [(&#39;iec-60320-c5&#39;, &#39;C5&#39;), (&#39;iec-60320-c7&#39;, &#39;C7&#39;), (&#39;iec-60320-c13&#39;, &#39;C13&#39;), (&#39;iec-60320-c15&#39;, &#39;C15&#39;), (&#39;iec-60320-c19&#39;, &#39;C19&#39;), (&#39;iec-60320-c21&#39;, &#39;C21&#39;)] * &#x60;IEC 60309&#x60; - [(&#39;iec-60309-p-n-e-4h&#39;, &#39;P+N+E 4H&#39;), (&#39;iec-60309-p-n-e-6h&#39;, &#39;P+N+E 6H&#39;), (&#39;iec-60309-p-n-e-9h&#39;, &#39;P+N+E 9H&#39;), (&#39;iec-60309-2p-e-4h&#39;, &#39;2P+E 4H&#39;), (&#39;iec-60309-2p-e-6h&#39;, &#39;2P+E 6H&#39;), (&#39;iec-60309-2p-e-9h&#39;, &#39;2P+E 9H&#39;), (&#39;iec-60309-3p-e-4h&#39;, &#39;3P+E 4H&#39;), (&#39;iec-60309-3p-e-6h&#39;, &#39;3P+E 6H&#39;), (&#39;iec-60309-3p-e-9h&#39;, &#39;3P+E 9H&#39;), (&#39;iec-60309-3p-n-e-4h&#39;, &#39;3P+N+E 4H&#39;), (&#39;iec-60309-3p-n-e-6h&#39;, &#39;3P+N+E 6H&#39;), (&#39;iec-60309-3p-n-e-9h&#39;, &#39;3P+N+E 9H&#39;)] * &#x60;IEC 60906-1&#x60; - [(&#39;iec-60906-1&#39;, &#39;IEC 60906-1&#39;), (&#39;nbr-14136-10a&#39;, &#39;2P+T 10A (NBR 14136)&#39;), (&#39;nbr-14136-20a&#39;, &#39;2P+T 20A (NBR 14136)&#39;)] * &#x60;NEMA (Non-locking)&#x60; - [(&#39;nema-1-15r&#39;, &#39;NEMA 1-15R&#39;), (&#39;nema-5-15r&#39;, &#39;NEMA 5-15R&#39;), (&#39;nema-5-20r&#39;, &#39;NEMA 5-20R&#39;), (&#39;nema-5-30r&#39;, &#39;NEMA 5-30R&#39;), (&#39;nema-5-50r&#39;, &#39;NEMA 5-50R&#39;), (&#39;nema-6-15r&#39;, &#39;NEMA 6-15R&#39;), (&#39;nema-6-20r&#39;, &#39;NEMA 6-20R&#39;), (&#39;nema-6-30r&#39;, &#39;NEMA 6-30R&#39;), (&#39;nema-6-50r&#39;, &#39;NEMA 6-50R&#39;), (&#39;nema-10-30r&#39;, &#39;NEMA 10-30R&#39;), (&#39;nema-10-50r&#39;, &#39;NEMA 10-50R&#39;), (&#39;nema-14-20r&#39;, &#39;NEMA 14-20R&#39;), (&#39;nema-14-30r&#39;, &#39;NEMA 14-30R&#39;), (&#39;nema-14-50r&#39;, &#39;NEMA 14-50R&#39;), (&#39;nema-14-60r&#39;, &#39;NEMA 14-60R&#39;), (&#39;nema-15-15r&#39;, &#39;NEMA 15-15R&#39;), (&#39;nema-15-20r&#39;, &#39;NEMA 15-20R&#39;), (&#39;nema-15-30r&#39;, &#39;NEMA 15-30R&#39;), (&#39;nema-15-50r&#39;, &#39;NEMA 15-50R&#39;), (&#39;nema-15-60r&#39;, &#39;NEMA 15-60R&#39;)] * &#x60;NEMA (Locking)&#x60; - [(&#39;nema-l1-15r&#39;, &#39;NEMA L1-15R&#39;), (&#39;nema-l5-15r&#39;, &#39;NEMA L5-15R&#39;), (&#39;nema-l5-20r&#39;, &#39;NEMA L5-20R&#39;), (&#39;nema-l5-30r&#39;, &#39;NEMA L5-30R&#39;), (&#39;nema-l5-50r&#39;, &#39;NEMA L5-50R&#39;), (&#39;nema-l6-15r&#39;, &#39;NEMA L6-15R&#39;), (&#39;nema-l6-20r&#39;, &#39;NEMA L6-20R&#39;), (&#39;nema-l6-30r&#39;, &#39;NEMA L6-30R&#39;), (&#39;nema-l6-50r&#39;, &#39;NEMA L6-50R&#39;), (&#39;nema-l10-30r&#39;, &#39;NEMA L10-30R&#39;), (&#39;nema-l14-20r&#39;, &#39;NEMA L14-20R&#39;), (&#39;nema-l14-30r&#39;, &#39;NEMA L14-30R&#39;), (&#39;nema-l14-50r&#39;, &#39;NEMA L14-50R&#39;), (&#39;nema-l14-60r&#39;, &#39;NEMA L14-60R&#39;), (&#39;nema-l15-20r&#39;, &#39;NEMA L15-20R&#39;), (&#39;nema-l15-30r&#39;, &#39;NEMA L15-30R&#39;), (&#39;nema-l15-50r&#39;, &#39;NEMA L15-50R&#39;), (&#39;nema-l15-60r&#39;, &#39;NEMA L15-60R&#39;), (&#39;nema-l21-20r&#39;, &#39;NEMA L21-20R&#39;), (&#39;nema-l21-30r&#39;, &#39;NEMA L21-30R&#39;), (&#39;nema-l22-30r&#39;, &#39;NEMA L22-30R&#39;)] * &#x60;California Style&#x60; - [(&#39;CS6360C&#39;, &#39;CS6360C&#39;), (&#39;CS6364C&#39;, &#39;CS6364C&#39;), (&#39;CS8164C&#39;, &#39;CS8164C&#39;), (&#39;CS8264C&#39;, &#39;CS8264C&#39;), (&#39;CS8364C&#39;, &#39;CS8364C&#39;), (&#39;CS8464C&#39;, &#39;CS8464C&#39;)] * &#x60;ITA/International&#x60; - [(&#39;ita-e&#39;, &#39;ITA Type E (CEE 7/5)&#39;), (&#39;ita-f&#39;, &#39;ITA Type F (CEE 7/3)&#39;), (&#39;ita-g&#39;, &#39;ITA Type G (BS 1363)&#39;), (&#39;ita-h&#39;, &#39;ITA Type H&#39;), (&#39;ita-i&#39;, &#39;ITA Type I&#39;), (&#39;ita-j&#39;, &#39;ITA Type J&#39;), (&#39;ita-k&#39;, &#39;ITA Type K&#39;), (&#39;ita-l&#39;, &#39;ITA Type L (CEI 23-50)&#39;), (&#39;ita-m&#39;, &#39;ITA Type M (BS 546)&#39;), (&#39;ita-n&#39;, &#39;ITA Type N&#39;), (&#39;ita-o&#39;, &#39;ITA Type O&#39;), (&#39;ita-multistandard&#39;, &#39;ITA Multistandard&#39;)] * &#x60;USB&#x60; - [(&#39;usb-a&#39;, &#39;USB Type A&#39;), (&#39;usb-micro-b&#39;, &#39;USB Micro B&#39;), (&#39;usb-c&#39;, &#39;USB Type C&#39;)] * &#x60;Molex&#x60; - [(&#39;molex-micro-fit-1x2&#39;, &#39;Molex Micro-Fit 1x2&#39;), (&#39;molex-micro-fit-2x2&#39;, &#39;Molex Micro-Fit 2x2&#39;), (&#39;molex-micro-fit-2x4&#39;, &#39;Molex Micro-Fit 2x4&#39;)] * &#x60;DC&#x60; - [(&#39;dc-terminal&#39;, &#39;DC Terminal&#39;)] * &#x60;Proprietary&#x60; - [(&#39;hdot-cx&#39;, &#39;HDOT Cx&#39;), (&#39;saf-d-grid&#39;, &#39;Saf-D-Grid&#39;), (&#39;neutrik-powercon-20a&#39;, &#39;Neutrik powerCON (20A)&#39;), (&#39;neutrik-powercon-32a&#39;, &#39;Neutrik powerCON (32A)&#39;), (&#39;neutrik-powercon-true1&#39;, &#39;Neutrik powerCON TRUE1&#39;), (&#39;neutrik-powercon-true1-top&#39;, &#39;Neutrik powerCON TRUE1 TOP&#39;), (&#39;ubiquiti-smartpower&#39;, &#39;Ubiquiti SmartPower&#39;)] * &#x60;Other&#x60; - [(&#39;hardwired&#39;, &#39;Hardwired&#39;), (&#39;other&#39;, &#39;Other&#39;)]
func (r ApiDcimPowerOutletTemplatesListRequest) TypeN(typeN DcimPowerOutletTemplatesListTypeParameter) ApiDcimPowerOutletTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimPowerOutletTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) Execute() (*PaginatedPowerOutletTemplateList, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesListExecute(r)
}

/*
DcimPowerOutletTemplatesList Method for DcimPowerOutletTemplatesList

Get a list of power outlet template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletTemplatesListRequest
*/
func (a *DcimAPIService) DcimPowerOutletTemplatesList(ctx context.Context) ApiDcimPowerOutletTemplatesListRequest {
	return ApiDcimPowerOutletTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPowerOutletTemplateList
func (a *DcimAPIService) DcimPowerOutletTemplatesListExecute(r ApiDcimPowerOutletTemplatesListRequest) (*PaginatedPowerOutletTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPowerOutletTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.feedLeg != nil {
		t := *r.feedLeg
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "feed_leg", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "feed_leg", t, "multi")
		}
	}
	if r.feedLegN != nil {
		t := *r.feedLegN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "feed_leg__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "feed_leg__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.moduletypeId != nil {
		t := *r.moduletypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", t, "multi")
		}
	}
	if r.moduletypeIdN != nil {
		t := *r.moduletypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.powerPortId != nil {
		t := *r.powerPortId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_id", t, "multi")
		}
	}
	if r.powerPortIdN != nil {
		t := *r.powerPortIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.typeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", r.typeN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesPartialUpdateRequest struct {
	ctx                                       context.Context
	ApiService                                *DcimAPIService
	id                                        int32
	patchedWritablePowerOutletTemplateRequest *PatchedWritablePowerOutletTemplateRequest
}

func (r ApiDcimPowerOutletTemplatesPartialUpdateRequest) PatchedWritablePowerOutletTemplateRequest(patchedWritablePowerOutletTemplateRequest PatchedWritablePowerOutletTemplateRequest) ApiDcimPowerOutletTemplatesPartialUpdateRequest {
	r.patchedWritablePowerOutletTemplateRequest = &patchedWritablePowerOutletTemplateRequest
	return r
}

func (r ApiDcimPowerOutletTemplatesPartialUpdateRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesPartialUpdateExecute(r)
}

/*
DcimPowerOutletTemplatesPartialUpdate Method for DcimPowerOutletTemplatesPartialUpdate

Patch a power outlet template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power outlet template.
	@return ApiDcimPowerOutletTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerOutletTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimPowerOutletTemplatesPartialUpdateRequest {
	return ApiDcimPowerOutletTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerOutletTemplate
func (a *DcimAPIService) DcimPowerOutletTemplatesPartialUpdateExecute(r ApiDcimPowerOutletTemplatesPartialUpdateRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlet-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerOutletTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerOutletTemplatesRetrieveRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesRetrieveExecute(r)
}

/*
DcimPowerOutletTemplatesRetrieve Method for DcimPowerOutletTemplatesRetrieve

Get a power outlet template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power outlet template.
	@return ApiDcimPowerOutletTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimPowerOutletTemplatesRetrieve(ctx context.Context, id int32) ApiDcimPowerOutletTemplatesRetrieveRequest {
	return ApiDcimPowerOutletTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerOutletTemplate
func (a *DcimAPIService) DcimPowerOutletTemplatesRetrieveExecute(r ApiDcimPowerOutletTemplatesRetrieveRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlet-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesUpdateRequest struct {
	ctx                                context.Context
	ApiService                         *DcimAPIService
	id                                 int32
	writablePowerOutletTemplateRequest *WritablePowerOutletTemplateRequest
}

func (r ApiDcimPowerOutletTemplatesUpdateRequest) WritablePowerOutletTemplateRequest(writablePowerOutletTemplateRequest WritablePowerOutletTemplateRequest) ApiDcimPowerOutletTemplatesUpdateRequest {
	r.writablePowerOutletTemplateRequest = &writablePowerOutletTemplateRequest
	return r
}

func (r ApiDcimPowerOutletTemplatesUpdateRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesUpdateExecute(r)
}

/*
DcimPowerOutletTemplatesUpdate Method for DcimPowerOutletTemplatesUpdate

Put a power outlet template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power outlet template.
	@return ApiDcimPowerOutletTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimPowerOutletTemplatesUpdate(ctx context.Context, id int32) ApiDcimPowerOutletTemplatesUpdateRequest {
	return ApiDcimPowerOutletTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerOutletTemplate
func (a *DcimAPIService) DcimPowerOutletTemplatesUpdateExecute(r ApiDcimPowerOutletTemplatesUpdateRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlet-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutletTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutletTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutletTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsBulkDestroyRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	powerOutletRequest *[]PowerOutletRequest
}

func (r ApiDcimPowerOutletsBulkDestroyRequest) PowerOutletRequest(powerOutletRequest []PowerOutletRequest) ApiDcimPowerOutletsBulkDestroyRequest {
	r.powerOutletRequest = &powerOutletRequest
	return r
}

func (r ApiDcimPowerOutletsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerOutletsBulkDestroyExecute(r)
}

/*
DcimPowerOutletsBulkDestroy Method for DcimPowerOutletsBulkDestroy

Delete a list of power outlet objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimPowerOutletsBulkDestroy(ctx context.Context) ApiDcimPowerOutletsBulkDestroyRequest {
	return ApiDcimPowerOutletsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerOutletsBulkDestroyExecute(r ApiDcimPowerOutletsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerOutletRequest == nil {
		return nil, reportError("powerOutletRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerOutletRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsBulkPartialUpdateRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	powerOutletRequest *[]PowerOutletRequest
}

func (r ApiDcimPowerOutletsBulkPartialUpdateRequest) PowerOutletRequest(powerOutletRequest []PowerOutletRequest) ApiDcimPowerOutletsBulkPartialUpdateRequest {
	r.powerOutletRequest = &powerOutletRequest
	return r
}

func (r ApiDcimPowerOutletsBulkPartialUpdateRequest) Execute() ([]PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsBulkPartialUpdateExecute(r)
}

/*
DcimPowerOutletsBulkPartialUpdate Method for DcimPowerOutletsBulkPartialUpdate

Patch a list of power outlet objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerOutletsBulkPartialUpdate(ctx context.Context) ApiDcimPowerOutletsBulkPartialUpdateRequest {
	return ApiDcimPowerOutletsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerOutlet
func (a *DcimAPIService) DcimPowerOutletsBulkPartialUpdateExecute(r ApiDcimPowerOutletsBulkPartialUpdateRequest) ([]PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerOutletRequest == nil {
		return localVarReturnValue, nil, reportError("powerOutletRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerOutletRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsBulkUpdateRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	powerOutletRequest *[]PowerOutletRequest
}

func (r ApiDcimPowerOutletsBulkUpdateRequest) PowerOutletRequest(powerOutletRequest []PowerOutletRequest) ApiDcimPowerOutletsBulkUpdateRequest {
	r.powerOutletRequest = &powerOutletRequest
	return r
}

func (r ApiDcimPowerOutletsBulkUpdateRequest) Execute() ([]PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsBulkUpdateExecute(r)
}

/*
DcimPowerOutletsBulkUpdate Method for DcimPowerOutletsBulkUpdate

Put a list of power outlet objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimPowerOutletsBulkUpdate(ctx context.Context) ApiDcimPowerOutletsBulkUpdateRequest {
	return ApiDcimPowerOutletsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerOutlet
func (a *DcimAPIService) DcimPowerOutletsBulkUpdateExecute(r ApiDcimPowerOutletsBulkUpdateRequest) ([]PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerOutletRequest == nil {
		return localVarReturnValue, nil, reportError("powerOutletRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerOutletRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsCreateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	writablePowerOutletRequest *WritablePowerOutletRequest
}

func (r ApiDcimPowerOutletsCreateRequest) WritablePowerOutletRequest(writablePowerOutletRequest WritablePowerOutletRequest) ApiDcimPowerOutletsCreateRequest {
	r.writablePowerOutletRequest = &writablePowerOutletRequest
	return r
}

func (r ApiDcimPowerOutletsCreateRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsCreateExecute(r)
}

/*
DcimPowerOutletsCreate Method for DcimPowerOutletsCreate

Post a list of power outlet objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletsCreateRequest
*/
func (a *DcimAPIService) DcimPowerOutletsCreate(ctx context.Context) ApiDcimPowerOutletsCreateRequest {
	return ApiDcimPowerOutletsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PowerOutlet
func (a *DcimAPIService) DcimPowerOutletsCreateExecute(r ApiDcimPowerOutletsCreateRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutletRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutletRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutletRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerOutletsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerOutletsDestroyExecute(r)
}

/*
DcimPowerOutletsDestroy Method for DcimPowerOutletsDestroy

Delete a power outlet object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power outlet.
	@return ApiDcimPowerOutletsDestroyRequest
*/
func (a *DcimAPIService) DcimPowerOutletsDestroy(ctx context.Context, id int32) ApiDcimPowerOutletsDestroyRequest {
	return ApiDcimPowerOutletsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerOutletsDestroyExecute(r ApiDcimPowerOutletsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	cableEnd          *CircuitsCircuitTerminationsListCableEndParameter
	cableEndN         *CircuitsCircuitTerminationsListCableEndParameter
	cableId           *[]*int32
	cableIdN          *[]*int32
	cabled            *bool
	connected         *bool
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	deviceRole        *[]string
	deviceRoleN       *[]string
	deviceRoleId      *[]int32
	deviceRoleIdN     *[]int32
	deviceStatus      *[]string
	deviceStatusN     *[]string
	deviceType        *[]string
	deviceTypeN       *[]string
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	feedLeg           *[]string
	feedLegN          *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	location          *[]string
	locationN         *[]string
	locationId        *[]int32
	locationIdN       *[]int32
	markConnected     *bool
	modifiedByRequest *string
	moduleId          *[]*int32
	moduleIdN         *[]*int32
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	occupied          *bool
	offset            *int32
	ordering          *string
	powerPortId       *[]*int32
	powerPortIdN      *[]*int32
	q                 *string
	rack              *[]string
	rackN             *[]string
	rackId            *[]int32
	rackIdN           *[]int32
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]string
	siteGroupIdN      *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	tag               *[]string
	tagN              *[]string
	type_             *[]string
	typeN             *[]string
	updatedByRequest  *string
	virtualChassis    *[]string
	virtualChassisN   *[]string
	virtualChassisId  *[]int32
	virtualChassisIdN *[]int32
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimPowerOutletsListRequest) CableEnd(cableEnd CircuitsCircuitTerminationsListCableEndParameter) ApiDcimPowerOutletsListRequest {
	r.cableEnd = &cableEnd
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimPowerOutletsListRequest) CableEndN(cableEndN CircuitsCircuitTerminationsListCableEndParameter) ApiDcimPowerOutletsListRequest {
	r.cableEndN = &cableEndN
	return r
}

// Cable (ID)
func (r ApiDcimPowerOutletsListRequest) CableId(cableId []*int32) ApiDcimPowerOutletsListRequest {
	r.cableId = &cableId
	return r
}

// Cable (ID)
func (r ApiDcimPowerOutletsListRequest) CableIdN(cableIdN []*int32) ApiDcimPowerOutletsListRequest {
	r.cableIdN = &cableIdN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Cabled(cabled bool) ApiDcimPowerOutletsListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimPowerOutletsListRequest) Connected(connected bool) ApiDcimPowerOutletsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimPowerOutletsListRequest) Created(created []time.Time) ApiDcimPowerOutletsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPowerOutletsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimPowerOutletsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimPowerOutletsListRequest) CreatedGt(createdGt []time.Time) ApiDcimPowerOutletsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimPowerOutletsListRequest) CreatedGte(createdGte []time.Time) ApiDcimPowerOutletsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPowerOutletsListRequest) CreatedLt(createdLt []time.Time) ApiDcimPowerOutletsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimPowerOutletsListRequest) CreatedLte(createdLte []time.Time) ApiDcimPowerOutletsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPowerOutletsListRequest) CreatedN(createdN []time.Time) ApiDcimPowerOutletsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimPowerOutletsListRequest) CreatedByRequest(createdByRequest string) ApiDcimPowerOutletsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimPowerOutletsListRequest) Description(description []string) ApiDcimPowerOutletsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimPowerOutletsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionIc(descriptionIc []string) ApiDcimPowerOutletsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionIe(descriptionIe []string) ApiDcimPowerOutletsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionIew(descriptionIew []string) ApiDcimPowerOutletsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPowerOutletsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionN(descriptionN []string) ApiDcimPowerOutletsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNic(descriptionNic []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNie(descriptionNie []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimPowerOutletsListRequest) Device(device []*string) ApiDcimPowerOutletsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimPowerOutletsListRequest) DeviceN(deviceN []*string) ApiDcimPowerOutletsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimPowerOutletsListRequest) DeviceId(deviceId []int32) ApiDcimPowerOutletsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimPowerOutletsListRequest) DeviceIdN(deviceIdN []int32) ApiDcimPowerOutletsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimPowerOutletsListRequest) DeviceRole(deviceRole []string) ApiDcimPowerOutletsListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimPowerOutletsListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimPowerOutletsListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimPowerOutletsListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimPowerOutletsListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimPowerOutletsListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimPowerOutletsListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimPowerOutletsListRequest) DeviceStatus(deviceStatus []string) ApiDcimPowerOutletsListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimPowerOutletsListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimPowerOutletsListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimPowerOutletsListRequest) DeviceType(deviceType []string) ApiDcimPowerOutletsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimPowerOutletsListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimPowerOutletsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimPowerOutletsListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimPowerOutletsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimPowerOutletsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimPowerOutletsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Phase (for three-phase feeds)
func (r ApiDcimPowerOutletsListRequest) FeedLeg(feedLeg []string) ApiDcimPowerOutletsListRequest {
	r.feedLeg = &feedLeg
	return r
}

// Phase (for three-phase feeds)
func (r ApiDcimPowerOutletsListRequest) FeedLegN(feedLegN []string) ApiDcimPowerOutletsListRequest {
	r.feedLegN = &feedLegN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Id(id []int32) ApiDcimPowerOutletsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdEmpty(idEmpty bool) ApiDcimPowerOutletsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdGt(idGt []int32) ApiDcimPowerOutletsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdGte(idGte []int32) ApiDcimPowerOutletsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdLt(idLt []int32) ApiDcimPowerOutletsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdLte(idLte []int32) ApiDcimPowerOutletsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdN(idN []int32) ApiDcimPowerOutletsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Label(label []string) ApiDcimPowerOutletsListRequest {
	r.label = &label
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelEmpty(labelEmpty bool) ApiDcimPowerOutletsListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelIc(labelIc []string) ApiDcimPowerOutletsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelIe(labelIe []string) ApiDcimPowerOutletsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelIew(labelIew []string) ApiDcimPowerOutletsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelIsw(labelIsw []string) ApiDcimPowerOutletsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelN(labelN []string) ApiDcimPowerOutletsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelNic(labelNic []string) ApiDcimPowerOutletsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelNie(labelNie []string) ApiDcimPowerOutletsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelNiew(labelNiew []string) ApiDcimPowerOutletsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimPowerOutletsListRequest) LabelNisw(labelNisw []string) ApiDcimPowerOutletsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimPowerOutletsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimPowerOutletsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPowerOutletsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimPowerOutletsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimPowerOutletsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimPowerOutletsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimPowerOutletsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimPowerOutletsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPowerOutletsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimPowerOutletsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimPowerOutletsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimPowerOutletsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimPowerOutletsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimPowerOutletsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerOutletsListRequest) Limit(limit int32) ApiDcimPowerOutletsListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimPowerOutletsListRequest) Location(location []string) ApiDcimPowerOutletsListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimPowerOutletsListRequest) LocationN(locationN []string) ApiDcimPowerOutletsListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimPowerOutletsListRequest) LocationId(locationId []int32) ApiDcimPowerOutletsListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimPowerOutletsListRequest) LocationIdN(locationIdN []int32) ApiDcimPowerOutletsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimPowerOutletsListRequest) MarkConnected(markConnected bool) ApiDcimPowerOutletsListRequest {
	r.markConnected = &markConnected
	return r
}

func (r ApiDcimPowerOutletsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimPowerOutletsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module (ID)
func (r ApiDcimPowerOutletsListRequest) ModuleId(moduleId []*int32) ApiDcimPowerOutletsListRequest {
	r.moduleId = &moduleId
	return r
}

// Module (ID)
func (r ApiDcimPowerOutletsListRequest) ModuleIdN(moduleIdN []*int32) ApiDcimPowerOutletsListRequest {
	r.moduleIdN = &moduleIdN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Name(name []string) ApiDcimPowerOutletsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameEmpty(nameEmpty bool) ApiDcimPowerOutletsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameIc(nameIc []string) ApiDcimPowerOutletsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameIe(nameIe []string) ApiDcimPowerOutletsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameIew(nameIew []string) ApiDcimPowerOutletsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameIsw(nameIsw []string) ApiDcimPowerOutletsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameN(nameN []string) ApiDcimPowerOutletsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNic(nameNic []string) ApiDcimPowerOutletsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNie(nameNie []string) ApiDcimPowerOutletsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNiew(nameNiew []string) ApiDcimPowerOutletsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNisw(nameNisw []string) ApiDcimPowerOutletsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerOutletsListRequest) Occupied(occupied bool) ApiDcimPowerOutletsListRequest {
	r.occupied = &occupied
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerOutletsListRequest) Offset(offset int32) ApiDcimPowerOutletsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimPowerOutletsListRequest) Ordering(ordering string) ApiDcimPowerOutletsListRequest {
	r.ordering = &ordering
	return r
}

// Power port (ID)
func (r ApiDcimPowerOutletsListRequest) PowerPortId(powerPortId []*int32) ApiDcimPowerOutletsListRequest {
	r.powerPortId = &powerPortId
	return r
}

// Power port (ID)
func (r ApiDcimPowerOutletsListRequest) PowerPortIdN(powerPortIdN []*int32) ApiDcimPowerOutletsListRequest {
	r.powerPortIdN = &powerPortIdN
	return r
}

// Search
func (r ApiDcimPowerOutletsListRequest) Q(q string) ApiDcimPowerOutletsListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimPowerOutletsListRequest) Rack(rack []string) ApiDcimPowerOutletsListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimPowerOutletsListRequest) RackN(rackN []string) ApiDcimPowerOutletsListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimPowerOutletsListRequest) RackId(rackId []int32) ApiDcimPowerOutletsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimPowerOutletsListRequest) RackIdN(rackIdN []int32) ApiDcimPowerOutletsListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Region(region []string) ApiDcimPowerOutletsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimPowerOutletsListRequest) RegionN(regionN []string) ApiDcimPowerOutletsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimPowerOutletsListRequest) RegionId(regionId []string) ApiDcimPowerOutletsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimPowerOutletsListRequest) RegionIdN(regionIdN []string) ApiDcimPowerOutletsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimPowerOutletsListRequest) Site(site []string) ApiDcimPowerOutletsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimPowerOutletsListRequest) SiteN(siteN []string) ApiDcimPowerOutletsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimPowerOutletsListRequest) SiteGroup(siteGroup []string) ApiDcimPowerOutletsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimPowerOutletsListRequest) SiteGroupN(siteGroupN []string) ApiDcimPowerOutletsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimPowerOutletsListRequest) SiteGroupId(siteGroupId []string) ApiDcimPowerOutletsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimPowerOutletsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimPowerOutletsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimPowerOutletsListRequest) SiteId(siteId []int32) ApiDcimPowerOutletsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimPowerOutletsListRequest) SiteIdN(siteIdN []int32) ApiDcimPowerOutletsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Tag(tag []string) ApiDcimPowerOutletsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimPowerOutletsListRequest) TagN(tagN []string) ApiDcimPowerOutletsListRequest {
	r.tagN = &tagN
	return r
}

// Physical port type
func (r ApiDcimPowerOutletsListRequest) Type_(type_ []string) ApiDcimPowerOutletsListRequest {
	r.type_ = &type_
	return r
}

// Physical port type
func (r ApiDcimPowerOutletsListRequest) TypeN(typeN []string) ApiDcimPowerOutletsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerOutletsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimPowerOutletsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiDcimPowerOutletsListRequest) VirtualChassis(virtualChassis []string) ApiDcimPowerOutletsListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimPowerOutletsListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimPowerOutletsListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimPowerOutletsListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimPowerOutletsListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimPowerOutletsListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimPowerOutletsListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Execute() (*PaginatedPowerOutletList, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsListExecute(r)
}

/*
DcimPowerOutletsList Method for DcimPowerOutletsList

Get a list of power outlet objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerOutletsListRequest
*/
func (a *DcimAPIService) DcimPowerOutletsList(ctx context.Context) ApiDcimPowerOutletsListRequest {
	return ApiDcimPowerOutletsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPowerOutletList
func (a *DcimAPIService) DcimPowerOutletsListExecute(r ApiDcimPowerOutletsListRequest) (*PaginatedPowerOutletList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPowerOutletList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cableEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end", r.cableEnd, "")
	}
	if r.cableEndN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end__n", r.cableEndN, "")
	}
	if r.cableId != nil {
		t := *r.cableId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", t, "multi")
		}
	}
	if r.cableIdN != nil {
		t := *r.cableIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", t, "multi")
		}
	}
	if r.cabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cabled", r.cabled, "")
	}
	if r.connected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connected", r.connected, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.feedLeg != nil {
		t := *r.feedLeg
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "feed_leg", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "feed_leg", t, "multi")
		}
	}
	if r.feedLegN != nil {
		t := *r.feedLegN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "feed_leg__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "feed_leg__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.markConnected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mark_connected", r.markConnected, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleId != nil {
		t := *r.moduleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", t, "multi")
		}
	}
	if r.moduleIdN != nil {
		t := *r.moduleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.occupied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occupied", r.occupied, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.powerPortId != nil {
		t := *r.powerPortId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_id", t, "multi")
		}
	}
	if r.powerPortIdN != nil {
		t := *r.powerPortIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "power_port_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsPartialUpdateRequest struct {
	ctx                               context.Context
	ApiService                        *DcimAPIService
	id                                int32
	patchedWritablePowerOutletRequest *PatchedWritablePowerOutletRequest
}

func (r ApiDcimPowerOutletsPartialUpdateRequest) PatchedWritablePowerOutletRequest(patchedWritablePowerOutletRequest PatchedWritablePowerOutletRequest) ApiDcimPowerOutletsPartialUpdateRequest {
	r.patchedWritablePowerOutletRequest = &patchedWritablePowerOutletRequest
	return r
}

func (r ApiDcimPowerOutletsPartialUpdateRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsPartialUpdateExecute(r)
}

/*
DcimPowerOutletsPartialUpdate Method for DcimPowerOutletsPartialUpdate

Patch a power outlet object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power outlet.
	@return ApiDcimPowerOutletsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerOutletsPartialUpdate(ctx context.Context, id int32) ApiDcimPowerOutletsPartialUpdateRequest {
	return ApiDcimPowerOutletsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerOutlet
func (a *DcimAPIService) DcimPowerOutletsPartialUpdateExecute(r ApiDcimPowerOutletsPartialUpdateRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerOutletRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerOutletsRetrieveRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsRetrieveExecute(r)
}

/*
DcimPowerOutletsRetrieve Method for DcimPowerOutletsRetrieve

Get a power outlet object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power outlet.
	@return ApiDcimPowerOutletsRetrieveRequest
*/
func (a *DcimAPIService) DcimPowerOutletsRetrieve(ctx context.Context, id int32) ApiDcimPowerOutletsRetrieveRequest {
	return ApiDcimPowerOutletsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerOutlet
func (a *DcimAPIService) DcimPowerOutletsRetrieveExecute(r ApiDcimPowerOutletsRetrieveRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsTraceRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerOutletsTraceRetrieveRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsTraceRetrieveExecute(r)
}

/*
DcimPowerOutletsTraceRetrieve Method for DcimPowerOutletsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power outlet.
	@return ApiDcimPowerOutletsTraceRetrieveRequest
*/
func (a *DcimAPIService) DcimPowerOutletsTraceRetrieve(ctx context.Context, id int32) ApiDcimPowerOutletsTraceRetrieveRequest {
	return ApiDcimPowerOutletsTraceRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerOutlet
func (a *DcimAPIService) DcimPowerOutletsTraceRetrieveExecute(r ApiDcimPowerOutletsTraceRetrieveRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	id                         int32
	writablePowerOutletRequest *WritablePowerOutletRequest
}

func (r ApiDcimPowerOutletsUpdateRequest) WritablePowerOutletRequest(writablePowerOutletRequest WritablePowerOutletRequest) ApiDcimPowerOutletsUpdateRequest {
	r.writablePowerOutletRequest = &writablePowerOutletRequest
	return r
}

func (r ApiDcimPowerOutletsUpdateRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsUpdateExecute(r)
}

/*
DcimPowerOutletsUpdate Method for DcimPowerOutletsUpdate

Put a power outlet object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power outlet.
	@return ApiDcimPowerOutletsUpdateRequest
*/
func (a *DcimAPIService) DcimPowerOutletsUpdate(ctx context.Context, id int32) ApiDcimPowerOutletsUpdateRequest {
	return ApiDcimPowerOutletsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerOutlet
func (a *DcimAPIService) DcimPowerOutletsUpdateExecute(r ApiDcimPowerOutletsUpdateRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerOutletsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-outlets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutletRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutletRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutletRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	powerPanelRequest *[]PowerPanelRequest
}

func (r ApiDcimPowerPanelsBulkDestroyRequest) PowerPanelRequest(powerPanelRequest []PowerPanelRequest) ApiDcimPowerPanelsBulkDestroyRequest {
	r.powerPanelRequest = &powerPanelRequest
	return r
}

func (r ApiDcimPowerPanelsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPanelsBulkDestroyExecute(r)
}

/*
DcimPowerPanelsBulkDestroy Method for DcimPowerPanelsBulkDestroy

Delete a list of power panel objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPanelsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimPowerPanelsBulkDestroy(ctx context.Context) ApiDcimPowerPanelsBulkDestroyRequest {
	return ApiDcimPowerPanelsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerPanelsBulkDestroyExecute(r ApiDcimPowerPanelsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPanelsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPanelRequest == nil {
		return nil, reportError("powerPanelRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPanelRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	powerPanelRequest *[]PowerPanelRequest
}

func (r ApiDcimPowerPanelsBulkPartialUpdateRequest) PowerPanelRequest(powerPanelRequest []PowerPanelRequest) ApiDcimPowerPanelsBulkPartialUpdateRequest {
	r.powerPanelRequest = &powerPanelRequest
	return r
}

func (r ApiDcimPowerPanelsBulkPartialUpdateRequest) Execute() ([]PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsBulkPartialUpdateExecute(r)
}

/*
DcimPowerPanelsBulkPartialUpdate Method for DcimPowerPanelsBulkPartialUpdate

Patch a list of power panel objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPanelsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPanelsBulkPartialUpdate(ctx context.Context) ApiDcimPowerPanelsBulkPartialUpdateRequest {
	return ApiDcimPowerPanelsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerPanel
func (a *DcimAPIService) DcimPowerPanelsBulkPartialUpdateExecute(r ApiDcimPowerPanelsBulkPartialUpdateRequest) ([]PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPanelsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPanelRequest == nil {
		return localVarReturnValue, nil, reportError("powerPanelRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPanelRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	powerPanelRequest *[]PowerPanelRequest
}

func (r ApiDcimPowerPanelsBulkUpdateRequest) PowerPanelRequest(powerPanelRequest []PowerPanelRequest) ApiDcimPowerPanelsBulkUpdateRequest {
	r.powerPanelRequest = &powerPanelRequest
	return r
}

func (r ApiDcimPowerPanelsBulkUpdateRequest) Execute() ([]PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsBulkUpdateExecute(r)
}

/*
DcimPowerPanelsBulkUpdate Method for DcimPowerPanelsBulkUpdate

Put a list of power panel objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPanelsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPanelsBulkUpdate(ctx context.Context) ApiDcimPowerPanelsBulkUpdateRequest {
	return ApiDcimPowerPanelsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerPanel
func (a *DcimAPIService) DcimPowerPanelsBulkUpdateExecute(r ApiDcimPowerPanelsBulkUpdateRequest) ([]PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPanelsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPanelRequest == nil {
		return localVarReturnValue, nil, reportError("powerPanelRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPanelRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsCreateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	powerPanelRequest *PowerPanelRequest
}

func (r ApiDcimPowerPanelsCreateRequest) PowerPanelRequest(powerPanelRequest PowerPanelRequest) ApiDcimPowerPanelsCreateRequest {
	r.powerPanelRequest = &powerPanelRequest
	return r
}

func (r ApiDcimPowerPanelsCreateRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsCreateExecute(r)
}

/*
DcimPowerPanelsCreate Method for DcimPowerPanelsCreate

Post a list of power panel objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPanelsCreateRequest
*/
func (a *DcimAPIService) DcimPowerPanelsCreate(ctx context.Context) ApiDcimPowerPanelsCreateRequest {
	return ApiDcimPowerPanelsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PowerPanel
func (a *DcimAPIService) DcimPowerPanelsCreateExecute(r ApiDcimPowerPanelsCreateRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPanelsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPanelRequest == nil {
		return localVarReturnValue, nil, reportError("powerPanelRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPanelRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerPanelsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPanelsDestroyExecute(r)
}

/*
DcimPowerPanelsDestroy Method for DcimPowerPanelsDestroy

Delete a power panel object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power panel.
	@return ApiDcimPowerPanelsDestroyRequest
*/
func (a *DcimAPIService) DcimPowerPanelsDestroy(ctx context.Context, id int32) ApiDcimPowerPanelsDestroyRequest {
	return ApiDcimPowerPanelsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerPanelsDestroyExecute(r ApiDcimPowerPanelsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPanelsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-panels/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	contact           *[]int32
	contactN          *[]int32
	contactGroup      *[]string
	contactGroupN     *[]string
	contactRole       *[]int32
	contactRoleN      *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	locationId        *[]string
	locationIdN       *[]string
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]string
	siteGroupIdN      *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

// Contact
func (r ApiDcimPowerPanelsListRequest) Contact(contact []int32) ApiDcimPowerPanelsListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiDcimPowerPanelsListRequest) ContactN(contactN []int32) ApiDcimPowerPanelsListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiDcimPowerPanelsListRequest) ContactGroup(contactGroup []string) ApiDcimPowerPanelsListRequest {
	r.contactGroup = &contactGroup
	return r
}

func (r ApiDcimPowerPanelsListRequest) ContactGroupN(contactGroupN []string) ApiDcimPowerPanelsListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiDcimPowerPanelsListRequest) ContactRole(contactRole []int32) ApiDcimPowerPanelsListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiDcimPowerPanelsListRequest) ContactRoleN(contactRoleN []int32) ApiDcimPowerPanelsListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiDcimPowerPanelsListRequest) Created(created []time.Time) ApiDcimPowerPanelsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPowerPanelsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimPowerPanelsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimPowerPanelsListRequest) CreatedGt(createdGt []time.Time) ApiDcimPowerPanelsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimPowerPanelsListRequest) CreatedGte(createdGte []time.Time) ApiDcimPowerPanelsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPowerPanelsListRequest) CreatedLt(createdLt []time.Time) ApiDcimPowerPanelsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimPowerPanelsListRequest) CreatedLte(createdLte []time.Time) ApiDcimPowerPanelsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPowerPanelsListRequest) CreatedN(createdN []time.Time) ApiDcimPowerPanelsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimPowerPanelsListRequest) CreatedByRequest(createdByRequest string) ApiDcimPowerPanelsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimPowerPanelsListRequest) Description(description []string) ApiDcimPowerPanelsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimPowerPanelsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionIc(descriptionIc []string) ApiDcimPowerPanelsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionIe(descriptionIe []string) ApiDcimPowerPanelsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionIew(descriptionIew []string) ApiDcimPowerPanelsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPowerPanelsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionN(descriptionN []string) ApiDcimPowerPanelsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionNic(descriptionNic []string) ApiDcimPowerPanelsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionNie(descriptionNie []string) ApiDcimPowerPanelsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPowerPanelsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPowerPanelsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPowerPanelsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimPowerPanelsListRequest) Id(id []int32) ApiDcimPowerPanelsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdEmpty(idEmpty bool) ApiDcimPowerPanelsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdGt(idGt []int32) ApiDcimPowerPanelsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdGte(idGte []int32) ApiDcimPowerPanelsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdLt(idLt []int32) ApiDcimPowerPanelsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdLte(idLte []int32) ApiDcimPowerPanelsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdN(idN []int32) ApiDcimPowerPanelsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerPanelsListRequest) Limit(limit int32) ApiDcimPowerPanelsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerPanelsListRequest) LocationId(locationId []string) ApiDcimPowerPanelsListRequest {
	r.locationId = &locationId
	return r
}

func (r ApiDcimPowerPanelsListRequest) LocationIdN(locationIdN []string) ApiDcimPowerPanelsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimPowerPanelsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimPowerPanelsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimPowerPanelsListRequest) Name(name []string) ApiDcimPowerPanelsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameEmpty(nameEmpty bool) ApiDcimPowerPanelsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameIc(nameIc []string) ApiDcimPowerPanelsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameIe(nameIe []string) ApiDcimPowerPanelsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameIew(nameIew []string) ApiDcimPowerPanelsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameIsw(nameIsw []string) ApiDcimPowerPanelsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameN(nameN []string) ApiDcimPowerPanelsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNic(nameNic []string) ApiDcimPowerPanelsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNie(nameNie []string) ApiDcimPowerPanelsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNiew(nameNiew []string) ApiDcimPowerPanelsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNisw(nameNisw []string) ApiDcimPowerPanelsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerPanelsListRequest) Offset(offset int32) ApiDcimPowerPanelsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimPowerPanelsListRequest) Ordering(ordering string) ApiDcimPowerPanelsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimPowerPanelsListRequest) Q(q string) ApiDcimPowerPanelsListRequest {
	r.q = &q
	return r
}

func (r ApiDcimPowerPanelsListRequest) Region(region []string) ApiDcimPowerPanelsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimPowerPanelsListRequest) RegionN(regionN []string) ApiDcimPowerPanelsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimPowerPanelsListRequest) RegionId(regionId []string) ApiDcimPowerPanelsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimPowerPanelsListRequest) RegionIdN(regionIdN []string) ApiDcimPowerPanelsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimPowerPanelsListRequest) Site(site []string) ApiDcimPowerPanelsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimPowerPanelsListRequest) SiteN(siteN []string) ApiDcimPowerPanelsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimPowerPanelsListRequest) SiteGroup(siteGroup []string) ApiDcimPowerPanelsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimPowerPanelsListRequest) SiteGroupN(siteGroupN []string) ApiDcimPowerPanelsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimPowerPanelsListRequest) SiteGroupId(siteGroupId []string) ApiDcimPowerPanelsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimPowerPanelsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimPowerPanelsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimPowerPanelsListRequest) SiteId(siteId []int32) ApiDcimPowerPanelsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimPowerPanelsListRequest) SiteIdN(siteIdN []int32) ApiDcimPowerPanelsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimPowerPanelsListRequest) Tag(tag []string) ApiDcimPowerPanelsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimPowerPanelsListRequest) TagN(tagN []string) ApiDcimPowerPanelsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimPowerPanelsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimPowerPanelsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimPowerPanelsListRequest) Execute() (*PaginatedPowerPanelList, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsListExecute(r)
}

/*
DcimPowerPanelsList Method for DcimPowerPanelsList

Get a list of power panel objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPanelsListRequest
*/
func (a *DcimAPIService) DcimPowerPanelsList(ctx context.Context) ApiDcimPowerPanelsListRequest {
	return ApiDcimPowerPanelsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPowerPanelList
func (a *DcimAPIService) DcimPowerPanelsListExecute(r ApiDcimPowerPanelsListRequest) (*PaginatedPowerPanelList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPowerPanelList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPanelsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	patchedPowerPanelRequest *PatchedPowerPanelRequest
}

func (r ApiDcimPowerPanelsPartialUpdateRequest) PatchedPowerPanelRequest(patchedPowerPanelRequest PatchedPowerPanelRequest) ApiDcimPowerPanelsPartialUpdateRequest {
	r.patchedPowerPanelRequest = &patchedPowerPanelRequest
	return r
}

func (r ApiDcimPowerPanelsPartialUpdateRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsPartialUpdateExecute(r)
}

/*
DcimPowerPanelsPartialUpdate Method for DcimPowerPanelsPartialUpdate

Patch a power panel object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power panel.
	@return ApiDcimPowerPanelsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPanelsPartialUpdate(ctx context.Context, id int32) ApiDcimPowerPanelsPartialUpdateRequest {
	return ApiDcimPowerPanelsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPanel
func (a *DcimAPIService) DcimPowerPanelsPartialUpdateExecute(r ApiDcimPowerPanelsPartialUpdateRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPanelsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-panels/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedPowerPanelRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerPanelsRetrieveRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsRetrieveExecute(r)
}

/*
DcimPowerPanelsRetrieve Method for DcimPowerPanelsRetrieve

Get a power panel object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power panel.
	@return ApiDcimPowerPanelsRetrieveRequest
*/
func (a *DcimAPIService) DcimPowerPanelsRetrieve(ctx context.Context, id int32) ApiDcimPowerPanelsRetrieveRequest {
	return ApiDcimPowerPanelsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPanel
func (a *DcimAPIService) DcimPowerPanelsRetrieveExecute(r ApiDcimPowerPanelsRetrieveRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPanelsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-panels/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsUpdateRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	id                int32
	powerPanelRequest *PowerPanelRequest
}

func (r ApiDcimPowerPanelsUpdateRequest) PowerPanelRequest(powerPanelRequest PowerPanelRequest) ApiDcimPowerPanelsUpdateRequest {
	r.powerPanelRequest = &powerPanelRequest
	return r
}

func (r ApiDcimPowerPanelsUpdateRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsUpdateExecute(r)
}

/*
DcimPowerPanelsUpdate Method for DcimPowerPanelsUpdate

Put a power panel object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power panel.
	@return ApiDcimPowerPanelsUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPanelsUpdate(ctx context.Context, id int32) ApiDcimPowerPanelsUpdateRequest {
	return ApiDcimPowerPanelsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPanel
func (a *DcimAPIService) DcimPowerPanelsUpdateExecute(r ApiDcimPowerPanelsUpdateRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPanelsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-panels/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPanelRequest == nil {
		return localVarReturnValue, nil, reportError("powerPanelRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPanelRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesBulkDestroyRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	powerPortTemplateRequest *[]PowerPortTemplateRequest
}

func (r ApiDcimPowerPortTemplatesBulkDestroyRequest) PowerPortTemplateRequest(powerPortTemplateRequest []PowerPortTemplateRequest) ApiDcimPowerPortTemplatesBulkDestroyRequest {
	r.powerPortTemplateRequest = &powerPortTemplateRequest
	return r
}

func (r ApiDcimPowerPortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesBulkDestroyExecute(r)
}

/*
DcimPowerPortTemplatesBulkDestroy Method for DcimPowerPortTemplatesBulkDestroy

Delete a list of power port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimPowerPortTemplatesBulkDestroy(ctx context.Context) ApiDcimPowerPortTemplatesBulkDestroyRequest {
	return ApiDcimPowerPortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerPortTemplatesBulkDestroyExecute(r ApiDcimPowerPortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPortTemplateRequest == nil {
		return nil, reportError("powerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesBulkPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	powerPortTemplateRequest *[]PowerPortTemplateRequest
}

func (r ApiDcimPowerPortTemplatesBulkPartialUpdateRequest) PowerPortTemplateRequest(powerPortTemplateRequest []PowerPortTemplateRequest) ApiDcimPowerPortTemplatesBulkPartialUpdateRequest {
	r.powerPortTemplateRequest = &powerPortTemplateRequest
	return r
}

func (r ApiDcimPowerPortTemplatesBulkPartialUpdateRequest) Execute() ([]PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimPowerPortTemplatesBulkPartialUpdate Method for DcimPowerPortTemplatesBulkPartialUpdate

Patch a list of power port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimPowerPortTemplatesBulkPartialUpdateRequest {
	return ApiDcimPowerPortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerPortTemplate
func (a *DcimAPIService) DcimPowerPortTemplatesBulkPartialUpdateExecute(r ApiDcimPowerPortTemplatesBulkPartialUpdateRequest) ([]PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("powerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesBulkUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	powerPortTemplateRequest *[]PowerPortTemplateRequest
}

func (r ApiDcimPowerPortTemplatesBulkUpdateRequest) PowerPortTemplateRequest(powerPortTemplateRequest []PowerPortTemplateRequest) ApiDcimPowerPortTemplatesBulkUpdateRequest {
	r.powerPortTemplateRequest = &powerPortTemplateRequest
	return r
}

func (r ApiDcimPowerPortTemplatesBulkUpdateRequest) Execute() ([]PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesBulkUpdateExecute(r)
}

/*
DcimPowerPortTemplatesBulkUpdate Method for DcimPowerPortTemplatesBulkUpdate

Put a list of power port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPortTemplatesBulkUpdate(ctx context.Context) ApiDcimPowerPortTemplatesBulkUpdateRequest {
	return ApiDcimPowerPortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerPortTemplate
func (a *DcimAPIService) DcimPowerPortTemplatesBulkUpdateExecute(r ApiDcimPowerPortTemplatesBulkUpdateRequest) ([]PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("powerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesCreateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	writablePowerPortTemplateRequest *WritablePowerPortTemplateRequest
}

func (r ApiDcimPowerPortTemplatesCreateRequest) WritablePowerPortTemplateRequest(writablePowerPortTemplateRequest WritablePowerPortTemplateRequest) ApiDcimPowerPortTemplatesCreateRequest {
	r.writablePowerPortTemplateRequest = &writablePowerPortTemplateRequest
	return r
}

func (r ApiDcimPowerPortTemplatesCreateRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesCreateExecute(r)
}

/*
DcimPowerPortTemplatesCreate Method for DcimPowerPortTemplatesCreate

Post a list of power port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimPowerPortTemplatesCreate(ctx context.Context) ApiDcimPowerPortTemplatesCreateRequest {
	return ApiDcimPowerPortTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PowerPortTemplate
func (a *DcimAPIService) DcimPowerPortTemplatesCreateExecute(r ApiDcimPowerPortTemplatesCreateRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerPortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesDestroyExecute(r)
}

/*
DcimPowerPortTemplatesDestroy Method for DcimPowerPortTemplatesDestroy

Delete a power port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power port template.
	@return ApiDcimPowerPortTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimPowerPortTemplatesDestroy(ctx context.Context, id int32) ApiDcimPowerPortTemplatesDestroyRequest {
	return ApiDcimPowerPortTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerPortTemplatesDestroyExecute(r ApiDcimPowerPortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesListRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	allocatedDraw      *[]int32
	allocatedDrawEmpty *bool
	allocatedDrawGt    *[]int32
	allocatedDrawGte   *[]int32
	allocatedDrawLt    *[]int32
	allocatedDrawLte   *[]int32
	allocatedDrawN     *[]int32
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	description        *[]string
	descriptionEmpty   *bool
	descriptionIc      *[]string
	descriptionIe      *[]string
	descriptionIew     *[]string
	descriptionIsw     *[]string
	descriptionN       *[]string
	descriptionNic     *[]string
	descriptionNie     *[]string
	descriptionNiew    *[]string
	descriptionNisw    *[]string
	deviceTypeId       *[]*int32
	deviceTypeIdN      *[]*int32
	devicetypeId       *[]*int32
	devicetypeIdN      *[]*int32
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	label              *[]string
	labelEmpty         *bool
	labelIc            *[]string
	labelIe            *[]string
	labelIew           *[]string
	labelIsw           *[]string
	labelN             *[]string
	labelNic           *[]string
	labelNie           *[]string
	labelNiew          *[]string
	labelNisw          *[]string
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	maximumDraw        *[]int32
	maximumDrawEmpty   *bool
	maximumDrawGt      *[]int32
	maximumDrawGte     *[]int32
	maximumDrawLt      *[]int32
	maximumDrawLte     *[]int32
	maximumDrawN       *[]int32
	modifiedByRequest  *string
	moduleTypeId       *[]*int32
	moduleTypeIdN      *[]*int32
	moduletypeId       *[]*int32
	moduletypeIdN      *[]*int32
	name               *[]string
	nameEmpty          *bool
	nameIc             *[]string
	nameIe             *[]string
	nameIew            *[]string
	nameIsw            *[]string
	nameN              *[]string
	nameNic            *[]string
	nameNie            *[]string
	nameNiew           *[]string
	nameNisw           *[]string
	offset             *int32
	ordering           *string
	q                  *string
	type_              *DcimPowerPortTemplatesListTypeParameter
	typeN              *DcimPowerPortTemplatesListTypeParameter
	updatedByRequest   *string
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDraw(allocatedDraw []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDraw = &allocatedDraw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawEmpty(allocatedDrawEmpty bool) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawEmpty = &allocatedDrawEmpty
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawGt(allocatedDrawGt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawGt = &allocatedDrawGt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawGte(allocatedDrawGte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawGte = &allocatedDrawGte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawLt(allocatedDrawLt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawLt = &allocatedDrawLt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawLte(allocatedDrawLte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawLte = &allocatedDrawLte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawN(allocatedDrawN []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawN = &allocatedDrawN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Created(created []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimPowerPortTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Description(description []string) ApiDcimPowerPortTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPowerPortTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) DeviceTypeId(deviceTypeId []*int32) ApiDcimPowerPortTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []*int32) ApiDcimPowerPortTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) DevicetypeId(devicetypeId []*int32) ApiDcimPowerPortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []*int32) ApiDcimPowerPortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Id(id []int32) ApiDcimPowerPortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimPowerPortTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdGt(idGt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdGte(idGte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdLt(idLt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdLte(idLte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdN(idN []int32) ApiDcimPowerPortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Label(label []string) ApiDcimPowerPortTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimPowerPortTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelIc(labelIc []string) ApiDcimPowerPortTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelIe(labelIe []string) ApiDcimPowerPortTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelIew(labelIew []string) ApiDcimPowerPortTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimPowerPortTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelN(labelN []string) ApiDcimPowerPortTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelNic(labelNic []string) ApiDcimPowerPortTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelNie(labelNie []string) ApiDcimPowerPortTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimPowerPortTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimPowerPortTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimPowerPortTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerPortTemplatesListRequest) Limit(limit int32) ApiDcimPowerPortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDraw(maximumDraw []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDraw = &maximumDraw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawEmpty(maximumDrawEmpty bool) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawEmpty = &maximumDrawEmpty
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawGt(maximumDrawGt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawGt = &maximumDrawGt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawGte(maximumDrawGte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawGte = &maximumDrawGte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawLt(maximumDrawLt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawLt = &maximumDrawLt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawLte(maximumDrawLte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawLte = &maximumDrawLte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawN(maximumDrawN []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawN = &maximumDrawN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimPowerPortTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) ModuleTypeId(moduleTypeId []*int32) ApiDcimPowerPortTemplatesListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) ModuleTypeIdN(moduleTypeIdN []*int32) ApiDcimPowerPortTemplatesListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

// Module type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) ModuletypeId(moduletypeId []*int32) ApiDcimPowerPortTemplatesListRequest {
	r.moduletypeId = &moduletypeId
	return r
}

// Module type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) ModuletypeIdN(moduletypeIdN []*int32) ApiDcimPowerPortTemplatesListRequest {
	r.moduletypeIdN = &moduletypeIdN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Name(name []string) ApiDcimPowerPortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimPowerPortTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameIc(nameIc []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameIe(nameIe []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameIew(nameIew []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameN(nameN []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNic(nameNic []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNie(nameNie []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerPortTemplatesListRequest) Offset(offset int32) ApiDcimPowerPortTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimPowerPortTemplatesListRequest) Ordering(ordering string) ApiDcimPowerPortTemplatesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimPowerPortTemplatesListRequest) Q(q string) ApiDcimPowerPortTemplatesListRequest {
	r.q = &q
	return r
}

// * &#x60;IEC 60320&#x60; - [(&#39;iec-60320-c6&#39;, &#39;C6&#39;), (&#39;iec-60320-c8&#39;, &#39;C8&#39;), (&#39;iec-60320-c14&#39;, &#39;C14&#39;), (&#39;iec-60320-c16&#39;, &#39;C16&#39;), (&#39;iec-60320-c20&#39;, &#39;C20&#39;), (&#39;iec-60320-c22&#39;, &#39;C22&#39;)] * &#x60;IEC 60309&#x60; - [(&#39;iec-60309-p-n-e-4h&#39;, &#39;P+N+E 4H&#39;), (&#39;iec-60309-p-n-e-6h&#39;, &#39;P+N+E 6H&#39;), (&#39;iec-60309-p-n-e-9h&#39;, &#39;P+N+E 9H&#39;), (&#39;iec-60309-2p-e-4h&#39;, &#39;2P+E 4H&#39;), (&#39;iec-60309-2p-e-6h&#39;, &#39;2P+E 6H&#39;), (&#39;iec-60309-2p-e-9h&#39;, &#39;2P+E 9H&#39;), (&#39;iec-60309-3p-e-4h&#39;, &#39;3P+E 4H&#39;), (&#39;iec-60309-3p-e-6h&#39;, &#39;3P+E 6H&#39;), (&#39;iec-60309-3p-e-9h&#39;, &#39;3P+E 9H&#39;), (&#39;iec-60309-3p-n-e-4h&#39;, &#39;3P+N+E 4H&#39;), (&#39;iec-60309-3p-n-e-6h&#39;, &#39;3P+N+E 6H&#39;), (&#39;iec-60309-3p-n-e-9h&#39;, &#39;3P+N+E 9H&#39;)] * &#x60;IEC 60906-1&#x60; - [(&#39;iec-60906-1&#39;, &#39;IEC 60906-1&#39;), (&#39;nbr-14136-10a&#39;, &#39;2P+T 10A (NBR 14136)&#39;), (&#39;nbr-14136-20a&#39;, &#39;2P+T 20A (NBR 14136)&#39;)] * &#x60;NEMA (Non-locking)&#x60; - [(&#39;nema-1-15p&#39;, &#39;NEMA 1-15P&#39;), (&#39;nema-5-15p&#39;, &#39;NEMA 5-15P&#39;), (&#39;nema-5-20p&#39;, &#39;NEMA 5-20P&#39;), (&#39;nema-5-30p&#39;, &#39;NEMA 5-30P&#39;), (&#39;nema-5-50p&#39;, &#39;NEMA 5-50P&#39;), (&#39;nema-6-15p&#39;, &#39;NEMA 6-15P&#39;), (&#39;nema-6-20p&#39;, &#39;NEMA 6-20P&#39;), (&#39;nema-6-30p&#39;, &#39;NEMA 6-30P&#39;), (&#39;nema-6-50p&#39;, &#39;NEMA 6-50P&#39;), (&#39;nema-10-30p&#39;, &#39;NEMA 10-30P&#39;), (&#39;nema-10-50p&#39;, &#39;NEMA 10-50P&#39;), (&#39;nema-14-20p&#39;, &#39;NEMA 14-20P&#39;), (&#39;nema-14-30p&#39;, &#39;NEMA 14-30P&#39;), (&#39;nema-14-50p&#39;, &#39;NEMA 14-50P&#39;), (&#39;nema-14-60p&#39;, &#39;NEMA 14-60P&#39;), (&#39;nema-15-15p&#39;, &#39;NEMA 15-15P&#39;), (&#39;nema-15-20p&#39;, &#39;NEMA 15-20P&#39;), (&#39;nema-15-30p&#39;, &#39;NEMA 15-30P&#39;), (&#39;nema-15-50p&#39;, &#39;NEMA 15-50P&#39;), (&#39;nema-15-60p&#39;, &#39;NEMA 15-60P&#39;)] * &#x60;NEMA (Locking)&#x60; - [(&#39;nema-l1-15p&#39;, &#39;NEMA L1-15P&#39;), (&#39;nema-l5-15p&#39;, &#39;NEMA L5-15P&#39;), (&#39;nema-l5-20p&#39;, &#39;NEMA L5-20P&#39;), (&#39;nema-l5-30p&#39;, &#39;NEMA L5-30P&#39;), (&#39;nema-l5-50p&#39;, &#39;NEMA L5-50P&#39;), (&#39;nema-l6-15p&#39;, &#39;NEMA L6-15P&#39;), (&#39;nema-l6-20p&#39;, &#39;NEMA L6-20P&#39;), (&#39;nema-l6-30p&#39;, &#39;NEMA L6-30P&#39;), (&#39;nema-l6-50p&#39;, &#39;NEMA L6-50P&#39;), (&#39;nema-l10-30p&#39;, &#39;NEMA L10-30P&#39;), (&#39;nema-l14-20p&#39;, &#39;NEMA L14-20P&#39;), (&#39;nema-l14-30p&#39;, &#39;NEMA L14-30P&#39;), (&#39;nema-l14-50p&#39;, &#39;NEMA L14-50P&#39;), (&#39;nema-l14-60p&#39;, &#39;NEMA L14-60P&#39;), (&#39;nema-l15-20p&#39;, &#39;NEMA L15-20P&#39;), (&#39;nema-l15-30p&#39;, &#39;NEMA L15-30P&#39;), (&#39;nema-l15-50p&#39;, &#39;NEMA L15-50P&#39;), (&#39;nema-l15-60p&#39;, &#39;NEMA L15-60P&#39;), (&#39;nema-l21-20p&#39;, &#39;NEMA L21-20P&#39;), (&#39;nema-l21-30p&#39;, &#39;NEMA L21-30P&#39;), (&#39;nema-l22-30p&#39;, &#39;NEMA L22-30P&#39;)] * &#x60;California Style&#x60; - [(&#39;cs6361c&#39;, &#39;CS6361C&#39;), (&#39;cs6365c&#39;, &#39;CS6365C&#39;), (&#39;cs8165c&#39;, &#39;CS8165C&#39;), (&#39;cs8265c&#39;, &#39;CS8265C&#39;), (&#39;cs8365c&#39;, &#39;CS8365C&#39;), (&#39;cs8465c&#39;, &#39;CS8465C&#39;)] * &#x60;International/ITA&#x60; - [(&#39;ita-c&#39;, &#39;ITA Type C (CEE 7/16)&#39;), (&#39;ita-e&#39;, &#39;ITA Type E (CEE 7/6)&#39;), (&#39;ita-f&#39;, &#39;ITA Type F (CEE 7/4)&#39;), (&#39;ita-ef&#39;, &#39;ITA Type E/F (CEE 7/7)&#39;), (&#39;ita-g&#39;, &#39;ITA Type G (BS 1363)&#39;), (&#39;ita-h&#39;, &#39;ITA Type H&#39;), (&#39;ita-i&#39;, &#39;ITA Type I&#39;), (&#39;ita-j&#39;, &#39;ITA Type J&#39;), (&#39;ita-k&#39;, &#39;ITA Type K&#39;), (&#39;ita-l&#39;, &#39;ITA Type L (CEI 23-50)&#39;), (&#39;ita-m&#39;, &#39;ITA Type M (BS 546)&#39;), (&#39;ita-n&#39;, &#39;ITA Type N&#39;), (&#39;ita-o&#39;, &#39;ITA Type O&#39;)] * &#x60;USB&#x60; - [(&#39;usb-a&#39;, &#39;USB Type A&#39;), (&#39;usb-b&#39;, &#39;USB Type B&#39;), (&#39;usb-c&#39;, &#39;USB Type C&#39;), (&#39;usb-mini-a&#39;, &#39;USB Mini A&#39;), (&#39;usb-mini-b&#39;, &#39;USB Mini B&#39;), (&#39;usb-micro-a&#39;, &#39;USB Micro A&#39;), (&#39;usb-micro-b&#39;, &#39;USB Micro B&#39;), (&#39;usb-micro-ab&#39;, &#39;USB Micro AB&#39;), (&#39;usb-3-b&#39;, &#39;USB 3.0 Type B&#39;), (&#39;usb-3-micro-b&#39;, &#39;USB 3.0 Micro B&#39;)] * &#x60;Molex&#x60; - [(&#39;molex-micro-fit-1x2&#39;, &#39;Molex Micro-Fit 1x2&#39;), (&#39;molex-micro-fit-2x2&#39;, &#39;Molex Micro-Fit 2x2&#39;), (&#39;molex-micro-fit-2x4&#39;, &#39;Molex Micro-Fit 2x4&#39;)] * &#x60;DC&#x60; - [(&#39;dc-terminal&#39;, &#39;DC Terminal&#39;)] * &#x60;Proprietary&#x60; - [(&#39;saf-d-grid&#39;, &#39;Saf-D-Grid&#39;), (&#39;neutrik-powercon-20&#39;, &#39;Neutrik powerCON (20A)&#39;), (&#39;neutrik-powercon-32&#39;, &#39;Neutrik powerCON (32A)&#39;), (&#39;neutrik-powercon-true1&#39;, &#39;Neutrik powerCON TRUE1&#39;), (&#39;neutrik-powercon-true1-top&#39;, &#39;Neutrik powerCON TRUE1 TOP&#39;), (&#39;ubiquiti-smartpower&#39;, &#39;Ubiquiti SmartPower&#39;)] * &#x60;Other&#x60; - [(&#39;hardwired&#39;, &#39;Hardwired&#39;), (&#39;other&#39;, &#39;Other&#39;)]
func (r ApiDcimPowerPortTemplatesListRequest) Type_(type_ DcimPowerPortTemplatesListTypeParameter) ApiDcimPowerPortTemplatesListRequest {
	r.type_ = &type_
	return r
}

// * &#x60;IEC 60320&#x60; - [(&#39;iec-60320-c6&#39;, &#39;C6&#39;), (&#39;iec-60320-c8&#39;, &#39;C8&#39;), (&#39;iec-60320-c14&#39;, &#39;C14&#39;), (&#39;iec-60320-c16&#39;, &#39;C16&#39;), (&#39;iec-60320-c20&#39;, &#39;C20&#39;), (&#39;iec-60320-c22&#39;, &#39;C22&#39;)] * &#x60;IEC 60309&#x60; - [(&#39;iec-60309-p-n-e-4h&#39;, &#39;P+N+E 4H&#39;), (&#39;iec-60309-p-n-e-6h&#39;, &#39;P+N+E 6H&#39;), (&#39;iec-60309-p-n-e-9h&#39;, &#39;P+N+E 9H&#39;), (&#39;iec-60309-2p-e-4h&#39;, &#39;2P+E 4H&#39;), (&#39;iec-60309-2p-e-6h&#39;, &#39;2P+E 6H&#39;), (&#39;iec-60309-2p-e-9h&#39;, &#39;2P+E 9H&#39;), (&#39;iec-60309-3p-e-4h&#39;, &#39;3P+E 4H&#39;), (&#39;iec-60309-3p-e-6h&#39;, &#39;3P+E 6H&#39;), (&#39;iec-60309-3p-e-9h&#39;, &#39;3P+E 9H&#39;), (&#39;iec-60309-3p-n-e-4h&#39;, &#39;3P+N+E 4H&#39;), (&#39;iec-60309-3p-n-e-6h&#39;, &#39;3P+N+E 6H&#39;), (&#39;iec-60309-3p-n-e-9h&#39;, &#39;3P+N+E 9H&#39;)] * &#x60;IEC 60906-1&#x60; - [(&#39;iec-60906-1&#39;, &#39;IEC 60906-1&#39;), (&#39;nbr-14136-10a&#39;, &#39;2P+T 10A (NBR 14136)&#39;), (&#39;nbr-14136-20a&#39;, &#39;2P+T 20A (NBR 14136)&#39;)] * &#x60;NEMA (Non-locking)&#x60; - [(&#39;nema-1-15p&#39;, &#39;NEMA 1-15P&#39;), (&#39;nema-5-15p&#39;, &#39;NEMA 5-15P&#39;), (&#39;nema-5-20p&#39;, &#39;NEMA 5-20P&#39;), (&#39;nema-5-30p&#39;, &#39;NEMA 5-30P&#39;), (&#39;nema-5-50p&#39;, &#39;NEMA 5-50P&#39;), (&#39;nema-6-15p&#39;, &#39;NEMA 6-15P&#39;), (&#39;nema-6-20p&#39;, &#39;NEMA 6-20P&#39;), (&#39;nema-6-30p&#39;, &#39;NEMA 6-30P&#39;), (&#39;nema-6-50p&#39;, &#39;NEMA 6-50P&#39;), (&#39;nema-10-30p&#39;, &#39;NEMA 10-30P&#39;), (&#39;nema-10-50p&#39;, &#39;NEMA 10-50P&#39;), (&#39;nema-14-20p&#39;, &#39;NEMA 14-20P&#39;), (&#39;nema-14-30p&#39;, &#39;NEMA 14-30P&#39;), (&#39;nema-14-50p&#39;, &#39;NEMA 14-50P&#39;), (&#39;nema-14-60p&#39;, &#39;NEMA 14-60P&#39;), (&#39;nema-15-15p&#39;, &#39;NEMA 15-15P&#39;), (&#39;nema-15-20p&#39;, &#39;NEMA 15-20P&#39;), (&#39;nema-15-30p&#39;, &#39;NEMA 15-30P&#39;), (&#39;nema-15-50p&#39;, &#39;NEMA 15-50P&#39;), (&#39;nema-15-60p&#39;, &#39;NEMA 15-60P&#39;)] * &#x60;NEMA (Locking)&#x60; - [(&#39;nema-l1-15p&#39;, &#39;NEMA L1-15P&#39;), (&#39;nema-l5-15p&#39;, &#39;NEMA L5-15P&#39;), (&#39;nema-l5-20p&#39;, &#39;NEMA L5-20P&#39;), (&#39;nema-l5-30p&#39;, &#39;NEMA L5-30P&#39;), (&#39;nema-l5-50p&#39;, &#39;NEMA L5-50P&#39;), (&#39;nema-l6-15p&#39;, &#39;NEMA L6-15P&#39;), (&#39;nema-l6-20p&#39;, &#39;NEMA L6-20P&#39;), (&#39;nema-l6-30p&#39;, &#39;NEMA L6-30P&#39;), (&#39;nema-l6-50p&#39;, &#39;NEMA L6-50P&#39;), (&#39;nema-l10-30p&#39;, &#39;NEMA L10-30P&#39;), (&#39;nema-l14-20p&#39;, &#39;NEMA L14-20P&#39;), (&#39;nema-l14-30p&#39;, &#39;NEMA L14-30P&#39;), (&#39;nema-l14-50p&#39;, &#39;NEMA L14-50P&#39;), (&#39;nema-l14-60p&#39;, &#39;NEMA L14-60P&#39;), (&#39;nema-l15-20p&#39;, &#39;NEMA L15-20P&#39;), (&#39;nema-l15-30p&#39;, &#39;NEMA L15-30P&#39;), (&#39;nema-l15-50p&#39;, &#39;NEMA L15-50P&#39;), (&#39;nema-l15-60p&#39;, &#39;NEMA L15-60P&#39;), (&#39;nema-l21-20p&#39;, &#39;NEMA L21-20P&#39;), (&#39;nema-l21-30p&#39;, &#39;NEMA L21-30P&#39;), (&#39;nema-l22-30p&#39;, &#39;NEMA L22-30P&#39;)] * &#x60;California Style&#x60; - [(&#39;cs6361c&#39;, &#39;CS6361C&#39;), (&#39;cs6365c&#39;, &#39;CS6365C&#39;), (&#39;cs8165c&#39;, &#39;CS8165C&#39;), (&#39;cs8265c&#39;, &#39;CS8265C&#39;), (&#39;cs8365c&#39;, &#39;CS8365C&#39;), (&#39;cs8465c&#39;, &#39;CS8465C&#39;)] * &#x60;International/ITA&#x60; - [(&#39;ita-c&#39;, &#39;ITA Type C (CEE 7/16)&#39;), (&#39;ita-e&#39;, &#39;ITA Type E (CEE 7/6)&#39;), (&#39;ita-f&#39;, &#39;ITA Type F (CEE 7/4)&#39;), (&#39;ita-ef&#39;, &#39;ITA Type E/F (CEE 7/7)&#39;), (&#39;ita-g&#39;, &#39;ITA Type G (BS 1363)&#39;), (&#39;ita-h&#39;, &#39;ITA Type H&#39;), (&#39;ita-i&#39;, &#39;ITA Type I&#39;), (&#39;ita-j&#39;, &#39;ITA Type J&#39;), (&#39;ita-k&#39;, &#39;ITA Type K&#39;), (&#39;ita-l&#39;, &#39;ITA Type L (CEI 23-50)&#39;), (&#39;ita-m&#39;, &#39;ITA Type M (BS 546)&#39;), (&#39;ita-n&#39;, &#39;ITA Type N&#39;), (&#39;ita-o&#39;, &#39;ITA Type O&#39;)] * &#x60;USB&#x60; - [(&#39;usb-a&#39;, &#39;USB Type A&#39;), (&#39;usb-b&#39;, &#39;USB Type B&#39;), (&#39;usb-c&#39;, &#39;USB Type C&#39;), (&#39;usb-mini-a&#39;, &#39;USB Mini A&#39;), (&#39;usb-mini-b&#39;, &#39;USB Mini B&#39;), (&#39;usb-micro-a&#39;, &#39;USB Micro A&#39;), (&#39;usb-micro-b&#39;, &#39;USB Micro B&#39;), (&#39;usb-micro-ab&#39;, &#39;USB Micro AB&#39;), (&#39;usb-3-b&#39;, &#39;USB 3.0 Type B&#39;), (&#39;usb-3-micro-b&#39;, &#39;USB 3.0 Micro B&#39;)] * &#x60;Molex&#x60; - [(&#39;molex-micro-fit-1x2&#39;, &#39;Molex Micro-Fit 1x2&#39;), (&#39;molex-micro-fit-2x2&#39;, &#39;Molex Micro-Fit 2x2&#39;), (&#39;molex-micro-fit-2x4&#39;, &#39;Molex Micro-Fit 2x4&#39;)] * &#x60;DC&#x60; - [(&#39;dc-terminal&#39;, &#39;DC Terminal&#39;)] * &#x60;Proprietary&#x60; - [(&#39;saf-d-grid&#39;, &#39;Saf-D-Grid&#39;), (&#39;neutrik-powercon-20&#39;, &#39;Neutrik powerCON (20A)&#39;), (&#39;neutrik-powercon-32&#39;, &#39;Neutrik powerCON (32A)&#39;), (&#39;neutrik-powercon-true1&#39;, &#39;Neutrik powerCON TRUE1&#39;), (&#39;neutrik-powercon-true1-top&#39;, &#39;Neutrik powerCON TRUE1 TOP&#39;), (&#39;ubiquiti-smartpower&#39;, &#39;Ubiquiti SmartPower&#39;)] * &#x60;Other&#x60; - [(&#39;hardwired&#39;, &#39;Hardwired&#39;), (&#39;other&#39;, &#39;Other&#39;)]
func (r ApiDcimPowerPortTemplatesListRequest) TypeN(typeN DcimPowerPortTemplatesListTypeParameter) ApiDcimPowerPortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimPowerPortTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Execute() (*PaginatedPowerPortTemplateList, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesListExecute(r)
}

/*
DcimPowerPortTemplatesList Method for DcimPowerPortTemplatesList

Get a list of power port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortTemplatesListRequest
*/
func (a *DcimAPIService) DcimPowerPortTemplatesList(ctx context.Context) ApiDcimPowerPortTemplatesListRequest {
	return ApiDcimPowerPortTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPowerPortTemplateList
func (a *DcimAPIService) DcimPowerPortTemplatesListExecute(r ApiDcimPowerPortTemplatesListRequest) (*PaginatedPowerPortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPowerPortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allocatedDraw != nil {
		t := *r.allocatedDraw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw", t, "multi")
		}
	}
	if r.allocatedDrawEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__empty", r.allocatedDrawEmpty, "")
	}
	if r.allocatedDrawGt != nil {
		t := *r.allocatedDrawGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__gt", t, "multi")
		}
	}
	if r.allocatedDrawGte != nil {
		t := *r.allocatedDrawGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__gte", t, "multi")
		}
	}
	if r.allocatedDrawLt != nil {
		t := *r.allocatedDrawLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__lt", t, "multi")
		}
	}
	if r.allocatedDrawLte != nil {
		t := *r.allocatedDrawLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__lte", t, "multi")
		}
	}
	if r.allocatedDrawN != nil {
		t := *r.allocatedDrawN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.maximumDraw != nil {
		t := *r.maximumDraw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw", t, "multi")
		}
	}
	if r.maximumDrawEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__empty", r.maximumDrawEmpty, "")
	}
	if r.maximumDrawGt != nil {
		t := *r.maximumDrawGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__gt", t, "multi")
		}
	}
	if r.maximumDrawGte != nil {
		t := *r.maximumDrawGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__gte", t, "multi")
		}
	}
	if r.maximumDrawLt != nil {
		t := *r.maximumDrawLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__lt", t, "multi")
		}
	}
	if r.maximumDrawLte != nil {
		t := *r.maximumDrawLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__lte", t, "multi")
		}
	}
	if r.maximumDrawN != nil {
		t := *r.maximumDrawN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.moduletypeId != nil {
		t := *r.moduletypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", t, "multi")
		}
	}
	if r.moduletypeIdN != nil {
		t := *r.moduletypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.typeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", r.typeN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesPartialUpdateRequest struct {
	ctx                                     context.Context
	ApiService                              *DcimAPIService
	id                                      int32
	patchedWritablePowerPortTemplateRequest *PatchedWritablePowerPortTemplateRequest
}

func (r ApiDcimPowerPortTemplatesPartialUpdateRequest) PatchedWritablePowerPortTemplateRequest(patchedWritablePowerPortTemplateRequest PatchedWritablePowerPortTemplateRequest) ApiDcimPowerPortTemplatesPartialUpdateRequest {
	r.patchedWritablePowerPortTemplateRequest = &patchedWritablePowerPortTemplateRequest
	return r
}

func (r ApiDcimPowerPortTemplatesPartialUpdateRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesPartialUpdateExecute(r)
}

/*
DcimPowerPortTemplatesPartialUpdate Method for DcimPowerPortTemplatesPartialUpdate

Patch a power port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power port template.
	@return ApiDcimPowerPortTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPortTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimPowerPortTemplatesPartialUpdateRequest {
	return ApiDcimPowerPortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPortTemplate
func (a *DcimAPIService) DcimPowerPortTemplatesPartialUpdateExecute(r ApiDcimPowerPortTemplatesPartialUpdateRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerPortTemplatesRetrieveRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesRetrieveExecute(r)
}

/*
DcimPowerPortTemplatesRetrieve Method for DcimPowerPortTemplatesRetrieve

Get a power port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power port template.
	@return ApiDcimPowerPortTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimPowerPortTemplatesRetrieve(ctx context.Context, id int32) ApiDcimPowerPortTemplatesRetrieveRequest {
	return ApiDcimPowerPortTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPortTemplate
func (a *DcimAPIService) DcimPowerPortTemplatesRetrieveExecute(r ApiDcimPowerPortTemplatesRetrieveRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *DcimAPIService
	id                               int32
	writablePowerPortTemplateRequest *WritablePowerPortTemplateRequest
}

func (r ApiDcimPowerPortTemplatesUpdateRequest) WritablePowerPortTemplateRequest(writablePowerPortTemplateRequest WritablePowerPortTemplateRequest) ApiDcimPowerPortTemplatesUpdateRequest {
	r.writablePowerPortTemplateRequest = &writablePowerPortTemplateRequest
	return r
}

func (r ApiDcimPowerPortTemplatesUpdateRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesUpdateExecute(r)
}

/*
DcimPowerPortTemplatesUpdate Method for DcimPowerPortTemplatesUpdate

Put a power port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power port template.
	@return ApiDcimPowerPortTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPortTemplatesUpdate(ctx context.Context, id int32) ApiDcimPowerPortTemplatesUpdateRequest {
	return ApiDcimPowerPortTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPortTemplate
func (a *DcimAPIService) DcimPowerPortTemplatesUpdateExecute(r ApiDcimPowerPortTemplatesUpdateRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsBulkDestroyRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	powerPortRequest *[]PowerPortRequest
}

func (r ApiDcimPowerPortsBulkDestroyRequest) PowerPortRequest(powerPortRequest []PowerPortRequest) ApiDcimPowerPortsBulkDestroyRequest {
	r.powerPortRequest = &powerPortRequest
	return r
}

func (r ApiDcimPowerPortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPortsBulkDestroyExecute(r)
}

/*
DcimPowerPortsBulkDestroy Method for DcimPowerPortsBulkDestroy

Delete a list of power port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimPowerPortsBulkDestroy(ctx context.Context) ApiDcimPowerPortsBulkDestroyRequest {
	return ApiDcimPowerPortsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerPortsBulkDestroyExecute(r ApiDcimPowerPortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPortRequest == nil {
		return nil, reportError("powerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPortsBulkPartialUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	powerPortRequest *[]PowerPortRequest
}

func (r ApiDcimPowerPortsBulkPartialUpdateRequest) PowerPortRequest(powerPortRequest []PowerPortRequest) ApiDcimPowerPortsBulkPartialUpdateRequest {
	r.powerPortRequest = &powerPortRequest
	return r
}

func (r ApiDcimPowerPortsBulkPartialUpdateRequest) Execute() ([]PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsBulkPartialUpdateExecute(r)
}

/*
DcimPowerPortsBulkPartialUpdate Method for DcimPowerPortsBulkPartialUpdate

Patch a list of power port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPortsBulkPartialUpdate(ctx context.Context) ApiDcimPowerPortsBulkPartialUpdateRequest {
	return ApiDcimPowerPortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerPort
func (a *DcimAPIService) DcimPowerPortsBulkPartialUpdateExecute(r ApiDcimPowerPortsBulkPartialUpdateRequest) ([]PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPortRequest == nil {
		return localVarReturnValue, nil, reportError("powerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsBulkUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	powerPortRequest *[]PowerPortRequest
}

func (r ApiDcimPowerPortsBulkUpdateRequest) PowerPortRequest(powerPortRequest []PowerPortRequest) ApiDcimPowerPortsBulkUpdateRequest {
	r.powerPortRequest = &powerPortRequest
	return r
}

func (r ApiDcimPowerPortsBulkUpdateRequest) Execute() ([]PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsBulkUpdateExecute(r)
}

/*
DcimPowerPortsBulkUpdate Method for DcimPowerPortsBulkUpdate

Put a list of power port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPortsBulkUpdate(ctx context.Context) ApiDcimPowerPortsBulkUpdateRequest {
	return ApiDcimPowerPortsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PowerPort
func (a *DcimAPIService) DcimPowerPortsBulkUpdateExecute(r ApiDcimPowerPortsBulkUpdateRequest) ([]PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.powerPortRequest == nil {
		return localVarReturnValue, nil, reportError("powerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.powerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsCreateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	writablePowerPortRequest *WritablePowerPortRequest
}

func (r ApiDcimPowerPortsCreateRequest) WritablePowerPortRequest(writablePowerPortRequest WritablePowerPortRequest) ApiDcimPowerPortsCreateRequest {
	r.writablePowerPortRequest = &writablePowerPortRequest
	return r
}

func (r ApiDcimPowerPortsCreateRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsCreateExecute(r)
}

/*
DcimPowerPortsCreate Method for DcimPowerPortsCreate

Post a list of power port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortsCreateRequest
*/
func (a *DcimAPIService) DcimPowerPortsCreate(ctx context.Context) ApiDcimPowerPortsCreateRequest {
	return ApiDcimPowerPortsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PowerPort
func (a *DcimAPIService) DcimPowerPortsCreateExecute(r ApiDcimPowerPortsCreateRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPortRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerPortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPortsDestroyExecute(r)
}

/*
DcimPowerPortsDestroy Method for DcimPowerPortsDestroy

Delete a power port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power port.
	@return ApiDcimPowerPortsDestroyRequest
*/
func (a *DcimAPIService) DcimPowerPortsDestroy(ctx context.Context, id int32) ApiDcimPowerPortsDestroyRequest {
	return ApiDcimPowerPortsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimPowerPortsDestroyExecute(r ApiDcimPowerPortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPortsListRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	allocatedDraw      *[]int32
	allocatedDrawEmpty *bool
	allocatedDrawGt    *[]int32
	allocatedDrawGte   *[]int32
	allocatedDrawLt    *[]int32
	allocatedDrawLte   *[]int32
	allocatedDrawN     *[]int32
	cableEnd           *CircuitsCircuitTerminationsListCableEndParameter
	cableEndN          *CircuitsCircuitTerminationsListCableEndParameter
	cableId            *[]*int32
	cableIdN           *[]*int32
	cabled             *bool
	connected          *bool
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	description        *[]string
	descriptionEmpty   *bool
	descriptionIc      *[]string
	descriptionIe      *[]string
	descriptionIew     *[]string
	descriptionIsw     *[]string
	descriptionN       *[]string
	descriptionNic     *[]string
	descriptionNie     *[]string
	descriptionNiew    *[]string
	descriptionNisw    *[]string
	device             *[]*string
	deviceN            *[]*string
	deviceId           *[]int32
	deviceIdN          *[]int32
	deviceRole         *[]string
	deviceRoleN        *[]string
	deviceRoleId       *[]int32
	deviceRoleIdN      *[]int32
	deviceStatus       *[]string
	deviceStatusN      *[]string
	deviceType         *[]string
	deviceTypeN        *[]string
	deviceTypeId       *[]int32
	deviceTypeIdN      *[]int32
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	label              *[]string
	labelEmpty         *bool
	labelIc            *[]string
	labelIe            *[]string
	labelIew           *[]string
	labelIsw           *[]string
	labelN             *[]string
	labelNic           *[]string
	labelNie           *[]string
	labelNiew          *[]string
	labelNisw          *[]string
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	location           *[]string
	locationN          *[]string
	locationId         *[]int32
	locationIdN        *[]int32
	markConnected      *bool
	maximumDraw        *[]int32
	maximumDrawEmpty   *bool
	maximumDrawGt      *[]int32
	maximumDrawGte     *[]int32
	maximumDrawLt      *[]int32
	maximumDrawLte     *[]int32
	maximumDrawN       *[]int32
	modifiedByRequest  *string
	moduleId           *[]*int32
	moduleIdN          *[]*int32
	name               *[]string
	nameEmpty          *bool
	nameIc             *[]string
	nameIe             *[]string
	nameIew            *[]string
	nameIsw            *[]string
	nameN              *[]string
	nameNic            *[]string
	nameNie            *[]string
	nameNiew           *[]string
	nameNisw           *[]string
	occupied           *bool
	offset             *int32
	ordering           *string
	q                  *string
	rack               *[]string
	rackN              *[]string
	rackId             *[]int32
	rackIdN            *[]int32
	region             *[]string
	regionN            *[]string
	regionId           *[]string
	regionIdN          *[]string
	site               *[]string
	siteN              *[]string
	siteGroup          *[]string
	siteGroupN         *[]string
	siteGroupId        *[]string
	siteGroupIdN       *[]string
	siteId             *[]int32
	siteIdN            *[]int32
	tag                *[]string
	tagN               *[]string
	type_              *[]string
	typeN              *[]string
	updatedByRequest   *string
	virtualChassis     *[]string
	virtualChassisN    *[]string
	virtualChassisId   *[]int32
	virtualChassisIdN  *[]int32
}

func (r ApiDcimPowerPortsListRequest) AllocatedDraw(allocatedDraw []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDraw = &allocatedDraw
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawEmpty(allocatedDrawEmpty bool) ApiDcimPowerPortsListRequest {
	r.allocatedDrawEmpty = &allocatedDrawEmpty
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawGt(allocatedDrawGt []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawGt = &allocatedDrawGt
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawGte(allocatedDrawGte []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawGte = &allocatedDrawGte
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawLt(allocatedDrawLt []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawLt = &allocatedDrawLt
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawLte(allocatedDrawLte []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawLte = &allocatedDrawLte
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawN(allocatedDrawN []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawN = &allocatedDrawN
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimPowerPortsListRequest) CableEnd(cableEnd CircuitsCircuitTerminationsListCableEndParameter) ApiDcimPowerPortsListRequest {
	r.cableEnd = &cableEnd
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimPowerPortsListRequest) CableEndN(cableEndN CircuitsCircuitTerminationsListCableEndParameter) ApiDcimPowerPortsListRequest {
	r.cableEndN = &cableEndN
	return r
}

// Cable (ID)
func (r ApiDcimPowerPortsListRequest) CableId(cableId []*int32) ApiDcimPowerPortsListRequest {
	r.cableId = &cableId
	return r
}

// Cable (ID)
func (r ApiDcimPowerPortsListRequest) CableIdN(cableIdN []*int32) ApiDcimPowerPortsListRequest {
	r.cableIdN = &cableIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) Cabled(cabled bool) ApiDcimPowerPortsListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimPowerPortsListRequest) Connected(connected bool) ApiDcimPowerPortsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimPowerPortsListRequest) Created(created []time.Time) ApiDcimPowerPortsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPowerPortsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimPowerPortsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimPowerPortsListRequest) CreatedGt(createdGt []time.Time) ApiDcimPowerPortsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimPowerPortsListRequest) CreatedGte(createdGte []time.Time) ApiDcimPowerPortsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPowerPortsListRequest) CreatedLt(createdLt []time.Time) ApiDcimPowerPortsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimPowerPortsListRequest) CreatedLte(createdLte []time.Time) ApiDcimPowerPortsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPowerPortsListRequest) CreatedN(createdN []time.Time) ApiDcimPowerPortsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimPowerPortsListRequest) CreatedByRequest(createdByRequest string) ApiDcimPowerPortsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimPowerPortsListRequest) Description(description []string) ApiDcimPowerPortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimPowerPortsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimPowerPortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimPowerPortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimPowerPortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPowerPortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionN(descriptionN []string) ApiDcimPowerPortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimPowerPortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimPowerPortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPowerPortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPowerPortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimPowerPortsListRequest) Device(device []*string) ApiDcimPowerPortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimPowerPortsListRequest) DeviceN(deviceN []*string) ApiDcimPowerPortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimPowerPortsListRequest) DeviceId(deviceId []int32) ApiDcimPowerPortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimPowerPortsListRequest) DeviceIdN(deviceIdN []int32) ApiDcimPowerPortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimPowerPortsListRequest) DeviceRole(deviceRole []string) ApiDcimPowerPortsListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimPowerPortsListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimPowerPortsListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimPowerPortsListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimPowerPortsListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimPowerPortsListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimPowerPortsListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) DeviceStatus(deviceStatus []string) ApiDcimPowerPortsListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimPowerPortsListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimPowerPortsListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimPowerPortsListRequest) DeviceType(deviceType []string) ApiDcimPowerPortsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimPowerPortsListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimPowerPortsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimPowerPortsListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimPowerPortsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimPowerPortsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimPowerPortsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) Id(id []int32) ApiDcimPowerPortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerPortsListRequest) IdEmpty(idEmpty bool) ApiDcimPowerPortsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimPowerPortsListRequest) IdGt(idGt []int32) ApiDcimPowerPortsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimPowerPortsListRequest) IdGte(idGte []int32) ApiDcimPowerPortsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimPowerPortsListRequest) IdLt(idLt []int32) ApiDcimPowerPortsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimPowerPortsListRequest) IdLte(idLte []int32) ApiDcimPowerPortsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimPowerPortsListRequest) IdN(idN []int32) ApiDcimPowerPortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerPortsListRequest) Label(label []string) ApiDcimPowerPortsListRequest {
	r.label = &label
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelEmpty(labelEmpty bool) ApiDcimPowerPortsListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelIc(labelIc []string) ApiDcimPowerPortsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelIe(labelIe []string) ApiDcimPowerPortsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelIew(labelIew []string) ApiDcimPowerPortsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelIsw(labelIsw []string) ApiDcimPowerPortsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelN(labelN []string) ApiDcimPowerPortsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelNic(labelNic []string) ApiDcimPowerPortsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelNie(labelNie []string) ApiDcimPowerPortsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelNiew(labelNiew []string) ApiDcimPowerPortsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimPowerPortsListRequest) LabelNisw(labelNisw []string) ApiDcimPowerPortsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimPowerPortsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimPowerPortsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPowerPortsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimPowerPortsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimPowerPortsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimPowerPortsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimPowerPortsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimPowerPortsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPowerPortsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimPowerPortsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimPowerPortsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimPowerPortsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimPowerPortsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimPowerPortsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerPortsListRequest) Limit(limit int32) ApiDcimPowerPortsListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimPowerPortsListRequest) Location(location []string) ApiDcimPowerPortsListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimPowerPortsListRequest) LocationN(locationN []string) ApiDcimPowerPortsListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimPowerPortsListRequest) LocationId(locationId []int32) ApiDcimPowerPortsListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimPowerPortsListRequest) LocationIdN(locationIdN []int32) ApiDcimPowerPortsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) MarkConnected(markConnected bool) ApiDcimPowerPortsListRequest {
	r.markConnected = &markConnected
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDraw(maximumDraw []int32) ApiDcimPowerPortsListRequest {
	r.maximumDraw = &maximumDraw
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawEmpty(maximumDrawEmpty bool) ApiDcimPowerPortsListRequest {
	r.maximumDrawEmpty = &maximumDrawEmpty
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawGt(maximumDrawGt []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawGt = &maximumDrawGt
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawGte(maximumDrawGte []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawGte = &maximumDrawGte
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawLt(maximumDrawLt []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawLt = &maximumDrawLt
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawLte(maximumDrawLte []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawLte = &maximumDrawLte
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawN(maximumDrawN []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawN = &maximumDrawN
	return r
}

func (r ApiDcimPowerPortsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimPowerPortsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module (ID)
func (r ApiDcimPowerPortsListRequest) ModuleId(moduleId []*int32) ApiDcimPowerPortsListRequest {
	r.moduleId = &moduleId
	return r
}

// Module (ID)
func (r ApiDcimPowerPortsListRequest) ModuleIdN(moduleIdN []*int32) ApiDcimPowerPortsListRequest {
	r.moduleIdN = &moduleIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) Name(name []string) ApiDcimPowerPortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerPortsListRequest) NameEmpty(nameEmpty bool) ApiDcimPowerPortsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimPowerPortsListRequest) NameIc(nameIc []string) ApiDcimPowerPortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerPortsListRequest) NameIe(nameIe []string) ApiDcimPowerPortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerPortsListRequest) NameIew(nameIew []string) ApiDcimPowerPortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerPortsListRequest) NameIsw(nameIsw []string) ApiDcimPowerPortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerPortsListRequest) NameN(nameN []string) ApiDcimPowerPortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNic(nameNic []string) ApiDcimPowerPortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNie(nameNie []string) ApiDcimPowerPortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNiew(nameNiew []string) ApiDcimPowerPortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNisw(nameNisw []string) ApiDcimPowerPortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerPortsListRequest) Occupied(occupied bool) ApiDcimPowerPortsListRequest {
	r.occupied = &occupied
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerPortsListRequest) Offset(offset int32) ApiDcimPowerPortsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimPowerPortsListRequest) Ordering(ordering string) ApiDcimPowerPortsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimPowerPortsListRequest) Q(q string) ApiDcimPowerPortsListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimPowerPortsListRequest) Rack(rack []string) ApiDcimPowerPortsListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimPowerPortsListRequest) RackN(rackN []string) ApiDcimPowerPortsListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimPowerPortsListRequest) RackId(rackId []int32) ApiDcimPowerPortsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimPowerPortsListRequest) RackIdN(rackIdN []int32) ApiDcimPowerPortsListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) Region(region []string) ApiDcimPowerPortsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimPowerPortsListRequest) RegionN(regionN []string) ApiDcimPowerPortsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimPowerPortsListRequest) RegionId(regionId []string) ApiDcimPowerPortsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimPowerPortsListRequest) RegionIdN(regionIdN []string) ApiDcimPowerPortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimPowerPortsListRequest) Site(site []string) ApiDcimPowerPortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimPowerPortsListRequest) SiteN(siteN []string) ApiDcimPowerPortsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimPowerPortsListRequest) SiteGroup(siteGroup []string) ApiDcimPowerPortsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimPowerPortsListRequest) SiteGroupN(siteGroupN []string) ApiDcimPowerPortsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimPowerPortsListRequest) SiteGroupId(siteGroupId []string) ApiDcimPowerPortsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimPowerPortsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimPowerPortsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimPowerPortsListRequest) SiteId(siteId []int32) ApiDcimPowerPortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimPowerPortsListRequest) SiteIdN(siteIdN []int32) ApiDcimPowerPortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) Tag(tag []string) ApiDcimPowerPortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimPowerPortsListRequest) TagN(tagN []string) ApiDcimPowerPortsListRequest {
	r.tagN = &tagN
	return r
}

// Physical port type
func (r ApiDcimPowerPortsListRequest) Type_(type_ []string) ApiDcimPowerPortsListRequest {
	r.type_ = &type_
	return r
}

// Physical port type
func (r ApiDcimPowerPortsListRequest) TypeN(typeN []string) ApiDcimPowerPortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerPortsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimPowerPortsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiDcimPowerPortsListRequest) VirtualChassis(virtualChassis []string) ApiDcimPowerPortsListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimPowerPortsListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimPowerPortsListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimPowerPortsListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimPowerPortsListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimPowerPortsListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimPowerPortsListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) Execute() (*PaginatedPowerPortList, *http.Response, error) {
	return r.ApiService.DcimPowerPortsListExecute(r)
}

/*
DcimPowerPortsList Method for DcimPowerPortsList

Get a list of power port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimPowerPortsListRequest
*/
func (a *DcimAPIService) DcimPowerPortsList(ctx context.Context) ApiDcimPowerPortsListRequest {
	return ApiDcimPowerPortsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedPowerPortList
func (a *DcimAPIService) DcimPowerPortsListExecute(r ApiDcimPowerPortsListRequest) (*PaginatedPowerPortList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedPowerPortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allocatedDraw != nil {
		t := *r.allocatedDraw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw", t, "multi")
		}
	}
	if r.allocatedDrawEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__empty", r.allocatedDrawEmpty, "")
	}
	if r.allocatedDrawGt != nil {
		t := *r.allocatedDrawGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__gt", t, "multi")
		}
	}
	if r.allocatedDrawGte != nil {
		t := *r.allocatedDrawGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__gte", t, "multi")
		}
	}
	if r.allocatedDrawLt != nil {
		t := *r.allocatedDrawLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__lt", t, "multi")
		}
	}
	if r.allocatedDrawLte != nil {
		t := *r.allocatedDrawLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__lte", t, "multi")
		}
	}
	if r.allocatedDrawN != nil {
		t := *r.allocatedDrawN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "allocated_draw__n", t, "multi")
		}
	}
	if r.cableEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end", r.cableEnd, "")
	}
	if r.cableEndN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end__n", r.cableEndN, "")
	}
	if r.cableId != nil {
		t := *r.cableId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", t, "multi")
		}
	}
	if r.cableIdN != nil {
		t := *r.cableIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", t, "multi")
		}
	}
	if r.cabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cabled", r.cabled, "")
	}
	if r.connected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "connected", r.connected, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.markConnected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mark_connected", r.markConnected, "")
	}
	if r.maximumDraw != nil {
		t := *r.maximumDraw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw", t, "multi")
		}
	}
	if r.maximumDrawEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__empty", r.maximumDrawEmpty, "")
	}
	if r.maximumDrawGt != nil {
		t := *r.maximumDrawGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__gt", t, "multi")
		}
	}
	if r.maximumDrawGte != nil {
		t := *r.maximumDrawGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__gte", t, "multi")
		}
	}
	if r.maximumDrawLt != nil {
		t := *r.maximumDrawLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__lt", t, "multi")
		}
	}
	if r.maximumDrawLte != nil {
		t := *r.maximumDrawLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__lte", t, "multi")
		}
	}
	if r.maximumDrawN != nil {
		t := *r.maximumDrawN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maximum_draw__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleId != nil {
		t := *r.moduleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", t, "multi")
		}
	}
	if r.moduleIdN != nil {
		t := *r.moduleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.occupied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occupied", r.occupied, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	id                              int32
	patchedWritablePowerPortRequest *PatchedWritablePowerPortRequest
}

func (r ApiDcimPowerPortsPartialUpdateRequest) PatchedWritablePowerPortRequest(patchedWritablePowerPortRequest PatchedWritablePowerPortRequest) ApiDcimPowerPortsPartialUpdateRequest {
	r.patchedWritablePowerPortRequest = &patchedWritablePowerPortRequest
	return r
}

func (r ApiDcimPowerPortsPartialUpdateRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsPartialUpdateExecute(r)
}

/*
DcimPowerPortsPartialUpdate Method for DcimPowerPortsPartialUpdate

Patch a power port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power port.
	@return ApiDcimPowerPortsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPortsPartialUpdate(ctx context.Context, id int32) ApiDcimPowerPortsPartialUpdateRequest {
	return ApiDcimPowerPortsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPort
func (a *DcimAPIService) DcimPowerPortsPartialUpdateExecute(r ApiDcimPowerPortsPartialUpdateRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerPortsRetrieveRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsRetrieveExecute(r)
}

/*
DcimPowerPortsRetrieve Method for DcimPowerPortsRetrieve

Get a power port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power port.
	@return ApiDcimPowerPortsRetrieveRequest
*/
func (a *DcimAPIService) DcimPowerPortsRetrieve(ctx context.Context, id int32) ApiDcimPowerPortsRetrieveRequest {
	return ApiDcimPowerPortsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPort
func (a *DcimAPIService) DcimPowerPortsRetrieveExecute(r ApiDcimPowerPortsRetrieveRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsTraceRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimPowerPortsTraceRetrieveRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsTraceRetrieveExecute(r)
}

/*
DcimPowerPortsTraceRetrieve Method for DcimPowerPortsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power port.
	@return ApiDcimPowerPortsTraceRetrieveRequest
*/
func (a *DcimAPIService) DcimPowerPortsTraceRetrieve(ctx context.Context, id int32) ApiDcimPowerPortsTraceRetrieveRequest {
	return ApiDcimPowerPortsTraceRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPort
func (a *DcimAPIService) DcimPowerPortsTraceRetrieveExecute(r ApiDcimPowerPortsTraceRetrieveRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	writablePowerPortRequest *WritablePowerPortRequest
}

func (r ApiDcimPowerPortsUpdateRequest) WritablePowerPortRequest(writablePowerPortRequest WritablePowerPortRequest) ApiDcimPowerPortsUpdateRequest {
	r.writablePowerPortRequest = &writablePowerPortRequest
	return r
}

func (r ApiDcimPowerPortsUpdateRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsUpdateExecute(r)
}

/*
DcimPowerPortsUpdate Method for DcimPowerPortsUpdate

Put a power port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this power port.
	@return ApiDcimPowerPortsUpdateRequest
*/
func (a *DcimAPIService) DcimPowerPortsUpdate(ctx context.Context, id int32) ApiDcimPowerPortsUpdateRequest {
	return ApiDcimPowerPortsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PowerPort
func (a *DcimAPIService) DcimPowerPortsUpdateExecute(r ApiDcimPowerPortsUpdateRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimPowerPortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/power-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPortRequest == nil {
		return localVarReturnValue, nil, reportError("writablePowerPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsBulkDestroyRequest struct {
	ctx                    context.Context
	ApiService             *DcimAPIService
	rackReservationRequest *[]RackReservationRequest
}

func (r ApiDcimRackReservationsBulkDestroyRequest) RackReservationRequest(rackReservationRequest []RackReservationRequest) ApiDcimRackReservationsBulkDestroyRequest {
	r.rackReservationRequest = &rackReservationRequest
	return r
}

func (r ApiDcimRackReservationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackReservationsBulkDestroyExecute(r)
}

/*
DcimRackReservationsBulkDestroy Method for DcimRackReservationsBulkDestroy

Delete a list of rack reservation objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackReservationsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimRackReservationsBulkDestroy(ctx context.Context) ApiDcimRackReservationsBulkDestroyRequest {
	return ApiDcimRackReservationsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRackReservationsBulkDestroyExecute(r ApiDcimRackReservationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackReservationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackReservationRequest == nil {
		return nil, reportError("rackReservationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackReservationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackReservationsBulkPartialUpdateRequest struct {
	ctx                    context.Context
	ApiService             *DcimAPIService
	rackReservationRequest *[]RackReservationRequest
}

func (r ApiDcimRackReservationsBulkPartialUpdateRequest) RackReservationRequest(rackReservationRequest []RackReservationRequest) ApiDcimRackReservationsBulkPartialUpdateRequest {
	r.rackReservationRequest = &rackReservationRequest
	return r
}

func (r ApiDcimRackReservationsBulkPartialUpdateRequest) Execute() ([]RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsBulkPartialUpdateExecute(r)
}

/*
DcimRackReservationsBulkPartialUpdate Method for DcimRackReservationsBulkPartialUpdate

Patch a list of rack reservation objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackReservationsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRackReservationsBulkPartialUpdate(ctx context.Context) ApiDcimRackReservationsBulkPartialUpdateRequest {
	return ApiDcimRackReservationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RackReservation
func (a *DcimAPIService) DcimRackReservationsBulkPartialUpdateExecute(r ApiDcimRackReservationsBulkPartialUpdateRequest) ([]RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackReservationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackReservationRequest == nil {
		return localVarReturnValue, nil, reportError("rackReservationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackReservationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsBulkUpdateRequest struct {
	ctx                    context.Context
	ApiService             *DcimAPIService
	rackReservationRequest *[]RackReservationRequest
}

func (r ApiDcimRackReservationsBulkUpdateRequest) RackReservationRequest(rackReservationRequest []RackReservationRequest) ApiDcimRackReservationsBulkUpdateRequest {
	r.rackReservationRequest = &rackReservationRequest
	return r
}

func (r ApiDcimRackReservationsBulkUpdateRequest) Execute() ([]RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsBulkUpdateExecute(r)
}

/*
DcimRackReservationsBulkUpdate Method for DcimRackReservationsBulkUpdate

Put a list of rack reservation objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackReservationsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimRackReservationsBulkUpdate(ctx context.Context) ApiDcimRackReservationsBulkUpdateRequest {
	return ApiDcimRackReservationsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RackReservation
func (a *DcimAPIService) DcimRackReservationsBulkUpdateExecute(r ApiDcimRackReservationsBulkUpdateRequest) ([]RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackReservationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackReservationRequest == nil {
		return localVarReturnValue, nil, reportError("rackReservationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackReservationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsCreateRequest struct {
	ctx                    context.Context
	ApiService             *DcimAPIService
	rackReservationRequest *RackReservationRequest
}

func (r ApiDcimRackReservationsCreateRequest) RackReservationRequest(rackReservationRequest RackReservationRequest) ApiDcimRackReservationsCreateRequest {
	r.rackReservationRequest = &rackReservationRequest
	return r
}

func (r ApiDcimRackReservationsCreateRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsCreateExecute(r)
}

/*
DcimRackReservationsCreate Method for DcimRackReservationsCreate

Post a list of rack reservation objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackReservationsCreateRequest
*/
func (a *DcimAPIService) DcimRackReservationsCreate(ctx context.Context) ApiDcimRackReservationsCreateRequest {
	return ApiDcimRackReservationsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RackReservation
func (a *DcimAPIService) DcimRackReservationsCreateExecute(r ApiDcimRackReservationsCreateRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackReservationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackReservationRequest == nil {
		return localVarReturnValue, nil, reportError("rackReservationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackReservationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRackReservationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackReservationsDestroyExecute(r)
}

/*
DcimRackReservationsDestroy Method for DcimRackReservationsDestroy

Delete a rack reservation object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack reservation.
	@return ApiDcimRackReservationsDestroyRequest
*/
func (a *DcimAPIService) DcimRackReservationsDestroy(ctx context.Context, id int32) ApiDcimRackReservationsDestroyRequest {
	return ApiDcimRackReservationsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRackReservationsDestroyExecute(r ApiDcimRackReservationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackReservationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-reservations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackReservationsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	location          *[]string
	locationN         *[]string
	locationId        *[]string
	locationIdN       *[]string
	modifiedByRequest *string
	offset            *int32
	ordering          *string
	q                 *string
	rackId            *[]int32
	rackIdN           *[]int32
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]string
	siteGroupIdN      *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	tag               *[]string
	tagN              *[]string
	tenant            *[]string
	tenantN           *[]string
	tenantGroup       *[]string
	tenantGroupN      *[]string
	tenantGroupId     *[]string
	tenantGroupIdN    *[]string
	tenantId          *[]*int32
	tenantIdN         *[]*int32
	unit              *float32
	updatedByRequest  *string
	user              *[]string
	userN             *[]string
	userId            *[]int32
	userIdN           *[]int32
}

func (r ApiDcimRackReservationsListRequest) Created(created []time.Time) ApiDcimRackReservationsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRackReservationsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimRackReservationsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimRackReservationsListRequest) CreatedGt(createdGt []time.Time) ApiDcimRackReservationsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimRackReservationsListRequest) CreatedGte(createdGte []time.Time) ApiDcimRackReservationsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRackReservationsListRequest) CreatedLt(createdLt []time.Time) ApiDcimRackReservationsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimRackReservationsListRequest) CreatedLte(createdLte []time.Time) ApiDcimRackReservationsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRackReservationsListRequest) CreatedN(createdN []time.Time) ApiDcimRackReservationsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimRackReservationsListRequest) CreatedByRequest(createdByRequest string) ApiDcimRackReservationsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimRackReservationsListRequest) Description(description []string) ApiDcimRackReservationsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimRackReservationsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionIc(descriptionIc []string) ApiDcimRackReservationsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionIe(descriptionIe []string) ApiDcimRackReservationsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionIew(descriptionIew []string) ApiDcimRackReservationsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimRackReservationsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionN(descriptionN []string) ApiDcimRackReservationsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionNic(descriptionNic []string) ApiDcimRackReservationsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionNie(descriptionNie []string) ApiDcimRackReservationsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimRackReservationsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimRackReservationsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimRackReservationsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimRackReservationsListRequest) Id(id []int32) ApiDcimRackReservationsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRackReservationsListRequest) IdEmpty(idEmpty bool) ApiDcimRackReservationsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimRackReservationsListRequest) IdGt(idGt []int32) ApiDcimRackReservationsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimRackReservationsListRequest) IdGte(idGte []int32) ApiDcimRackReservationsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimRackReservationsListRequest) IdLt(idLt []int32) ApiDcimRackReservationsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimRackReservationsListRequest) IdLte(idLte []int32) ApiDcimRackReservationsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimRackReservationsListRequest) IdN(idN []int32) ApiDcimRackReservationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimRackReservationsListRequest) Limit(limit int32) ApiDcimRackReservationsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRackReservationsListRequest) Location(location []string) ApiDcimRackReservationsListRequest {
	r.location = &location
	return r
}

func (r ApiDcimRackReservationsListRequest) LocationN(locationN []string) ApiDcimRackReservationsListRequest {
	r.locationN = &locationN
	return r
}

func (r ApiDcimRackReservationsListRequest) LocationId(locationId []string) ApiDcimRackReservationsListRequest {
	r.locationId = &locationId
	return r
}

func (r ApiDcimRackReservationsListRequest) LocationIdN(locationIdN []string) ApiDcimRackReservationsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimRackReservationsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimRackReservationsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRackReservationsListRequest) Offset(offset int32) ApiDcimRackReservationsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimRackReservationsListRequest) Ordering(ordering string) ApiDcimRackReservationsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimRackReservationsListRequest) Q(q string) ApiDcimRackReservationsListRequest {
	r.q = &q
	return r
}

// Rack (ID)
func (r ApiDcimRackReservationsListRequest) RackId(rackId []int32) ApiDcimRackReservationsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimRackReservationsListRequest) RackIdN(rackIdN []int32) ApiDcimRackReservationsListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimRackReservationsListRequest) Region(region []string) ApiDcimRackReservationsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimRackReservationsListRequest) RegionN(regionN []string) ApiDcimRackReservationsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimRackReservationsListRequest) RegionId(regionId []string) ApiDcimRackReservationsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimRackReservationsListRequest) RegionIdN(regionIdN []string) ApiDcimRackReservationsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site (slug)
func (r ApiDcimRackReservationsListRequest) Site(site []string) ApiDcimRackReservationsListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiDcimRackReservationsListRequest) SiteN(siteN []string) ApiDcimRackReservationsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimRackReservationsListRequest) SiteGroup(siteGroup []string) ApiDcimRackReservationsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimRackReservationsListRequest) SiteGroupN(siteGroupN []string) ApiDcimRackReservationsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimRackReservationsListRequest) SiteGroupId(siteGroupId []string) ApiDcimRackReservationsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimRackReservationsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimRackReservationsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimRackReservationsListRequest) SiteId(siteId []int32) ApiDcimRackReservationsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimRackReservationsListRequest) SiteIdN(siteIdN []int32) ApiDcimRackReservationsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimRackReservationsListRequest) Tag(tag []string) ApiDcimRackReservationsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimRackReservationsListRequest) TagN(tagN []string) ApiDcimRackReservationsListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimRackReservationsListRequest) Tenant(tenant []string) ApiDcimRackReservationsListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimRackReservationsListRequest) TenantN(tenantN []string) ApiDcimRackReservationsListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiDcimRackReservationsListRequest) TenantGroup(tenantGroup []string) ApiDcimRackReservationsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiDcimRackReservationsListRequest) TenantGroupN(tenantGroupN []string) ApiDcimRackReservationsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiDcimRackReservationsListRequest) TenantGroupId(tenantGroupId []string) ApiDcimRackReservationsListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiDcimRackReservationsListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimRackReservationsListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimRackReservationsListRequest) TenantId(tenantId []*int32) ApiDcimRackReservationsListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimRackReservationsListRequest) TenantIdN(tenantIdN []*int32) ApiDcimRackReservationsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimRackReservationsListRequest) Unit(unit float32) ApiDcimRackReservationsListRequest {
	r.unit = &unit
	return r
}

func (r ApiDcimRackReservationsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimRackReservationsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// User (name)
func (r ApiDcimRackReservationsListRequest) User(user []string) ApiDcimRackReservationsListRequest {
	r.user = &user
	return r
}

// User (name)
func (r ApiDcimRackReservationsListRequest) UserN(userN []string) ApiDcimRackReservationsListRequest {
	r.userN = &userN
	return r
}

// User (ID)
func (r ApiDcimRackReservationsListRequest) UserId(userId []int32) ApiDcimRackReservationsListRequest {
	r.userId = &userId
	return r
}

// User (ID)
func (r ApiDcimRackReservationsListRequest) UserIdN(userIdN []int32) ApiDcimRackReservationsListRequest {
	r.userIdN = &userIdN
	return r
}

func (r ApiDcimRackReservationsListRequest) Execute() (*PaginatedRackReservationList, *http.Response, error) {
	return r.ApiService.DcimRackReservationsListExecute(r)
}

/*
DcimRackReservationsList Method for DcimRackReservationsList

Get a list of rack reservation objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackReservationsListRequest
*/
func (a *DcimAPIService) DcimRackReservationsList(ctx context.Context) ApiDcimRackReservationsListRequest {
	return ApiDcimRackReservationsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRackReservationList
func (a *DcimAPIService) DcimRackReservationsListExecute(r ApiDcimRackReservationsListRequest) (*PaginatedRackReservationList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRackReservationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackReservationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.unit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unit", r.unit, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "multi")
		}
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", t, "multi")
		}
	}
	if r.userId != nil {
		t := *r.userId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", t, "multi")
		}
	}
	if r.userIdN != nil {
		t := *r.userIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsPartialUpdateRequest struct {
	ctx                           context.Context
	ApiService                    *DcimAPIService
	id                            int32
	patchedRackReservationRequest *PatchedRackReservationRequest
}

func (r ApiDcimRackReservationsPartialUpdateRequest) PatchedRackReservationRequest(patchedRackReservationRequest PatchedRackReservationRequest) ApiDcimRackReservationsPartialUpdateRequest {
	r.patchedRackReservationRequest = &patchedRackReservationRequest
	return r
}

func (r ApiDcimRackReservationsPartialUpdateRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsPartialUpdateExecute(r)
}

/*
DcimRackReservationsPartialUpdate Method for DcimRackReservationsPartialUpdate

Patch a rack reservation object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack reservation.
	@return ApiDcimRackReservationsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRackReservationsPartialUpdate(ctx context.Context, id int32) ApiDcimRackReservationsPartialUpdateRequest {
	return ApiDcimRackReservationsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RackReservation
func (a *DcimAPIService) DcimRackReservationsPartialUpdateExecute(r ApiDcimRackReservationsPartialUpdateRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackReservationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-reservations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRackReservationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRackReservationsRetrieveRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsRetrieveExecute(r)
}

/*
DcimRackReservationsRetrieve Method for DcimRackReservationsRetrieve

Get a rack reservation object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack reservation.
	@return ApiDcimRackReservationsRetrieveRequest
*/
func (a *DcimAPIService) DcimRackReservationsRetrieve(ctx context.Context, id int32) ApiDcimRackReservationsRetrieveRequest {
	return ApiDcimRackReservationsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RackReservation
func (a *DcimAPIService) DcimRackReservationsRetrieveExecute(r ApiDcimRackReservationsRetrieveRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackReservationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-reservations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsUpdateRequest struct {
	ctx                    context.Context
	ApiService             *DcimAPIService
	id                     int32
	rackReservationRequest *RackReservationRequest
}

func (r ApiDcimRackReservationsUpdateRequest) RackReservationRequest(rackReservationRequest RackReservationRequest) ApiDcimRackReservationsUpdateRequest {
	r.rackReservationRequest = &rackReservationRequest
	return r
}

func (r ApiDcimRackReservationsUpdateRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsUpdateExecute(r)
}

/*
DcimRackReservationsUpdate Method for DcimRackReservationsUpdate

Put a rack reservation object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack reservation.
	@return ApiDcimRackReservationsUpdateRequest
*/
func (a *DcimAPIService) DcimRackReservationsUpdate(ctx context.Context, id int32) ApiDcimRackReservationsUpdateRequest {
	return ApiDcimRackReservationsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RackReservation
func (a *DcimAPIService) DcimRackReservationsUpdateExecute(r ApiDcimRackReservationsUpdateRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackReservationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-reservations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackReservationRequest == nil {
		return localVarReturnValue, nil, reportError("rackReservationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackReservationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesBulkDestroyRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	rackRoleRequest *[]RackRoleRequest
}

func (r ApiDcimRackRolesBulkDestroyRequest) RackRoleRequest(rackRoleRequest []RackRoleRequest) ApiDcimRackRolesBulkDestroyRequest {
	r.rackRoleRequest = &rackRoleRequest
	return r
}

func (r ApiDcimRackRolesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackRolesBulkDestroyExecute(r)
}

/*
DcimRackRolesBulkDestroy Method for DcimRackRolesBulkDestroy

Delete a list of rack role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackRolesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimRackRolesBulkDestroy(ctx context.Context) ApiDcimRackRolesBulkDestroyRequest {
	return ApiDcimRackRolesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRackRolesBulkDestroyExecute(r ApiDcimRackRolesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackRolesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRoleRequest == nil {
		return nil, reportError("rackRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackRolesBulkPartialUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	rackRoleRequest *[]RackRoleRequest
}

func (r ApiDcimRackRolesBulkPartialUpdateRequest) RackRoleRequest(rackRoleRequest []RackRoleRequest) ApiDcimRackRolesBulkPartialUpdateRequest {
	r.rackRoleRequest = &rackRoleRequest
	return r
}

func (r ApiDcimRackRolesBulkPartialUpdateRequest) Execute() ([]RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesBulkPartialUpdateExecute(r)
}

/*
DcimRackRolesBulkPartialUpdate Method for DcimRackRolesBulkPartialUpdate

Patch a list of rack role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackRolesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRackRolesBulkPartialUpdate(ctx context.Context) ApiDcimRackRolesBulkPartialUpdateRequest {
	return ApiDcimRackRolesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RackRole
func (a *DcimAPIService) DcimRackRolesBulkPartialUpdateExecute(r ApiDcimRackRolesBulkPartialUpdateRequest) ([]RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackRolesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRoleRequest == nil {
		return localVarReturnValue, nil, reportError("rackRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesBulkUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	rackRoleRequest *[]RackRoleRequest
}

func (r ApiDcimRackRolesBulkUpdateRequest) RackRoleRequest(rackRoleRequest []RackRoleRequest) ApiDcimRackRolesBulkUpdateRequest {
	r.rackRoleRequest = &rackRoleRequest
	return r
}

func (r ApiDcimRackRolesBulkUpdateRequest) Execute() ([]RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesBulkUpdateExecute(r)
}

/*
DcimRackRolesBulkUpdate Method for DcimRackRolesBulkUpdate

Put a list of rack role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackRolesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimRackRolesBulkUpdate(ctx context.Context) ApiDcimRackRolesBulkUpdateRequest {
	return ApiDcimRackRolesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RackRole
func (a *DcimAPIService) DcimRackRolesBulkUpdateExecute(r ApiDcimRackRolesBulkUpdateRequest) ([]RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackRolesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRoleRequest == nil {
		return localVarReturnValue, nil, reportError("rackRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesCreateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	rackRoleRequest *RackRoleRequest
}

func (r ApiDcimRackRolesCreateRequest) RackRoleRequest(rackRoleRequest RackRoleRequest) ApiDcimRackRolesCreateRequest {
	r.rackRoleRequest = &rackRoleRequest
	return r
}

func (r ApiDcimRackRolesCreateRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesCreateExecute(r)
}

/*
DcimRackRolesCreate Method for DcimRackRolesCreate

Post a list of rack role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackRolesCreateRequest
*/
func (a *DcimAPIService) DcimRackRolesCreate(ctx context.Context) ApiDcimRackRolesCreateRequest {
	return ApiDcimRackRolesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RackRole
func (a *DcimAPIService) DcimRackRolesCreateExecute(r ApiDcimRackRolesCreateRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackRolesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRoleRequest == nil {
		return localVarReturnValue, nil, reportError("rackRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRackRolesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackRolesDestroyExecute(r)
}

/*
DcimRackRolesDestroy Method for DcimRackRolesDestroy

Delete a rack role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack role.
	@return ApiDcimRackRolesDestroyRequest
*/
func (a *DcimAPIService) DcimRackRolesDestroy(ctx context.Context, id int32) ApiDcimRackRolesDestroyRequest {
	return ApiDcimRackRolesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRackRolesDestroyExecute(r ApiDcimRackRolesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackRolesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackRolesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	color             *[]string
	colorEmpty        *bool
	colorIc           *[]string
	colorIe           *[]string
	colorIew          *[]string
	colorIsw          *[]string
	colorN            *[]string
	colorNic          *[]string
	colorNie          *[]string
	colorNiew         *[]string
	colorNisw         *[]string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiDcimRackRolesListRequest) Color(color []string) ApiDcimRackRolesListRequest {
	r.color = &color
	return r
}

func (r ApiDcimRackRolesListRequest) ColorEmpty(colorEmpty bool) ApiDcimRackRolesListRequest {
	r.colorEmpty = &colorEmpty
	return r
}

func (r ApiDcimRackRolesListRequest) ColorIc(colorIc []string) ApiDcimRackRolesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiDcimRackRolesListRequest) ColorIe(colorIe []string) ApiDcimRackRolesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiDcimRackRolesListRequest) ColorIew(colorIew []string) ApiDcimRackRolesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiDcimRackRolesListRequest) ColorIsw(colorIsw []string) ApiDcimRackRolesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiDcimRackRolesListRequest) ColorN(colorN []string) ApiDcimRackRolesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNic(colorNic []string) ApiDcimRackRolesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNie(colorNie []string) ApiDcimRackRolesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNiew(colorNiew []string) ApiDcimRackRolesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNisw(colorNisw []string) ApiDcimRackRolesListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiDcimRackRolesListRequest) Created(created []time.Time) ApiDcimRackRolesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRackRolesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimRackRolesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimRackRolesListRequest) CreatedGt(createdGt []time.Time) ApiDcimRackRolesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimRackRolesListRequest) CreatedGte(createdGte []time.Time) ApiDcimRackRolesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRackRolesListRequest) CreatedLt(createdLt []time.Time) ApiDcimRackRolesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimRackRolesListRequest) CreatedLte(createdLte []time.Time) ApiDcimRackRolesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRackRolesListRequest) CreatedN(createdN []time.Time) ApiDcimRackRolesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimRackRolesListRequest) CreatedByRequest(createdByRequest string) ApiDcimRackRolesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimRackRolesListRequest) Description(description []string) ApiDcimRackRolesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimRackRolesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionIc(descriptionIc []string) ApiDcimRackRolesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionIe(descriptionIe []string) ApiDcimRackRolesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionIew(descriptionIew []string) ApiDcimRackRolesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimRackRolesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionN(descriptionN []string) ApiDcimRackRolesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionNic(descriptionNic []string) ApiDcimRackRolesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionNie(descriptionNie []string) ApiDcimRackRolesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimRackRolesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimRackRolesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimRackRolesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimRackRolesListRequest) Id(id []int32) ApiDcimRackRolesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRackRolesListRequest) IdEmpty(idEmpty bool) ApiDcimRackRolesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimRackRolesListRequest) IdGt(idGt []int32) ApiDcimRackRolesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimRackRolesListRequest) IdGte(idGte []int32) ApiDcimRackRolesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimRackRolesListRequest) IdLt(idLt []int32) ApiDcimRackRolesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimRackRolesListRequest) IdLte(idLte []int32) ApiDcimRackRolesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimRackRolesListRequest) IdN(idN []int32) ApiDcimRackRolesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimRackRolesListRequest) Limit(limit int32) ApiDcimRackRolesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRackRolesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimRackRolesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimRackRolesListRequest) Name(name []string) ApiDcimRackRolesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRackRolesListRequest) NameEmpty(nameEmpty bool) ApiDcimRackRolesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimRackRolesListRequest) NameIc(nameIc []string) ApiDcimRackRolesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRackRolesListRequest) NameIe(nameIe []string) ApiDcimRackRolesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRackRolesListRequest) NameIew(nameIew []string) ApiDcimRackRolesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRackRolesListRequest) NameIsw(nameIsw []string) ApiDcimRackRolesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRackRolesListRequest) NameN(nameN []string) ApiDcimRackRolesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRackRolesListRequest) NameNic(nameNic []string) ApiDcimRackRolesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRackRolesListRequest) NameNie(nameNie []string) ApiDcimRackRolesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRackRolesListRequest) NameNiew(nameNiew []string) ApiDcimRackRolesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRackRolesListRequest) NameNisw(nameNisw []string) ApiDcimRackRolesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRackRolesListRequest) Offset(offset int32) ApiDcimRackRolesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimRackRolesListRequest) Ordering(ordering string) ApiDcimRackRolesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimRackRolesListRequest) Q(q string) ApiDcimRackRolesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimRackRolesListRequest) Slug(slug []string) ApiDcimRackRolesListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimRackRolesListRequest) SlugEmpty(slugEmpty bool) ApiDcimRackRolesListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimRackRolesListRequest) SlugIc(slugIc []string) ApiDcimRackRolesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimRackRolesListRequest) SlugIe(slugIe []string) ApiDcimRackRolesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimRackRolesListRequest) SlugIew(slugIew []string) ApiDcimRackRolesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimRackRolesListRequest) SlugIsw(slugIsw []string) ApiDcimRackRolesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimRackRolesListRequest) SlugN(slugN []string) ApiDcimRackRolesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNic(slugNic []string) ApiDcimRackRolesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNie(slugNie []string) ApiDcimRackRolesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNiew(slugNiew []string) ApiDcimRackRolesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNisw(slugNisw []string) ApiDcimRackRolesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimRackRolesListRequest) Tag(tag []string) ApiDcimRackRolesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimRackRolesListRequest) TagN(tagN []string) ApiDcimRackRolesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimRackRolesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimRackRolesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimRackRolesListRequest) Execute() (*PaginatedRackRoleList, *http.Response, error) {
	return r.ApiService.DcimRackRolesListExecute(r)
}

/*
DcimRackRolesList Method for DcimRackRolesList

Get a list of rack role objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRackRolesListRequest
*/
func (a *DcimAPIService) DcimRackRolesList(ctx context.Context) ApiDcimRackRolesListRequest {
	return ApiDcimRackRolesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRackRoleList
func (a *DcimAPIService) DcimRackRolesListExecute(r ApiDcimRackRolesListRequest) (*PaginatedRackRoleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRackRoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackRolesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "multi")
		}
	}
	if r.colorEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "color__empty", r.colorEmpty, "")
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesPartialUpdateRequest struct {
	ctx                    context.Context
	ApiService             *DcimAPIService
	id                     int32
	patchedRackRoleRequest *PatchedRackRoleRequest
}

func (r ApiDcimRackRolesPartialUpdateRequest) PatchedRackRoleRequest(patchedRackRoleRequest PatchedRackRoleRequest) ApiDcimRackRolesPartialUpdateRequest {
	r.patchedRackRoleRequest = &patchedRackRoleRequest
	return r
}

func (r ApiDcimRackRolesPartialUpdateRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesPartialUpdateExecute(r)
}

/*
DcimRackRolesPartialUpdate Method for DcimRackRolesPartialUpdate

Patch a rack role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack role.
	@return ApiDcimRackRolesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRackRolesPartialUpdate(ctx context.Context, id int32) ApiDcimRackRolesPartialUpdateRequest {
	return ApiDcimRackRolesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RackRole
func (a *DcimAPIService) DcimRackRolesPartialUpdateExecute(r ApiDcimRackRolesPartialUpdateRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackRolesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRackRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRackRolesRetrieveRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesRetrieveExecute(r)
}

/*
DcimRackRolesRetrieve Method for DcimRackRolesRetrieve

Get a rack role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack role.
	@return ApiDcimRackRolesRetrieveRequest
*/
func (a *DcimAPIService) DcimRackRolesRetrieve(ctx context.Context, id int32) ApiDcimRackRolesRetrieveRequest {
	return ApiDcimRackRolesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RackRole
func (a *DcimAPIService) DcimRackRolesRetrieveExecute(r ApiDcimRackRolesRetrieveRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackRolesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	id              int32
	rackRoleRequest *RackRoleRequest
}

func (r ApiDcimRackRolesUpdateRequest) RackRoleRequest(rackRoleRequest RackRoleRequest) ApiDcimRackRolesUpdateRequest {
	r.rackRoleRequest = &rackRoleRequest
	return r
}

func (r ApiDcimRackRolesUpdateRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesUpdateExecute(r)
}

/*
DcimRackRolesUpdate Method for DcimRackRolesUpdate

Put a rack role object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack role.
	@return ApiDcimRackRolesUpdateRequest
*/
func (a *DcimAPIService) DcimRackRolesUpdate(ctx context.Context, id int32) ApiDcimRackRolesUpdateRequest {
	return ApiDcimRackRolesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RackRole
func (a *DcimAPIService) DcimRackRolesUpdateExecute(r ApiDcimRackRolesUpdateRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRackRolesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rack-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRoleRequest == nil {
		return localVarReturnValue, nil, reportError("rackRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksBulkDestroyRequest struct {
	ctx         context.Context
	ApiService  *DcimAPIService
	rackRequest *[]RackRequest
}

func (r ApiDcimRacksBulkDestroyRequest) RackRequest(rackRequest []RackRequest) ApiDcimRacksBulkDestroyRequest {
	r.rackRequest = &rackRequest
	return r
}

func (r ApiDcimRacksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRacksBulkDestroyExecute(r)
}

/*
DcimRacksBulkDestroy Method for DcimRacksBulkDestroy

Delete a list of rack objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRacksBulkDestroyRequest
*/
func (a *DcimAPIService) DcimRacksBulkDestroy(ctx context.Context) ApiDcimRacksBulkDestroyRequest {
	return ApiDcimRacksBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRacksBulkDestroyExecute(r ApiDcimRacksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRequest == nil {
		return nil, reportError("rackRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRacksBulkPartialUpdateRequest struct {
	ctx         context.Context
	ApiService  *DcimAPIService
	rackRequest *[]RackRequest
}

func (r ApiDcimRacksBulkPartialUpdateRequest) RackRequest(rackRequest []RackRequest) ApiDcimRacksBulkPartialUpdateRequest {
	r.rackRequest = &rackRequest
	return r
}

func (r ApiDcimRacksBulkPartialUpdateRequest) Execute() ([]Rack, *http.Response, error) {
	return r.ApiService.DcimRacksBulkPartialUpdateExecute(r)
}

/*
DcimRacksBulkPartialUpdate Method for DcimRacksBulkPartialUpdate

Patch a list of rack objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRacksBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRacksBulkPartialUpdate(ctx context.Context) ApiDcimRacksBulkPartialUpdateRequest {
	return ApiDcimRacksBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Rack
func (a *DcimAPIService) DcimRacksBulkPartialUpdateExecute(r ApiDcimRacksBulkPartialUpdateRequest) ([]Rack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRequest == nil {
		return localVarReturnValue, nil, reportError("rackRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksBulkUpdateRequest struct {
	ctx         context.Context
	ApiService  *DcimAPIService
	rackRequest *[]RackRequest
}

func (r ApiDcimRacksBulkUpdateRequest) RackRequest(rackRequest []RackRequest) ApiDcimRacksBulkUpdateRequest {
	r.rackRequest = &rackRequest
	return r
}

func (r ApiDcimRacksBulkUpdateRequest) Execute() ([]Rack, *http.Response, error) {
	return r.ApiService.DcimRacksBulkUpdateExecute(r)
}

/*
DcimRacksBulkUpdate Method for DcimRacksBulkUpdate

Put a list of rack objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRacksBulkUpdateRequest
*/
func (a *DcimAPIService) DcimRacksBulkUpdate(ctx context.Context) ApiDcimRacksBulkUpdateRequest {
	return ApiDcimRacksBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Rack
func (a *DcimAPIService) DcimRacksBulkUpdateExecute(r ApiDcimRacksBulkUpdateRequest) ([]Rack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRequest == nil {
		return localVarReturnValue, nil, reportError("rackRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksCreateRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	writableRackRequest *WritableRackRequest
}

func (r ApiDcimRacksCreateRequest) WritableRackRequest(writableRackRequest WritableRackRequest) ApiDcimRacksCreateRequest {
	r.writableRackRequest = &writableRackRequest
	return r
}

func (r ApiDcimRacksCreateRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksCreateExecute(r)
}

/*
DcimRacksCreate Method for DcimRacksCreate

Post a list of rack objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRacksCreateRequest
*/
func (a *DcimAPIService) DcimRacksCreate(ctx context.Context) ApiDcimRacksCreateRequest {
	return ApiDcimRacksCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Rack
func (a *DcimAPIService) DcimRacksCreateExecute(r ApiDcimRacksCreateRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRackRequest == nil {
		return localVarReturnValue, nil, reportError("writableRackRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRackRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRacksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRacksDestroyExecute(r)
}

/*
DcimRacksDestroy Method for DcimRacksDestroy

Delete a rack object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack.
	@return ApiDcimRacksDestroyRequest
*/
func (a *DcimAPIService) DcimRacksDestroy(ctx context.Context, id int32) ApiDcimRacksDestroyRequest {
	return ApiDcimRacksDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRacksDestroyExecute(r ApiDcimRacksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRacksElevationRetrieveRequest struct {
	ctx           context.Context
	ApiService    *DcimAPIService
	id            int32
	exclude       *int32
	expandDevices *bool
	face          *DcimRacksElevationRetrieveFaceParameter
	includeImages *bool
	legendWidth   *int32
	limit         *int32
	marginWidth   *int32
	offset        *int32
	q             *string
	render        *DcimRacksElevationRetrieveRenderParameter
	unitHeight    *int32
	unitWidth     *int32
}

func (r ApiDcimRacksElevationRetrieveRequest) Exclude(exclude int32) ApiDcimRacksElevationRetrieveRequest {
	r.exclude = &exclude
	return r
}

func (r ApiDcimRacksElevationRetrieveRequest) ExpandDevices(expandDevices bool) ApiDcimRacksElevationRetrieveRequest {
	r.expandDevices = &expandDevices
	return r
}

// * &#x60;front&#x60; - Front * &#x60;rear&#x60; - Rear
func (r ApiDcimRacksElevationRetrieveRequest) Face(face DcimRacksElevationRetrieveFaceParameter) ApiDcimRacksElevationRetrieveRequest {
	r.face = &face
	return r
}

func (r ApiDcimRacksElevationRetrieveRequest) IncludeImages(includeImages bool) ApiDcimRacksElevationRetrieveRequest {
	r.includeImages = &includeImages
	return r
}

func (r ApiDcimRacksElevationRetrieveRequest) LegendWidth(legendWidth int32) ApiDcimRacksElevationRetrieveRequest {
	r.legendWidth = &legendWidth
	return r
}

// Number of results to return per page.
func (r ApiDcimRacksElevationRetrieveRequest) Limit(limit int32) ApiDcimRacksElevationRetrieveRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRacksElevationRetrieveRequest) MarginWidth(marginWidth int32) ApiDcimRacksElevationRetrieveRequest {
	r.marginWidth = &marginWidth
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRacksElevationRetrieveRequest) Offset(offset int32) ApiDcimRacksElevationRetrieveRequest {
	r.offset = &offset
	return r
}

func (r ApiDcimRacksElevationRetrieveRequest) Q(q string) ApiDcimRacksElevationRetrieveRequest {
	r.q = &q
	return r
}

// * &#x60;json&#x60; - json * &#x60;svg&#x60; - svg
func (r ApiDcimRacksElevationRetrieveRequest) Render(render DcimRacksElevationRetrieveRenderParameter) ApiDcimRacksElevationRetrieveRequest {
	r.render = &render
	return r
}

func (r ApiDcimRacksElevationRetrieveRequest) UnitHeight(unitHeight int32) ApiDcimRacksElevationRetrieveRequest {
	r.unitHeight = &unitHeight
	return r
}

func (r ApiDcimRacksElevationRetrieveRequest) UnitWidth(unitWidth int32) ApiDcimRacksElevationRetrieveRequest {
	r.unitWidth = &unitWidth
	return r
}

func (r ApiDcimRacksElevationRetrieveRequest) Execute() (*PaginatedRackUnitList, *http.Response, error) {
	return r.ApiService.DcimRacksElevationRetrieveExecute(r)
}

/*
DcimRacksElevationRetrieve Method for DcimRacksElevationRetrieve

Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack.
	@return ApiDcimRacksElevationRetrieveRequest
*/
func (a *DcimAPIService) DcimRacksElevationRetrieve(ctx context.Context, id int32) ApiDcimRacksElevationRetrieveRequest {
	return ApiDcimRacksElevationRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PaginatedRackUnitList
func (a *DcimAPIService) DcimRacksElevationRetrieveExecute(r ApiDcimRacksElevationRetrieveRequest) (*PaginatedRackUnitList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRackUnitList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksElevationRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/{id}/elevation/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.exclude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude", r.exclude, "")
	}
	if r.expandDevices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expand_devices", r.expandDevices, "")
	} else {
		var defaultValue bool = true
		r.expandDevices = &defaultValue
	}
	if r.face != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "face", r.face, "")
	} else {
		var defaultValue DcimRacksElevationRetrieveFaceParameter = "front"
		r.face = &defaultValue
	}
	if r.includeImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_images", r.includeImages, "")
	} else {
		var defaultValue bool = true
		r.includeImages = &defaultValue
	}
	if r.legendWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "legend_width", r.legendWidth, "")
	} else {
		var defaultValue int32 = 30
		r.legendWidth = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.marginWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "margin_width", r.marginWidth, "")
	} else {
		var defaultValue int32 = 15
		r.marginWidth = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.render != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "render", r.render, "")
	} else {
		var defaultValue DcimRacksElevationRetrieveRenderParameter = "json"
		r.render = &defaultValue
	}
	if r.unitHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unit_height", r.unitHeight, "")
	}
	if r.unitWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unit_width", r.unitWidth, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksListRequest struct {
	ctx                context.Context
	ApiService         *DcimAPIService
	assetTag           *[]string
	assetTagEmpty      *bool
	assetTagIc         *[]string
	assetTagIe         *[]string
	assetTagIew        *[]string
	assetTagIsw        *[]string
	assetTagN          *[]string
	assetTagNic        *[]string
	assetTagNie        *[]string
	assetTagNiew       *[]string
	assetTagNisw       *[]string
	contact            *[]int32
	contactN           *[]int32
	contactGroup       *[]string
	contactGroupN      *[]string
	contactRole        *[]int32
	contactRoleN       *[]int32
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	descUnits          *bool
	description        *[]string
	descriptionEmpty   *bool
	descriptionIc      *[]string
	descriptionIe      *[]string
	descriptionIew     *[]string
	descriptionIsw     *[]string
	descriptionN       *[]string
	descriptionNic     *[]string
	descriptionNie     *[]string
	descriptionNiew    *[]string
	descriptionNisw    *[]string
	facilityId         *[]string
	facilityIdEmpty    *bool
	facilityIdIc       *[]string
	facilityIdIe       *[]string
	facilityIdIew      *[]string
	facilityIdIsw      *[]string
	facilityIdN        *[]string
	facilityIdNic      *[]string
	facilityIdNie      *[]string
	facilityIdNiew     *[]string
	facilityIdNisw     *[]string
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	location           *[]string
	locationN          *[]string
	locationId         *[]string
	locationIdN        *[]string
	maxWeight          *[]int32
	maxWeightEmpty     *bool
	maxWeightGt        *[]int32
	maxWeightGte       *[]int32
	maxWeightLt        *[]int32
	maxWeightLte       *[]int32
	maxWeightN         *[]int32
	modifiedByRequest  *string
	mountingDepth      *[]int32
	mountingDepthEmpty *bool
	mountingDepthGt    *[]int32
	mountingDepthGte   *[]int32
	mountingDepthLt    *[]int32
	mountingDepthLte   *[]int32
	mountingDepthN     *[]int32
	name               *[]string
	nameEmpty          *bool
	nameIc             *[]string
	nameIe             *[]string
	nameIew            *[]string
	nameIsw            *[]string
	nameN              *[]string
	nameNic            *[]string
	nameNie            *[]string
	nameNiew           *[]string
	nameNisw           *[]string
	offset             *int32
	ordering           *string
	outerDepth         *[]int32
	outerDepthEmpty    *bool
	outerDepthGt       *[]int32
	outerDepthGte      *[]int32
	outerDepthLt       *[]int32
	outerDepthLte      *[]int32
	outerDepthN        *[]int32
	outerUnit          *DcimRacksListOuterUnitParameter
	outerUnitN         *DcimRacksListOuterUnitParameter
	outerWidth         *[]int32
	outerWidthEmpty    *bool
	outerWidthGt       *[]int32
	outerWidthGte      *[]int32
	outerWidthLt       *[]int32
	outerWidthLte      *[]int32
	outerWidthN        *[]int32
	q                  *string
	region             *[]string
	regionN            *[]string
	regionId           *[]string
	regionIdN          *[]string
	role               *[]string
	roleN              *[]string
	roleId             *[]*int32
	roleIdN            *[]*int32
	serial             *[]string
	serialEmpty        *bool
	serialIc           *[]string
	serialIe           *[]string
	serialIew          *[]string
	serialIsw          *[]string
	serialN            *[]string
	serialNic          *[]string
	serialNie          *[]string
	serialNiew         *[]string
	serialNisw         *[]string
	site               *[]string
	siteN              *[]string
	siteGroup          *[]string
	siteGroupN         *[]string
	siteGroupId        *[]string
	siteGroupIdN       *[]string
	siteId             *[]int32
	siteIdN            *[]int32
	startingUnit       *[]int32
	startingUnitEmpty  *bool
	startingUnitGt     *[]int32
	startingUnitGte    *[]int32
	startingUnitLt     *[]int32
	startingUnitLte    *[]int32
	startingUnitN      *[]int32
	status             *[]string
	statusN            *[]string
	tag                *[]string
	tagN               *[]string
	tenant             *[]string
	tenantN            *[]string
	tenantGroup        *[]string
	tenantGroupN       *[]string
	tenantGroupId      *[]string
	tenantGroupIdN     *[]string
	tenantId           *[]*int32
	tenantIdN          *[]*int32
	type_              *[]string
	typeN              *[]string
	uHeight            *[]int32
	uHeightEmpty       *bool
	uHeightGt          *[]int32
	uHeightGte         *[]int32
	uHeightLt          *[]int32
	uHeightLte         *[]int32
	uHeightN           *[]int32
	updatedByRequest   *string
	weight             *[]float64
	weightEmpty        *bool
	weightGt           *[]float64
	weightGte          *[]float64
	weightLt           *[]float64
	weightLte          *[]float64
	weightN            *[]float64
	weightUnit         *DcimDeviceTypesListWeightUnitParameter
	weightUnitN        *DcimDeviceTypesListWeightUnitParameter
	width              *[]int32
	widthN             *[]int32
}

func (r ApiDcimRacksListRequest) AssetTag(assetTag []string) ApiDcimRacksListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiDcimRacksListRequest) AssetTagEmpty(assetTagEmpty bool) ApiDcimRacksListRequest {
	r.assetTagEmpty = &assetTagEmpty
	return r
}

func (r ApiDcimRacksListRequest) AssetTagIc(assetTagIc []string) ApiDcimRacksListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiDcimRacksListRequest) AssetTagIe(assetTagIe []string) ApiDcimRacksListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiDcimRacksListRequest) AssetTagIew(assetTagIew []string) ApiDcimRacksListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiDcimRacksListRequest) AssetTagIsw(assetTagIsw []string) ApiDcimRacksListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiDcimRacksListRequest) AssetTagN(assetTagN []string) ApiDcimRacksListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNic(assetTagNic []string) ApiDcimRacksListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNie(assetTagNie []string) ApiDcimRacksListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNiew(assetTagNiew []string) ApiDcimRacksListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNisw(assetTagNisw []string) ApiDcimRacksListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

// Contact
func (r ApiDcimRacksListRequest) Contact(contact []int32) ApiDcimRacksListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiDcimRacksListRequest) ContactN(contactN []int32) ApiDcimRacksListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiDcimRacksListRequest) ContactGroup(contactGroup []string) ApiDcimRacksListRequest {
	r.contactGroup = &contactGroup
	return r
}

func (r ApiDcimRacksListRequest) ContactGroupN(contactGroupN []string) ApiDcimRacksListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiDcimRacksListRequest) ContactRole(contactRole []int32) ApiDcimRacksListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiDcimRacksListRequest) ContactRoleN(contactRoleN []int32) ApiDcimRacksListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiDcimRacksListRequest) Created(created []time.Time) ApiDcimRacksListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRacksListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimRacksListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimRacksListRequest) CreatedGt(createdGt []time.Time) ApiDcimRacksListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimRacksListRequest) CreatedGte(createdGte []time.Time) ApiDcimRacksListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRacksListRequest) CreatedLt(createdLt []time.Time) ApiDcimRacksListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimRacksListRequest) CreatedLte(createdLte []time.Time) ApiDcimRacksListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRacksListRequest) CreatedN(createdN []time.Time) ApiDcimRacksListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimRacksListRequest) CreatedByRequest(createdByRequest string) ApiDcimRacksListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimRacksListRequest) DescUnits(descUnits bool) ApiDcimRacksListRequest {
	r.descUnits = &descUnits
	return r
}

func (r ApiDcimRacksListRequest) Description(description []string) ApiDcimRacksListRequest {
	r.description = &description
	return r
}

func (r ApiDcimRacksListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimRacksListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimRacksListRequest) DescriptionIc(descriptionIc []string) ApiDcimRacksListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimRacksListRequest) DescriptionIe(descriptionIe []string) ApiDcimRacksListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimRacksListRequest) DescriptionIew(descriptionIew []string) ApiDcimRacksListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimRacksListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimRacksListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimRacksListRequest) DescriptionN(descriptionN []string) ApiDcimRacksListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimRacksListRequest) DescriptionNic(descriptionNic []string) ApiDcimRacksListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimRacksListRequest) DescriptionNie(descriptionNie []string) ApiDcimRacksListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimRacksListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimRacksListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimRacksListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimRacksListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimRacksListRequest) FacilityId(facilityId []string) ApiDcimRacksListRequest {
	r.facilityId = &facilityId
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdEmpty(facilityIdEmpty bool) ApiDcimRacksListRequest {
	r.facilityIdEmpty = &facilityIdEmpty
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdIc(facilityIdIc []string) ApiDcimRacksListRequest {
	r.facilityIdIc = &facilityIdIc
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdIe(facilityIdIe []string) ApiDcimRacksListRequest {
	r.facilityIdIe = &facilityIdIe
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdIew(facilityIdIew []string) ApiDcimRacksListRequest {
	r.facilityIdIew = &facilityIdIew
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdIsw(facilityIdIsw []string) ApiDcimRacksListRequest {
	r.facilityIdIsw = &facilityIdIsw
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdN(facilityIdN []string) ApiDcimRacksListRequest {
	r.facilityIdN = &facilityIdN
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNic(facilityIdNic []string) ApiDcimRacksListRequest {
	r.facilityIdNic = &facilityIdNic
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNie(facilityIdNie []string) ApiDcimRacksListRequest {
	r.facilityIdNie = &facilityIdNie
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNiew(facilityIdNiew []string) ApiDcimRacksListRequest {
	r.facilityIdNiew = &facilityIdNiew
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNisw(facilityIdNisw []string) ApiDcimRacksListRequest {
	r.facilityIdNisw = &facilityIdNisw
	return r
}

func (r ApiDcimRacksListRequest) Id(id []int32) ApiDcimRacksListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRacksListRequest) IdEmpty(idEmpty bool) ApiDcimRacksListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimRacksListRequest) IdGt(idGt []int32) ApiDcimRacksListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimRacksListRequest) IdGte(idGte []int32) ApiDcimRacksListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimRacksListRequest) IdLt(idLt []int32) ApiDcimRacksListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimRacksListRequest) IdLte(idLte []int32) ApiDcimRacksListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimRacksListRequest) IdN(idN []int32) ApiDcimRacksListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRacksListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimRacksListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRacksListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimRacksListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimRacksListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimRacksListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimRacksListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimRacksListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRacksListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimRacksListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimRacksListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimRacksListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimRacksListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimRacksListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimRacksListRequest) Limit(limit int32) ApiDcimRacksListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRacksListRequest) Location(location []string) ApiDcimRacksListRequest {
	r.location = &location
	return r
}

func (r ApiDcimRacksListRequest) LocationN(locationN []string) ApiDcimRacksListRequest {
	r.locationN = &locationN
	return r
}

func (r ApiDcimRacksListRequest) LocationId(locationId []string) ApiDcimRacksListRequest {
	r.locationId = &locationId
	return r
}

func (r ApiDcimRacksListRequest) LocationIdN(locationIdN []string) ApiDcimRacksListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimRacksListRequest) MaxWeight(maxWeight []int32) ApiDcimRacksListRequest {
	r.maxWeight = &maxWeight
	return r
}

func (r ApiDcimRacksListRequest) MaxWeightEmpty(maxWeightEmpty bool) ApiDcimRacksListRequest {
	r.maxWeightEmpty = &maxWeightEmpty
	return r
}

func (r ApiDcimRacksListRequest) MaxWeightGt(maxWeightGt []int32) ApiDcimRacksListRequest {
	r.maxWeightGt = &maxWeightGt
	return r
}

func (r ApiDcimRacksListRequest) MaxWeightGte(maxWeightGte []int32) ApiDcimRacksListRequest {
	r.maxWeightGte = &maxWeightGte
	return r
}

func (r ApiDcimRacksListRequest) MaxWeightLt(maxWeightLt []int32) ApiDcimRacksListRequest {
	r.maxWeightLt = &maxWeightLt
	return r
}

func (r ApiDcimRacksListRequest) MaxWeightLte(maxWeightLte []int32) ApiDcimRacksListRequest {
	r.maxWeightLte = &maxWeightLte
	return r
}

func (r ApiDcimRacksListRequest) MaxWeightN(maxWeightN []int32) ApiDcimRacksListRequest {
	r.maxWeightN = &maxWeightN
	return r
}

func (r ApiDcimRacksListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimRacksListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimRacksListRequest) MountingDepth(mountingDepth []int32) ApiDcimRacksListRequest {
	r.mountingDepth = &mountingDepth
	return r
}

func (r ApiDcimRacksListRequest) MountingDepthEmpty(mountingDepthEmpty bool) ApiDcimRacksListRequest {
	r.mountingDepthEmpty = &mountingDepthEmpty
	return r
}

func (r ApiDcimRacksListRequest) MountingDepthGt(mountingDepthGt []int32) ApiDcimRacksListRequest {
	r.mountingDepthGt = &mountingDepthGt
	return r
}

func (r ApiDcimRacksListRequest) MountingDepthGte(mountingDepthGte []int32) ApiDcimRacksListRequest {
	r.mountingDepthGte = &mountingDepthGte
	return r
}

func (r ApiDcimRacksListRequest) MountingDepthLt(mountingDepthLt []int32) ApiDcimRacksListRequest {
	r.mountingDepthLt = &mountingDepthLt
	return r
}

func (r ApiDcimRacksListRequest) MountingDepthLte(mountingDepthLte []int32) ApiDcimRacksListRequest {
	r.mountingDepthLte = &mountingDepthLte
	return r
}

func (r ApiDcimRacksListRequest) MountingDepthN(mountingDepthN []int32) ApiDcimRacksListRequest {
	r.mountingDepthN = &mountingDepthN
	return r
}

func (r ApiDcimRacksListRequest) Name(name []string) ApiDcimRacksListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRacksListRequest) NameEmpty(nameEmpty bool) ApiDcimRacksListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimRacksListRequest) NameIc(nameIc []string) ApiDcimRacksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRacksListRequest) NameIe(nameIe []string) ApiDcimRacksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRacksListRequest) NameIew(nameIew []string) ApiDcimRacksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRacksListRequest) NameIsw(nameIsw []string) ApiDcimRacksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRacksListRequest) NameN(nameN []string) ApiDcimRacksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRacksListRequest) NameNic(nameNic []string) ApiDcimRacksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRacksListRequest) NameNie(nameNie []string) ApiDcimRacksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRacksListRequest) NameNiew(nameNiew []string) ApiDcimRacksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRacksListRequest) NameNisw(nameNisw []string) ApiDcimRacksListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRacksListRequest) Offset(offset int32) ApiDcimRacksListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimRacksListRequest) Ordering(ordering string) ApiDcimRacksListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimRacksListRequest) OuterDepth(outerDepth []int32) ApiDcimRacksListRequest {
	r.outerDepth = &outerDepth
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthEmpty(outerDepthEmpty bool) ApiDcimRacksListRequest {
	r.outerDepthEmpty = &outerDepthEmpty
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthGt(outerDepthGt []int32) ApiDcimRacksListRequest {
	r.outerDepthGt = &outerDepthGt
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthGte(outerDepthGte []int32) ApiDcimRacksListRequest {
	r.outerDepthGte = &outerDepthGte
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthLt(outerDepthLt []int32) ApiDcimRacksListRequest {
	r.outerDepthLt = &outerDepthLt
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthLte(outerDepthLte []int32) ApiDcimRacksListRequest {
	r.outerDepthLte = &outerDepthLte
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthN(outerDepthN []int32) ApiDcimRacksListRequest {
	r.outerDepthN = &outerDepthN
	return r
}

// * &#x60;mm&#x60; - Millimeters * &#x60;in&#x60; - Inches
func (r ApiDcimRacksListRequest) OuterUnit(outerUnit DcimRacksListOuterUnitParameter) ApiDcimRacksListRequest {
	r.outerUnit = &outerUnit
	return r
}

// * &#x60;mm&#x60; - Millimeters * &#x60;in&#x60; - Inches
func (r ApiDcimRacksListRequest) OuterUnitN(outerUnitN DcimRacksListOuterUnitParameter) ApiDcimRacksListRequest {
	r.outerUnitN = &outerUnitN
	return r
}

func (r ApiDcimRacksListRequest) OuterWidth(outerWidth []int32) ApiDcimRacksListRequest {
	r.outerWidth = &outerWidth
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthEmpty(outerWidthEmpty bool) ApiDcimRacksListRequest {
	r.outerWidthEmpty = &outerWidthEmpty
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthGt(outerWidthGt []int32) ApiDcimRacksListRequest {
	r.outerWidthGt = &outerWidthGt
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthGte(outerWidthGte []int32) ApiDcimRacksListRequest {
	r.outerWidthGte = &outerWidthGte
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthLt(outerWidthLt []int32) ApiDcimRacksListRequest {
	r.outerWidthLt = &outerWidthLt
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthLte(outerWidthLte []int32) ApiDcimRacksListRequest {
	r.outerWidthLte = &outerWidthLte
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthN(outerWidthN []int32) ApiDcimRacksListRequest {
	r.outerWidthN = &outerWidthN
	return r
}

// Search
func (r ApiDcimRacksListRequest) Q(q string) ApiDcimRacksListRequest {
	r.q = &q
	return r
}

func (r ApiDcimRacksListRequest) Region(region []string) ApiDcimRacksListRequest {
	r.region = &region
	return r
}

func (r ApiDcimRacksListRequest) RegionN(regionN []string) ApiDcimRacksListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimRacksListRequest) RegionId(regionId []string) ApiDcimRacksListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimRacksListRequest) RegionIdN(regionIdN []string) ApiDcimRacksListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiDcimRacksListRequest) Role(role []string) ApiDcimRacksListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiDcimRacksListRequest) RoleN(roleN []string) ApiDcimRacksListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiDcimRacksListRequest) RoleId(roleId []*int32) ApiDcimRacksListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiDcimRacksListRequest) RoleIdN(roleIdN []*int32) ApiDcimRacksListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiDcimRacksListRequest) Serial(serial []string) ApiDcimRacksListRequest {
	r.serial = &serial
	return r
}

func (r ApiDcimRacksListRequest) SerialEmpty(serialEmpty bool) ApiDcimRacksListRequest {
	r.serialEmpty = &serialEmpty
	return r
}

func (r ApiDcimRacksListRequest) SerialIc(serialIc []string) ApiDcimRacksListRequest {
	r.serialIc = &serialIc
	return r
}

func (r ApiDcimRacksListRequest) SerialIe(serialIe []string) ApiDcimRacksListRequest {
	r.serialIe = &serialIe
	return r
}

func (r ApiDcimRacksListRequest) SerialIew(serialIew []string) ApiDcimRacksListRequest {
	r.serialIew = &serialIew
	return r
}

func (r ApiDcimRacksListRequest) SerialIsw(serialIsw []string) ApiDcimRacksListRequest {
	r.serialIsw = &serialIsw
	return r
}

func (r ApiDcimRacksListRequest) SerialN(serialN []string) ApiDcimRacksListRequest {
	r.serialN = &serialN
	return r
}

func (r ApiDcimRacksListRequest) SerialNic(serialNic []string) ApiDcimRacksListRequest {
	r.serialNic = &serialNic
	return r
}

func (r ApiDcimRacksListRequest) SerialNie(serialNie []string) ApiDcimRacksListRequest {
	r.serialNie = &serialNie
	return r
}

func (r ApiDcimRacksListRequest) SerialNiew(serialNiew []string) ApiDcimRacksListRequest {
	r.serialNiew = &serialNiew
	return r
}

func (r ApiDcimRacksListRequest) SerialNisw(serialNisw []string) ApiDcimRacksListRequest {
	r.serialNisw = &serialNisw
	return r
}

// Site (slug)
func (r ApiDcimRacksListRequest) Site(site []string) ApiDcimRacksListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiDcimRacksListRequest) SiteN(siteN []string) ApiDcimRacksListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimRacksListRequest) SiteGroup(siteGroup []string) ApiDcimRacksListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimRacksListRequest) SiteGroupN(siteGroupN []string) ApiDcimRacksListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimRacksListRequest) SiteGroupId(siteGroupId []string) ApiDcimRacksListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimRacksListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimRacksListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimRacksListRequest) SiteId(siteId []int32) ApiDcimRacksListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimRacksListRequest) SiteIdN(siteIdN []int32) ApiDcimRacksListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimRacksListRequest) StartingUnit(startingUnit []int32) ApiDcimRacksListRequest {
	r.startingUnit = &startingUnit
	return r
}

func (r ApiDcimRacksListRequest) StartingUnitEmpty(startingUnitEmpty bool) ApiDcimRacksListRequest {
	r.startingUnitEmpty = &startingUnitEmpty
	return r
}

func (r ApiDcimRacksListRequest) StartingUnitGt(startingUnitGt []int32) ApiDcimRacksListRequest {
	r.startingUnitGt = &startingUnitGt
	return r
}

func (r ApiDcimRacksListRequest) StartingUnitGte(startingUnitGte []int32) ApiDcimRacksListRequest {
	r.startingUnitGte = &startingUnitGte
	return r
}

func (r ApiDcimRacksListRequest) StartingUnitLt(startingUnitLt []int32) ApiDcimRacksListRequest {
	r.startingUnitLt = &startingUnitLt
	return r
}

func (r ApiDcimRacksListRequest) StartingUnitLte(startingUnitLte []int32) ApiDcimRacksListRequest {
	r.startingUnitLte = &startingUnitLte
	return r
}

func (r ApiDcimRacksListRequest) StartingUnitN(startingUnitN []int32) ApiDcimRacksListRequest {
	r.startingUnitN = &startingUnitN
	return r
}

func (r ApiDcimRacksListRequest) Status(status []string) ApiDcimRacksListRequest {
	r.status = &status
	return r
}

func (r ApiDcimRacksListRequest) StatusN(statusN []string) ApiDcimRacksListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimRacksListRequest) Tag(tag []string) ApiDcimRacksListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimRacksListRequest) TagN(tagN []string) ApiDcimRacksListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimRacksListRequest) Tenant(tenant []string) ApiDcimRacksListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimRacksListRequest) TenantN(tenantN []string) ApiDcimRacksListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiDcimRacksListRequest) TenantGroup(tenantGroup []string) ApiDcimRacksListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiDcimRacksListRequest) TenantGroupN(tenantGroupN []string) ApiDcimRacksListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiDcimRacksListRequest) TenantGroupId(tenantGroupId []string) ApiDcimRacksListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiDcimRacksListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimRacksListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimRacksListRequest) TenantId(tenantId []*int32) ApiDcimRacksListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimRacksListRequest) TenantIdN(tenantIdN []*int32) ApiDcimRacksListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimRacksListRequest) Type_(type_ []string) ApiDcimRacksListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimRacksListRequest) TypeN(typeN []string) ApiDcimRacksListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimRacksListRequest) UHeight(uHeight []int32) ApiDcimRacksListRequest {
	r.uHeight = &uHeight
	return r
}

func (r ApiDcimRacksListRequest) UHeightEmpty(uHeightEmpty bool) ApiDcimRacksListRequest {
	r.uHeightEmpty = &uHeightEmpty
	return r
}

func (r ApiDcimRacksListRequest) UHeightGt(uHeightGt []int32) ApiDcimRacksListRequest {
	r.uHeightGt = &uHeightGt
	return r
}

func (r ApiDcimRacksListRequest) UHeightGte(uHeightGte []int32) ApiDcimRacksListRequest {
	r.uHeightGte = &uHeightGte
	return r
}

func (r ApiDcimRacksListRequest) UHeightLt(uHeightLt []int32) ApiDcimRacksListRequest {
	r.uHeightLt = &uHeightLt
	return r
}

func (r ApiDcimRacksListRequest) UHeightLte(uHeightLte []int32) ApiDcimRacksListRequest {
	r.uHeightLte = &uHeightLte
	return r
}

func (r ApiDcimRacksListRequest) UHeightN(uHeightN []int32) ApiDcimRacksListRequest {
	r.uHeightN = &uHeightN
	return r
}

func (r ApiDcimRacksListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimRacksListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimRacksListRequest) Weight(weight []float64) ApiDcimRacksListRequest {
	r.weight = &weight
	return r
}

func (r ApiDcimRacksListRequest) WeightEmpty(weightEmpty bool) ApiDcimRacksListRequest {
	r.weightEmpty = &weightEmpty
	return r
}

func (r ApiDcimRacksListRequest) WeightGt(weightGt []float64) ApiDcimRacksListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiDcimRacksListRequest) WeightGte(weightGte []float64) ApiDcimRacksListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiDcimRacksListRequest) WeightLt(weightLt []float64) ApiDcimRacksListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiDcimRacksListRequest) WeightLte(weightLte []float64) ApiDcimRacksListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiDcimRacksListRequest) WeightN(weightN []float64) ApiDcimRacksListRequest {
	r.weightN = &weightN
	return r
}

// * &#x60;kg&#x60; - Kilograms * &#x60;g&#x60; - Grams * &#x60;lb&#x60; - Pounds * &#x60;oz&#x60; - Ounces
func (r ApiDcimRacksListRequest) WeightUnit(weightUnit DcimDeviceTypesListWeightUnitParameter) ApiDcimRacksListRequest {
	r.weightUnit = &weightUnit
	return r
}

// * &#x60;kg&#x60; - Kilograms * &#x60;g&#x60; - Grams * &#x60;lb&#x60; - Pounds * &#x60;oz&#x60; - Ounces
func (r ApiDcimRacksListRequest) WeightUnitN(weightUnitN DcimDeviceTypesListWeightUnitParameter) ApiDcimRacksListRequest {
	r.weightUnitN = &weightUnitN
	return r
}

// Rail-to-rail width
func (r ApiDcimRacksListRequest) Width(width []int32) ApiDcimRacksListRequest {
	r.width = &width
	return r
}

// Rail-to-rail width
func (r ApiDcimRacksListRequest) WidthN(widthN []int32) ApiDcimRacksListRequest {
	r.widthN = &widthN
	return r
}

func (r ApiDcimRacksListRequest) Execute() (*PaginatedRackList, *http.Response, error) {
	return r.ApiService.DcimRacksListExecute(r)
}

/*
DcimRacksList Method for DcimRacksList

Get a list of rack objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRacksListRequest
*/
func (a *DcimAPIService) DcimRacksList(ctx context.Context) ApiDcimRacksListRequest {
	return ApiDcimRacksListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRackList
func (a *DcimAPIService) DcimRacksListExecute(r ApiDcimRacksListRequest) (*PaginatedRackList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRackList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag", t, "multi")
		}
	}
	if r.assetTagEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__empty", r.assetTagEmpty, "")
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ic", t, "multi")
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__ie", t, "multi")
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__iew", t, "multi")
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__isw", t, "multi")
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__n", t, "multi")
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nic", t, "multi")
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nie", t, "multi")
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__niew", t, "multi")
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asset_tag__nisw", t, "multi")
		}
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.descUnits != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "desc_units", r.descUnits, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.facilityId != nil {
		t := *r.facilityId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id", t, "multi")
		}
	}
	if r.facilityIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__empty", r.facilityIdEmpty, "")
	}
	if r.facilityIdIc != nil {
		t := *r.facilityIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__ic", t, "multi")
		}
	}
	if r.facilityIdIe != nil {
		t := *r.facilityIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__ie", t, "multi")
		}
	}
	if r.facilityIdIew != nil {
		t := *r.facilityIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__iew", t, "multi")
		}
	}
	if r.facilityIdIsw != nil {
		t := *r.facilityIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__isw", t, "multi")
		}
	}
	if r.facilityIdN != nil {
		t := *r.facilityIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__n", t, "multi")
		}
	}
	if r.facilityIdNic != nil {
		t := *r.facilityIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__nic", t, "multi")
		}
	}
	if r.facilityIdNie != nil {
		t := *r.facilityIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__nie", t, "multi")
		}
	}
	if r.facilityIdNiew != nil {
		t := *r.facilityIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__niew", t, "multi")
		}
	}
	if r.facilityIdNisw != nil {
		t := *r.facilityIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility_id__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.maxWeight != nil {
		t := *r.maxWeight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight", t, "multi")
		}
	}
	if r.maxWeightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__empty", r.maxWeightEmpty, "")
	}
	if r.maxWeightGt != nil {
		t := *r.maxWeightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__gt", t, "multi")
		}
	}
	if r.maxWeightGte != nil {
		t := *r.maxWeightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__gte", t, "multi")
		}
	}
	if r.maxWeightLt != nil {
		t := *r.maxWeightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__lt", t, "multi")
		}
	}
	if r.maxWeightLte != nil {
		t := *r.maxWeightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__lte", t, "multi")
		}
	}
	if r.maxWeightN != nil {
		t := *r.maxWeightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "max_weight__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.mountingDepth != nil {
		t := *r.mountingDepth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth", t, "multi")
		}
	}
	if r.mountingDepthEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__empty", r.mountingDepthEmpty, "")
	}
	if r.mountingDepthGt != nil {
		t := *r.mountingDepthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__gt", t, "multi")
		}
	}
	if r.mountingDepthGte != nil {
		t := *r.mountingDepthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__gte", t, "multi")
		}
	}
	if r.mountingDepthLt != nil {
		t := *r.mountingDepthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__lt", t, "multi")
		}
	}
	if r.mountingDepthLte != nil {
		t := *r.mountingDepthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__lte", t, "multi")
		}
	}
	if r.mountingDepthN != nil {
		t := *r.mountingDepthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mounting_depth__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.outerDepth != nil {
		t := *r.outerDepth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth", t, "multi")
		}
	}
	if r.outerDepthEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__empty", r.outerDepthEmpty, "")
	}
	if r.outerDepthGt != nil {
		t := *r.outerDepthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__gt", t, "multi")
		}
	}
	if r.outerDepthGte != nil {
		t := *r.outerDepthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__gte", t, "multi")
		}
	}
	if r.outerDepthLt != nil {
		t := *r.outerDepthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__lt", t, "multi")
		}
	}
	if r.outerDepthLte != nil {
		t := *r.outerDepthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__lte", t, "multi")
		}
	}
	if r.outerDepthN != nil {
		t := *r.outerDepthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_depth__n", t, "multi")
		}
	}
	if r.outerUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outer_unit", r.outerUnit, "")
	}
	if r.outerUnitN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outer_unit__n", r.outerUnitN, "")
	}
	if r.outerWidth != nil {
		t := *r.outerWidth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width", t, "multi")
		}
	}
	if r.outerWidthEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__empty", r.outerWidthEmpty, "")
	}
	if r.outerWidthGt != nil {
		t := *r.outerWidthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__gt", t, "multi")
		}
	}
	if r.outerWidthGte != nil {
		t := *r.outerWidthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__gte", t, "multi")
		}
	}
	if r.outerWidthLt != nil {
		t := *r.outerWidthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__lt", t, "multi")
		}
	}
	if r.outerWidthLte != nil {
		t := *r.outerWidthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__lte", t, "multi")
		}
	}
	if r.outerWidthN != nil {
		t := *r.outerWidthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "outer_width__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", t, "multi")
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", t, "multi")
		}
	}
	if r.serial != nil {
		t := *r.serial
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial", t, "multi")
		}
	}
	if r.serialEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serial__empty", r.serialEmpty, "")
	}
	if r.serialIc != nil {
		t := *r.serialIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ic", t, "multi")
		}
	}
	if r.serialIe != nil {
		t := *r.serialIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__ie", t, "multi")
		}
	}
	if r.serialIew != nil {
		t := *r.serialIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__iew", t, "multi")
		}
	}
	if r.serialIsw != nil {
		t := *r.serialIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__isw", t, "multi")
		}
	}
	if r.serialN != nil {
		t := *r.serialN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__n", t, "multi")
		}
	}
	if r.serialNic != nil {
		t := *r.serialNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nic", t, "multi")
		}
	}
	if r.serialNie != nil {
		t := *r.serialNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nie", t, "multi")
		}
	}
	if r.serialNiew != nil {
		t := *r.serialNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__niew", t, "multi")
		}
	}
	if r.serialNisw != nil {
		t := *r.serialNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serial__nisw", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.startingUnit != nil {
		t := *r.startingUnit
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit", t, "multi")
		}
	}
	if r.startingUnitEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__empty", r.startingUnitEmpty, "")
	}
	if r.startingUnitGt != nil {
		t := *r.startingUnitGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__gt", t, "multi")
		}
	}
	if r.startingUnitGte != nil {
		t := *r.startingUnitGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__gte", t, "multi")
		}
	}
	if r.startingUnitLt != nil {
		t := *r.startingUnitLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__lt", t, "multi")
		}
	}
	if r.startingUnitLte != nil {
		t := *r.startingUnitLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__lte", t, "multi")
		}
	}
	if r.startingUnitN != nil {
		t := *r.startingUnitN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "starting_unit__n", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.uHeight != nil {
		t := *r.uHeight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height", t, "multi")
		}
	}
	if r.uHeightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__empty", r.uHeightEmpty, "")
	}
	if r.uHeightGt != nil {
		t := *r.uHeightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__gt", t, "multi")
		}
	}
	if r.uHeightGte != nil {
		t := *r.uHeightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__gte", t, "multi")
		}
	}
	if r.uHeightLt != nil {
		t := *r.uHeightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__lt", t, "multi")
		}
	}
	if r.uHeightLte != nil {
		t := *r.uHeightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__lte", t, "multi")
		}
	}
	if r.uHeightN != nil {
		t := *r.uHeightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "u_height__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "multi")
		}
	}
	if r.weightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight__empty", r.weightEmpty, "")
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "multi")
		}
	}
	if r.weightUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight_unit", r.weightUnit, "")
	}
	if r.weightUnitN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight_unit__n", r.weightUnitN, "")
	}
	if r.width != nil {
		t := *r.width
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "width", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "width", t, "multi")
		}
	}
	if r.widthN != nil {
		t := *r.widthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "width__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "width__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksPartialUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	id                         int32
	patchedWritableRackRequest *PatchedWritableRackRequest
}

func (r ApiDcimRacksPartialUpdateRequest) PatchedWritableRackRequest(patchedWritableRackRequest PatchedWritableRackRequest) ApiDcimRacksPartialUpdateRequest {
	r.patchedWritableRackRequest = &patchedWritableRackRequest
	return r
}

func (r ApiDcimRacksPartialUpdateRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksPartialUpdateExecute(r)
}

/*
DcimRacksPartialUpdate Method for DcimRacksPartialUpdate

Patch a rack object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack.
	@return ApiDcimRacksPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRacksPartialUpdate(ctx context.Context, id int32) ApiDcimRacksPartialUpdateRequest {
	return ApiDcimRacksPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Rack
func (a *DcimAPIService) DcimRacksPartialUpdateExecute(r ApiDcimRacksPartialUpdateRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRackRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRacksRetrieveRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksRetrieveExecute(r)
}

/*
DcimRacksRetrieve Method for DcimRacksRetrieve

Get a rack object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack.
	@return ApiDcimRacksRetrieveRequest
*/
func (a *DcimAPIService) DcimRacksRetrieve(ctx context.Context, id int32) ApiDcimRacksRetrieveRequest {
	return ApiDcimRacksRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Rack
func (a *DcimAPIService) DcimRacksRetrieveExecute(r ApiDcimRacksRetrieveRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksUpdateRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	id                  int32
	writableRackRequest *WritableRackRequest
}

func (r ApiDcimRacksUpdateRequest) WritableRackRequest(writableRackRequest WritableRackRequest) ApiDcimRacksUpdateRequest {
	r.writableRackRequest = &writableRackRequest
	return r
}

func (r ApiDcimRacksUpdateRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksUpdateExecute(r)
}

/*
DcimRacksUpdate Method for DcimRacksUpdate

Put a rack object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rack.
	@return ApiDcimRacksUpdateRequest
*/
func (a *DcimAPIService) DcimRacksUpdate(ctx context.Context, id int32) ApiDcimRacksUpdateRequest {
	return ApiDcimRacksUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Rack
func (a *DcimAPIService) DcimRacksUpdateExecute(r ApiDcimRacksUpdateRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRacksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/racks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRackRequest == nil {
		return localVarReturnValue, nil, reportError("writableRackRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRackRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesBulkDestroyRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	rearPortTemplateRequest *[]RearPortTemplateRequest
}

func (r ApiDcimRearPortTemplatesBulkDestroyRequest) RearPortTemplateRequest(rearPortTemplateRequest []RearPortTemplateRequest) ApiDcimRearPortTemplatesBulkDestroyRequest {
	r.rearPortTemplateRequest = &rearPortTemplateRequest
	return r
}

func (r ApiDcimRearPortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesBulkDestroyExecute(r)
}

/*
DcimRearPortTemplatesBulkDestroy Method for DcimRearPortTemplatesBulkDestroy

Delete a list of rear port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortTemplatesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimRearPortTemplatesBulkDestroy(ctx context.Context) ApiDcimRearPortTemplatesBulkDestroyRequest {
	return ApiDcimRearPortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRearPortTemplatesBulkDestroyExecute(r ApiDcimRearPortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rearPortTemplateRequest == nil {
		return nil, reportError("rearPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rearPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesBulkPartialUpdateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	rearPortTemplateRequest *[]RearPortTemplateRequest
}

func (r ApiDcimRearPortTemplatesBulkPartialUpdateRequest) RearPortTemplateRequest(rearPortTemplateRequest []RearPortTemplateRequest) ApiDcimRearPortTemplatesBulkPartialUpdateRequest {
	r.rearPortTemplateRequest = &rearPortTemplateRequest
	return r
}

func (r ApiDcimRearPortTemplatesBulkPartialUpdateRequest) Execute() ([]RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimRearPortTemplatesBulkPartialUpdate Method for DcimRearPortTemplatesBulkPartialUpdate

Patch a list of rear port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRearPortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimRearPortTemplatesBulkPartialUpdateRequest {
	return ApiDcimRearPortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RearPortTemplate
func (a *DcimAPIService) DcimRearPortTemplatesBulkPartialUpdateExecute(r ApiDcimRearPortTemplatesBulkPartialUpdateRequest) ([]RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rearPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("rearPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rearPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesBulkUpdateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	rearPortTemplateRequest *[]RearPortTemplateRequest
}

func (r ApiDcimRearPortTemplatesBulkUpdateRequest) RearPortTemplateRequest(rearPortTemplateRequest []RearPortTemplateRequest) ApiDcimRearPortTemplatesBulkUpdateRequest {
	r.rearPortTemplateRequest = &rearPortTemplateRequest
	return r
}

func (r ApiDcimRearPortTemplatesBulkUpdateRequest) Execute() ([]RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesBulkUpdateExecute(r)
}

/*
DcimRearPortTemplatesBulkUpdate Method for DcimRearPortTemplatesBulkUpdate

Put a list of rear port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortTemplatesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimRearPortTemplatesBulkUpdate(ctx context.Context) ApiDcimRearPortTemplatesBulkUpdateRequest {
	return ApiDcimRearPortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RearPortTemplate
func (a *DcimAPIService) DcimRearPortTemplatesBulkUpdateExecute(r ApiDcimRearPortTemplatesBulkUpdateRequest) ([]RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rearPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("rearPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rearPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesCreateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	writableRearPortTemplateRequest *WritableRearPortTemplateRequest
}

func (r ApiDcimRearPortTemplatesCreateRequest) WritableRearPortTemplateRequest(writableRearPortTemplateRequest WritableRearPortTemplateRequest) ApiDcimRearPortTemplatesCreateRequest {
	r.writableRearPortTemplateRequest = &writableRearPortTemplateRequest
	return r
}

func (r ApiDcimRearPortTemplatesCreateRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesCreateExecute(r)
}

/*
DcimRearPortTemplatesCreate Method for DcimRearPortTemplatesCreate

Post a list of rear port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortTemplatesCreateRequest
*/
func (a *DcimAPIService) DcimRearPortTemplatesCreate(ctx context.Context) ApiDcimRearPortTemplatesCreateRequest {
	return ApiDcimRearPortTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RearPortTemplate
func (a *DcimAPIService) DcimRearPortTemplatesCreateExecute(r ApiDcimRearPortTemplatesCreateRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableRearPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRearPortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesDestroyExecute(r)
}

/*
DcimRearPortTemplatesDestroy Method for DcimRearPortTemplatesDestroy

Delete a rear port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rear port template.
	@return ApiDcimRearPortTemplatesDestroyRequest
*/
func (a *DcimAPIService) DcimRearPortTemplatesDestroy(ctx context.Context, id int32) ApiDcimRearPortTemplatesDestroyRequest {
	return ApiDcimRearPortTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRearPortTemplatesDestroyExecute(r ApiDcimRearPortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	color             *[]string
	colorEmpty        *bool
	colorIc           *[]string
	colorIe           *[]string
	colorIew          *[]string
	colorIsw          *[]string
	colorN            *[]string
	colorNic          *[]string
	colorNie          *[]string
	colorNiew         *[]string
	colorNisw         *[]string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceTypeId      *[]*int32
	deviceTypeIdN     *[]*int32
	devicetypeId      *[]*int32
	devicetypeIdN     *[]*int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	moduleTypeId      *[]*int32
	moduleTypeIdN     *[]*int32
	moduletypeId      *[]*int32
	moduletypeIdN     *[]*int32
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	positions         *[]int32
	positionsEmpty    *bool
	positionsGt       *[]int32
	positionsGte      *[]int32
	positionsLt       *[]int32
	positionsLte      *[]int32
	positionsN        *[]int32
	q                 *string
	type_             *[]string
	typeN             *[]string
	updatedByRequest  *string
}

func (r ApiDcimRearPortTemplatesListRequest) Color(color []string) ApiDcimRearPortTemplatesListRequest {
	r.color = &color
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorEmpty(colorEmpty bool) ApiDcimRearPortTemplatesListRequest {
	r.colorEmpty = &colorEmpty
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorIc(colorIc []string) ApiDcimRearPortTemplatesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorIe(colorIe []string) ApiDcimRearPortTemplatesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorIew(colorIew []string) ApiDcimRearPortTemplatesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorIsw(colorIsw []string) ApiDcimRearPortTemplatesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorN(colorN []string) ApiDcimRearPortTemplatesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorNic(colorNic []string) ApiDcimRearPortTemplatesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorNie(colorNie []string) ApiDcimRearPortTemplatesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorNiew(colorNiew []string) ApiDcimRearPortTemplatesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ColorNisw(colorNisw []string) ApiDcimRearPortTemplatesListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Created(created []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) CreatedN(createdN []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiDcimRearPortTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Description(description []string) ApiDcimRearPortTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimRearPortTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiDcimRearPortTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiDcimRearPortTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiDcimRearPortTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimRearPortTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionN(descriptionN []string) ApiDcimRearPortTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiDcimRearPortTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiDcimRearPortTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimRearPortTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimRearPortTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device type (ID)
func (r ApiDcimRearPortTemplatesListRequest) DeviceTypeId(deviceTypeId []*int32) ApiDcimRearPortTemplatesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimRearPortTemplatesListRequest) DeviceTypeIdN(deviceTypeIdN []*int32) ApiDcimRearPortTemplatesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

// Device type (ID)
func (r ApiDcimRearPortTemplatesListRequest) DevicetypeId(devicetypeId []*int32) ApiDcimRearPortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimRearPortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []*int32) ApiDcimRearPortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Id(id []int32) ApiDcimRearPortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdEmpty(idEmpty bool) ApiDcimRearPortTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdGt(idGt []int32) ApiDcimRearPortTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdGte(idGte []int32) ApiDcimRearPortTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdLt(idLt []int32) ApiDcimRearPortTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdLte(idLte []int32) ApiDcimRearPortTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdN(idN []int32) ApiDcimRearPortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Label(label []string) ApiDcimRearPortTemplatesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelEmpty(labelEmpty bool) ApiDcimRearPortTemplatesListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelIc(labelIc []string) ApiDcimRearPortTemplatesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelIe(labelIe []string) ApiDcimRearPortTemplatesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelIew(labelIew []string) ApiDcimRearPortTemplatesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelIsw(labelIsw []string) ApiDcimRearPortTemplatesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelN(labelN []string) ApiDcimRearPortTemplatesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelNic(labelNic []string) ApiDcimRearPortTemplatesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelNie(labelNie []string) ApiDcimRearPortTemplatesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelNiew(labelNiew []string) ApiDcimRearPortTemplatesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LabelNisw(labelNisw []string) ApiDcimRearPortTemplatesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimRearPortTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimRearPortTemplatesListRequest) Limit(limit int32) ApiDcimRearPortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimRearPortTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module type (ID)
func (r ApiDcimRearPortTemplatesListRequest) ModuleTypeId(moduleTypeId []*int32) ApiDcimRearPortTemplatesListRequest {
	r.moduleTypeId = &moduleTypeId
	return r
}

// Module type (ID)
func (r ApiDcimRearPortTemplatesListRequest) ModuleTypeIdN(moduleTypeIdN []*int32) ApiDcimRearPortTemplatesListRequest {
	r.moduleTypeIdN = &moduleTypeIdN
	return r
}

// Module type (ID)
func (r ApiDcimRearPortTemplatesListRequest) ModuletypeId(moduletypeId []*int32) ApiDcimRearPortTemplatesListRequest {
	r.moduletypeId = &moduletypeId
	return r
}

// Module type (ID)
func (r ApiDcimRearPortTemplatesListRequest) ModuletypeIdN(moduletypeIdN []*int32) ApiDcimRearPortTemplatesListRequest {
	r.moduletypeIdN = &moduletypeIdN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Name(name []string) ApiDcimRearPortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameEmpty(nameEmpty bool) ApiDcimRearPortTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameIc(nameIc []string) ApiDcimRearPortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameIe(nameIe []string) ApiDcimRearPortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameIew(nameIew []string) ApiDcimRearPortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimRearPortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameN(nameN []string) ApiDcimRearPortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNic(nameNic []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNie(nameNie []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRearPortTemplatesListRequest) Offset(offset int32) ApiDcimRearPortTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimRearPortTemplatesListRequest) Ordering(ordering string) ApiDcimRearPortTemplatesListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Positions(positions []int32) ApiDcimRearPortTemplatesListRequest {
	r.positions = &positions
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsEmpty(positionsEmpty bool) ApiDcimRearPortTemplatesListRequest {
	r.positionsEmpty = &positionsEmpty
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsGt(positionsGt []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsGt = &positionsGt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsGte(positionsGte []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsGte = &positionsGte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsLt(positionsLt []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsLt = &positionsLt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsLte(positionsLte []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsLte = &positionsLte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsN(positionsN []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsN = &positionsN
	return r
}

// Search
func (r ApiDcimRearPortTemplatesListRequest) Q(q string) ApiDcimRearPortTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Type_(type_ []string) ApiDcimRearPortTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) TypeN(typeN []string) ApiDcimRearPortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimRearPortTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Execute() (*PaginatedRearPortTemplateList, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesListExecute(r)
}

/*
DcimRearPortTemplatesList Method for DcimRearPortTemplatesList

Get a list of rear port template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortTemplatesListRequest
*/
func (a *DcimAPIService) DcimRearPortTemplatesList(ctx context.Context) ApiDcimRearPortTemplatesListRequest {
	return ApiDcimRearPortTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRearPortTemplateList
func (a *DcimAPIService) DcimRearPortTemplatesListExecute(r ApiDcimRearPortTemplatesListRequest) (*PaginatedRearPortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRearPortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "multi")
		}
	}
	if r.colorEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "color__empty", r.colorEmpty, "")
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id", t, "multi")
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "devicetype_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleTypeId != nil {
		t := *r.moduleTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id", t, "multi")
		}
	}
	if r.moduleTypeIdN != nil {
		t := *r.moduleTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_type_id__n", t, "multi")
		}
	}
	if r.moduletypeId != nil {
		t := *r.moduletypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id", t, "multi")
		}
	}
	if r.moduletypeIdN != nil {
		t := *r.moduletypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "moduletype_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.positions != nil {
		t := *r.positions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions", t, "multi")
		}
	}
	if r.positionsEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "positions__empty", r.positionsEmpty, "")
	}
	if r.positionsGt != nil {
		t := *r.positionsGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__gt", t, "multi")
		}
	}
	if r.positionsGte != nil {
		t := *r.positionsGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__gte", t, "multi")
		}
	}
	if r.positionsLt != nil {
		t := *r.positionsLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__lt", t, "multi")
		}
	}
	if r.positionsLte != nil {
		t := *r.positionsLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__lte", t, "multi")
		}
	}
	if r.positionsN != nil {
		t := *r.positionsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesPartialUpdateRequest struct {
	ctx                                    context.Context
	ApiService                             *DcimAPIService
	id                                     int32
	patchedWritableRearPortTemplateRequest *PatchedWritableRearPortTemplateRequest
}

func (r ApiDcimRearPortTemplatesPartialUpdateRequest) PatchedWritableRearPortTemplateRequest(patchedWritableRearPortTemplateRequest PatchedWritableRearPortTemplateRequest) ApiDcimRearPortTemplatesPartialUpdateRequest {
	r.patchedWritableRearPortTemplateRequest = &patchedWritableRearPortTemplateRequest
	return r
}

func (r ApiDcimRearPortTemplatesPartialUpdateRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesPartialUpdateExecute(r)
}

/*
DcimRearPortTemplatesPartialUpdate Method for DcimRearPortTemplatesPartialUpdate

Patch a rear port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rear port template.
	@return ApiDcimRearPortTemplatesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRearPortTemplatesPartialUpdate(ctx context.Context, id int32) ApiDcimRearPortTemplatesPartialUpdateRequest {
	return ApiDcimRearPortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RearPortTemplate
func (a *DcimAPIService) DcimRearPortTemplatesPartialUpdateExecute(r ApiDcimRearPortTemplatesPartialUpdateRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRearPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRearPortTemplatesRetrieveRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesRetrieveExecute(r)
}

/*
DcimRearPortTemplatesRetrieve Method for DcimRearPortTemplatesRetrieve

Get a rear port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rear port template.
	@return ApiDcimRearPortTemplatesRetrieveRequest
*/
func (a *DcimAPIService) DcimRearPortTemplatesRetrieve(ctx context.Context, id int32) ApiDcimRearPortTemplatesRetrieveRequest {
	return ApiDcimRearPortTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RearPortTemplate
func (a *DcimAPIService) DcimRearPortTemplatesRetrieveExecute(r ApiDcimRearPortTemplatesRetrieveRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	id                              int32
	writableRearPortTemplateRequest *WritableRearPortTemplateRequest
}

func (r ApiDcimRearPortTemplatesUpdateRequest) WritableRearPortTemplateRequest(writableRearPortTemplateRequest WritableRearPortTemplateRequest) ApiDcimRearPortTemplatesUpdateRequest {
	r.writableRearPortTemplateRequest = &writableRearPortTemplateRequest
	return r
}

func (r ApiDcimRearPortTemplatesUpdateRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesUpdateExecute(r)
}

/*
DcimRearPortTemplatesUpdate Method for DcimRearPortTemplatesUpdate

Put a rear port template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rear port template.
	@return ApiDcimRearPortTemplatesUpdateRequest
*/
func (a *DcimAPIService) DcimRearPortTemplatesUpdate(ctx context.Context, id int32) ApiDcimRearPortTemplatesUpdateRequest {
	return ApiDcimRearPortTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RearPortTemplate
func (a *DcimAPIService) DcimRearPortTemplatesUpdateExecute(r ApiDcimRearPortTemplatesUpdateRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPortTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("writableRearPortTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPortTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsBulkDestroyRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	rearPortRequest *[]RearPortRequest
}

func (r ApiDcimRearPortsBulkDestroyRequest) RearPortRequest(rearPortRequest []RearPortRequest) ApiDcimRearPortsBulkDestroyRequest {
	r.rearPortRequest = &rearPortRequest
	return r
}

func (r ApiDcimRearPortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRearPortsBulkDestroyExecute(r)
}

/*
DcimRearPortsBulkDestroy Method for DcimRearPortsBulkDestroy

Delete a list of rear port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimRearPortsBulkDestroy(ctx context.Context) ApiDcimRearPortsBulkDestroyRequest {
	return ApiDcimRearPortsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRearPortsBulkDestroyExecute(r ApiDcimRearPortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rearPortRequest == nil {
		return nil, reportError("rearPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rearPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRearPortsBulkPartialUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	rearPortRequest *[]RearPortRequest
}

func (r ApiDcimRearPortsBulkPartialUpdateRequest) RearPortRequest(rearPortRequest []RearPortRequest) ApiDcimRearPortsBulkPartialUpdateRequest {
	r.rearPortRequest = &rearPortRequest
	return r
}

func (r ApiDcimRearPortsBulkPartialUpdateRequest) Execute() ([]RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsBulkPartialUpdateExecute(r)
}

/*
DcimRearPortsBulkPartialUpdate Method for DcimRearPortsBulkPartialUpdate

Patch a list of rear port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRearPortsBulkPartialUpdate(ctx context.Context) ApiDcimRearPortsBulkPartialUpdateRequest {
	return ApiDcimRearPortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RearPort
func (a *DcimAPIService) DcimRearPortsBulkPartialUpdateExecute(r ApiDcimRearPortsBulkPartialUpdateRequest) ([]RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rearPortRequest == nil {
		return localVarReturnValue, nil, reportError("rearPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rearPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsBulkUpdateRequest struct {
	ctx             context.Context
	ApiService      *DcimAPIService
	rearPortRequest *[]RearPortRequest
}

func (r ApiDcimRearPortsBulkUpdateRequest) RearPortRequest(rearPortRequest []RearPortRequest) ApiDcimRearPortsBulkUpdateRequest {
	r.rearPortRequest = &rearPortRequest
	return r
}

func (r ApiDcimRearPortsBulkUpdateRequest) Execute() ([]RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsBulkUpdateExecute(r)
}

/*
DcimRearPortsBulkUpdate Method for DcimRearPortsBulkUpdate

Put a list of rear port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimRearPortsBulkUpdate(ctx context.Context) ApiDcimRearPortsBulkUpdateRequest {
	return ApiDcimRearPortsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RearPort
func (a *DcimAPIService) DcimRearPortsBulkUpdateExecute(r ApiDcimRearPortsBulkUpdateRequest) ([]RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rearPortRequest == nil {
		return localVarReturnValue, nil, reportError("rearPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rearPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsCreateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	writableRearPortRequest *WritableRearPortRequest
}

func (r ApiDcimRearPortsCreateRequest) WritableRearPortRequest(writableRearPortRequest WritableRearPortRequest) ApiDcimRearPortsCreateRequest {
	r.writableRearPortRequest = &writableRearPortRequest
	return r
}

func (r ApiDcimRearPortsCreateRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsCreateExecute(r)
}

/*
DcimRearPortsCreate Method for DcimRearPortsCreate

Post a list of rear port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortsCreateRequest
*/
func (a *DcimAPIService) DcimRearPortsCreate(ctx context.Context) ApiDcimRearPortsCreateRequest {
	return ApiDcimRearPortsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return RearPort
func (a *DcimAPIService) DcimRearPortsCreateExecute(r ApiDcimRearPortsCreateRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPortRequest == nil {
		return localVarReturnValue, nil, reportError("writableRearPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRearPortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRearPortsDestroyExecute(r)
}

/*
DcimRearPortsDestroy Method for DcimRearPortsDestroy

Delete a rear port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rear port.
	@return ApiDcimRearPortsDestroyRequest
*/
func (a *DcimAPIService) DcimRearPortsDestroy(ctx context.Context, id int32) ApiDcimRearPortsDestroyRequest {
	return ApiDcimRearPortsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRearPortsDestroyExecute(r ApiDcimRearPortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRearPortsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	cableEnd          *CircuitsCircuitTerminationsListCableEndParameter
	cableEndN         *CircuitsCircuitTerminationsListCableEndParameter
	cableId           *[]*int32
	cableIdN          *[]*int32
	cabled            *bool
	color             *[]string
	colorEmpty        *bool
	colorIc           *[]string
	colorIe           *[]string
	colorIew          *[]string
	colorIsw          *[]string
	colorN            *[]string
	colorNic          *[]string
	colorNie          *[]string
	colorNiew         *[]string
	colorNisw         *[]string
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]*string
	deviceN           *[]*string
	deviceId          *[]int32
	deviceIdN         *[]int32
	deviceRole        *[]string
	deviceRoleN       *[]string
	deviceRoleId      *[]int32
	deviceRoleIdN     *[]int32
	deviceStatus      *[]string
	deviceStatusN     *[]string
	deviceType        *[]string
	deviceTypeN       *[]string
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	label             *[]string
	labelEmpty        *bool
	labelIc           *[]string
	labelIe           *[]string
	labelIew          *[]string
	labelIsw          *[]string
	labelN            *[]string
	labelNic          *[]string
	labelNie          *[]string
	labelNiew         *[]string
	labelNisw         *[]string
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	location          *[]string
	locationN         *[]string
	locationId        *[]int32
	locationIdN       *[]int32
	markConnected     *bool
	modifiedByRequest *string
	moduleId          *[]*int32
	moduleIdN         *[]*int32
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	occupied          *bool
	offset            *int32
	ordering          *string
	positions         *[]int32
	positionsEmpty    *bool
	positionsGt       *[]int32
	positionsGte      *[]int32
	positionsLt       *[]int32
	positionsLte      *[]int32
	positionsN        *[]int32
	q                 *string
	rack              *[]string
	rackN             *[]string
	rackId            *[]int32
	rackIdN           *[]int32
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]string
	siteGroupIdN      *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	tag               *[]string
	tagN              *[]string
	type_             *[]string
	typeN             *[]string
	updatedByRequest  *string
	virtualChassis    *[]string
	virtualChassisN   *[]string
	virtualChassisId  *[]int32
	virtualChassisIdN *[]int32
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimRearPortsListRequest) CableEnd(cableEnd CircuitsCircuitTerminationsListCableEndParameter) ApiDcimRearPortsListRequest {
	r.cableEnd = &cableEnd
	return r
}

// * &#x60;A&#x60; - A * &#x60;B&#x60; - B
func (r ApiDcimRearPortsListRequest) CableEndN(cableEndN CircuitsCircuitTerminationsListCableEndParameter) ApiDcimRearPortsListRequest {
	r.cableEndN = &cableEndN
	return r
}

// Cable (ID)
func (r ApiDcimRearPortsListRequest) CableId(cableId []*int32) ApiDcimRearPortsListRequest {
	r.cableId = &cableId
	return r
}

// Cable (ID)
func (r ApiDcimRearPortsListRequest) CableIdN(cableIdN []*int32) ApiDcimRearPortsListRequest {
	r.cableIdN = &cableIdN
	return r
}

func (r ApiDcimRearPortsListRequest) Cabled(cabled bool) ApiDcimRearPortsListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimRearPortsListRequest) Color(color []string) ApiDcimRearPortsListRequest {
	r.color = &color
	return r
}

func (r ApiDcimRearPortsListRequest) ColorEmpty(colorEmpty bool) ApiDcimRearPortsListRequest {
	r.colorEmpty = &colorEmpty
	return r
}

func (r ApiDcimRearPortsListRequest) ColorIc(colorIc []string) ApiDcimRearPortsListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiDcimRearPortsListRequest) ColorIe(colorIe []string) ApiDcimRearPortsListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiDcimRearPortsListRequest) ColorIew(colorIew []string) ApiDcimRearPortsListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiDcimRearPortsListRequest) ColorIsw(colorIsw []string) ApiDcimRearPortsListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiDcimRearPortsListRequest) ColorN(colorN []string) ApiDcimRearPortsListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimRearPortsListRequest) ColorNic(colorNic []string) ApiDcimRearPortsListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiDcimRearPortsListRequest) ColorNie(colorNie []string) ApiDcimRearPortsListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiDcimRearPortsListRequest) ColorNiew(colorNiew []string) ApiDcimRearPortsListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiDcimRearPortsListRequest) ColorNisw(colorNisw []string) ApiDcimRearPortsListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiDcimRearPortsListRequest) Created(created []time.Time) ApiDcimRearPortsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRearPortsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimRearPortsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimRearPortsListRequest) CreatedGt(createdGt []time.Time) ApiDcimRearPortsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimRearPortsListRequest) CreatedGte(createdGte []time.Time) ApiDcimRearPortsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRearPortsListRequest) CreatedLt(createdLt []time.Time) ApiDcimRearPortsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimRearPortsListRequest) CreatedLte(createdLte []time.Time) ApiDcimRearPortsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRearPortsListRequest) CreatedN(createdN []time.Time) ApiDcimRearPortsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimRearPortsListRequest) CreatedByRequest(createdByRequest string) ApiDcimRearPortsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimRearPortsListRequest) Description(description []string) ApiDcimRearPortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimRearPortsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimRearPortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimRearPortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimRearPortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimRearPortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionN(descriptionN []string) ApiDcimRearPortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimRearPortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimRearPortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimRearPortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimRearPortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device (name)
func (r ApiDcimRearPortsListRequest) Device(device []*string) ApiDcimRearPortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimRearPortsListRequest) DeviceN(deviceN []*string) ApiDcimRearPortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimRearPortsListRequest) DeviceId(deviceId []int32) ApiDcimRearPortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimRearPortsListRequest) DeviceIdN(deviceIdN []int32) ApiDcimRearPortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Device role (slug)
func (r ApiDcimRearPortsListRequest) DeviceRole(deviceRole []string) ApiDcimRearPortsListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Device role (slug)
func (r ApiDcimRearPortsListRequest) DeviceRoleN(deviceRoleN []string) ApiDcimRearPortsListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Device role (ID)
func (r ApiDcimRearPortsListRequest) DeviceRoleId(deviceRoleId []int32) ApiDcimRearPortsListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Device role (ID)
func (r ApiDcimRearPortsListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiDcimRearPortsListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

func (r ApiDcimRearPortsListRequest) DeviceStatus(deviceStatus []string) ApiDcimRearPortsListRequest {
	r.deviceStatus = &deviceStatus
	return r
}

func (r ApiDcimRearPortsListRequest) DeviceStatusN(deviceStatusN []string) ApiDcimRearPortsListRequest {
	r.deviceStatusN = &deviceStatusN
	return r
}

// Device type (model)
func (r ApiDcimRearPortsListRequest) DeviceType(deviceType []string) ApiDcimRearPortsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device type (model)
func (r ApiDcimRearPortsListRequest) DeviceTypeN(deviceTypeN []string) ApiDcimRearPortsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device type (ID)
func (r ApiDcimRearPortsListRequest) DeviceTypeId(deviceTypeId []int32) ApiDcimRearPortsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimRearPortsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiDcimRearPortsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimRearPortsListRequest) Id(id []int32) ApiDcimRearPortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRearPortsListRequest) IdEmpty(idEmpty bool) ApiDcimRearPortsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimRearPortsListRequest) IdGt(idGt []int32) ApiDcimRearPortsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimRearPortsListRequest) IdGte(idGte []int32) ApiDcimRearPortsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimRearPortsListRequest) IdLt(idLt []int32) ApiDcimRearPortsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimRearPortsListRequest) IdLte(idLte []int32) ApiDcimRearPortsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimRearPortsListRequest) IdN(idN []int32) ApiDcimRearPortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRearPortsListRequest) Label(label []string) ApiDcimRearPortsListRequest {
	r.label = &label
	return r
}

func (r ApiDcimRearPortsListRequest) LabelEmpty(labelEmpty bool) ApiDcimRearPortsListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiDcimRearPortsListRequest) LabelIc(labelIc []string) ApiDcimRearPortsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimRearPortsListRequest) LabelIe(labelIe []string) ApiDcimRearPortsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimRearPortsListRequest) LabelIew(labelIew []string) ApiDcimRearPortsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimRearPortsListRequest) LabelIsw(labelIsw []string) ApiDcimRearPortsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimRearPortsListRequest) LabelN(labelN []string) ApiDcimRearPortsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimRearPortsListRequest) LabelNic(labelNic []string) ApiDcimRearPortsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimRearPortsListRequest) LabelNie(labelNie []string) ApiDcimRearPortsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimRearPortsListRequest) LabelNiew(labelNiew []string) ApiDcimRearPortsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimRearPortsListRequest) LabelNisw(labelNisw []string) ApiDcimRearPortsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimRearPortsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimRearPortsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRearPortsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimRearPortsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimRearPortsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimRearPortsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimRearPortsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimRearPortsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRearPortsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimRearPortsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimRearPortsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimRearPortsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimRearPortsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimRearPortsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimRearPortsListRequest) Limit(limit int32) ApiDcimRearPortsListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiDcimRearPortsListRequest) Location(location []string) ApiDcimRearPortsListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiDcimRearPortsListRequest) LocationN(locationN []string) ApiDcimRearPortsListRequest {
	r.locationN = &locationN
	return r
}

// Location (ID)
func (r ApiDcimRearPortsListRequest) LocationId(locationId []int32) ApiDcimRearPortsListRequest {
	r.locationId = &locationId
	return r
}

// Location (ID)
func (r ApiDcimRearPortsListRequest) LocationIdN(locationIdN []int32) ApiDcimRearPortsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiDcimRearPortsListRequest) MarkConnected(markConnected bool) ApiDcimRearPortsListRequest {
	r.markConnected = &markConnected
	return r
}

func (r ApiDcimRearPortsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimRearPortsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// Module (ID)
func (r ApiDcimRearPortsListRequest) ModuleId(moduleId []*int32) ApiDcimRearPortsListRequest {
	r.moduleId = &moduleId
	return r
}

// Module (ID)
func (r ApiDcimRearPortsListRequest) ModuleIdN(moduleIdN []*int32) ApiDcimRearPortsListRequest {
	r.moduleIdN = &moduleIdN
	return r
}

func (r ApiDcimRearPortsListRequest) Name(name []string) ApiDcimRearPortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRearPortsListRequest) NameEmpty(nameEmpty bool) ApiDcimRearPortsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimRearPortsListRequest) NameIc(nameIc []string) ApiDcimRearPortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRearPortsListRequest) NameIe(nameIe []string) ApiDcimRearPortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRearPortsListRequest) NameIew(nameIew []string) ApiDcimRearPortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRearPortsListRequest) NameIsw(nameIsw []string) ApiDcimRearPortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRearPortsListRequest) NameN(nameN []string) ApiDcimRearPortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRearPortsListRequest) NameNic(nameNic []string) ApiDcimRearPortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRearPortsListRequest) NameNie(nameNie []string) ApiDcimRearPortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRearPortsListRequest) NameNiew(nameNiew []string) ApiDcimRearPortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRearPortsListRequest) NameNisw(nameNisw []string) ApiDcimRearPortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimRearPortsListRequest) Occupied(occupied bool) ApiDcimRearPortsListRequest {
	r.occupied = &occupied
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRearPortsListRequest) Offset(offset int32) ApiDcimRearPortsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimRearPortsListRequest) Ordering(ordering string) ApiDcimRearPortsListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiDcimRearPortsListRequest) Positions(positions []int32) ApiDcimRearPortsListRequest {
	r.positions = &positions
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsEmpty(positionsEmpty bool) ApiDcimRearPortsListRequest {
	r.positionsEmpty = &positionsEmpty
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsGt(positionsGt []int32) ApiDcimRearPortsListRequest {
	r.positionsGt = &positionsGt
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsGte(positionsGte []int32) ApiDcimRearPortsListRequest {
	r.positionsGte = &positionsGte
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsLt(positionsLt []int32) ApiDcimRearPortsListRequest {
	r.positionsLt = &positionsLt
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsLte(positionsLte []int32) ApiDcimRearPortsListRequest {
	r.positionsLte = &positionsLte
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsN(positionsN []int32) ApiDcimRearPortsListRequest {
	r.positionsN = &positionsN
	return r
}

// Search
func (r ApiDcimRearPortsListRequest) Q(q string) ApiDcimRearPortsListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimRearPortsListRequest) Rack(rack []string) ApiDcimRearPortsListRequest {
	r.rack = &rack
	return r
}

// Rack (name)
func (r ApiDcimRearPortsListRequest) RackN(rackN []string) ApiDcimRearPortsListRequest {
	r.rackN = &rackN
	return r
}

// Rack (ID)
func (r ApiDcimRearPortsListRequest) RackId(rackId []int32) ApiDcimRearPortsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimRearPortsListRequest) RackIdN(rackIdN []int32) ApiDcimRearPortsListRequest {
	r.rackIdN = &rackIdN
	return r
}

func (r ApiDcimRearPortsListRequest) Region(region []string) ApiDcimRearPortsListRequest {
	r.region = &region
	return r
}

func (r ApiDcimRearPortsListRequest) RegionN(regionN []string) ApiDcimRearPortsListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimRearPortsListRequest) RegionId(regionId []string) ApiDcimRearPortsListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimRearPortsListRequest) RegionIdN(regionIdN []string) ApiDcimRearPortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimRearPortsListRequest) Site(site []string) ApiDcimRearPortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimRearPortsListRequest) SiteN(siteN []string) ApiDcimRearPortsListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimRearPortsListRequest) SiteGroup(siteGroup []string) ApiDcimRearPortsListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimRearPortsListRequest) SiteGroupN(siteGroupN []string) ApiDcimRearPortsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimRearPortsListRequest) SiteGroupId(siteGroupId []string) ApiDcimRearPortsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimRearPortsListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimRearPortsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimRearPortsListRequest) SiteId(siteId []int32) ApiDcimRearPortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimRearPortsListRequest) SiteIdN(siteIdN []int32) ApiDcimRearPortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimRearPortsListRequest) Tag(tag []string) ApiDcimRearPortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimRearPortsListRequest) TagN(tagN []string) ApiDcimRearPortsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimRearPortsListRequest) Type_(type_ []string) ApiDcimRearPortsListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimRearPortsListRequest) TypeN(typeN []string) ApiDcimRearPortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimRearPortsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimRearPortsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

// Virtual Chassis
func (r ApiDcimRearPortsListRequest) VirtualChassis(virtualChassis []string) ApiDcimRearPortsListRequest {
	r.virtualChassis = &virtualChassis
	return r
}

// Virtual Chassis
func (r ApiDcimRearPortsListRequest) VirtualChassisN(virtualChassisN []string) ApiDcimRearPortsListRequest {
	r.virtualChassisN = &virtualChassisN
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimRearPortsListRequest) VirtualChassisId(virtualChassisId []int32) ApiDcimRearPortsListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual Chassis (ID)
func (r ApiDcimRearPortsListRequest) VirtualChassisIdN(virtualChassisIdN []int32) ApiDcimRearPortsListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

func (r ApiDcimRearPortsListRequest) Execute() (*PaginatedRearPortList, *http.Response, error) {
	return r.ApiService.DcimRearPortsListExecute(r)
}

/*
DcimRearPortsList Method for DcimRearPortsList

Get a list of rear port objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRearPortsListRequest
*/
func (a *DcimAPIService) DcimRearPortsList(ctx context.Context) ApiDcimRearPortsListRequest {
	return ApiDcimRearPortsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRearPortList
func (a *DcimAPIService) DcimRearPortsListExecute(r ApiDcimRearPortsListRequest) (*PaginatedRearPortList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRearPortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cableEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end", r.cableEnd, "")
	}
	if r.cableEndN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cable_end__n", r.cableEndN, "")
	}
	if r.cableId != nil {
		t := *r.cableId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id", t, "multi")
		}
	}
	if r.cableIdN != nil {
		t := *r.cableIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cable_id__n", t, "multi")
		}
	}
	if r.cabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cabled", r.cabled, "")
	}
	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "multi")
		}
	}
	if r.colorEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "color__empty", r.colorEmpty, "")
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceStatus != nil {
		t := *r.deviceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status", t, "multi")
		}
	}
	if r.deviceStatusN != nil {
		t := *r.deviceStatusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_status__n", t, "multi")
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type", t, "multi")
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.markConnected != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mark_connected", r.markConnected, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.moduleId != nil {
		t := *r.moduleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", t, "multi")
		}
	}
	if r.moduleIdN != nil {
		t := *r.moduleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.occupied != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occupied", r.occupied, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.positions != nil {
		t := *r.positions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions", t, "multi")
		}
	}
	if r.positionsEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "positions__empty", r.positionsEmpty, "")
	}
	if r.positionsGt != nil {
		t := *r.positionsGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__gt", t, "multi")
		}
	}
	if r.positionsGte != nil {
		t := *r.positionsGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__gte", t, "multi")
		}
	}
	if r.positionsLt != nil {
		t := *r.positionsLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__lt", t, "multi")
		}
	}
	if r.positionsLte != nil {
		t := *r.positionsLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__lte", t, "multi")
		}
	}
	if r.positionsN != nil {
		t := *r.positionsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "positions__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "positions__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack", t, "multi")
		}
	}
	if r.rackN != nil {
		t := *r.rackN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack__n", t, "multi")
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id", t, "multi")
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rack_id__n", t, "multi")
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.virtualChassis != nil {
		t := *r.virtualChassis
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis", t, "multi")
		}
	}
	if r.virtualChassisN != nil {
		t := *r.virtualChassisN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis__n", t, "multi")
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id", t, "multi")
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "virtual_chassis_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsPartialUpdateRequest struct {
	ctx                            context.Context
	ApiService                     *DcimAPIService
	id                             int32
	patchedWritableRearPortRequest *PatchedWritableRearPortRequest
}

func (r ApiDcimRearPortsPartialUpdateRequest) PatchedWritableRearPortRequest(patchedWritableRearPortRequest PatchedWritableRearPortRequest) ApiDcimRearPortsPartialUpdateRequest {
	r.patchedWritableRearPortRequest = &patchedWritableRearPortRequest
	return r
}

func (r ApiDcimRearPortsPartialUpdateRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsPartialUpdateExecute(r)
}

/*
DcimRearPortsPartialUpdate Method for DcimRearPortsPartialUpdate

Patch a rear port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rear port.
	@return ApiDcimRearPortsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRearPortsPartialUpdate(ctx context.Context, id int32) ApiDcimRearPortsPartialUpdateRequest {
	return ApiDcimRearPortsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RearPort
func (a *DcimAPIService) DcimRearPortsPartialUpdateExecute(r ApiDcimRearPortsPartialUpdateRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRearPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsPathsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRearPortsPathsRetrieveRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsPathsRetrieveExecute(r)
}

/*
DcimRearPortsPathsRetrieve Method for DcimRearPortsPathsRetrieve

Return all CablePaths which traverse a given pass-through port.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rear port.
	@return ApiDcimRearPortsPathsRetrieveRequest
*/
func (a *DcimAPIService) DcimRearPortsPathsRetrieve(ctx context.Context, id int32) ApiDcimRearPortsPathsRetrieveRequest {
	return ApiDcimRearPortsPathsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RearPort
func (a *DcimAPIService) DcimRearPortsPathsRetrieveExecute(r ApiDcimRearPortsPathsRetrieveRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsPathsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/{id}/paths/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRearPortsRetrieveRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsRetrieveExecute(r)
}

/*
DcimRearPortsRetrieve Method for DcimRearPortsRetrieve

Get a rear port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rear port.
	@return ApiDcimRearPortsRetrieveRequest
*/
func (a *DcimAPIService) DcimRearPortsRetrieve(ctx context.Context, id int32) ApiDcimRearPortsRetrieveRequest {
	return ApiDcimRearPortsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RearPort
func (a *DcimAPIService) DcimRearPortsRetrieveExecute(r ApiDcimRearPortsRetrieveRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsUpdateRequest struct {
	ctx                     context.Context
	ApiService              *DcimAPIService
	id                      int32
	writableRearPortRequest *WritableRearPortRequest
}

func (r ApiDcimRearPortsUpdateRequest) WritableRearPortRequest(writableRearPortRequest WritableRearPortRequest) ApiDcimRearPortsUpdateRequest {
	r.writableRearPortRequest = &writableRearPortRequest
	return r
}

func (r ApiDcimRearPortsUpdateRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsUpdateExecute(r)
}

/*
DcimRearPortsUpdate Method for DcimRearPortsUpdate

Put a rear port object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this rear port.
	@return ApiDcimRearPortsUpdateRequest
*/
func (a *DcimAPIService) DcimRearPortsUpdate(ctx context.Context, id int32) ApiDcimRearPortsUpdateRequest {
	return ApiDcimRearPortsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return RearPort
func (a *DcimAPIService) DcimRearPortsUpdateExecute(r ApiDcimRearPortsUpdateRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRearPortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/rear-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPortRequest == nil {
		return localVarReturnValue, nil, reportError("writableRearPortRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPortRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsBulkDestroyRequest struct {
	ctx           context.Context
	ApiService    *DcimAPIService
	regionRequest *[]RegionRequest
}

func (r ApiDcimRegionsBulkDestroyRequest) RegionRequest(regionRequest []RegionRequest) ApiDcimRegionsBulkDestroyRequest {
	r.regionRequest = &regionRequest
	return r
}

func (r ApiDcimRegionsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRegionsBulkDestroyExecute(r)
}

/*
DcimRegionsBulkDestroy Method for DcimRegionsBulkDestroy

Delete a list of region objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRegionsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimRegionsBulkDestroy(ctx context.Context) ApiDcimRegionsBulkDestroyRequest {
	return ApiDcimRegionsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRegionsBulkDestroyExecute(r ApiDcimRegionsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRegionsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.regionRequest == nil {
		return nil, reportError("regionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.regionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRegionsBulkPartialUpdateRequest struct {
	ctx           context.Context
	ApiService    *DcimAPIService
	regionRequest *[]RegionRequest
}

func (r ApiDcimRegionsBulkPartialUpdateRequest) RegionRequest(regionRequest []RegionRequest) ApiDcimRegionsBulkPartialUpdateRequest {
	r.regionRequest = &regionRequest
	return r
}

func (r ApiDcimRegionsBulkPartialUpdateRequest) Execute() ([]Region, *http.Response, error) {
	return r.ApiService.DcimRegionsBulkPartialUpdateExecute(r)
}

/*
DcimRegionsBulkPartialUpdate Method for DcimRegionsBulkPartialUpdate

Patch a list of region objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRegionsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRegionsBulkPartialUpdate(ctx context.Context) ApiDcimRegionsBulkPartialUpdateRequest {
	return ApiDcimRegionsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Region
func (a *DcimAPIService) DcimRegionsBulkPartialUpdateExecute(r ApiDcimRegionsBulkPartialUpdateRequest) ([]Region, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRegionsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.regionRequest == nil {
		return localVarReturnValue, nil, reportError("regionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.regionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsBulkUpdateRequest struct {
	ctx           context.Context
	ApiService    *DcimAPIService
	regionRequest *[]RegionRequest
}

func (r ApiDcimRegionsBulkUpdateRequest) RegionRequest(regionRequest []RegionRequest) ApiDcimRegionsBulkUpdateRequest {
	r.regionRequest = &regionRequest
	return r
}

func (r ApiDcimRegionsBulkUpdateRequest) Execute() ([]Region, *http.Response, error) {
	return r.ApiService.DcimRegionsBulkUpdateExecute(r)
}

/*
DcimRegionsBulkUpdate Method for DcimRegionsBulkUpdate

Put a list of region objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRegionsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimRegionsBulkUpdate(ctx context.Context) ApiDcimRegionsBulkUpdateRequest {
	return ApiDcimRegionsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Region
func (a *DcimAPIService) DcimRegionsBulkUpdateExecute(r ApiDcimRegionsBulkUpdateRequest) ([]Region, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRegionsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.regionRequest == nil {
		return localVarReturnValue, nil, reportError("regionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.regionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsCreateRequest struct {
	ctx                   context.Context
	ApiService            *DcimAPIService
	writableRegionRequest *WritableRegionRequest
}

func (r ApiDcimRegionsCreateRequest) WritableRegionRequest(writableRegionRequest WritableRegionRequest) ApiDcimRegionsCreateRequest {
	r.writableRegionRequest = &writableRegionRequest
	return r
}

func (r ApiDcimRegionsCreateRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsCreateExecute(r)
}

/*
DcimRegionsCreate Method for DcimRegionsCreate

Post a list of region objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRegionsCreateRequest
*/
func (a *DcimAPIService) DcimRegionsCreate(ctx context.Context) ApiDcimRegionsCreateRequest {
	return ApiDcimRegionsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Region
func (a *DcimAPIService) DcimRegionsCreateExecute(r ApiDcimRegionsCreateRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRegionsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRegionRequest == nil {
		return localVarReturnValue, nil, reportError("writableRegionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRegionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRegionsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRegionsDestroyExecute(r)
}

/*
DcimRegionsDestroy Method for DcimRegionsDestroy

Delete a region object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this region.
	@return ApiDcimRegionsDestroyRequest
*/
func (a *DcimAPIService) DcimRegionsDestroy(ctx context.Context, id int32) ApiDcimRegionsDestroyRequest {
	return ApiDcimRegionsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimRegionsDestroyExecute(r ApiDcimRegionsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRegionsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/regions/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRegionsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	ancestor          *[]string
	ancestorN         *[]string
	ancestorId        *[]string
	ancestorIdN       *[]string
	contact           *[]int32
	contactN          *[]int32
	contactGroup      *[]string
	contactGroupN     *[]string
	contactRole       *[]int32
	contactRoleN      *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	parent            *[]string
	parentN           *[]string
	parentId          *[]*int32
	parentIdN         *[]*int32
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiDcimRegionsListRequest) Ancestor(ancestor []string) ApiDcimRegionsListRequest {
	r.ancestor = &ancestor
	return r
}

func (r ApiDcimRegionsListRequest) AncestorN(ancestorN []string) ApiDcimRegionsListRequest {
	r.ancestorN = &ancestorN
	return r
}

func (r ApiDcimRegionsListRequest) AncestorId(ancestorId []string) ApiDcimRegionsListRequest {
	r.ancestorId = &ancestorId
	return r
}

func (r ApiDcimRegionsListRequest) AncestorIdN(ancestorIdN []string) ApiDcimRegionsListRequest {
	r.ancestorIdN = &ancestorIdN
	return r
}

// Contact
func (r ApiDcimRegionsListRequest) Contact(contact []int32) ApiDcimRegionsListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiDcimRegionsListRequest) ContactN(contactN []int32) ApiDcimRegionsListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiDcimRegionsListRequest) ContactGroup(contactGroup []string) ApiDcimRegionsListRequest {
	r.contactGroup = &contactGroup
	return r
}

func (r ApiDcimRegionsListRequest) ContactGroupN(contactGroupN []string) ApiDcimRegionsListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiDcimRegionsListRequest) ContactRole(contactRole []int32) ApiDcimRegionsListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiDcimRegionsListRequest) ContactRoleN(contactRoleN []int32) ApiDcimRegionsListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiDcimRegionsListRequest) Created(created []time.Time) ApiDcimRegionsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRegionsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimRegionsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimRegionsListRequest) CreatedGt(createdGt []time.Time) ApiDcimRegionsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimRegionsListRequest) CreatedGte(createdGte []time.Time) ApiDcimRegionsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRegionsListRequest) CreatedLt(createdLt []time.Time) ApiDcimRegionsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimRegionsListRequest) CreatedLte(createdLte []time.Time) ApiDcimRegionsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRegionsListRequest) CreatedN(createdN []time.Time) ApiDcimRegionsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimRegionsListRequest) CreatedByRequest(createdByRequest string) ApiDcimRegionsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimRegionsListRequest) Description(description []string) ApiDcimRegionsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimRegionsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionIc(descriptionIc []string) ApiDcimRegionsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionIe(descriptionIe []string) ApiDcimRegionsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionIew(descriptionIew []string) ApiDcimRegionsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimRegionsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionN(descriptionN []string) ApiDcimRegionsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNic(descriptionNic []string) ApiDcimRegionsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNie(descriptionNie []string) ApiDcimRegionsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimRegionsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimRegionsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimRegionsListRequest) Id(id []int32) ApiDcimRegionsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRegionsListRequest) IdEmpty(idEmpty bool) ApiDcimRegionsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimRegionsListRequest) IdGt(idGt []int32) ApiDcimRegionsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimRegionsListRequest) IdGte(idGte []int32) ApiDcimRegionsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimRegionsListRequest) IdLt(idLt []int32) ApiDcimRegionsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimRegionsListRequest) IdLte(idLte []int32) ApiDcimRegionsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimRegionsListRequest) IdN(idN []int32) ApiDcimRegionsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimRegionsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimRegionsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimRegionsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimRegionsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimRegionsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimRegionsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimRegionsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimRegionsListRequest) Limit(limit int32) ApiDcimRegionsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRegionsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimRegionsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimRegionsListRequest) Name(name []string) ApiDcimRegionsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRegionsListRequest) NameEmpty(nameEmpty bool) ApiDcimRegionsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimRegionsListRequest) NameIc(nameIc []string) ApiDcimRegionsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRegionsListRequest) NameIe(nameIe []string) ApiDcimRegionsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRegionsListRequest) NameIew(nameIew []string) ApiDcimRegionsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRegionsListRequest) NameIsw(nameIsw []string) ApiDcimRegionsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRegionsListRequest) NameN(nameN []string) ApiDcimRegionsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRegionsListRequest) NameNic(nameNic []string) ApiDcimRegionsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRegionsListRequest) NameNie(nameNie []string) ApiDcimRegionsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRegionsListRequest) NameNiew(nameNiew []string) ApiDcimRegionsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRegionsListRequest) NameNisw(nameNisw []string) ApiDcimRegionsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRegionsListRequest) Offset(offset int32) ApiDcimRegionsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimRegionsListRequest) Ordering(ordering string) ApiDcimRegionsListRequest {
	r.ordering = &ordering
	return r
}

// Parent region (slug)
func (r ApiDcimRegionsListRequest) Parent(parent []string) ApiDcimRegionsListRequest {
	r.parent = &parent
	return r
}

// Parent region (slug)
func (r ApiDcimRegionsListRequest) ParentN(parentN []string) ApiDcimRegionsListRequest {
	r.parentN = &parentN
	return r
}

// Parent region (ID)
func (r ApiDcimRegionsListRequest) ParentId(parentId []*int32) ApiDcimRegionsListRequest {
	r.parentId = &parentId
	return r
}

// Parent region (ID)
func (r ApiDcimRegionsListRequest) ParentIdN(parentIdN []*int32) ApiDcimRegionsListRequest {
	r.parentIdN = &parentIdN
	return r
}

// Search
func (r ApiDcimRegionsListRequest) Q(q string) ApiDcimRegionsListRequest {
	r.q = &q
	return r
}

func (r ApiDcimRegionsListRequest) Slug(slug []string) ApiDcimRegionsListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimRegionsListRequest) SlugEmpty(slugEmpty bool) ApiDcimRegionsListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimRegionsListRequest) SlugIc(slugIc []string) ApiDcimRegionsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimRegionsListRequest) SlugIe(slugIe []string) ApiDcimRegionsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimRegionsListRequest) SlugIew(slugIew []string) ApiDcimRegionsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimRegionsListRequest) SlugIsw(slugIsw []string) ApiDcimRegionsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimRegionsListRequest) SlugN(slugN []string) ApiDcimRegionsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimRegionsListRequest) SlugNic(slugNic []string) ApiDcimRegionsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimRegionsListRequest) SlugNie(slugNie []string) ApiDcimRegionsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimRegionsListRequest) SlugNiew(slugNiew []string) ApiDcimRegionsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimRegionsListRequest) SlugNisw(slugNisw []string) ApiDcimRegionsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimRegionsListRequest) Tag(tag []string) ApiDcimRegionsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimRegionsListRequest) TagN(tagN []string) ApiDcimRegionsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimRegionsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimRegionsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimRegionsListRequest) Execute() (*PaginatedRegionList, *http.Response, error) {
	return r.ApiService.DcimRegionsListExecute(r)
}

/*
DcimRegionsList Method for DcimRegionsList

Get a list of region objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimRegionsListRequest
*/
func (a *DcimAPIService) DcimRegionsList(ctx context.Context) ApiDcimRegionsListRequest {
	return ApiDcimRegionsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedRegionList
func (a *DcimAPIService) DcimRegionsListExecute(r ApiDcimRegionsListRequest) (*PaginatedRegionList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedRegionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRegionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ancestor != nil {
		t := *r.ancestor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor", t, "multi")
		}
	}
	if r.ancestorN != nil {
		t := *r.ancestorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor__n", t, "multi")
		}
	}
	if r.ancestorId != nil {
		t := *r.ancestorId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id", t, "multi")
		}
	}
	if r.ancestorIdN != nil {
		t := *r.ancestorIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id__n", t, "multi")
		}
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parent != nil {
		t := *r.parent
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent", t, "multi")
		}
	}
	if r.parentN != nil {
		t := *r.parentN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", t, "multi")
		}
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", t, "multi")
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsPartialUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *DcimAPIService
	id                           int32
	patchedWritableRegionRequest *PatchedWritableRegionRequest
}

func (r ApiDcimRegionsPartialUpdateRequest) PatchedWritableRegionRequest(patchedWritableRegionRequest PatchedWritableRegionRequest) ApiDcimRegionsPartialUpdateRequest {
	r.patchedWritableRegionRequest = &patchedWritableRegionRequest
	return r
}

func (r ApiDcimRegionsPartialUpdateRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsPartialUpdateExecute(r)
}

/*
DcimRegionsPartialUpdate Method for DcimRegionsPartialUpdate

Patch a region object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this region.
	@return ApiDcimRegionsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimRegionsPartialUpdate(ctx context.Context, id int32) ApiDcimRegionsPartialUpdateRequest {
	return ApiDcimRegionsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Region
func (a *DcimAPIService) DcimRegionsPartialUpdateExecute(r ApiDcimRegionsPartialUpdateRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRegionsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/regions/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRegionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimRegionsRetrieveRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsRetrieveExecute(r)
}

/*
DcimRegionsRetrieve Method for DcimRegionsRetrieve

Get a region object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this region.
	@return ApiDcimRegionsRetrieveRequest
*/
func (a *DcimAPIService) DcimRegionsRetrieve(ctx context.Context, id int32) ApiDcimRegionsRetrieveRequest {
	return ApiDcimRegionsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Region
func (a *DcimAPIService) DcimRegionsRetrieveExecute(r ApiDcimRegionsRetrieveRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRegionsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/regions/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsUpdateRequest struct {
	ctx                   context.Context
	ApiService            *DcimAPIService
	id                    int32
	writableRegionRequest *WritableRegionRequest
}

func (r ApiDcimRegionsUpdateRequest) WritableRegionRequest(writableRegionRequest WritableRegionRequest) ApiDcimRegionsUpdateRequest {
	r.writableRegionRequest = &writableRegionRequest
	return r
}

func (r ApiDcimRegionsUpdateRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsUpdateExecute(r)
}

/*
DcimRegionsUpdate Method for DcimRegionsUpdate

Put a region object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this region.
	@return ApiDcimRegionsUpdateRequest
*/
func (a *DcimAPIService) DcimRegionsUpdate(ctx context.Context, id int32) ApiDcimRegionsUpdateRequest {
	return ApiDcimRegionsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Region
func (a *DcimAPIService) DcimRegionsUpdateExecute(r ApiDcimRegionsUpdateRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimRegionsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/regions/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRegionRequest == nil {
		return localVarReturnValue, nil, reportError("writableRegionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRegionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSiteGroupsBulkDestroyRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	siteGroupRequest *[]SiteGroupRequest
}

func (r ApiDcimSiteGroupsBulkDestroyRequest) SiteGroupRequest(siteGroupRequest []SiteGroupRequest) ApiDcimSiteGroupsBulkDestroyRequest {
	r.siteGroupRequest = &siteGroupRequest
	return r
}

func (r ApiDcimSiteGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimSiteGroupsBulkDestroyExecute(r)
}

/*
DcimSiteGroupsBulkDestroy Method for DcimSiteGroupsBulkDestroy

Delete a list of site group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSiteGroupsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimSiteGroupsBulkDestroy(ctx context.Context) ApiDcimSiteGroupsBulkDestroyRequest {
	return ApiDcimSiteGroupsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimSiteGroupsBulkDestroyExecute(r ApiDcimSiteGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSiteGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/site-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.siteGroupRequest == nil {
		return nil, reportError("siteGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.siteGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimSiteGroupsBulkPartialUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	siteGroupRequest *[]SiteGroupRequest
}

func (r ApiDcimSiteGroupsBulkPartialUpdateRequest) SiteGroupRequest(siteGroupRequest []SiteGroupRequest) ApiDcimSiteGroupsBulkPartialUpdateRequest {
	r.siteGroupRequest = &siteGroupRequest
	return r
}

func (r ApiDcimSiteGroupsBulkPartialUpdateRequest) Execute() ([]SiteGroup, *http.Response, error) {
	return r.ApiService.DcimSiteGroupsBulkPartialUpdateExecute(r)
}

/*
DcimSiteGroupsBulkPartialUpdate Method for DcimSiteGroupsBulkPartialUpdate

Patch a list of site group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSiteGroupsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimSiteGroupsBulkPartialUpdate(ctx context.Context) ApiDcimSiteGroupsBulkPartialUpdateRequest {
	return ApiDcimSiteGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SiteGroup
func (a *DcimAPIService) DcimSiteGroupsBulkPartialUpdateExecute(r ApiDcimSiteGroupsBulkPartialUpdateRequest) ([]SiteGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SiteGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSiteGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/site-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.siteGroupRequest == nil {
		return localVarReturnValue, nil, reportError("siteGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.siteGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSiteGroupsBulkUpdateRequest struct {
	ctx              context.Context
	ApiService       *DcimAPIService
	siteGroupRequest *[]SiteGroupRequest
}

func (r ApiDcimSiteGroupsBulkUpdateRequest) SiteGroupRequest(siteGroupRequest []SiteGroupRequest) ApiDcimSiteGroupsBulkUpdateRequest {
	r.siteGroupRequest = &siteGroupRequest
	return r
}

func (r ApiDcimSiteGroupsBulkUpdateRequest) Execute() ([]SiteGroup, *http.Response, error) {
	return r.ApiService.DcimSiteGroupsBulkUpdateExecute(r)
}

/*
DcimSiteGroupsBulkUpdate Method for DcimSiteGroupsBulkUpdate

Put a list of site group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSiteGroupsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimSiteGroupsBulkUpdate(ctx context.Context) ApiDcimSiteGroupsBulkUpdateRequest {
	return ApiDcimSiteGroupsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SiteGroup
func (a *DcimAPIService) DcimSiteGroupsBulkUpdateExecute(r ApiDcimSiteGroupsBulkUpdateRequest) ([]SiteGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SiteGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSiteGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/site-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.siteGroupRequest == nil {
		return localVarReturnValue, nil, reportError("siteGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.siteGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSiteGroupsCreateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	writableSiteGroupRequest *WritableSiteGroupRequest
}

func (r ApiDcimSiteGroupsCreateRequest) WritableSiteGroupRequest(writableSiteGroupRequest WritableSiteGroupRequest) ApiDcimSiteGroupsCreateRequest {
	r.writableSiteGroupRequest = &writableSiteGroupRequest
	return r
}

func (r ApiDcimSiteGroupsCreateRequest) Execute() (*SiteGroup, *http.Response, error) {
	return r.ApiService.DcimSiteGroupsCreateExecute(r)
}

/*
DcimSiteGroupsCreate Method for DcimSiteGroupsCreate

Post a list of site group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSiteGroupsCreateRequest
*/
func (a *DcimAPIService) DcimSiteGroupsCreate(ctx context.Context) ApiDcimSiteGroupsCreateRequest {
	return ApiDcimSiteGroupsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SiteGroup
func (a *DcimAPIService) DcimSiteGroupsCreateExecute(r ApiDcimSiteGroupsCreateRequest) (*SiteGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SiteGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSiteGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/site-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSiteGroupRequest == nil {
		return localVarReturnValue, nil, reportError("writableSiteGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSiteGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSiteGroupsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimSiteGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimSiteGroupsDestroyExecute(r)
}

/*
DcimSiteGroupsDestroy Method for DcimSiteGroupsDestroy

Delete a site group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this site group.
	@return ApiDcimSiteGroupsDestroyRequest
*/
func (a *DcimAPIService) DcimSiteGroupsDestroy(ctx context.Context, id int32) ApiDcimSiteGroupsDestroyRequest {
	return ApiDcimSiteGroupsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimSiteGroupsDestroyExecute(r ApiDcimSiteGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSiteGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/site-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimSiteGroupsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	ancestor          *[]string
	ancestorN         *[]string
	ancestorId        *[]string
	ancestorIdN       *[]string
	contact           *[]int32
	contactN          *[]int32
	contactGroup      *[]string
	contactGroupN     *[]string
	contactRole       *[]int32
	contactRoleN      *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	parent            *[]string
	parentN           *[]string
	parentId          *[]*int32
	parentIdN         *[]*int32
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiDcimSiteGroupsListRequest) Ancestor(ancestor []string) ApiDcimSiteGroupsListRequest {
	r.ancestor = &ancestor
	return r
}

func (r ApiDcimSiteGroupsListRequest) AncestorN(ancestorN []string) ApiDcimSiteGroupsListRequest {
	r.ancestorN = &ancestorN
	return r
}

func (r ApiDcimSiteGroupsListRequest) AncestorId(ancestorId []string) ApiDcimSiteGroupsListRequest {
	r.ancestorId = &ancestorId
	return r
}

func (r ApiDcimSiteGroupsListRequest) AncestorIdN(ancestorIdN []string) ApiDcimSiteGroupsListRequest {
	r.ancestorIdN = &ancestorIdN
	return r
}

// Contact
func (r ApiDcimSiteGroupsListRequest) Contact(contact []int32) ApiDcimSiteGroupsListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiDcimSiteGroupsListRequest) ContactN(contactN []int32) ApiDcimSiteGroupsListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiDcimSiteGroupsListRequest) ContactGroup(contactGroup []string) ApiDcimSiteGroupsListRequest {
	r.contactGroup = &contactGroup
	return r
}

func (r ApiDcimSiteGroupsListRequest) ContactGroupN(contactGroupN []string) ApiDcimSiteGroupsListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiDcimSiteGroupsListRequest) ContactRole(contactRole []int32) ApiDcimSiteGroupsListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiDcimSiteGroupsListRequest) ContactRoleN(contactRoleN []int32) ApiDcimSiteGroupsListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiDcimSiteGroupsListRequest) Created(created []time.Time) ApiDcimSiteGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimSiteGroupsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimSiteGroupsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimSiteGroupsListRequest) CreatedGt(createdGt []time.Time) ApiDcimSiteGroupsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimSiteGroupsListRequest) CreatedGte(createdGte []time.Time) ApiDcimSiteGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimSiteGroupsListRequest) CreatedLt(createdLt []time.Time) ApiDcimSiteGroupsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimSiteGroupsListRequest) CreatedLte(createdLte []time.Time) ApiDcimSiteGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimSiteGroupsListRequest) CreatedN(createdN []time.Time) ApiDcimSiteGroupsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimSiteGroupsListRequest) CreatedByRequest(createdByRequest string) ApiDcimSiteGroupsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimSiteGroupsListRequest) Description(description []string) ApiDcimSiteGroupsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimSiteGroupsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionIc(descriptionIc []string) ApiDcimSiteGroupsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionIe(descriptionIe []string) ApiDcimSiteGroupsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionIew(descriptionIew []string) ApiDcimSiteGroupsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimSiteGroupsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionN(descriptionN []string) ApiDcimSiteGroupsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionNic(descriptionNic []string) ApiDcimSiteGroupsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionNie(descriptionNie []string) ApiDcimSiteGroupsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimSiteGroupsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimSiteGroupsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimSiteGroupsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimSiteGroupsListRequest) Id(id []int32) ApiDcimSiteGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimSiteGroupsListRequest) IdEmpty(idEmpty bool) ApiDcimSiteGroupsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimSiteGroupsListRequest) IdGt(idGt []int32) ApiDcimSiteGroupsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimSiteGroupsListRequest) IdGte(idGte []int32) ApiDcimSiteGroupsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimSiteGroupsListRequest) IdLt(idLt []int32) ApiDcimSiteGroupsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimSiteGroupsListRequest) IdLte(idLte []int32) ApiDcimSiteGroupsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimSiteGroupsListRequest) IdN(idN []int32) ApiDcimSiteGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimSiteGroupsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimSiteGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimSiteGroupsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimSiteGroupsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimSiteGroupsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimSiteGroupsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimSiteGroupsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimSiteGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimSiteGroupsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimSiteGroupsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimSiteGroupsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimSiteGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimSiteGroupsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimSiteGroupsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimSiteGroupsListRequest) Limit(limit int32) ApiDcimSiteGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimSiteGroupsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimSiteGroupsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimSiteGroupsListRequest) Name(name []string) ApiDcimSiteGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameEmpty(nameEmpty bool) ApiDcimSiteGroupsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameIc(nameIc []string) ApiDcimSiteGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameIe(nameIe []string) ApiDcimSiteGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameIew(nameIew []string) ApiDcimSiteGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameIsw(nameIsw []string) ApiDcimSiteGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameN(nameN []string) ApiDcimSiteGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameNic(nameNic []string) ApiDcimSiteGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameNie(nameNie []string) ApiDcimSiteGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameNiew(nameNiew []string) ApiDcimSiteGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimSiteGroupsListRequest) NameNisw(nameNisw []string) ApiDcimSiteGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimSiteGroupsListRequest) Offset(offset int32) ApiDcimSiteGroupsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimSiteGroupsListRequest) Ordering(ordering string) ApiDcimSiteGroupsListRequest {
	r.ordering = &ordering
	return r
}

// Parent site group (slug)
func (r ApiDcimSiteGroupsListRequest) Parent(parent []string) ApiDcimSiteGroupsListRequest {
	r.parent = &parent
	return r
}

// Parent site group (slug)
func (r ApiDcimSiteGroupsListRequest) ParentN(parentN []string) ApiDcimSiteGroupsListRequest {
	r.parentN = &parentN
	return r
}

// Parent site group (ID)
func (r ApiDcimSiteGroupsListRequest) ParentId(parentId []*int32) ApiDcimSiteGroupsListRequest {
	r.parentId = &parentId
	return r
}

// Parent site group (ID)
func (r ApiDcimSiteGroupsListRequest) ParentIdN(parentIdN []*int32) ApiDcimSiteGroupsListRequest {
	r.parentIdN = &parentIdN
	return r
}

// Search
func (r ApiDcimSiteGroupsListRequest) Q(q string) ApiDcimSiteGroupsListRequest {
	r.q = &q
	return r
}

func (r ApiDcimSiteGroupsListRequest) Slug(slug []string) ApiDcimSiteGroupsListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugEmpty(slugEmpty bool) ApiDcimSiteGroupsListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugIc(slugIc []string) ApiDcimSiteGroupsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugIe(slugIe []string) ApiDcimSiteGroupsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugIew(slugIew []string) ApiDcimSiteGroupsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugIsw(slugIsw []string) ApiDcimSiteGroupsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugN(slugN []string) ApiDcimSiteGroupsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugNic(slugNic []string) ApiDcimSiteGroupsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugNie(slugNie []string) ApiDcimSiteGroupsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugNiew(slugNiew []string) ApiDcimSiteGroupsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimSiteGroupsListRequest) SlugNisw(slugNisw []string) ApiDcimSiteGroupsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimSiteGroupsListRequest) Tag(tag []string) ApiDcimSiteGroupsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimSiteGroupsListRequest) TagN(tagN []string) ApiDcimSiteGroupsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimSiteGroupsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimSiteGroupsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimSiteGroupsListRequest) Execute() (*PaginatedSiteGroupList, *http.Response, error) {
	return r.ApiService.DcimSiteGroupsListExecute(r)
}

/*
DcimSiteGroupsList Method for DcimSiteGroupsList

Get a list of site group objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSiteGroupsListRequest
*/
func (a *DcimAPIService) DcimSiteGroupsList(ctx context.Context) ApiDcimSiteGroupsListRequest {
	return ApiDcimSiteGroupsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSiteGroupList
func (a *DcimAPIService) DcimSiteGroupsListExecute(r ApiDcimSiteGroupsListRequest) (*PaginatedSiteGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSiteGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSiteGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/site-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ancestor != nil {
		t := *r.ancestor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor", t, "multi")
		}
	}
	if r.ancestorN != nil {
		t := *r.ancestorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor__n", t, "multi")
		}
	}
	if r.ancestorId != nil {
		t := *r.ancestorId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id", t, "multi")
		}
	}
	if r.ancestorIdN != nil {
		t := *r.ancestorIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id__n", t, "multi")
		}
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parent != nil {
		t := *r.parent
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent", t, "multi")
		}
	}
	if r.parentN != nil {
		t := *r.parentN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", t, "multi")
		}
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", t, "multi")
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSiteGroupsPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *DcimAPIService
	id                              int32
	patchedWritableSiteGroupRequest *PatchedWritableSiteGroupRequest
}

func (r ApiDcimSiteGroupsPartialUpdateRequest) PatchedWritableSiteGroupRequest(patchedWritableSiteGroupRequest PatchedWritableSiteGroupRequest) ApiDcimSiteGroupsPartialUpdateRequest {
	r.patchedWritableSiteGroupRequest = &patchedWritableSiteGroupRequest
	return r
}

func (r ApiDcimSiteGroupsPartialUpdateRequest) Execute() (*SiteGroup, *http.Response, error) {
	return r.ApiService.DcimSiteGroupsPartialUpdateExecute(r)
}

/*
DcimSiteGroupsPartialUpdate Method for DcimSiteGroupsPartialUpdate

Patch a site group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this site group.
	@return ApiDcimSiteGroupsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimSiteGroupsPartialUpdate(ctx context.Context, id int32) ApiDcimSiteGroupsPartialUpdateRequest {
	return ApiDcimSiteGroupsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SiteGroup
func (a *DcimAPIService) DcimSiteGroupsPartialUpdateExecute(r ApiDcimSiteGroupsPartialUpdateRequest) (*SiteGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SiteGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSiteGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/site-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableSiteGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSiteGroupsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimSiteGroupsRetrieveRequest) Execute() (*SiteGroup, *http.Response, error) {
	return r.ApiService.DcimSiteGroupsRetrieveExecute(r)
}

/*
DcimSiteGroupsRetrieve Method for DcimSiteGroupsRetrieve

Get a site group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this site group.
	@return ApiDcimSiteGroupsRetrieveRequest
*/
func (a *DcimAPIService) DcimSiteGroupsRetrieve(ctx context.Context, id int32) ApiDcimSiteGroupsRetrieveRequest {
	return ApiDcimSiteGroupsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SiteGroup
func (a *DcimAPIService) DcimSiteGroupsRetrieveExecute(r ApiDcimSiteGroupsRetrieveRequest) (*SiteGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SiteGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSiteGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/site-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSiteGroupsUpdateRequest struct {
	ctx                      context.Context
	ApiService               *DcimAPIService
	id                       int32
	writableSiteGroupRequest *WritableSiteGroupRequest
}

func (r ApiDcimSiteGroupsUpdateRequest) WritableSiteGroupRequest(writableSiteGroupRequest WritableSiteGroupRequest) ApiDcimSiteGroupsUpdateRequest {
	r.writableSiteGroupRequest = &writableSiteGroupRequest
	return r
}

func (r ApiDcimSiteGroupsUpdateRequest) Execute() (*SiteGroup, *http.Response, error) {
	return r.ApiService.DcimSiteGroupsUpdateExecute(r)
}

/*
DcimSiteGroupsUpdate Method for DcimSiteGroupsUpdate

Put a site group object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this site group.
	@return ApiDcimSiteGroupsUpdateRequest
*/
func (a *DcimAPIService) DcimSiteGroupsUpdate(ctx context.Context, id int32) ApiDcimSiteGroupsUpdateRequest {
	return ApiDcimSiteGroupsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SiteGroup
func (a *DcimAPIService) DcimSiteGroupsUpdateExecute(r ApiDcimSiteGroupsUpdateRequest) (*SiteGroup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SiteGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSiteGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/site-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSiteGroupRequest == nil {
		return localVarReturnValue, nil, reportError("writableSiteGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSiteGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesBulkDestroyRequest struct {
	ctx         context.Context
	ApiService  *DcimAPIService
	siteRequest *[]SiteRequest
}

func (r ApiDcimSitesBulkDestroyRequest) SiteRequest(siteRequest []SiteRequest) ApiDcimSitesBulkDestroyRequest {
	r.siteRequest = &siteRequest
	return r
}

func (r ApiDcimSitesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimSitesBulkDestroyExecute(r)
}

/*
DcimSitesBulkDestroy Method for DcimSitesBulkDestroy

Delete a list of site objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSitesBulkDestroyRequest
*/
func (a *DcimAPIService) DcimSitesBulkDestroy(ctx context.Context) ApiDcimSitesBulkDestroyRequest {
	return ApiDcimSitesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimSitesBulkDestroyExecute(r ApiDcimSitesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSitesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.siteRequest == nil {
		return nil, reportError("siteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.siteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimSitesBulkPartialUpdateRequest struct {
	ctx         context.Context
	ApiService  *DcimAPIService
	siteRequest *[]SiteRequest
}

func (r ApiDcimSitesBulkPartialUpdateRequest) SiteRequest(siteRequest []SiteRequest) ApiDcimSitesBulkPartialUpdateRequest {
	r.siteRequest = &siteRequest
	return r
}

func (r ApiDcimSitesBulkPartialUpdateRequest) Execute() ([]Site, *http.Response, error) {
	return r.ApiService.DcimSitesBulkPartialUpdateExecute(r)
}

/*
DcimSitesBulkPartialUpdate Method for DcimSitesBulkPartialUpdate

Patch a list of site objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSitesBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimSitesBulkPartialUpdate(ctx context.Context) ApiDcimSitesBulkPartialUpdateRequest {
	return ApiDcimSitesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Site
func (a *DcimAPIService) DcimSitesBulkPartialUpdateExecute(r ApiDcimSitesBulkPartialUpdateRequest) ([]Site, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSitesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.siteRequest == nil {
		return localVarReturnValue, nil, reportError("siteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.siteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesBulkUpdateRequest struct {
	ctx         context.Context
	ApiService  *DcimAPIService
	siteRequest *[]SiteRequest
}

func (r ApiDcimSitesBulkUpdateRequest) SiteRequest(siteRequest []SiteRequest) ApiDcimSitesBulkUpdateRequest {
	r.siteRequest = &siteRequest
	return r
}

func (r ApiDcimSitesBulkUpdateRequest) Execute() ([]Site, *http.Response, error) {
	return r.ApiService.DcimSitesBulkUpdateExecute(r)
}

/*
DcimSitesBulkUpdate Method for DcimSitesBulkUpdate

Put a list of site objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSitesBulkUpdateRequest
*/
func (a *DcimAPIService) DcimSitesBulkUpdate(ctx context.Context) ApiDcimSitesBulkUpdateRequest {
	return ApiDcimSitesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Site
func (a *DcimAPIService) DcimSitesBulkUpdateExecute(r ApiDcimSitesBulkUpdateRequest) ([]Site, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSitesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.siteRequest == nil {
		return localVarReturnValue, nil, reportError("siteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.siteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesCreateRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	writableSiteRequest *WritableSiteRequest
}

func (r ApiDcimSitesCreateRequest) WritableSiteRequest(writableSiteRequest WritableSiteRequest) ApiDcimSitesCreateRequest {
	r.writableSiteRequest = &writableSiteRequest
	return r
}

func (r ApiDcimSitesCreateRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesCreateExecute(r)
}

/*
DcimSitesCreate Method for DcimSitesCreate

Post a list of site objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSitesCreateRequest
*/
func (a *DcimAPIService) DcimSitesCreate(ctx context.Context) ApiDcimSitesCreateRequest {
	return ApiDcimSitesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Site
func (a *DcimAPIService) DcimSitesCreateExecute(r ApiDcimSitesCreateRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSitesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSiteRequest == nil {
		return localVarReturnValue, nil, reportError("writableSiteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSiteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimSitesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimSitesDestroyExecute(r)
}

/*
DcimSitesDestroy Method for DcimSitesDestroy

Delete a site object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this site.
	@return ApiDcimSitesDestroyRequest
*/
func (a *DcimAPIService) DcimSitesDestroy(ctx context.Context, id int32) ApiDcimSitesDestroyRequest {
	return ApiDcimSitesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimSitesDestroyExecute(r ApiDcimSitesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSitesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/sites/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimSitesListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	asn               *[]int64
	asnN              *[]int64
	asnId             *[]int32
	asnIdN            *[]int32
	contact           *[]int32
	contactN          *[]int32
	contactGroup      *[]string
	contactGroupN     *[]string
	contactRole       *[]int32
	contactRoleN      *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	facility          *[]string
	facilityEmpty     *bool
	facilityIc        *[]string
	facilityIe        *[]string
	facilityIew       *[]string
	facilityIsw       *[]string
	facilityN         *[]string
	facilityNic       *[]string
	facilityNie       *[]string
	facilityNiew      *[]string
	facilityNisw      *[]string
	group             *[]string
	groupN            *[]string
	groupId           *[]string
	groupIdN          *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	latitude          *[]float64
	latitudeEmpty     *bool
	latitudeGt        *[]float64
	latitudeGte       *[]float64
	latitudeLt        *[]float64
	latitudeLte       *[]float64
	latitudeN         *[]float64
	limit             *int32
	longitude         *[]float64
	longitudeEmpty    *bool
	longitudeGt       *[]float64
	longitudeGte      *[]float64
	longitudeLt       *[]float64
	longitudeLte      *[]float64
	longitudeN        *[]float64
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	status            *[]string
	statusN           *[]string
	tag               *[]string
	tagN              *[]string
	tenant            *[]string
	tenantN           *[]string
	tenantGroup       *[]string
	tenantGroupN      *[]string
	tenantGroupId     *[]string
	tenantGroupIdN    *[]string
	tenantId          *[]*int32
	tenantIdN         *[]*int32
	timeZone          *[]string
	timeZoneIc        *[]string
	timeZoneIe        *[]string
	timeZoneIew       *[]string
	timeZoneIsw       *[]string
	timeZoneN         *[]string
	timeZoneNic       *[]string
	timeZoneNie       *[]string
	timeZoneNiew      *[]string
	timeZoneNisw      *[]string
	updatedByRequest  *string
}

// AS (ID)
func (r ApiDcimSitesListRequest) Asn(asn []int64) ApiDcimSitesListRequest {
	r.asn = &asn
	return r
}

// AS (ID)
func (r ApiDcimSitesListRequest) AsnN(asnN []int64) ApiDcimSitesListRequest {
	r.asnN = &asnN
	return r
}

// AS (ID)
func (r ApiDcimSitesListRequest) AsnId(asnId []int32) ApiDcimSitesListRequest {
	r.asnId = &asnId
	return r
}

// AS (ID)
func (r ApiDcimSitesListRequest) AsnIdN(asnIdN []int32) ApiDcimSitesListRequest {
	r.asnIdN = &asnIdN
	return r
}

// Contact
func (r ApiDcimSitesListRequest) Contact(contact []int32) ApiDcimSitesListRequest {
	r.contact = &contact
	return r
}

// Contact
func (r ApiDcimSitesListRequest) ContactN(contactN []int32) ApiDcimSitesListRequest {
	r.contactN = &contactN
	return r
}

func (r ApiDcimSitesListRequest) ContactGroup(contactGroup []string) ApiDcimSitesListRequest {
	r.contactGroup = &contactGroup
	return r
}

func (r ApiDcimSitesListRequest) ContactGroupN(contactGroupN []string) ApiDcimSitesListRequest {
	r.contactGroupN = &contactGroupN
	return r
}

// Contact Role
func (r ApiDcimSitesListRequest) ContactRole(contactRole []int32) ApiDcimSitesListRequest {
	r.contactRole = &contactRole
	return r
}

// Contact Role
func (r ApiDcimSitesListRequest) ContactRoleN(contactRoleN []int32) ApiDcimSitesListRequest {
	r.contactRoleN = &contactRoleN
	return r
}

func (r ApiDcimSitesListRequest) Created(created []time.Time) ApiDcimSitesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimSitesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimSitesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimSitesListRequest) CreatedGt(createdGt []time.Time) ApiDcimSitesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimSitesListRequest) CreatedGte(createdGte []time.Time) ApiDcimSitesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimSitesListRequest) CreatedLt(createdLt []time.Time) ApiDcimSitesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimSitesListRequest) CreatedLte(createdLte []time.Time) ApiDcimSitesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimSitesListRequest) CreatedN(createdN []time.Time) ApiDcimSitesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimSitesListRequest) CreatedByRequest(createdByRequest string) ApiDcimSitesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimSitesListRequest) Description(description []string) ApiDcimSitesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimSitesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimSitesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimSitesListRequest) DescriptionIc(descriptionIc []string) ApiDcimSitesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimSitesListRequest) DescriptionIe(descriptionIe []string) ApiDcimSitesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimSitesListRequest) DescriptionIew(descriptionIew []string) ApiDcimSitesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimSitesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimSitesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimSitesListRequest) DescriptionN(descriptionN []string) ApiDcimSitesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimSitesListRequest) DescriptionNic(descriptionNic []string) ApiDcimSitesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimSitesListRequest) DescriptionNie(descriptionNie []string) ApiDcimSitesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimSitesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimSitesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimSitesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimSitesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimSitesListRequest) Facility(facility []string) ApiDcimSitesListRequest {
	r.facility = &facility
	return r
}

func (r ApiDcimSitesListRequest) FacilityEmpty(facilityEmpty bool) ApiDcimSitesListRequest {
	r.facilityEmpty = &facilityEmpty
	return r
}

func (r ApiDcimSitesListRequest) FacilityIc(facilityIc []string) ApiDcimSitesListRequest {
	r.facilityIc = &facilityIc
	return r
}

func (r ApiDcimSitesListRequest) FacilityIe(facilityIe []string) ApiDcimSitesListRequest {
	r.facilityIe = &facilityIe
	return r
}

func (r ApiDcimSitesListRequest) FacilityIew(facilityIew []string) ApiDcimSitesListRequest {
	r.facilityIew = &facilityIew
	return r
}

func (r ApiDcimSitesListRequest) FacilityIsw(facilityIsw []string) ApiDcimSitesListRequest {
	r.facilityIsw = &facilityIsw
	return r
}

func (r ApiDcimSitesListRequest) FacilityN(facilityN []string) ApiDcimSitesListRequest {
	r.facilityN = &facilityN
	return r
}

func (r ApiDcimSitesListRequest) FacilityNic(facilityNic []string) ApiDcimSitesListRequest {
	r.facilityNic = &facilityNic
	return r
}

func (r ApiDcimSitesListRequest) FacilityNie(facilityNie []string) ApiDcimSitesListRequest {
	r.facilityNie = &facilityNie
	return r
}

func (r ApiDcimSitesListRequest) FacilityNiew(facilityNiew []string) ApiDcimSitesListRequest {
	r.facilityNiew = &facilityNiew
	return r
}

func (r ApiDcimSitesListRequest) FacilityNisw(facilityNisw []string) ApiDcimSitesListRequest {
	r.facilityNisw = &facilityNisw
	return r
}

func (r ApiDcimSitesListRequest) Group(group []string) ApiDcimSitesListRequest {
	r.group = &group
	return r
}

func (r ApiDcimSitesListRequest) GroupN(groupN []string) ApiDcimSitesListRequest {
	r.groupN = &groupN
	return r
}

func (r ApiDcimSitesListRequest) GroupId(groupId []string) ApiDcimSitesListRequest {
	r.groupId = &groupId
	return r
}

func (r ApiDcimSitesListRequest) GroupIdN(groupIdN []string) ApiDcimSitesListRequest {
	r.groupIdN = &groupIdN
	return r
}

func (r ApiDcimSitesListRequest) Id(id []int32) ApiDcimSitesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimSitesListRequest) IdEmpty(idEmpty bool) ApiDcimSitesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimSitesListRequest) IdGt(idGt []int32) ApiDcimSitesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimSitesListRequest) IdGte(idGte []int32) ApiDcimSitesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimSitesListRequest) IdLt(idLt []int32) ApiDcimSitesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimSitesListRequest) IdLte(idLte []int32) ApiDcimSitesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimSitesListRequest) IdN(idN []int32) ApiDcimSitesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimSitesListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimSitesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimSitesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimSitesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimSitesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimSitesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimSitesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimSitesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimSitesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimSitesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimSitesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimSitesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimSitesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimSitesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

func (r ApiDcimSitesListRequest) Latitude(latitude []float64) ApiDcimSitesListRequest {
	r.latitude = &latitude
	return r
}

func (r ApiDcimSitesListRequest) LatitudeEmpty(latitudeEmpty bool) ApiDcimSitesListRequest {
	r.latitudeEmpty = &latitudeEmpty
	return r
}

func (r ApiDcimSitesListRequest) LatitudeGt(latitudeGt []float64) ApiDcimSitesListRequest {
	r.latitudeGt = &latitudeGt
	return r
}

func (r ApiDcimSitesListRequest) LatitudeGte(latitudeGte []float64) ApiDcimSitesListRequest {
	r.latitudeGte = &latitudeGte
	return r
}

func (r ApiDcimSitesListRequest) LatitudeLt(latitudeLt []float64) ApiDcimSitesListRequest {
	r.latitudeLt = &latitudeLt
	return r
}

func (r ApiDcimSitesListRequest) LatitudeLte(latitudeLte []float64) ApiDcimSitesListRequest {
	r.latitudeLte = &latitudeLte
	return r
}

func (r ApiDcimSitesListRequest) LatitudeN(latitudeN []float64) ApiDcimSitesListRequest {
	r.latitudeN = &latitudeN
	return r
}

// Number of results to return per page.
func (r ApiDcimSitesListRequest) Limit(limit int32) ApiDcimSitesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimSitesListRequest) Longitude(longitude []float64) ApiDcimSitesListRequest {
	r.longitude = &longitude
	return r
}

func (r ApiDcimSitesListRequest) LongitudeEmpty(longitudeEmpty bool) ApiDcimSitesListRequest {
	r.longitudeEmpty = &longitudeEmpty
	return r
}

func (r ApiDcimSitesListRequest) LongitudeGt(longitudeGt []float64) ApiDcimSitesListRequest {
	r.longitudeGt = &longitudeGt
	return r
}

func (r ApiDcimSitesListRequest) LongitudeGte(longitudeGte []float64) ApiDcimSitesListRequest {
	r.longitudeGte = &longitudeGte
	return r
}

func (r ApiDcimSitesListRequest) LongitudeLt(longitudeLt []float64) ApiDcimSitesListRequest {
	r.longitudeLt = &longitudeLt
	return r
}

func (r ApiDcimSitesListRequest) LongitudeLte(longitudeLte []float64) ApiDcimSitesListRequest {
	r.longitudeLte = &longitudeLte
	return r
}

func (r ApiDcimSitesListRequest) LongitudeN(longitudeN []float64) ApiDcimSitesListRequest {
	r.longitudeN = &longitudeN
	return r
}

func (r ApiDcimSitesListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimSitesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimSitesListRequest) Name(name []string) ApiDcimSitesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimSitesListRequest) NameEmpty(nameEmpty bool) ApiDcimSitesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimSitesListRequest) NameIc(nameIc []string) ApiDcimSitesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimSitesListRequest) NameIe(nameIe []string) ApiDcimSitesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimSitesListRequest) NameIew(nameIew []string) ApiDcimSitesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimSitesListRequest) NameIsw(nameIsw []string) ApiDcimSitesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimSitesListRequest) NameN(nameN []string) ApiDcimSitesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimSitesListRequest) NameNic(nameNic []string) ApiDcimSitesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimSitesListRequest) NameNie(nameNie []string) ApiDcimSitesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimSitesListRequest) NameNiew(nameNiew []string) ApiDcimSitesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimSitesListRequest) NameNisw(nameNisw []string) ApiDcimSitesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimSitesListRequest) Offset(offset int32) ApiDcimSitesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimSitesListRequest) Ordering(ordering string) ApiDcimSitesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimSitesListRequest) Q(q string) ApiDcimSitesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimSitesListRequest) Region(region []string) ApiDcimSitesListRequest {
	r.region = &region
	return r
}

func (r ApiDcimSitesListRequest) RegionN(regionN []string) ApiDcimSitesListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimSitesListRequest) RegionId(regionId []string) ApiDcimSitesListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimSitesListRequest) RegionIdN(regionIdN []string) ApiDcimSitesListRequest {
	r.regionIdN = &regionIdN
	return r
}

func (r ApiDcimSitesListRequest) Slug(slug []string) ApiDcimSitesListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimSitesListRequest) SlugEmpty(slugEmpty bool) ApiDcimSitesListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiDcimSitesListRequest) SlugIc(slugIc []string) ApiDcimSitesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimSitesListRequest) SlugIe(slugIe []string) ApiDcimSitesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimSitesListRequest) SlugIew(slugIew []string) ApiDcimSitesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimSitesListRequest) SlugIsw(slugIsw []string) ApiDcimSitesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimSitesListRequest) SlugN(slugN []string) ApiDcimSitesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimSitesListRequest) SlugNic(slugNic []string) ApiDcimSitesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimSitesListRequest) SlugNie(slugNie []string) ApiDcimSitesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimSitesListRequest) SlugNiew(slugNiew []string) ApiDcimSitesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimSitesListRequest) SlugNisw(slugNisw []string) ApiDcimSitesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimSitesListRequest) Status(status []string) ApiDcimSitesListRequest {
	r.status = &status
	return r
}

func (r ApiDcimSitesListRequest) StatusN(statusN []string) ApiDcimSitesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimSitesListRequest) Tag(tag []string) ApiDcimSitesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimSitesListRequest) TagN(tagN []string) ApiDcimSitesListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimSitesListRequest) Tenant(tenant []string) ApiDcimSitesListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimSitesListRequest) TenantN(tenantN []string) ApiDcimSitesListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiDcimSitesListRequest) TenantGroup(tenantGroup []string) ApiDcimSitesListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiDcimSitesListRequest) TenantGroupN(tenantGroupN []string) ApiDcimSitesListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiDcimSitesListRequest) TenantGroupId(tenantGroupId []string) ApiDcimSitesListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiDcimSitesListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimSitesListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimSitesListRequest) TenantId(tenantId []*int32) ApiDcimSitesListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimSitesListRequest) TenantIdN(tenantIdN []*int32) ApiDcimSitesListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimSitesListRequest) TimeZone(timeZone []string) ApiDcimSitesListRequest {
	r.timeZone = &timeZone
	return r
}

func (r ApiDcimSitesListRequest) TimeZoneIc(timeZoneIc []string) ApiDcimSitesListRequest {
	r.timeZoneIc = &timeZoneIc
	return r
}

func (r ApiDcimSitesListRequest) TimeZoneIe(timeZoneIe []string) ApiDcimSitesListRequest {
	r.timeZoneIe = &timeZoneIe
	return r
}

func (r ApiDcimSitesListRequest) TimeZoneIew(timeZoneIew []string) ApiDcimSitesListRequest {
	r.timeZoneIew = &timeZoneIew
	return r
}

func (r ApiDcimSitesListRequest) TimeZoneIsw(timeZoneIsw []string) ApiDcimSitesListRequest {
	r.timeZoneIsw = &timeZoneIsw
	return r
}

func (r ApiDcimSitesListRequest) TimeZoneN(timeZoneN []string) ApiDcimSitesListRequest {
	r.timeZoneN = &timeZoneN
	return r
}

func (r ApiDcimSitesListRequest) TimeZoneNic(timeZoneNic []string) ApiDcimSitesListRequest {
	r.timeZoneNic = &timeZoneNic
	return r
}

func (r ApiDcimSitesListRequest) TimeZoneNie(timeZoneNie []string) ApiDcimSitesListRequest {
	r.timeZoneNie = &timeZoneNie
	return r
}

func (r ApiDcimSitesListRequest) TimeZoneNiew(timeZoneNiew []string) ApiDcimSitesListRequest {
	r.timeZoneNiew = &timeZoneNiew
	return r
}

func (r ApiDcimSitesListRequest) TimeZoneNisw(timeZoneNisw []string) ApiDcimSitesListRequest {
	r.timeZoneNisw = &timeZoneNisw
	return r
}

func (r ApiDcimSitesListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimSitesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimSitesListRequest) Execute() (*PaginatedSiteList, *http.Response, error) {
	return r.ApiService.DcimSitesListExecute(r)
}

/*
DcimSitesList Method for DcimSitesList

Get a list of site objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimSitesListRequest
*/
func (a *DcimAPIService) DcimSitesList(ctx context.Context) ApiDcimSitesListRequest {
	return ApiDcimSitesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSiteList
func (a *DcimAPIService) DcimSitesListExecute(r ApiDcimSitesListRequest) (*PaginatedSiteList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSiteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSitesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.asn != nil {
		t := *r.asn
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn", t, "multi")
		}
	}
	if r.asnN != nil {
		t := *r.asnN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn__n", t, "multi")
		}
	}
	if r.asnId != nil {
		t := *r.asnId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn_id", t, "multi")
		}
	}
	if r.asnIdN != nil {
		t := *r.asnIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "asn_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "asn_id__n", t, "multi")
		}
	}
	if r.contact != nil {
		t := *r.contact
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact", t, "multi")
		}
	}
	if r.contactN != nil {
		t := *r.contactN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact__n", t, "multi")
		}
	}
	if r.contactGroup != nil {
		t := *r.contactGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group", t, "multi")
		}
	}
	if r.contactGroupN != nil {
		t := *r.contactGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_group__n", t, "multi")
		}
	}
	if r.contactRole != nil {
		t := *r.contactRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role", t, "multi")
		}
	}
	if r.contactRoleN != nil {
		t := *r.contactRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "contact_role__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.facility != nil {
		t := *r.facility
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility", t, "multi")
		}
	}
	if r.facilityEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facility__empty", r.facilityEmpty, "")
	}
	if r.facilityIc != nil {
		t := *r.facilityIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__ic", t, "multi")
		}
	}
	if r.facilityIe != nil {
		t := *r.facilityIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__ie", t, "multi")
		}
	}
	if r.facilityIew != nil {
		t := *r.facilityIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__iew", t, "multi")
		}
	}
	if r.facilityIsw != nil {
		t := *r.facilityIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__isw", t, "multi")
		}
	}
	if r.facilityN != nil {
		t := *r.facilityN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__n", t, "multi")
		}
	}
	if r.facilityNic != nil {
		t := *r.facilityNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nic", t, "multi")
		}
	}
	if r.facilityNie != nil {
		t := *r.facilityNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nie", t, "multi")
		}
	}
	if r.facilityNiew != nil {
		t := *r.facilityNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__niew", t, "multi")
		}
	}
	if r.facilityNisw != nil {
		t := *r.facilityNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facility__nisw", t, "multi")
		}
	}
	if r.group != nil {
		t := *r.group
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group", t, "multi")
		}
	}
	if r.groupN != nil {
		t := *r.groupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group__n", t, "multi")
		}
	}
	if r.groupId != nil {
		t := *r.groupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_id", t, "multi")
		}
	}
	if r.groupIdN != nil {
		t := *r.groupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.latitude != nil {
		t := *r.latitude
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude", t, "multi")
		}
	}
	if r.latitudeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__empty", r.latitudeEmpty, "")
	}
	if r.latitudeGt != nil {
		t := *r.latitudeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gt", t, "multi")
		}
	}
	if r.latitudeGte != nil {
		t := *r.latitudeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__gte", t, "multi")
		}
	}
	if r.latitudeLt != nil {
		t := *r.latitudeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lt", t, "multi")
		}
	}
	if r.latitudeLte != nil {
		t := *r.latitudeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__lte", t, "multi")
		}
	}
	if r.latitudeN != nil {
		t := *r.latitudeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "latitude__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.longitude != nil {
		t := *r.longitude
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude", t, "multi")
		}
	}
	if r.longitudeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__empty", r.longitudeEmpty, "")
	}
	if r.longitudeGt != nil {
		t := *r.longitudeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gt", t, "multi")
		}
	}
	if r.longitudeGte != nil {
		t := *r.longitudeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__gte", t, "multi")
		}
	}
	if r.longitudeLt != nil {
		t := *r.longitudeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lt", t, "multi")
		}
	}
	if r.longitudeLte != nil {
		t := *r.longitudeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__lte", t, "multi")
		}
	}
	if r.longitudeN != nil {
		t := *r.longitudeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "longitude__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.timeZone != nil {
		t := *r.timeZone
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone", t, "multi")
		}
	}
	if r.timeZoneIc != nil {
		t := *r.timeZoneIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ic", t, "multi")
		}
	}
	if r.timeZoneIe != nil {
		t := *r.timeZoneIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__ie", t, "multi")
		}
	}
	if r.timeZoneIew != nil {
		t := *r.timeZoneIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__iew", t, "multi")
		}
	}
	if r.timeZoneIsw != nil {
		t := *r.timeZoneIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__isw", t, "multi")
		}
	}
	if r.timeZoneN != nil {
		t := *r.timeZoneN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__n", t, "multi")
		}
	}
	if r.timeZoneNic != nil {
		t := *r.timeZoneNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nic", t, "multi")
		}
	}
	if r.timeZoneNie != nil {
		t := *r.timeZoneNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nie", t, "multi")
		}
	}
	if r.timeZoneNiew != nil {
		t := *r.timeZoneNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__niew", t, "multi")
		}
	}
	if r.timeZoneNisw != nil {
		t := *r.timeZoneNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone__nisw", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesPartialUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *DcimAPIService
	id                         int32
	patchedWritableSiteRequest *PatchedWritableSiteRequest
}

func (r ApiDcimSitesPartialUpdateRequest) PatchedWritableSiteRequest(patchedWritableSiteRequest PatchedWritableSiteRequest) ApiDcimSitesPartialUpdateRequest {
	r.patchedWritableSiteRequest = &patchedWritableSiteRequest
	return r
}

func (r ApiDcimSitesPartialUpdateRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesPartialUpdateExecute(r)
}

/*
DcimSitesPartialUpdate Method for DcimSitesPartialUpdate

Patch a site object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this site.
	@return ApiDcimSitesPartialUpdateRequest
*/
func (a *DcimAPIService) DcimSitesPartialUpdate(ctx context.Context, id int32) ApiDcimSitesPartialUpdateRequest {
	return ApiDcimSitesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Site
func (a *DcimAPIService) DcimSitesPartialUpdateExecute(r ApiDcimSitesPartialUpdateRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSitesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/sites/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableSiteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimSitesRetrieveRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesRetrieveExecute(r)
}

/*
DcimSitesRetrieve Method for DcimSitesRetrieve

Get a site object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this site.
	@return ApiDcimSitesRetrieveRequest
*/
func (a *DcimAPIService) DcimSitesRetrieve(ctx context.Context, id int32) ApiDcimSitesRetrieveRequest {
	return ApiDcimSitesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Site
func (a *DcimAPIService) DcimSitesRetrieveExecute(r ApiDcimSitesRetrieveRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSitesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/sites/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesUpdateRequest struct {
	ctx                 context.Context
	ApiService          *DcimAPIService
	id                  int32
	writableSiteRequest *WritableSiteRequest
}

func (r ApiDcimSitesUpdateRequest) WritableSiteRequest(writableSiteRequest WritableSiteRequest) ApiDcimSitesUpdateRequest {
	r.writableSiteRequest = &writableSiteRequest
	return r
}

func (r ApiDcimSitesUpdateRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesUpdateExecute(r)
}

/*
DcimSitesUpdate Method for DcimSitesUpdate

Put a site object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this site.
	@return ApiDcimSitesUpdateRequest
*/
func (a *DcimAPIService) DcimSitesUpdate(ctx context.Context, id int32) ApiDcimSitesUpdateRequest {
	return ApiDcimSitesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Site
func (a *DcimAPIService) DcimSitesUpdateExecute(r ApiDcimSitesUpdateRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimSitesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/sites/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSiteRequest == nil {
		return localVarReturnValue, nil, reportError("writableSiteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSiteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisBulkDestroyRequest struct {
	ctx                   context.Context
	ApiService            *DcimAPIService
	virtualChassisRequest *[]VirtualChassisRequest
}

func (r ApiDcimVirtualChassisBulkDestroyRequest) VirtualChassisRequest(virtualChassisRequest []VirtualChassisRequest) ApiDcimVirtualChassisBulkDestroyRequest {
	r.virtualChassisRequest = &virtualChassisRequest
	return r
}

func (r ApiDcimVirtualChassisBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimVirtualChassisBulkDestroyExecute(r)
}

/*
DcimVirtualChassisBulkDestroy Method for DcimVirtualChassisBulkDestroy

Delete a list of virtual chassis objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualChassisBulkDestroyRequest
*/
func (a *DcimAPIService) DcimVirtualChassisBulkDestroy(ctx context.Context) ApiDcimVirtualChassisBulkDestroyRequest {
	return ApiDcimVirtualChassisBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimVirtualChassisBulkDestroyExecute(r ApiDcimVirtualChassisBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualChassisBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.virtualChassisRequest == nil {
		return nil, reportError("virtualChassisRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.virtualChassisRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisBulkPartialUpdateRequest struct {
	ctx                   context.Context
	ApiService            *DcimAPIService
	virtualChassisRequest *[]VirtualChassisRequest
}

func (r ApiDcimVirtualChassisBulkPartialUpdateRequest) VirtualChassisRequest(virtualChassisRequest []VirtualChassisRequest) ApiDcimVirtualChassisBulkPartialUpdateRequest {
	r.virtualChassisRequest = &virtualChassisRequest
	return r
}

func (r ApiDcimVirtualChassisBulkPartialUpdateRequest) Execute() ([]VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisBulkPartialUpdateExecute(r)
}

/*
DcimVirtualChassisBulkPartialUpdate Method for DcimVirtualChassisBulkPartialUpdate

Patch a list of virtual chassis objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualChassisBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimVirtualChassisBulkPartialUpdate(ctx context.Context) ApiDcimVirtualChassisBulkPartialUpdateRequest {
	return ApiDcimVirtualChassisBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []VirtualChassis
func (a *DcimAPIService) DcimVirtualChassisBulkPartialUpdateExecute(r ApiDcimVirtualChassisBulkPartialUpdateRequest) ([]VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualChassisBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.virtualChassisRequest == nil {
		return localVarReturnValue, nil, reportError("virtualChassisRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.virtualChassisRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisBulkUpdateRequest struct {
	ctx                   context.Context
	ApiService            *DcimAPIService
	virtualChassisRequest *[]VirtualChassisRequest
}

func (r ApiDcimVirtualChassisBulkUpdateRequest) VirtualChassisRequest(virtualChassisRequest []VirtualChassisRequest) ApiDcimVirtualChassisBulkUpdateRequest {
	r.virtualChassisRequest = &virtualChassisRequest
	return r
}

func (r ApiDcimVirtualChassisBulkUpdateRequest) Execute() ([]VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisBulkUpdateExecute(r)
}

/*
DcimVirtualChassisBulkUpdate Method for DcimVirtualChassisBulkUpdate

Put a list of virtual chassis objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualChassisBulkUpdateRequest
*/
func (a *DcimAPIService) DcimVirtualChassisBulkUpdate(ctx context.Context) ApiDcimVirtualChassisBulkUpdateRequest {
	return ApiDcimVirtualChassisBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []VirtualChassis
func (a *DcimAPIService) DcimVirtualChassisBulkUpdateExecute(r ApiDcimVirtualChassisBulkUpdateRequest) ([]VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualChassisBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.virtualChassisRequest == nil {
		return localVarReturnValue, nil, reportError("virtualChassisRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.virtualChassisRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisCreateRequest struct {
	ctx                           context.Context
	ApiService                    *DcimAPIService
	writableVirtualChassisRequest *WritableVirtualChassisRequest
}

func (r ApiDcimVirtualChassisCreateRequest) WritableVirtualChassisRequest(writableVirtualChassisRequest WritableVirtualChassisRequest) ApiDcimVirtualChassisCreateRequest {
	r.writableVirtualChassisRequest = &writableVirtualChassisRequest
	return r
}

func (r ApiDcimVirtualChassisCreateRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisCreateExecute(r)
}

/*
DcimVirtualChassisCreate Method for DcimVirtualChassisCreate

Post a list of virtual chassis objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualChassisCreateRequest
*/
func (a *DcimAPIService) DcimVirtualChassisCreate(ctx context.Context) ApiDcimVirtualChassisCreateRequest {
	return ApiDcimVirtualChassisCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VirtualChassis
func (a *DcimAPIService) DcimVirtualChassisCreateExecute(r ApiDcimVirtualChassisCreateRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualChassisCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualChassisRequest == nil {
		return localVarReturnValue, nil, reportError("writableVirtualChassisRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualChassisRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimVirtualChassisDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimVirtualChassisDestroyExecute(r)
}

/*
DcimVirtualChassisDestroy Method for DcimVirtualChassisDestroy

Delete a virtual chassis object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this virtual chassis.
	@return ApiDcimVirtualChassisDestroyRequest
*/
func (a *DcimAPIService) DcimVirtualChassisDestroy(ctx context.Context, id int32) ApiDcimVirtualChassisDestroyRequest {
	return ApiDcimVirtualChassisDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimVirtualChassisDestroyExecute(r ApiDcimVirtualChassisDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualChassisDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-chassis/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	domain            *[]string
	domainEmpty       *bool
	domainIc          *[]string
	domainIe          *[]string
	domainIew         *[]string
	domainIsw         *[]string
	domainN           *[]string
	domainNic         *[]string
	domainNie         *[]string
	domainNiew        *[]string
	domainNisw        *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	master            *[]*string
	masterN           *[]*string
	masterId          *[]*int32
	masterIdN         *[]*int32
	memberCount       *[]int32
	memberCountEmpty  *bool
	memberCountGt     *[]int32
	memberCountGte    *[]int32
	memberCountLt     *[]int32
	memberCountLte    *[]int32
	memberCountN      *[]int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	region            *[]string
	regionN           *[]string
	regionId          *[]string
	regionIdN         *[]string
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]string
	siteGroupIdN      *[]string
	siteId            *[]int32
	siteIdN           *[]int32
	tag               *[]string
	tagN              *[]string
	tenant            *[]string
	tenantN           *[]string
	tenantId          *[]int32
	tenantIdN         *[]int32
	updatedByRequest  *string
}

func (r ApiDcimVirtualChassisListRequest) Created(created []time.Time) ApiDcimVirtualChassisListRequest {
	r.created = &created
	return r
}

func (r ApiDcimVirtualChassisListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimVirtualChassisListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimVirtualChassisListRequest) CreatedGt(createdGt []time.Time) ApiDcimVirtualChassisListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimVirtualChassisListRequest) CreatedGte(createdGte []time.Time) ApiDcimVirtualChassisListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimVirtualChassisListRequest) CreatedLt(createdLt []time.Time) ApiDcimVirtualChassisListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimVirtualChassisListRequest) CreatedLte(createdLte []time.Time) ApiDcimVirtualChassisListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimVirtualChassisListRequest) CreatedN(createdN []time.Time) ApiDcimVirtualChassisListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimVirtualChassisListRequest) CreatedByRequest(createdByRequest string) ApiDcimVirtualChassisListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimVirtualChassisListRequest) Description(description []string) ApiDcimVirtualChassisListRequest {
	r.description = &description
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimVirtualChassisListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionIc(descriptionIc []string) ApiDcimVirtualChassisListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionIe(descriptionIe []string) ApiDcimVirtualChassisListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionIew(descriptionIew []string) ApiDcimVirtualChassisListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimVirtualChassisListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionN(descriptionN []string) ApiDcimVirtualChassisListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionNic(descriptionNic []string) ApiDcimVirtualChassisListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionNie(descriptionNie []string) ApiDcimVirtualChassisListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimVirtualChassisListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimVirtualChassisListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimVirtualChassisListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimVirtualChassisListRequest) Domain(domain []string) ApiDcimVirtualChassisListRequest {
	r.domain = &domain
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainEmpty(domainEmpty bool) ApiDcimVirtualChassisListRequest {
	r.domainEmpty = &domainEmpty
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainIc(domainIc []string) ApiDcimVirtualChassisListRequest {
	r.domainIc = &domainIc
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainIe(domainIe []string) ApiDcimVirtualChassisListRequest {
	r.domainIe = &domainIe
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainIew(domainIew []string) ApiDcimVirtualChassisListRequest {
	r.domainIew = &domainIew
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainIsw(domainIsw []string) ApiDcimVirtualChassisListRequest {
	r.domainIsw = &domainIsw
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainN(domainN []string) ApiDcimVirtualChassisListRequest {
	r.domainN = &domainN
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNic(domainNic []string) ApiDcimVirtualChassisListRequest {
	r.domainNic = &domainNic
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNie(domainNie []string) ApiDcimVirtualChassisListRequest {
	r.domainNie = &domainNie
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNiew(domainNiew []string) ApiDcimVirtualChassisListRequest {
	r.domainNiew = &domainNiew
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNisw(domainNisw []string) ApiDcimVirtualChassisListRequest {
	r.domainNisw = &domainNisw
	return r
}

func (r ApiDcimVirtualChassisListRequest) Id(id []int32) ApiDcimVirtualChassisListRequest {
	r.id = &id
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdEmpty(idEmpty bool) ApiDcimVirtualChassisListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdGt(idGt []int32) ApiDcimVirtualChassisListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdGte(idGte []int32) ApiDcimVirtualChassisListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdLt(idLt []int32) ApiDcimVirtualChassisListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdLte(idLte []int32) ApiDcimVirtualChassisListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdN(idN []int32) ApiDcimVirtualChassisListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimVirtualChassisListRequest) Limit(limit int32) ApiDcimVirtualChassisListRequest {
	r.limit = &limit
	return r
}

// Master (name)
func (r ApiDcimVirtualChassisListRequest) Master(master []*string) ApiDcimVirtualChassisListRequest {
	r.master = &master
	return r
}

// Master (name)
func (r ApiDcimVirtualChassisListRequest) MasterN(masterN []*string) ApiDcimVirtualChassisListRequest {
	r.masterN = &masterN
	return r
}

// Master (ID)
func (r ApiDcimVirtualChassisListRequest) MasterId(masterId []*int32) ApiDcimVirtualChassisListRequest {
	r.masterId = &masterId
	return r
}

// Master (ID)
func (r ApiDcimVirtualChassisListRequest) MasterIdN(masterIdN []*int32) ApiDcimVirtualChassisListRequest {
	r.masterIdN = &masterIdN
	return r
}

func (r ApiDcimVirtualChassisListRequest) MemberCount(memberCount []int32) ApiDcimVirtualChassisListRequest {
	r.memberCount = &memberCount
	return r
}

func (r ApiDcimVirtualChassisListRequest) MemberCountEmpty(memberCountEmpty bool) ApiDcimVirtualChassisListRequest {
	r.memberCountEmpty = &memberCountEmpty
	return r
}

func (r ApiDcimVirtualChassisListRequest) MemberCountGt(memberCountGt []int32) ApiDcimVirtualChassisListRequest {
	r.memberCountGt = &memberCountGt
	return r
}

func (r ApiDcimVirtualChassisListRequest) MemberCountGte(memberCountGte []int32) ApiDcimVirtualChassisListRequest {
	r.memberCountGte = &memberCountGte
	return r
}

func (r ApiDcimVirtualChassisListRequest) MemberCountLt(memberCountLt []int32) ApiDcimVirtualChassisListRequest {
	r.memberCountLt = &memberCountLt
	return r
}

func (r ApiDcimVirtualChassisListRequest) MemberCountLte(memberCountLte []int32) ApiDcimVirtualChassisListRequest {
	r.memberCountLte = &memberCountLte
	return r
}

func (r ApiDcimVirtualChassisListRequest) MemberCountN(memberCountN []int32) ApiDcimVirtualChassisListRequest {
	r.memberCountN = &memberCountN
	return r
}

func (r ApiDcimVirtualChassisListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimVirtualChassisListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimVirtualChassisListRequest) Name(name []string) ApiDcimVirtualChassisListRequest {
	r.name = &name
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameEmpty(nameEmpty bool) ApiDcimVirtualChassisListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameIc(nameIc []string) ApiDcimVirtualChassisListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameIe(nameIe []string) ApiDcimVirtualChassisListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameIew(nameIew []string) ApiDcimVirtualChassisListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameIsw(nameIsw []string) ApiDcimVirtualChassisListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameN(nameN []string) ApiDcimVirtualChassisListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNic(nameNic []string) ApiDcimVirtualChassisListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNie(nameNie []string) ApiDcimVirtualChassisListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNiew(nameNiew []string) ApiDcimVirtualChassisListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNisw(nameNisw []string) ApiDcimVirtualChassisListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimVirtualChassisListRequest) Offset(offset int32) ApiDcimVirtualChassisListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimVirtualChassisListRequest) Ordering(ordering string) ApiDcimVirtualChassisListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiDcimVirtualChassisListRequest) Q(q string) ApiDcimVirtualChassisListRequest {
	r.q = &q
	return r
}

func (r ApiDcimVirtualChassisListRequest) Region(region []string) ApiDcimVirtualChassisListRequest {
	r.region = &region
	return r
}

func (r ApiDcimVirtualChassisListRequest) RegionN(regionN []string) ApiDcimVirtualChassisListRequest {
	r.regionN = &regionN
	return r
}

func (r ApiDcimVirtualChassisListRequest) RegionId(regionId []string) ApiDcimVirtualChassisListRequest {
	r.regionId = &regionId
	return r
}

func (r ApiDcimVirtualChassisListRequest) RegionIdN(regionIdN []string) ApiDcimVirtualChassisListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimVirtualChassisListRequest) Site(site []string) ApiDcimVirtualChassisListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimVirtualChassisListRequest) SiteN(siteN []string) ApiDcimVirtualChassisListRequest {
	r.siteN = &siteN
	return r
}

func (r ApiDcimVirtualChassisListRequest) SiteGroup(siteGroup []string) ApiDcimVirtualChassisListRequest {
	r.siteGroup = &siteGroup
	return r
}

func (r ApiDcimVirtualChassisListRequest) SiteGroupN(siteGroupN []string) ApiDcimVirtualChassisListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

func (r ApiDcimVirtualChassisListRequest) SiteGroupId(siteGroupId []string) ApiDcimVirtualChassisListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

func (r ApiDcimVirtualChassisListRequest) SiteGroupIdN(siteGroupIdN []string) ApiDcimVirtualChassisListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site (ID)
func (r ApiDcimVirtualChassisListRequest) SiteId(siteId []int32) ApiDcimVirtualChassisListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimVirtualChassisListRequest) SiteIdN(siteIdN []int32) ApiDcimVirtualChassisListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimVirtualChassisListRequest) Tag(tag []string) ApiDcimVirtualChassisListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimVirtualChassisListRequest) TagN(tagN []string) ApiDcimVirtualChassisListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimVirtualChassisListRequest) Tenant(tenant []string) ApiDcimVirtualChassisListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimVirtualChassisListRequest) TenantN(tenantN []string) ApiDcimVirtualChassisListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant (ID)
func (r ApiDcimVirtualChassisListRequest) TenantId(tenantId []int32) ApiDcimVirtualChassisListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimVirtualChassisListRequest) TenantIdN(tenantIdN []int32) ApiDcimVirtualChassisListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimVirtualChassisListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimVirtualChassisListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimVirtualChassisListRequest) Execute() (*PaginatedVirtualChassisList, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisListExecute(r)
}

/*
DcimVirtualChassisList Method for DcimVirtualChassisList

Get a list of virtual chassis objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualChassisListRequest
*/
func (a *DcimAPIService) DcimVirtualChassisList(ctx context.Context) ApiDcimVirtualChassisListRequest {
	return ApiDcimVirtualChassisListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedVirtualChassisList
func (a *DcimAPIService) DcimVirtualChassisListExecute(r ApiDcimVirtualChassisListRequest) (*PaginatedVirtualChassisList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedVirtualChassisList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualChassisList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.domain != nil {
		t := *r.domain
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain", t, "multi")
		}
	}
	if r.domainEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domain__empty", r.domainEmpty, "")
	}
	if r.domainIc != nil {
		t := *r.domainIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain__ic", t, "multi")
		}
	}
	if r.domainIe != nil {
		t := *r.domainIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain__ie", t, "multi")
		}
	}
	if r.domainIew != nil {
		t := *r.domainIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain__iew", t, "multi")
		}
	}
	if r.domainIsw != nil {
		t := *r.domainIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain__isw", t, "multi")
		}
	}
	if r.domainN != nil {
		t := *r.domainN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain__n", t, "multi")
		}
	}
	if r.domainNic != nil {
		t := *r.domainNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain__nic", t, "multi")
		}
	}
	if r.domainNie != nil {
		t := *r.domainNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain__nie", t, "multi")
		}
	}
	if r.domainNiew != nil {
		t := *r.domainNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain__niew", t, "multi")
		}
	}
	if r.domainNisw != nil {
		t := *r.domainNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "domain__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "domain__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.master != nil {
		t := *r.master
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "master", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "master", t, "multi")
		}
	}
	if r.masterN != nil {
		t := *r.masterN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "master__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "master__n", t, "multi")
		}
	}
	if r.masterId != nil {
		t := *r.masterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "master_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "master_id", t, "multi")
		}
	}
	if r.masterIdN != nil {
		t := *r.masterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "master_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "master_id__n", t, "multi")
		}
	}
	if r.memberCount != nil {
		t := *r.memberCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_count", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_count", t, "multi")
		}
	}
	if r.memberCountEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__empty", r.memberCountEmpty, "")
	}
	if r.memberCountGt != nil {
		t := *r.memberCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__gt", t, "multi")
		}
	}
	if r.memberCountGte != nil {
		t := *r.memberCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__gte", t, "multi")
		}
	}
	if r.memberCountLt != nil {
		t := *r.memberCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__lt", t, "multi")
		}
	}
	if r.memberCountLte != nil {
		t := *r.memberCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__lte", t, "multi")
		}
	}
	if r.memberCountN != nil {
		t := *r.memberCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "member_count__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisPartialUpdateRequest struct {
	ctx                                  context.Context
	ApiService                           *DcimAPIService
	id                                   int32
	patchedWritableVirtualChassisRequest *PatchedWritableVirtualChassisRequest
}

func (r ApiDcimVirtualChassisPartialUpdateRequest) PatchedWritableVirtualChassisRequest(patchedWritableVirtualChassisRequest PatchedWritableVirtualChassisRequest) ApiDcimVirtualChassisPartialUpdateRequest {
	r.patchedWritableVirtualChassisRequest = &patchedWritableVirtualChassisRequest
	return r
}

func (r ApiDcimVirtualChassisPartialUpdateRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisPartialUpdateExecute(r)
}

/*
DcimVirtualChassisPartialUpdate Method for DcimVirtualChassisPartialUpdate

Patch a virtual chassis object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this virtual chassis.
	@return ApiDcimVirtualChassisPartialUpdateRequest
*/
func (a *DcimAPIService) DcimVirtualChassisPartialUpdate(ctx context.Context, id int32) ApiDcimVirtualChassisPartialUpdateRequest {
	return ApiDcimVirtualChassisPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return VirtualChassis
func (a *DcimAPIService) DcimVirtualChassisPartialUpdateExecute(r ApiDcimVirtualChassisPartialUpdateRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualChassisPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-chassis/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableVirtualChassisRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimVirtualChassisRetrieveRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisRetrieveExecute(r)
}

/*
DcimVirtualChassisRetrieve Method for DcimVirtualChassisRetrieve

Get a virtual chassis object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this virtual chassis.
	@return ApiDcimVirtualChassisRetrieveRequest
*/
func (a *DcimAPIService) DcimVirtualChassisRetrieve(ctx context.Context, id int32) ApiDcimVirtualChassisRetrieveRequest {
	return ApiDcimVirtualChassisRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return VirtualChassis
func (a *DcimAPIService) DcimVirtualChassisRetrieveExecute(r ApiDcimVirtualChassisRetrieveRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualChassisRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-chassis/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisUpdateRequest struct {
	ctx                           context.Context
	ApiService                    *DcimAPIService
	id                            int32
	writableVirtualChassisRequest *WritableVirtualChassisRequest
}

func (r ApiDcimVirtualChassisUpdateRequest) WritableVirtualChassisRequest(writableVirtualChassisRequest WritableVirtualChassisRequest) ApiDcimVirtualChassisUpdateRequest {
	r.writableVirtualChassisRequest = &writableVirtualChassisRequest
	return r
}

func (r ApiDcimVirtualChassisUpdateRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisUpdateExecute(r)
}

/*
DcimVirtualChassisUpdate Method for DcimVirtualChassisUpdate

Put a virtual chassis object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this virtual chassis.
	@return ApiDcimVirtualChassisUpdateRequest
*/
func (a *DcimAPIService) DcimVirtualChassisUpdate(ctx context.Context, id int32) ApiDcimVirtualChassisUpdateRequest {
	return ApiDcimVirtualChassisUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return VirtualChassis
func (a *DcimAPIService) DcimVirtualChassisUpdateExecute(r ApiDcimVirtualChassisUpdateRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualChassisUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-chassis/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualChassisRequest == nil {
		return localVarReturnValue, nil, reportError("writableVirtualChassisRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualChassisRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualDeviceContextsBulkDestroyRequest struct {
	ctx                         context.Context
	ApiService                  *DcimAPIService
	virtualDeviceContextRequest *[]VirtualDeviceContextRequest
}

func (r ApiDcimVirtualDeviceContextsBulkDestroyRequest) VirtualDeviceContextRequest(virtualDeviceContextRequest []VirtualDeviceContextRequest) ApiDcimVirtualDeviceContextsBulkDestroyRequest {
	r.virtualDeviceContextRequest = &virtualDeviceContextRequest
	return r
}

func (r ApiDcimVirtualDeviceContextsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimVirtualDeviceContextsBulkDestroyExecute(r)
}

/*
DcimVirtualDeviceContextsBulkDestroy Method for DcimVirtualDeviceContextsBulkDestroy

Delete a list of virtual device context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualDeviceContextsBulkDestroyRequest
*/
func (a *DcimAPIService) DcimVirtualDeviceContextsBulkDestroy(ctx context.Context) ApiDcimVirtualDeviceContextsBulkDestroyRequest {
	return ApiDcimVirtualDeviceContextsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimVirtualDeviceContextsBulkDestroyExecute(r ApiDcimVirtualDeviceContextsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualDeviceContextsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-device-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.virtualDeviceContextRequest == nil {
		return nil, reportError("virtualDeviceContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.virtualDeviceContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimVirtualDeviceContextsBulkPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *DcimAPIService
	virtualDeviceContextRequest *[]VirtualDeviceContextRequest
}

func (r ApiDcimVirtualDeviceContextsBulkPartialUpdateRequest) VirtualDeviceContextRequest(virtualDeviceContextRequest []VirtualDeviceContextRequest) ApiDcimVirtualDeviceContextsBulkPartialUpdateRequest {
	r.virtualDeviceContextRequest = &virtualDeviceContextRequest
	return r
}

func (r ApiDcimVirtualDeviceContextsBulkPartialUpdateRequest) Execute() ([]VirtualDeviceContext, *http.Response, error) {
	return r.ApiService.DcimVirtualDeviceContextsBulkPartialUpdateExecute(r)
}

/*
DcimVirtualDeviceContextsBulkPartialUpdate Method for DcimVirtualDeviceContextsBulkPartialUpdate

Patch a list of virtual device context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualDeviceContextsBulkPartialUpdateRequest
*/
func (a *DcimAPIService) DcimVirtualDeviceContextsBulkPartialUpdate(ctx context.Context) ApiDcimVirtualDeviceContextsBulkPartialUpdateRequest {
	return ApiDcimVirtualDeviceContextsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []VirtualDeviceContext
func (a *DcimAPIService) DcimVirtualDeviceContextsBulkPartialUpdateExecute(r ApiDcimVirtualDeviceContextsBulkPartialUpdateRequest) ([]VirtualDeviceContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []VirtualDeviceContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualDeviceContextsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-device-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.virtualDeviceContextRequest == nil {
		return localVarReturnValue, nil, reportError("virtualDeviceContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.virtualDeviceContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualDeviceContextsBulkUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *DcimAPIService
	virtualDeviceContextRequest *[]VirtualDeviceContextRequest
}

func (r ApiDcimVirtualDeviceContextsBulkUpdateRequest) VirtualDeviceContextRequest(virtualDeviceContextRequest []VirtualDeviceContextRequest) ApiDcimVirtualDeviceContextsBulkUpdateRequest {
	r.virtualDeviceContextRequest = &virtualDeviceContextRequest
	return r
}

func (r ApiDcimVirtualDeviceContextsBulkUpdateRequest) Execute() ([]VirtualDeviceContext, *http.Response, error) {
	return r.ApiService.DcimVirtualDeviceContextsBulkUpdateExecute(r)
}

/*
DcimVirtualDeviceContextsBulkUpdate Method for DcimVirtualDeviceContextsBulkUpdate

Put a list of virtual device context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualDeviceContextsBulkUpdateRequest
*/
func (a *DcimAPIService) DcimVirtualDeviceContextsBulkUpdate(ctx context.Context) ApiDcimVirtualDeviceContextsBulkUpdateRequest {
	return ApiDcimVirtualDeviceContextsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []VirtualDeviceContext
func (a *DcimAPIService) DcimVirtualDeviceContextsBulkUpdateExecute(r ApiDcimVirtualDeviceContextsBulkUpdateRequest) ([]VirtualDeviceContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []VirtualDeviceContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualDeviceContextsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-device-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.virtualDeviceContextRequest == nil {
		return localVarReturnValue, nil, reportError("virtualDeviceContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.virtualDeviceContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualDeviceContextsCreateRequest struct {
	ctx                                 context.Context
	ApiService                          *DcimAPIService
	writableVirtualDeviceContextRequest *WritableVirtualDeviceContextRequest
}

func (r ApiDcimVirtualDeviceContextsCreateRequest) WritableVirtualDeviceContextRequest(writableVirtualDeviceContextRequest WritableVirtualDeviceContextRequest) ApiDcimVirtualDeviceContextsCreateRequest {
	r.writableVirtualDeviceContextRequest = &writableVirtualDeviceContextRequest
	return r
}

func (r ApiDcimVirtualDeviceContextsCreateRequest) Execute() (*VirtualDeviceContext, *http.Response, error) {
	return r.ApiService.DcimVirtualDeviceContextsCreateExecute(r)
}

/*
DcimVirtualDeviceContextsCreate Method for DcimVirtualDeviceContextsCreate

Post a list of virtual device context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualDeviceContextsCreateRequest
*/
func (a *DcimAPIService) DcimVirtualDeviceContextsCreate(ctx context.Context) ApiDcimVirtualDeviceContextsCreateRequest {
	return ApiDcimVirtualDeviceContextsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VirtualDeviceContext
func (a *DcimAPIService) DcimVirtualDeviceContextsCreateExecute(r ApiDcimVirtualDeviceContextsCreateRequest) (*VirtualDeviceContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualDeviceContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualDeviceContextsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-device-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualDeviceContextRequest == nil {
		return localVarReturnValue, nil, reportError("writableVirtualDeviceContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualDeviceContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualDeviceContextsDestroyRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimVirtualDeviceContextsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimVirtualDeviceContextsDestroyExecute(r)
}

/*
DcimVirtualDeviceContextsDestroy Method for DcimVirtualDeviceContextsDestroy

Delete a virtual device context object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this virtual device context.
	@return ApiDcimVirtualDeviceContextsDestroyRequest
*/
func (a *DcimAPIService) DcimVirtualDeviceContextsDestroy(ctx context.Context, id int32) ApiDcimVirtualDeviceContextsDestroyRequest {
	return ApiDcimVirtualDeviceContextsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DcimAPIService) DcimVirtualDeviceContextsDestroyExecute(r ApiDcimVirtualDeviceContextsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualDeviceContextsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-device-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimVirtualDeviceContextsListRequest struct {
	ctx               context.Context
	ApiService        *DcimAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	device            *[]int32
	deviceN           *[]int32
	deviceId          *[]int32
	deviceIdN         *[]int32
	hasPrimaryIp      *bool
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	identifier        *[]int32
	identifierEmpty   *bool
	identifierGt      *[]int32
	identifierGte     *[]int32
	identifierLt      *[]int32
	identifierLte     *[]int32
	identifierN       *[]int32
	interfaceId       *[]int32
	interfaceIdN      *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	primaryIp4Id      *[]int32
	primaryIp4IdN     *[]int32
	primaryIp6Id      *[]int32
	primaryIp6IdN     *[]int32
	q                 *string
	status            *[]string
	statusN           *[]string
	tag               *[]string
	tagN              *[]string
	tenant            *[]string
	tenantN           *[]string
	tenantGroup       *[]string
	tenantGroupN      *[]string
	tenantGroupId     *[]string
	tenantGroupIdN    *[]string
	tenantId          *[]*int32
	tenantIdN         *[]*int32
	updatedByRequest  *string
}

func (r ApiDcimVirtualDeviceContextsListRequest) Created(created []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) CreatedGt(createdGt []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) CreatedGte(createdGte []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) CreatedLt(createdLt []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) CreatedLte(createdLte []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) CreatedN(createdN []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) CreatedByRequest(createdByRequest string) ApiDcimVirtualDeviceContextsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) Description(description []string) ApiDcimVirtualDeviceContextsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionIc(descriptionIc []string) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionIe(descriptionIe []string) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionIew(descriptionIew []string) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionN(descriptionN []string) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionNic(descriptionNic []string) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionNie(descriptionNie []string) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimVirtualDeviceContextsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Device model
func (r ApiDcimVirtualDeviceContextsListRequest) Device(device []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.device = &device
	return r
}

// Device model
func (r ApiDcimVirtualDeviceContextsListRequest) DeviceN(deviceN []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.deviceN = &deviceN
	return r
}

// VDC (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) DeviceId(deviceId []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.deviceId = &deviceId
	return r
}

// VDC (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) DeviceIdN(deviceIdN []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Has a primary IP
func (r ApiDcimVirtualDeviceContextsListRequest) HasPrimaryIp(hasPrimaryIp bool) ApiDcimVirtualDeviceContextsListRequest {
	r.hasPrimaryIp = &hasPrimaryIp
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) Id(id []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdEmpty(idEmpty bool) ApiDcimVirtualDeviceContextsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdGt(idGt []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdGte(idGte []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdLt(idLt []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdLte(idLte []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdN(idN []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) Identifier(identifier []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.identifier = &identifier
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdentifierEmpty(identifierEmpty bool) ApiDcimVirtualDeviceContextsListRequest {
	r.identifierEmpty = &identifierEmpty
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdentifierGt(identifierGt []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.identifierGt = &identifierGt
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdentifierGte(identifierGte []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.identifierGte = &identifierGte
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdentifierLt(identifierLt []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.identifierLt = &identifierLt
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdentifierLte(identifierLte []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.identifierLte = &identifierLte
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) IdentifierN(identifierN []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.identifierN = &identifierN
	return r
}

// Interface (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) InterfaceId(interfaceId []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.interfaceId = &interfaceId
	return r
}

// Interface (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) InterfaceIdN(interfaceIdN []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.interfaceIdN = &interfaceIdN
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) LastUpdated(lastUpdated []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiDcimVirtualDeviceContextsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiDcimVirtualDeviceContextsListRequest) Limit(limit int32) ApiDcimVirtualDeviceContextsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) ModifiedByRequest(modifiedByRequest string) ApiDcimVirtualDeviceContextsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) Name(name []string) ApiDcimVirtualDeviceContextsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameEmpty(nameEmpty bool) ApiDcimVirtualDeviceContextsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameIc(nameIc []string) ApiDcimVirtualDeviceContextsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameIe(nameIe []string) ApiDcimVirtualDeviceContextsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameIew(nameIew []string) ApiDcimVirtualDeviceContextsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameIsw(nameIsw []string) ApiDcimVirtualDeviceContextsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameN(nameN []string) ApiDcimVirtualDeviceContextsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameNic(nameNic []string) ApiDcimVirtualDeviceContextsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameNie(nameNie []string) ApiDcimVirtualDeviceContextsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameNiew(nameNiew []string) ApiDcimVirtualDeviceContextsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) NameNisw(nameNisw []string) ApiDcimVirtualDeviceContextsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiDcimVirtualDeviceContextsListRequest) Offset(offset int32) ApiDcimVirtualDeviceContextsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiDcimVirtualDeviceContextsListRequest) Ordering(ordering string) ApiDcimVirtualDeviceContextsListRequest {
	r.ordering = &ordering
	return r
}

// Primary IPv4 (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) PrimaryIp4Id(primaryIp4Id []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.primaryIp4Id = &primaryIp4Id
	return r
}

// Primary IPv4 (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) PrimaryIp4IdN(primaryIp4IdN []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.primaryIp4IdN = &primaryIp4IdN
	return r
}

// Primary IPv6 (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) PrimaryIp6Id(primaryIp6Id []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.primaryIp6Id = &primaryIp6Id
	return r
}

// Primary IPv6 (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) PrimaryIp6IdN(primaryIp6IdN []int32) ApiDcimVirtualDeviceContextsListRequest {
	r.primaryIp6IdN = &primaryIp6IdN
	return r
}

// Search
func (r ApiDcimVirtualDeviceContextsListRequest) Q(q string) ApiDcimVirtualDeviceContextsListRequest {
	r.q = &q
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) Status(status []string) ApiDcimVirtualDeviceContextsListRequest {
	r.status = &status
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) StatusN(statusN []string) ApiDcimVirtualDeviceContextsListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) Tag(tag []string) ApiDcimVirtualDeviceContextsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) TagN(tagN []string) ApiDcimVirtualDeviceContextsListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimVirtualDeviceContextsListRequest) Tenant(tenant []string) ApiDcimVirtualDeviceContextsListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimVirtualDeviceContextsListRequest) TenantN(tenantN []string) ApiDcimVirtualDeviceContextsListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) TenantGroup(tenantGroup []string) ApiDcimVirtualDeviceContextsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) TenantGroupN(tenantGroupN []string) ApiDcimVirtualDeviceContextsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) TenantGroupId(tenantGroupId []string) ApiDcimVirtualDeviceContextsListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimVirtualDeviceContextsListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) TenantId(tenantId []*int32) ApiDcimVirtualDeviceContextsListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimVirtualDeviceContextsListRequest) TenantIdN(tenantIdN []*int32) ApiDcimVirtualDeviceContextsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) UpdatedByRequest(updatedByRequest string) ApiDcimVirtualDeviceContextsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiDcimVirtualDeviceContextsListRequest) Execute() (*PaginatedVirtualDeviceContextList, *http.Response, error) {
	return r.ApiService.DcimVirtualDeviceContextsListExecute(r)
}

/*
DcimVirtualDeviceContextsList Method for DcimVirtualDeviceContextsList

Get a list of virtual device context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDcimVirtualDeviceContextsListRequest
*/
func (a *DcimAPIService) DcimVirtualDeviceContextsList(ctx context.Context) ApiDcimVirtualDeviceContextsListRequest {
	return ApiDcimVirtualDeviceContextsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedVirtualDeviceContextList
func (a *DcimAPIService) DcimVirtualDeviceContextsListExecute(r ApiDcimVirtualDeviceContextsListRequest) (*PaginatedVirtualDeviceContextList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedVirtualDeviceContextList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualDeviceContextsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-device-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device", t, "multi")
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device__n", t, "multi")
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id", t, "multi")
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_id__n", t, "multi")
		}
	}
	if r.hasPrimaryIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "has_primary_ip", r.hasPrimaryIp, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.identifier != nil {
		t := *r.identifier
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", t, "multi")
		}
	}
	if r.identifierEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__empty", r.identifierEmpty, "")
	}
	if r.identifierGt != nil {
		t := *r.identifierGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__gt", t, "multi")
		}
	}
	if r.identifierGte != nil {
		t := *r.identifierGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__gte", t, "multi")
		}
	}
	if r.identifierLt != nil {
		t := *r.identifierLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__lt", t, "multi")
		}
	}
	if r.identifierLte != nil {
		t := *r.identifierLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__lte", t, "multi")
		}
	}
	if r.identifierN != nil {
		t := *r.identifierN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "identifier__n", t, "multi")
		}
	}
	if r.interfaceId != nil {
		t := *r.interfaceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id", t, "multi")
		}
	}
	if r.interfaceIdN != nil {
		t := *r.interfaceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.primaryIp4Id != nil {
		t := *r.primaryIp4Id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id", t, "multi")
		}
	}
	if r.primaryIp4IdN != nil {
		t := *r.primaryIp4IdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip4_id__n", t, "multi")
		}
	}
	if r.primaryIp6Id != nil {
		t := *r.primaryIp6Id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id", t, "multi")
		}
	}
	if r.primaryIp6IdN != nil {
		t := *r.primaryIp6IdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "primary_ip6_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualDeviceContextsPartialUpdateRequest struct {
	ctx                                        context.Context
	ApiService                                 *DcimAPIService
	id                                         int32
	patchedWritableVirtualDeviceContextRequest *PatchedWritableVirtualDeviceContextRequest
}

func (r ApiDcimVirtualDeviceContextsPartialUpdateRequest) PatchedWritableVirtualDeviceContextRequest(patchedWritableVirtualDeviceContextRequest PatchedWritableVirtualDeviceContextRequest) ApiDcimVirtualDeviceContextsPartialUpdateRequest {
	r.patchedWritableVirtualDeviceContextRequest = &patchedWritableVirtualDeviceContextRequest
	return r
}

func (r ApiDcimVirtualDeviceContextsPartialUpdateRequest) Execute() (*VirtualDeviceContext, *http.Response, error) {
	return r.ApiService.DcimVirtualDeviceContextsPartialUpdateExecute(r)
}

/*
DcimVirtualDeviceContextsPartialUpdate Method for DcimVirtualDeviceContextsPartialUpdate

Patch a virtual device context object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this virtual device context.
	@return ApiDcimVirtualDeviceContextsPartialUpdateRequest
*/
func (a *DcimAPIService) DcimVirtualDeviceContextsPartialUpdate(ctx context.Context, id int32) ApiDcimVirtualDeviceContextsPartialUpdateRequest {
	return ApiDcimVirtualDeviceContextsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return VirtualDeviceContext
func (a *DcimAPIService) DcimVirtualDeviceContextsPartialUpdateExecute(r ApiDcimVirtualDeviceContextsPartialUpdateRequest) (*VirtualDeviceContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualDeviceContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualDeviceContextsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-device-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableVirtualDeviceContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualDeviceContextsRetrieveRequest struct {
	ctx        context.Context
	ApiService *DcimAPIService
	id         int32
}

func (r ApiDcimVirtualDeviceContextsRetrieveRequest) Execute() (*VirtualDeviceContext, *http.Response, error) {
	return r.ApiService.DcimVirtualDeviceContextsRetrieveExecute(r)
}

/*
DcimVirtualDeviceContextsRetrieve Method for DcimVirtualDeviceContextsRetrieve

Get a virtual device context object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this virtual device context.
	@return ApiDcimVirtualDeviceContextsRetrieveRequest
*/
func (a *DcimAPIService) DcimVirtualDeviceContextsRetrieve(ctx context.Context, id int32) ApiDcimVirtualDeviceContextsRetrieveRequest {
	return ApiDcimVirtualDeviceContextsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return VirtualDeviceContext
func (a *DcimAPIService) DcimVirtualDeviceContextsRetrieveExecute(r ApiDcimVirtualDeviceContextsRetrieveRequest) (*VirtualDeviceContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualDeviceContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualDeviceContextsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-device-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualDeviceContextsUpdateRequest struct {
	ctx                                 context.Context
	ApiService                          *DcimAPIService
	id                                  int32
	writableVirtualDeviceContextRequest *WritableVirtualDeviceContextRequest
}

func (r ApiDcimVirtualDeviceContextsUpdateRequest) WritableVirtualDeviceContextRequest(writableVirtualDeviceContextRequest WritableVirtualDeviceContextRequest) ApiDcimVirtualDeviceContextsUpdateRequest {
	r.writableVirtualDeviceContextRequest = &writableVirtualDeviceContextRequest
	return r
}

func (r ApiDcimVirtualDeviceContextsUpdateRequest) Execute() (*VirtualDeviceContext, *http.Response, error) {
	return r.ApiService.DcimVirtualDeviceContextsUpdateExecute(r)
}

/*
DcimVirtualDeviceContextsUpdate Method for DcimVirtualDeviceContextsUpdate

Put a virtual device context object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this virtual device context.
	@return ApiDcimVirtualDeviceContextsUpdateRequest
*/
func (a *DcimAPIService) DcimVirtualDeviceContextsUpdate(ctx context.Context, id int32) ApiDcimVirtualDeviceContextsUpdateRequest {
	return ApiDcimVirtualDeviceContextsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return VirtualDeviceContext
func (a *DcimAPIService) DcimVirtualDeviceContextsUpdateExecute(r ApiDcimVirtualDeviceContextsUpdateRequest) (*VirtualDeviceContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VirtualDeviceContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimAPIService.DcimVirtualDeviceContextsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/dcim/virtual-device-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualDeviceContextRequest == nil {
		return localVarReturnValue, nil, reportError("writableVirtualDeviceContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualDeviceContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
