/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritablePowerFeedRequestSupply * `ac` - AC * `dc` - DC
type PatchedWritablePowerFeedRequestSupply string

// List of PatchedWritablePowerFeedRequest_supply
const (
	PATCHEDWRITABLEPOWERFEEDREQUESTSUPPLY_AC PatchedWritablePowerFeedRequestSupply = "ac"
	PATCHEDWRITABLEPOWERFEEDREQUESTSUPPLY_DC PatchedWritablePowerFeedRequestSupply = "dc"
)

// All allowed values of PatchedWritablePowerFeedRequestSupply enum
var AllowedPatchedWritablePowerFeedRequestSupplyEnumValues = []PatchedWritablePowerFeedRequestSupply{
	"ac",
	"dc",
}

func (v *PatchedWritablePowerFeedRequestSupply) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritablePowerFeedRequestSupply(value)
	for _, existing := range AllowedPatchedWritablePowerFeedRequestSupplyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritablePowerFeedRequestSupply", value)
}

// NewPatchedWritablePowerFeedRequestSupplyFromValue returns a pointer to a valid PatchedWritablePowerFeedRequestSupply
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritablePowerFeedRequestSupplyFromValue(v string) (*PatchedWritablePowerFeedRequestSupply, error) {
	ev := PatchedWritablePowerFeedRequestSupply(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritablePowerFeedRequestSupply: valid values are %v", v, AllowedPatchedWritablePowerFeedRequestSupplyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritablePowerFeedRequestSupply) IsValid() bool {
	for _, existing := range AllowedPatchedWritablePowerFeedRequestSupplyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritablePowerFeedRequest_supply value
func (v PatchedWritablePowerFeedRequestSupply) Ptr() *PatchedWritablePowerFeedRequestSupply {
	return &v
}

type NullablePatchedWritablePowerFeedRequestSupply struct {
	value *PatchedWritablePowerFeedRequestSupply
	isSet bool
}

func (v NullablePatchedWritablePowerFeedRequestSupply) Get() *PatchedWritablePowerFeedRequestSupply {
	return v.value
}

func (v *NullablePatchedWritablePowerFeedRequestSupply) Set(val *PatchedWritablePowerFeedRequestSupply) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritablePowerFeedRequestSupply) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritablePowerFeedRequestSupply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritablePowerFeedRequestSupply(val *PatchedWritablePowerFeedRequestSupply) *NullablePatchedWritablePowerFeedRequestSupply {
	return &NullablePatchedWritablePowerFeedRequestSupply{value: val, isSet: true}
}

func (v NullablePatchedWritablePowerFeedRequestSupply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritablePowerFeedRequestSupply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
