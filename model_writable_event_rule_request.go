/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the WritableEventRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WritableEventRuleRequest{}

// WritableEventRuleRequest Adds support for custom fields and tags.
type WritableEventRuleRequest struct {
	ObjectTypes []string `json:"object_types"`
	Name        string   `json:"name"`
	// Triggers when a matching object is created.
	TypeCreate *bool `json:"type_create,omitempty"`
	// Triggers when a matching object is updated.
	TypeUpdate *bool `json:"type_update,omitempty"`
	// Triggers when a matching object is deleted.
	TypeDelete *bool `json:"type_delete,omitempty"`
	// Triggers when a job for a matching object is started.
	TypeJobStart *bool `json:"type_job_start,omitempty"`
	// Triggers when a job for a matching object terminates.
	TypeJobEnd *bool `json:"type_job_end,omitempty"`
	Enabled    *bool `json:"enabled,omitempty"`
	// A set of conditions which determine whether the event will be generated.
	Conditions           interface{}               `json:"conditions,omitempty"`
	ActionType           *EventRuleActionTypeValue `json:"action_type,omitempty"`
	ActionObjectType     string                    `json:"action_object_type"`
	ActionObjectId       NullableInt64             `json:"action_object_id,omitempty"`
	Description          *string                   `json:"description,omitempty"`
	CustomFields         map[string]interface{}    `json:"custom_fields,omitempty"`
	Tags                 []NestedTagRequest        `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WritableEventRuleRequest WritableEventRuleRequest

// NewWritableEventRuleRequest instantiates a new WritableEventRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWritableEventRuleRequest(objectTypes []string, name string, actionObjectType string) *WritableEventRuleRequest {
	this := WritableEventRuleRequest{}
	this.ObjectTypes = objectTypes
	this.Name = name
	this.ActionObjectType = actionObjectType
	return &this
}

// NewWritableEventRuleRequestWithDefaults instantiates a new WritableEventRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWritableEventRuleRequestWithDefaults() *WritableEventRuleRequest {
	this := WritableEventRuleRequest{}
	return &this
}

// GetObjectTypes returns the ObjectTypes field value
func (o *WritableEventRuleRequest) GetObjectTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ObjectTypes
}

// GetObjectTypesOk returns a tuple with the ObjectTypes field value
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetObjectTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectTypes, true
}

// SetObjectTypes sets field value
func (o *WritableEventRuleRequest) SetObjectTypes(v []string) {
	o.ObjectTypes = v
}

// GetName returns the Name field value
func (o *WritableEventRuleRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WritableEventRuleRequest) SetName(v string) {
	o.Name = v
}

// GetTypeCreate returns the TypeCreate field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetTypeCreate() bool {
	if o == nil || IsNil(o.TypeCreate) {
		var ret bool
		return ret
	}
	return *o.TypeCreate
}

// GetTypeCreateOk returns a tuple with the TypeCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetTypeCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.TypeCreate) {
		return nil, false
	}
	return o.TypeCreate, true
}

// HasTypeCreate returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasTypeCreate() bool {
	if o != nil && !IsNil(o.TypeCreate) {
		return true
	}

	return false
}

// SetTypeCreate gets a reference to the given bool and assigns it to the TypeCreate field.
func (o *WritableEventRuleRequest) SetTypeCreate(v bool) {
	o.TypeCreate = &v
}

// GetTypeUpdate returns the TypeUpdate field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetTypeUpdate() bool {
	if o == nil || IsNil(o.TypeUpdate) {
		var ret bool
		return ret
	}
	return *o.TypeUpdate
}

// GetTypeUpdateOk returns a tuple with the TypeUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetTypeUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.TypeUpdate) {
		return nil, false
	}
	return o.TypeUpdate, true
}

// HasTypeUpdate returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasTypeUpdate() bool {
	if o != nil && !IsNil(o.TypeUpdate) {
		return true
	}

	return false
}

// SetTypeUpdate gets a reference to the given bool and assigns it to the TypeUpdate field.
func (o *WritableEventRuleRequest) SetTypeUpdate(v bool) {
	o.TypeUpdate = &v
}

// GetTypeDelete returns the TypeDelete field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetTypeDelete() bool {
	if o == nil || IsNil(o.TypeDelete) {
		var ret bool
		return ret
	}
	return *o.TypeDelete
}

// GetTypeDeleteOk returns a tuple with the TypeDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetTypeDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.TypeDelete) {
		return nil, false
	}
	return o.TypeDelete, true
}

// HasTypeDelete returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasTypeDelete() bool {
	if o != nil && !IsNil(o.TypeDelete) {
		return true
	}

	return false
}

// SetTypeDelete gets a reference to the given bool and assigns it to the TypeDelete field.
func (o *WritableEventRuleRequest) SetTypeDelete(v bool) {
	o.TypeDelete = &v
}

// GetTypeJobStart returns the TypeJobStart field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetTypeJobStart() bool {
	if o == nil || IsNil(o.TypeJobStart) {
		var ret bool
		return ret
	}
	return *o.TypeJobStart
}

// GetTypeJobStartOk returns a tuple with the TypeJobStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetTypeJobStartOk() (*bool, bool) {
	if o == nil || IsNil(o.TypeJobStart) {
		return nil, false
	}
	return o.TypeJobStart, true
}

// HasTypeJobStart returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasTypeJobStart() bool {
	if o != nil && !IsNil(o.TypeJobStart) {
		return true
	}

	return false
}

// SetTypeJobStart gets a reference to the given bool and assigns it to the TypeJobStart field.
func (o *WritableEventRuleRequest) SetTypeJobStart(v bool) {
	o.TypeJobStart = &v
}

// GetTypeJobEnd returns the TypeJobEnd field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetTypeJobEnd() bool {
	if o == nil || IsNil(o.TypeJobEnd) {
		var ret bool
		return ret
	}
	return *o.TypeJobEnd
}

// GetTypeJobEndOk returns a tuple with the TypeJobEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetTypeJobEndOk() (*bool, bool) {
	if o == nil || IsNil(o.TypeJobEnd) {
		return nil, false
	}
	return o.TypeJobEnd, true
}

// HasTypeJobEnd returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasTypeJobEnd() bool {
	if o != nil && !IsNil(o.TypeJobEnd) {
		return true
	}

	return false
}

// SetTypeJobEnd gets a reference to the given bool and assigns it to the TypeJobEnd field.
func (o *WritableEventRuleRequest) SetTypeJobEnd(v bool) {
	o.TypeJobEnd = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WritableEventRuleRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableEventRuleRequest) GetConditions() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableEventRuleRequest) GetConditionsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return &o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given interface{} and assigns it to the Conditions field.
func (o *WritableEventRuleRequest) SetConditions(v interface{}) {
	o.Conditions = v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetActionType() EventRuleActionTypeValue {
	if o == nil || IsNil(o.ActionType) {
		var ret EventRuleActionTypeValue
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetActionTypeOk() (*EventRuleActionTypeValue, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given EventRuleActionTypeValue and assigns it to the ActionType field.
func (o *WritableEventRuleRequest) SetActionType(v EventRuleActionTypeValue) {
	o.ActionType = &v
}

// GetActionObjectType returns the ActionObjectType field value
func (o *WritableEventRuleRequest) GetActionObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionObjectType
}

// GetActionObjectTypeOk returns a tuple with the ActionObjectType field value
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetActionObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionObjectType, true
}

// SetActionObjectType sets field value
func (o *WritableEventRuleRequest) SetActionObjectType(v string) {
	o.ActionObjectType = v
}

// GetActionObjectId returns the ActionObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableEventRuleRequest) GetActionObjectId() int64 {
	if o == nil || IsNil(o.ActionObjectId.Get()) {
		var ret int64
		return ret
	}
	return *o.ActionObjectId.Get()
}

// GetActionObjectIdOk returns a tuple with the ActionObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableEventRuleRequest) GetActionObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionObjectId.Get(), o.ActionObjectId.IsSet()
}

// HasActionObjectId returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasActionObjectId() bool {
	if o != nil && o.ActionObjectId.IsSet() {
		return true
	}

	return false
}

// SetActionObjectId gets a reference to the given NullableInt64 and assigns it to the ActionObjectId field.
func (o *WritableEventRuleRequest) SetActionObjectId(v int64) {
	o.ActionObjectId.Set(&v)
}

// SetActionObjectIdNil sets the value for ActionObjectId to be an explicit nil
func (o *WritableEventRuleRequest) SetActionObjectIdNil() {
	o.ActionObjectId.Set(nil)
}

// UnsetActionObjectId ensures that no value is present for ActionObjectId, not even an explicit nil
func (o *WritableEventRuleRequest) UnsetActionObjectId() {
	o.ActionObjectId.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WritableEventRuleRequest) SetDescription(v string) {
	o.Description = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *WritableEventRuleRequest) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *WritableEventRuleRequest) GetTags() []NestedTagRequest {
	if o == nil || IsNil(o.Tags) {
		var ret []NestedTagRequest
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableEventRuleRequest) GetTagsOk() ([]NestedTagRequest, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *WritableEventRuleRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTagRequest and assigns it to the Tags field.
func (o *WritableEventRuleRequest) SetTags(v []NestedTagRequest) {
	o.Tags = v
}

func (o WritableEventRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WritableEventRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object_types"] = o.ObjectTypes
	toSerialize["name"] = o.Name
	if !IsNil(o.TypeCreate) {
		toSerialize["type_create"] = o.TypeCreate
	}
	if !IsNil(o.TypeUpdate) {
		toSerialize["type_update"] = o.TypeUpdate
	}
	if !IsNil(o.TypeDelete) {
		toSerialize["type_delete"] = o.TypeDelete
	}
	if !IsNil(o.TypeJobStart) {
		toSerialize["type_job_start"] = o.TypeJobStart
	}
	if !IsNil(o.TypeJobEnd) {
		toSerialize["type_job_end"] = o.TypeJobEnd
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.ActionType) {
		toSerialize["action_type"] = o.ActionType
	}
	toSerialize["action_object_type"] = o.ActionObjectType
	if o.ActionObjectId.IsSet() {
		toSerialize["action_object_id"] = o.ActionObjectId.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WritableEventRuleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object_types",
		"name",
		"action_object_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWritableEventRuleRequest := _WritableEventRuleRequest{}

	err = json.Unmarshal(data, &varWritableEventRuleRequest)

	if err != nil {
		return err
	}

	*o = WritableEventRuleRequest(varWritableEventRuleRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "object_types")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type_create")
		delete(additionalProperties, "type_update")
		delete(additionalProperties, "type_delete")
		delete(additionalProperties, "type_job_start")
		delete(additionalProperties, "type_job_end")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "action_type")
		delete(additionalProperties, "action_object_type")
		delete(additionalProperties, "action_object_id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "custom_fields")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWritableEventRuleRequest struct {
	value *WritableEventRuleRequest
	isSet bool
}

func (v NullableWritableEventRuleRequest) Get() *WritableEventRuleRequest {
	return v.value
}

func (v *NullableWritableEventRuleRequest) Set(val *WritableEventRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableEventRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableEventRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableEventRuleRequest(val *WritableEventRuleRequest) *NullableWritableEventRuleRequest {
	return &NullableWritableEventRuleRequest{value: val, isSet: true}
}

func (v NullableWritableEventRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableEventRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
