/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWritableInterfaceRequestMode IEEE 802.1Q tagging strategy  * `access` - Access * `tagged` - Tagged * `tagged-all` - Tagged (All)
type PatchedWritableInterfaceRequestMode string

// List of PatchedWritableInterfaceRequest_mode
const (
	PATCHEDWRITABLEINTERFACEREQUESTMODE_ACCESS     PatchedWritableInterfaceRequestMode = "access"
	PATCHEDWRITABLEINTERFACEREQUESTMODE_TAGGED     PatchedWritableInterfaceRequestMode = "tagged"
	PATCHEDWRITABLEINTERFACEREQUESTMODE_TAGGED_ALL PatchedWritableInterfaceRequestMode = "tagged-all"
	PATCHEDWRITABLEINTERFACEREQUESTMODE_EMPTY      PatchedWritableInterfaceRequestMode = ""
)

// All allowed values of PatchedWritableInterfaceRequestMode enum
var AllowedPatchedWritableInterfaceRequestModeEnumValues = []PatchedWritableInterfaceRequestMode{
	"access",
	"tagged",
	"tagged-all",
	"",
}

func (v *PatchedWritableInterfaceRequestMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWritableInterfaceRequestMode(value)
	for _, existing := range AllowedPatchedWritableInterfaceRequestModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWritableInterfaceRequestMode", value)
}

// NewPatchedWritableInterfaceRequestModeFromValue returns a pointer to a valid PatchedWritableInterfaceRequestMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWritableInterfaceRequestModeFromValue(v string) (*PatchedWritableInterfaceRequestMode, error) {
	ev := PatchedWritableInterfaceRequestMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWritableInterfaceRequestMode: valid values are %v", v, AllowedPatchedWritableInterfaceRequestModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWritableInterfaceRequestMode) IsValid() bool {
	for _, existing := range AllowedPatchedWritableInterfaceRequestModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWritableInterfaceRequest_mode value
func (v PatchedWritableInterfaceRequestMode) Ptr() *PatchedWritableInterfaceRequestMode {
	return &v
}

type NullablePatchedWritableInterfaceRequestMode struct {
	value *PatchedWritableInterfaceRequestMode
	isSet bool
}

func (v NullablePatchedWritableInterfaceRequestMode) Get() *PatchedWritableInterfaceRequestMode {
	return v.value
}

func (v *NullablePatchedWritableInterfaceRequestMode) Set(val *PatchedWritableInterfaceRequestMode) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableInterfaceRequestMode) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableInterfaceRequestMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableInterfaceRequestMode(val *PatchedWritableInterfaceRequestMode) *NullablePatchedWritableInterfaceRequestMode {
	return &NullablePatchedWritableInterfaceRequestMode{value: val, isSet: true}
}

func (v NullablePatchedWritableInterfaceRequestMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableInterfaceRequestMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
