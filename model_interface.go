/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Interface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Interface{}

// Interface Adds support for custom fields and tags.
type Interface struct {
	Id      int32                  `json:"id"`
	Url     string                 `json:"url"`
	Display string                 `json:"display"`
	Device  BriefDevice            `json:"device"`
	Vdcs    []VirtualDeviceContext `json:"vdcs,omitempty"`
	Module  NullableBriefModule    `json:"module,omitempty"`
	Name    string                 `json:"name"`
	// Physical label
	Label      *string                 `json:"label,omitempty"`
	Type       InterfaceType           `json:"type"`
	Enabled    *bool                   `json:"enabled,omitempty"`
	Parent     NullableNestedInterface `json:"parent,omitempty"`
	Bridge     NullableNestedInterface `json:"bridge,omitempty"`
	Lag        NullableNestedInterface `json:"lag,omitempty"`
	Mtu        NullableInt32           `json:"mtu,omitempty"`
	MacAddress NullableString          `json:"mac_address,omitempty"`
	Speed      NullableInt32           `json:"speed,omitempty"`
	Duplex     NullableInterfaceDuplex `json:"duplex,omitempty"`
	Wwn        NullableString          `json:"wwn,omitempty"`
	// This interface is used only for out-of-band management
	MgmtOnly    *bool               `json:"mgmt_only,omitempty"`
	Description *string             `json:"description,omitempty"`
	Mode        *InterfaceMode      `json:"mode,omitempty"`
	RfRole      *InterfaceRfRole    `json:"rf_role,omitempty"`
	RfChannel   *InterfaceRfChannel `json:"rf_channel,omitempty"`
	PoeMode     *InterfacePoeMode   `json:"poe_mode,omitempty"`
	PoeType     *InterfacePoeType   `json:"poe_type,omitempty"`
	// Populated by selected channel (if set)
	RfChannelFrequency NullableFloat64 `json:"rf_channel_frequency,omitempty"`
	// Populated by selected channel (if set)
	RfChannelWidth NullableFloat64   `json:"rf_channel_width,omitempty"`
	TxPower        NullableInt32     `json:"tx_power,omitempty"`
	UntaggedVlan   NullableBriefVLAN `json:"untagged_vlan,omitempty"`
	TaggedVlans    []VLAN            `json:"tagged_vlans,omitempty"`
	// Treat as if a cable is connected
	MarkConnected *bool                      `json:"mark_connected,omitempty"`
	Cable         NullableBriefCable         `json:"cable"`
	CableEnd      string                     `json:"cable_end"`
	WirelessLink  NullableNestedWirelessLink `json:"wireless_link"`
	LinkPeers     []interface{}              `json:"link_peers"`
	// Return the type of the peer link terminations, or None.
	LinkPeersType               NullableString                `json:"link_peers_type"`
	WirelessLans                []WirelessLAN                 `json:"wireless_lans,omitempty"`
	Vrf                         NullableBriefVRF              `json:"vrf,omitempty"`
	L2vpnTermination            NullableBriefL2VPNTermination `json:"l2vpn_termination"`
	ConnectedEndpoints          []interface{}                 `json:"connected_endpoints"`
	ConnectedEndpointsType      NullableString                `json:"connected_endpoints_type"`
	ConnectedEndpointsReachable bool                          `json:"connected_endpoints_reachable"`
	Tags                        []NestedTag                   `json:"tags,omitempty"`
	CustomFields                map[string]interface{}        `json:"custom_fields,omitempty"`
	Created                     NullableTime                  `json:"created"`
	LastUpdated                 NullableTime                  `json:"last_updated"`
	CountIpaddresses            int32                         `json:"count_ipaddresses"`
	CountFhrpGroups             int32                         `json:"count_fhrp_groups"`
	Occupied                    bool                          `json:"_occupied"`
	AdditionalProperties        map[string]interface{}
}

type _Interface Interface

// NewInterface instantiates a new Interface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterface(id int32, url string, display string, device BriefDevice, name string, type_ InterfaceType, cable NullableBriefCable, cableEnd string, wirelessLink NullableNestedWirelessLink, linkPeers []interface{}, linkPeersType NullableString, l2vpnTermination NullableBriefL2VPNTermination, connectedEndpoints []interface{}, connectedEndpointsType NullableString, connectedEndpointsReachable bool, created NullableTime, lastUpdated NullableTime, countIpaddresses int32, countFhrpGroups int32, occupied bool) *Interface {
	this := Interface{}
	this.Id = id
	this.Url = url
	this.Display = display
	this.Device = device
	this.Name = name
	this.Type = type_
	this.Cable = cable
	this.CableEnd = cableEnd
	this.WirelessLink = wirelessLink
	this.LinkPeers = linkPeers
	this.LinkPeersType = linkPeersType
	this.L2vpnTermination = l2vpnTermination
	this.ConnectedEndpoints = connectedEndpoints
	this.ConnectedEndpointsType = connectedEndpointsType
	this.ConnectedEndpointsReachable = connectedEndpointsReachable
	this.Created = created
	this.LastUpdated = lastUpdated
	this.CountIpaddresses = countIpaddresses
	this.CountFhrpGroups = countFhrpGroups
	this.Occupied = occupied
	return &this
}

// NewInterfaceWithDefaults instantiates a new Interface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceWithDefaults() *Interface {
	this := Interface{}
	return &this
}

// GetId returns the Id field value
func (o *Interface) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Interface) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Interface) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *Interface) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Interface) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Interface) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *Interface) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *Interface) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *Interface) SetDisplay(v string) {
	o.Display = v
}

// GetDevice returns the Device field value
func (o *Interface) GetDevice() BriefDevice {
	if o == nil {
		var ret BriefDevice
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *Interface) GetDeviceOk() (*BriefDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *Interface) SetDevice(v BriefDevice) {
	o.Device = v
}

// GetVdcs returns the Vdcs field value if set, zero value otherwise.
func (o *Interface) GetVdcs() []VirtualDeviceContext {
	if o == nil || IsNil(o.Vdcs) {
		var ret []VirtualDeviceContext
		return ret
	}
	return o.Vdcs
}

// GetVdcsOk returns a tuple with the Vdcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetVdcsOk() ([]VirtualDeviceContext, bool) {
	if o == nil || IsNil(o.Vdcs) {
		return nil, false
	}
	return o.Vdcs, true
}

// HasVdcs returns a boolean if a field has been set.
func (o *Interface) HasVdcs() bool {
	if o != nil && !IsNil(o.Vdcs) {
		return true
	}

	return false
}

// SetVdcs gets a reference to the given []VirtualDeviceContext and assigns it to the Vdcs field.
func (o *Interface) SetVdcs(v []VirtualDeviceContext) {
	o.Vdcs = v
}

// GetModule returns the Module field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetModule() BriefModule {
	if o == nil || IsNil(o.Module.Get()) {
		var ret BriefModule
		return ret
	}
	return *o.Module.Get()
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetModuleOk() (*BriefModule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Module.Get(), o.Module.IsSet()
}

// HasModule returns a boolean if a field has been set.
func (o *Interface) HasModule() bool {
	if o != nil && o.Module.IsSet() {
		return true
	}

	return false
}

// SetModule gets a reference to the given NullableBriefModule and assigns it to the Module field.
func (o *Interface) SetModule(v BriefModule) {
	o.Module.Set(&v)
}

// SetModuleNil sets the value for Module to be an explicit nil
func (o *Interface) SetModuleNil() {
	o.Module.Set(nil)
}

// UnsetModule ensures that no value is present for Module, not even an explicit nil
func (o *Interface) UnsetModule() {
	o.Module.Unset()
}

// GetName returns the Name field value
func (o *Interface) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Interface) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Interface) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Interface) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Interface) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Interface) SetLabel(v string) {
	o.Label = &v
}

// GetType returns the Type field value
func (o *Interface) GetType() InterfaceType {
	if o == nil {
		var ret InterfaceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Interface) GetTypeOk() (*InterfaceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Interface) SetType(v InterfaceType) {
	o.Type = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Interface) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Interface) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Interface) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetParent returns the Parent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetParent() NestedInterface {
	if o == nil || IsNil(o.Parent.Get()) {
		var ret NestedInterface
		return ret
	}
	return *o.Parent.Get()
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetParentOk() (*NestedInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parent.Get(), o.Parent.IsSet()
}

// HasParent returns a boolean if a field has been set.
func (o *Interface) HasParent() bool {
	if o != nil && o.Parent.IsSet() {
		return true
	}

	return false
}

// SetParent gets a reference to the given NullableNestedInterface and assigns it to the Parent field.
func (o *Interface) SetParent(v NestedInterface) {
	o.Parent.Set(&v)
}

// SetParentNil sets the value for Parent to be an explicit nil
func (o *Interface) SetParentNil() {
	o.Parent.Set(nil)
}

// UnsetParent ensures that no value is present for Parent, not even an explicit nil
func (o *Interface) UnsetParent() {
	o.Parent.Unset()
}

// GetBridge returns the Bridge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetBridge() NestedInterface {
	if o == nil || IsNil(o.Bridge.Get()) {
		var ret NestedInterface
		return ret
	}
	return *o.Bridge.Get()
}

// GetBridgeOk returns a tuple with the Bridge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetBridgeOk() (*NestedInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bridge.Get(), o.Bridge.IsSet()
}

// HasBridge returns a boolean if a field has been set.
func (o *Interface) HasBridge() bool {
	if o != nil && o.Bridge.IsSet() {
		return true
	}

	return false
}

// SetBridge gets a reference to the given NullableNestedInterface and assigns it to the Bridge field.
func (o *Interface) SetBridge(v NestedInterface) {
	o.Bridge.Set(&v)
}

// SetBridgeNil sets the value for Bridge to be an explicit nil
func (o *Interface) SetBridgeNil() {
	o.Bridge.Set(nil)
}

// UnsetBridge ensures that no value is present for Bridge, not even an explicit nil
func (o *Interface) UnsetBridge() {
	o.Bridge.Unset()
}

// GetLag returns the Lag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetLag() NestedInterface {
	if o == nil || IsNil(o.Lag.Get()) {
		var ret NestedInterface
		return ret
	}
	return *o.Lag.Get()
}

// GetLagOk returns a tuple with the Lag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetLagOk() (*NestedInterface, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lag.Get(), o.Lag.IsSet()
}

// HasLag returns a boolean if a field has been set.
func (o *Interface) HasLag() bool {
	if o != nil && o.Lag.IsSet() {
		return true
	}

	return false
}

// SetLag gets a reference to the given NullableNestedInterface and assigns it to the Lag field.
func (o *Interface) SetLag(v NestedInterface) {
	o.Lag.Set(&v)
}

// SetLagNil sets the value for Lag to be an explicit nil
func (o *Interface) SetLagNil() {
	o.Lag.Set(nil)
}

// UnsetLag ensures that no value is present for Lag, not even an explicit nil
func (o *Interface) UnsetLag() {
	o.Lag.Unset()
}

// GetMtu returns the Mtu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu.Get()) {
		var ret int32
		return ret
	}
	return *o.Mtu.Get()
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetMtuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mtu.Get(), o.Mtu.IsSet()
}

// HasMtu returns a boolean if a field has been set.
func (o *Interface) HasMtu() bool {
	if o != nil && o.Mtu.IsSet() {
		return true
	}

	return false
}

// SetMtu gets a reference to the given NullableInt32 and assigns it to the Mtu field.
func (o *Interface) SetMtu(v int32) {
	o.Mtu.Set(&v)
}

// SetMtuNil sets the value for Mtu to be an explicit nil
func (o *Interface) SetMtuNil() {
	o.Mtu.Set(nil)
}

// UnsetMtu ensures that no value is present for Mtu, not even an explicit nil
func (o *Interface) UnsetMtu() {
	o.Mtu.Unset()
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress.Get()) {
		var ret string
		return ret
	}
	return *o.MacAddress.Get()
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MacAddress.Get(), o.MacAddress.IsSet()
}

// HasMacAddress returns a boolean if a field has been set.
func (o *Interface) HasMacAddress() bool {
	if o != nil && o.MacAddress.IsSet() {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given NullableString and assigns it to the MacAddress field.
func (o *Interface) SetMacAddress(v string) {
	o.MacAddress.Set(&v)
}

// SetMacAddressNil sets the value for MacAddress to be an explicit nil
func (o *Interface) SetMacAddressNil() {
	o.MacAddress.Set(nil)
}

// UnsetMacAddress ensures that no value is present for MacAddress, not even an explicit nil
func (o *Interface) UnsetMacAddress() {
	o.MacAddress.Unset()
}

// GetSpeed returns the Speed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetSpeed() int32 {
	if o == nil || IsNil(o.Speed.Get()) {
		var ret int32
		return ret
	}
	return *o.Speed.Get()
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetSpeedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Speed.Get(), o.Speed.IsSet()
}

// HasSpeed returns a boolean if a field has been set.
func (o *Interface) HasSpeed() bool {
	if o != nil && o.Speed.IsSet() {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given NullableInt32 and assigns it to the Speed field.
func (o *Interface) SetSpeed(v int32) {
	o.Speed.Set(&v)
}

// SetSpeedNil sets the value for Speed to be an explicit nil
func (o *Interface) SetSpeedNil() {
	o.Speed.Set(nil)
}

// UnsetSpeed ensures that no value is present for Speed, not even an explicit nil
func (o *Interface) UnsetSpeed() {
	o.Speed.Unset()
}

// GetDuplex returns the Duplex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetDuplex() InterfaceDuplex {
	if o == nil || IsNil(o.Duplex.Get()) {
		var ret InterfaceDuplex
		return ret
	}
	return *o.Duplex.Get()
}

// GetDuplexOk returns a tuple with the Duplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetDuplexOk() (*InterfaceDuplex, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duplex.Get(), o.Duplex.IsSet()
}

// HasDuplex returns a boolean if a field has been set.
func (o *Interface) HasDuplex() bool {
	if o != nil && o.Duplex.IsSet() {
		return true
	}

	return false
}

// SetDuplex gets a reference to the given NullableInterfaceDuplex and assigns it to the Duplex field.
func (o *Interface) SetDuplex(v InterfaceDuplex) {
	o.Duplex.Set(&v)
}

// SetDuplexNil sets the value for Duplex to be an explicit nil
func (o *Interface) SetDuplexNil() {
	o.Duplex.Set(nil)
}

// UnsetDuplex ensures that no value is present for Duplex, not even an explicit nil
func (o *Interface) UnsetDuplex() {
	o.Duplex.Unset()
}

// GetWwn returns the Wwn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetWwn() string {
	if o == nil || IsNil(o.Wwn.Get()) {
		var ret string
		return ret
	}
	return *o.Wwn.Get()
}

// GetWwnOk returns a tuple with the Wwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetWwnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Wwn.Get(), o.Wwn.IsSet()
}

// HasWwn returns a boolean if a field has been set.
func (o *Interface) HasWwn() bool {
	if o != nil && o.Wwn.IsSet() {
		return true
	}

	return false
}

// SetWwn gets a reference to the given NullableString and assigns it to the Wwn field.
func (o *Interface) SetWwn(v string) {
	o.Wwn.Set(&v)
}

// SetWwnNil sets the value for Wwn to be an explicit nil
func (o *Interface) SetWwnNil() {
	o.Wwn.Set(nil)
}

// UnsetWwn ensures that no value is present for Wwn, not even an explicit nil
func (o *Interface) UnsetWwn() {
	o.Wwn.Unset()
}

// GetMgmtOnly returns the MgmtOnly field value if set, zero value otherwise.
func (o *Interface) GetMgmtOnly() bool {
	if o == nil || IsNil(o.MgmtOnly) {
		var ret bool
		return ret
	}
	return *o.MgmtOnly
}

// GetMgmtOnlyOk returns a tuple with the MgmtOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetMgmtOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MgmtOnly) {
		return nil, false
	}
	return o.MgmtOnly, true
}

// HasMgmtOnly returns a boolean if a field has been set.
func (o *Interface) HasMgmtOnly() bool {
	if o != nil && !IsNil(o.MgmtOnly) {
		return true
	}

	return false
}

// SetMgmtOnly gets a reference to the given bool and assigns it to the MgmtOnly field.
func (o *Interface) SetMgmtOnly(v bool) {
	o.MgmtOnly = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Interface) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Interface) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Interface) SetDescription(v string) {
	o.Description = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *Interface) GetMode() InterfaceMode {
	if o == nil || IsNil(o.Mode) {
		var ret InterfaceMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetModeOk() (*InterfaceMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *Interface) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given InterfaceMode and assigns it to the Mode field.
func (o *Interface) SetMode(v InterfaceMode) {
	o.Mode = &v
}

// GetRfRole returns the RfRole field value if set, zero value otherwise.
func (o *Interface) GetRfRole() InterfaceRfRole {
	if o == nil || IsNil(o.RfRole) {
		var ret InterfaceRfRole
		return ret
	}
	return *o.RfRole
}

// GetRfRoleOk returns a tuple with the RfRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetRfRoleOk() (*InterfaceRfRole, bool) {
	if o == nil || IsNil(o.RfRole) {
		return nil, false
	}
	return o.RfRole, true
}

// HasRfRole returns a boolean if a field has been set.
func (o *Interface) HasRfRole() bool {
	if o != nil && !IsNil(o.RfRole) {
		return true
	}

	return false
}

// SetRfRole gets a reference to the given InterfaceRfRole and assigns it to the RfRole field.
func (o *Interface) SetRfRole(v InterfaceRfRole) {
	o.RfRole = &v
}

// GetRfChannel returns the RfChannel field value if set, zero value otherwise.
func (o *Interface) GetRfChannel() InterfaceRfChannel {
	if o == nil || IsNil(o.RfChannel) {
		var ret InterfaceRfChannel
		return ret
	}
	return *o.RfChannel
}

// GetRfChannelOk returns a tuple with the RfChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetRfChannelOk() (*InterfaceRfChannel, bool) {
	if o == nil || IsNil(o.RfChannel) {
		return nil, false
	}
	return o.RfChannel, true
}

// HasRfChannel returns a boolean if a field has been set.
func (o *Interface) HasRfChannel() bool {
	if o != nil && !IsNil(o.RfChannel) {
		return true
	}

	return false
}

// SetRfChannel gets a reference to the given InterfaceRfChannel and assigns it to the RfChannel field.
func (o *Interface) SetRfChannel(v InterfaceRfChannel) {
	o.RfChannel = &v
}

// GetPoeMode returns the PoeMode field value if set, zero value otherwise.
func (o *Interface) GetPoeMode() InterfacePoeMode {
	if o == nil || IsNil(o.PoeMode) {
		var ret InterfacePoeMode
		return ret
	}
	return *o.PoeMode
}

// GetPoeModeOk returns a tuple with the PoeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetPoeModeOk() (*InterfacePoeMode, bool) {
	if o == nil || IsNil(o.PoeMode) {
		return nil, false
	}
	return o.PoeMode, true
}

// HasPoeMode returns a boolean if a field has been set.
func (o *Interface) HasPoeMode() bool {
	if o != nil && !IsNil(o.PoeMode) {
		return true
	}

	return false
}

// SetPoeMode gets a reference to the given InterfacePoeMode and assigns it to the PoeMode field.
func (o *Interface) SetPoeMode(v InterfacePoeMode) {
	o.PoeMode = &v
}

// GetPoeType returns the PoeType field value if set, zero value otherwise.
func (o *Interface) GetPoeType() InterfacePoeType {
	if o == nil || IsNil(o.PoeType) {
		var ret InterfacePoeType
		return ret
	}
	return *o.PoeType
}

// GetPoeTypeOk returns a tuple with the PoeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetPoeTypeOk() (*InterfacePoeType, bool) {
	if o == nil || IsNil(o.PoeType) {
		return nil, false
	}
	return o.PoeType, true
}

// HasPoeType returns a boolean if a field has been set.
func (o *Interface) HasPoeType() bool {
	if o != nil && !IsNil(o.PoeType) {
		return true
	}

	return false
}

// SetPoeType gets a reference to the given InterfacePoeType and assigns it to the PoeType field.
func (o *Interface) SetPoeType(v InterfacePoeType) {
	o.PoeType = &v
}

// GetRfChannelFrequency returns the RfChannelFrequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetRfChannelFrequency() float64 {
	if o == nil || IsNil(o.RfChannelFrequency.Get()) {
		var ret float64
		return ret
	}
	return *o.RfChannelFrequency.Get()
}

// GetRfChannelFrequencyOk returns a tuple with the RfChannelFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetRfChannelFrequencyOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RfChannelFrequency.Get(), o.RfChannelFrequency.IsSet()
}

// HasRfChannelFrequency returns a boolean if a field has been set.
func (o *Interface) HasRfChannelFrequency() bool {
	if o != nil && o.RfChannelFrequency.IsSet() {
		return true
	}

	return false
}

// SetRfChannelFrequency gets a reference to the given NullableFloat64 and assigns it to the RfChannelFrequency field.
func (o *Interface) SetRfChannelFrequency(v float64) {
	o.RfChannelFrequency.Set(&v)
}

// SetRfChannelFrequencyNil sets the value for RfChannelFrequency to be an explicit nil
func (o *Interface) SetRfChannelFrequencyNil() {
	o.RfChannelFrequency.Set(nil)
}

// UnsetRfChannelFrequency ensures that no value is present for RfChannelFrequency, not even an explicit nil
func (o *Interface) UnsetRfChannelFrequency() {
	o.RfChannelFrequency.Unset()
}

// GetRfChannelWidth returns the RfChannelWidth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetRfChannelWidth() float64 {
	if o == nil || IsNil(o.RfChannelWidth.Get()) {
		var ret float64
		return ret
	}
	return *o.RfChannelWidth.Get()
}

// GetRfChannelWidthOk returns a tuple with the RfChannelWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetRfChannelWidthOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RfChannelWidth.Get(), o.RfChannelWidth.IsSet()
}

// HasRfChannelWidth returns a boolean if a field has been set.
func (o *Interface) HasRfChannelWidth() bool {
	if o != nil && o.RfChannelWidth.IsSet() {
		return true
	}

	return false
}

// SetRfChannelWidth gets a reference to the given NullableFloat64 and assigns it to the RfChannelWidth field.
func (o *Interface) SetRfChannelWidth(v float64) {
	o.RfChannelWidth.Set(&v)
}

// SetRfChannelWidthNil sets the value for RfChannelWidth to be an explicit nil
func (o *Interface) SetRfChannelWidthNil() {
	o.RfChannelWidth.Set(nil)
}

// UnsetRfChannelWidth ensures that no value is present for RfChannelWidth, not even an explicit nil
func (o *Interface) UnsetRfChannelWidth() {
	o.RfChannelWidth.Unset()
}

// GetTxPower returns the TxPower field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetTxPower() int32 {
	if o == nil || IsNil(o.TxPower.Get()) {
		var ret int32
		return ret
	}
	return *o.TxPower.Get()
}

// GetTxPowerOk returns a tuple with the TxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetTxPowerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxPower.Get(), o.TxPower.IsSet()
}

// HasTxPower returns a boolean if a field has been set.
func (o *Interface) HasTxPower() bool {
	if o != nil && o.TxPower.IsSet() {
		return true
	}

	return false
}

// SetTxPower gets a reference to the given NullableInt32 and assigns it to the TxPower field.
func (o *Interface) SetTxPower(v int32) {
	o.TxPower.Set(&v)
}

// SetTxPowerNil sets the value for TxPower to be an explicit nil
func (o *Interface) SetTxPowerNil() {
	o.TxPower.Set(nil)
}

// UnsetTxPower ensures that no value is present for TxPower, not even an explicit nil
func (o *Interface) UnsetTxPower() {
	o.TxPower.Unset()
}

// GetUntaggedVlan returns the UntaggedVlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetUntaggedVlan() BriefVLAN {
	if o == nil || IsNil(o.UntaggedVlan.Get()) {
		var ret BriefVLAN
		return ret
	}
	return *o.UntaggedVlan.Get()
}

// GetUntaggedVlanOk returns a tuple with the UntaggedVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetUntaggedVlanOk() (*BriefVLAN, bool) {
	if o == nil {
		return nil, false
	}
	return o.UntaggedVlan.Get(), o.UntaggedVlan.IsSet()
}

// HasUntaggedVlan returns a boolean if a field has been set.
func (o *Interface) HasUntaggedVlan() bool {
	if o != nil && o.UntaggedVlan.IsSet() {
		return true
	}

	return false
}

// SetUntaggedVlan gets a reference to the given NullableBriefVLAN and assigns it to the UntaggedVlan field.
func (o *Interface) SetUntaggedVlan(v BriefVLAN) {
	o.UntaggedVlan.Set(&v)
}

// SetUntaggedVlanNil sets the value for UntaggedVlan to be an explicit nil
func (o *Interface) SetUntaggedVlanNil() {
	o.UntaggedVlan.Set(nil)
}

// UnsetUntaggedVlan ensures that no value is present for UntaggedVlan, not even an explicit nil
func (o *Interface) UnsetUntaggedVlan() {
	o.UntaggedVlan.Unset()
}

// GetTaggedVlans returns the TaggedVlans field value if set, zero value otherwise.
func (o *Interface) GetTaggedVlans() []VLAN {
	if o == nil || IsNil(o.TaggedVlans) {
		var ret []VLAN
		return ret
	}
	return o.TaggedVlans
}

// GetTaggedVlansOk returns a tuple with the TaggedVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetTaggedVlansOk() ([]VLAN, bool) {
	if o == nil || IsNil(o.TaggedVlans) {
		return nil, false
	}
	return o.TaggedVlans, true
}

// HasTaggedVlans returns a boolean if a field has been set.
func (o *Interface) HasTaggedVlans() bool {
	if o != nil && !IsNil(o.TaggedVlans) {
		return true
	}

	return false
}

// SetTaggedVlans gets a reference to the given []VLAN and assigns it to the TaggedVlans field.
func (o *Interface) SetTaggedVlans(v []VLAN) {
	o.TaggedVlans = v
}

// GetMarkConnected returns the MarkConnected field value if set, zero value otherwise.
func (o *Interface) GetMarkConnected() bool {
	if o == nil || IsNil(o.MarkConnected) {
		var ret bool
		return ret
	}
	return *o.MarkConnected
}

// GetMarkConnectedOk returns a tuple with the MarkConnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetMarkConnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.MarkConnected) {
		return nil, false
	}
	return o.MarkConnected, true
}

// HasMarkConnected returns a boolean if a field has been set.
func (o *Interface) HasMarkConnected() bool {
	if o != nil && !IsNil(o.MarkConnected) {
		return true
	}

	return false
}

// SetMarkConnected gets a reference to the given bool and assigns it to the MarkConnected field.
func (o *Interface) SetMarkConnected(v bool) {
	o.MarkConnected = &v
}

// GetCable returns the Cable field value
// If the value is explicit nil, the zero value for BriefCable will be returned
func (o *Interface) GetCable() BriefCable {
	if o == nil || o.Cable.Get() == nil {
		var ret BriefCable
		return ret
	}

	return *o.Cable.Get()
}

// GetCableOk returns a tuple with the Cable field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetCableOk() (*BriefCable, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cable.Get(), o.Cable.IsSet()
}

// SetCable sets field value
func (o *Interface) SetCable(v BriefCable) {
	o.Cable.Set(&v)
}

// GetCableEnd returns the CableEnd field value
func (o *Interface) GetCableEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CableEnd
}

// GetCableEndOk returns a tuple with the CableEnd field value
// and a boolean to check if the value has been set.
func (o *Interface) GetCableEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CableEnd, true
}

// SetCableEnd sets field value
func (o *Interface) SetCableEnd(v string) {
	o.CableEnd = v
}

// GetWirelessLink returns the WirelessLink field value
// If the value is explicit nil, the zero value for NestedWirelessLink will be returned
func (o *Interface) GetWirelessLink() NestedWirelessLink {
	if o == nil || o.WirelessLink.Get() == nil {
		var ret NestedWirelessLink
		return ret
	}

	return *o.WirelessLink.Get()
}

// GetWirelessLinkOk returns a tuple with the WirelessLink field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetWirelessLinkOk() (*NestedWirelessLink, bool) {
	if o == nil {
		return nil, false
	}
	return o.WirelessLink.Get(), o.WirelessLink.IsSet()
}

// SetWirelessLink sets field value
func (o *Interface) SetWirelessLink(v NestedWirelessLink) {
	o.WirelessLink.Set(&v)
}

// GetLinkPeers returns the LinkPeers field value
func (o *Interface) GetLinkPeers() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.LinkPeers
}

// GetLinkPeersOk returns a tuple with the LinkPeers field value
// and a boolean to check if the value has been set.
func (o *Interface) GetLinkPeersOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkPeers, true
}

// SetLinkPeers sets field value
func (o *Interface) SetLinkPeers(v []interface{}) {
	o.LinkPeers = v
}

// GetLinkPeersType returns the LinkPeersType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Interface) GetLinkPeersType() string {
	if o == nil || o.LinkPeersType.Get() == nil {
		var ret string
		return ret
	}

	return *o.LinkPeersType.Get()
}

// GetLinkPeersTypeOk returns a tuple with the LinkPeersType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetLinkPeersTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkPeersType.Get(), o.LinkPeersType.IsSet()
}

// SetLinkPeersType sets field value
func (o *Interface) SetLinkPeersType(v string) {
	o.LinkPeersType.Set(&v)
}

// GetWirelessLans returns the WirelessLans field value if set, zero value otherwise.
func (o *Interface) GetWirelessLans() []WirelessLAN {
	if o == nil || IsNil(o.WirelessLans) {
		var ret []WirelessLAN
		return ret
	}
	return o.WirelessLans
}

// GetWirelessLansOk returns a tuple with the WirelessLans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetWirelessLansOk() ([]WirelessLAN, bool) {
	if o == nil || IsNil(o.WirelessLans) {
		return nil, false
	}
	return o.WirelessLans, true
}

// HasWirelessLans returns a boolean if a field has been set.
func (o *Interface) HasWirelessLans() bool {
	if o != nil && !IsNil(o.WirelessLans) {
		return true
	}

	return false
}

// SetWirelessLans gets a reference to the given []WirelessLAN and assigns it to the WirelessLans field.
func (o *Interface) SetWirelessLans(v []WirelessLAN) {
	o.WirelessLans = v
}

// GetVrf returns the Vrf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetVrf() BriefVRF {
	if o == nil || IsNil(o.Vrf.Get()) {
		var ret BriefVRF
		return ret
	}
	return *o.Vrf.Get()
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetVrfOk() (*BriefVRF, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vrf.Get(), o.Vrf.IsSet()
}

// HasVrf returns a boolean if a field has been set.
func (o *Interface) HasVrf() bool {
	if o != nil && o.Vrf.IsSet() {
		return true
	}

	return false
}

// SetVrf gets a reference to the given NullableBriefVRF and assigns it to the Vrf field.
func (o *Interface) SetVrf(v BriefVRF) {
	o.Vrf.Set(&v)
}

// SetVrfNil sets the value for Vrf to be an explicit nil
func (o *Interface) SetVrfNil() {
	o.Vrf.Set(nil)
}

// UnsetVrf ensures that no value is present for Vrf, not even an explicit nil
func (o *Interface) UnsetVrf() {
	o.Vrf.Unset()
}

// GetL2vpnTermination returns the L2vpnTermination field value
// If the value is explicit nil, the zero value for BriefL2VPNTermination will be returned
func (o *Interface) GetL2vpnTermination() BriefL2VPNTermination {
	if o == nil || o.L2vpnTermination.Get() == nil {
		var ret BriefL2VPNTermination
		return ret
	}

	return *o.L2vpnTermination.Get()
}

// GetL2vpnTerminationOk returns a tuple with the L2vpnTermination field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetL2vpnTerminationOk() (*BriefL2VPNTermination, bool) {
	if o == nil {
		return nil, false
	}
	return o.L2vpnTermination.Get(), o.L2vpnTermination.IsSet()
}

// SetL2vpnTermination sets field value
func (o *Interface) SetL2vpnTermination(v BriefL2VPNTermination) {
	o.L2vpnTermination.Set(&v)
}

// GetConnectedEndpoints returns the ConnectedEndpoints field value
// If the value is explicit nil, the zero value for []interface{} will be returned
func (o *Interface) GetConnectedEndpoints() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.ConnectedEndpoints
}

// GetConnectedEndpointsOk returns a tuple with the ConnectedEndpoints field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetConnectedEndpointsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.ConnectedEndpoints) {
		return nil, false
	}
	return o.ConnectedEndpoints, true
}

// SetConnectedEndpoints sets field value
func (o *Interface) SetConnectedEndpoints(v []interface{}) {
	o.ConnectedEndpoints = v
}

// GetConnectedEndpointsType returns the ConnectedEndpointsType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Interface) GetConnectedEndpointsType() string {
	if o == nil || o.ConnectedEndpointsType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ConnectedEndpointsType.Get()
}

// GetConnectedEndpointsTypeOk returns a tuple with the ConnectedEndpointsType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetConnectedEndpointsTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectedEndpointsType.Get(), o.ConnectedEndpointsType.IsSet()
}

// SetConnectedEndpointsType sets field value
func (o *Interface) SetConnectedEndpointsType(v string) {
	o.ConnectedEndpointsType.Set(&v)
}

// GetConnectedEndpointsReachable returns the ConnectedEndpointsReachable field value
func (o *Interface) GetConnectedEndpointsReachable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ConnectedEndpointsReachable
}

// GetConnectedEndpointsReachableOk returns a tuple with the ConnectedEndpointsReachable field value
// and a boolean to check if the value has been set.
func (o *Interface) GetConnectedEndpointsReachableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectedEndpointsReachable, true
}

// SetConnectedEndpointsReachable sets field value
func (o *Interface) SetConnectedEndpointsReachable(v bool) {
	o.ConnectedEndpointsReachable = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Interface) GetTags() []NestedTag {
	if o == nil || IsNil(o.Tags) {
		var ret []NestedTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetTagsOk() ([]NestedTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Interface) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTag and assigns it to the Tags field.
func (o *Interface) SetTags(v []NestedTag) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Interface) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Interface) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Interface) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Interface) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *Interface) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetLastUpdated returns the LastUpdated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Interface) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// SetLastUpdated sets field value
func (o *Interface) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

// GetCountIpaddresses returns the CountIpaddresses field value
func (o *Interface) GetCountIpaddresses() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CountIpaddresses
}

// GetCountIpaddressesOk returns a tuple with the CountIpaddresses field value
// and a boolean to check if the value has been set.
func (o *Interface) GetCountIpaddressesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountIpaddresses, true
}

// SetCountIpaddresses sets field value
func (o *Interface) SetCountIpaddresses(v int32) {
	o.CountIpaddresses = v
}

// GetCountFhrpGroups returns the CountFhrpGroups field value
func (o *Interface) GetCountFhrpGroups() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CountFhrpGroups
}

// GetCountFhrpGroupsOk returns a tuple with the CountFhrpGroups field value
// and a boolean to check if the value has been set.
func (o *Interface) GetCountFhrpGroupsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountFhrpGroups, true
}

// SetCountFhrpGroups sets field value
func (o *Interface) SetCountFhrpGroups(v int32) {
	o.CountFhrpGroups = v
}

// GetOccupied returns the Occupied field value
func (o *Interface) GetOccupied() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Occupied
}

// GetOccupiedOk returns a tuple with the Occupied field value
// and a boolean to check if the value has been set.
func (o *Interface) GetOccupiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Occupied, true
}

// SetOccupied sets field value
func (o *Interface) SetOccupied(v bool) {
	o.Occupied = v
}

func (o Interface) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Interface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["display"] = o.Display
	toSerialize["device"] = o.Device
	if !IsNil(o.Vdcs) {
		toSerialize["vdcs"] = o.Vdcs
	}
	if o.Module.IsSet() {
		toSerialize["module"] = o.Module.Get()
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Parent.IsSet() {
		toSerialize["parent"] = o.Parent.Get()
	}
	if o.Bridge.IsSet() {
		toSerialize["bridge"] = o.Bridge.Get()
	}
	if o.Lag.IsSet() {
		toSerialize["lag"] = o.Lag.Get()
	}
	if o.Mtu.IsSet() {
		toSerialize["mtu"] = o.Mtu.Get()
	}
	if o.MacAddress.IsSet() {
		toSerialize["mac_address"] = o.MacAddress.Get()
	}
	if o.Speed.IsSet() {
		toSerialize["speed"] = o.Speed.Get()
	}
	if o.Duplex.IsSet() {
		toSerialize["duplex"] = o.Duplex.Get()
	}
	if o.Wwn.IsSet() {
		toSerialize["wwn"] = o.Wwn.Get()
	}
	if !IsNil(o.MgmtOnly) {
		toSerialize["mgmt_only"] = o.MgmtOnly
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.RfRole) {
		toSerialize["rf_role"] = o.RfRole
	}
	if !IsNil(o.RfChannel) {
		toSerialize["rf_channel"] = o.RfChannel
	}
	if !IsNil(o.PoeMode) {
		toSerialize["poe_mode"] = o.PoeMode
	}
	if !IsNil(o.PoeType) {
		toSerialize["poe_type"] = o.PoeType
	}
	if o.RfChannelFrequency.IsSet() {
		toSerialize["rf_channel_frequency"] = o.RfChannelFrequency.Get()
	}
	if o.RfChannelWidth.IsSet() {
		toSerialize["rf_channel_width"] = o.RfChannelWidth.Get()
	}
	if o.TxPower.IsSet() {
		toSerialize["tx_power"] = o.TxPower.Get()
	}
	if o.UntaggedVlan.IsSet() {
		toSerialize["untagged_vlan"] = o.UntaggedVlan.Get()
	}
	if !IsNil(o.TaggedVlans) {
		toSerialize["tagged_vlans"] = o.TaggedVlans
	}
	if !IsNil(o.MarkConnected) {
		toSerialize["mark_connected"] = o.MarkConnected
	}
	toSerialize["cable"] = o.Cable.Get()
	toSerialize["cable_end"] = o.CableEnd
	toSerialize["wireless_link"] = o.WirelessLink.Get()
	toSerialize["link_peers"] = o.LinkPeers
	toSerialize["link_peers_type"] = o.LinkPeersType.Get()
	if !IsNil(o.WirelessLans) {
		toSerialize["wireless_lans"] = o.WirelessLans
	}
	if o.Vrf.IsSet() {
		toSerialize["vrf"] = o.Vrf.Get()
	}
	toSerialize["l2vpn_termination"] = o.L2vpnTermination.Get()
	if o.ConnectedEndpoints != nil {
		toSerialize["connected_endpoints"] = o.ConnectedEndpoints
	}
	toSerialize["connected_endpoints_type"] = o.ConnectedEndpointsType.Get()
	toSerialize["connected_endpoints_reachable"] = o.ConnectedEndpointsReachable
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	toSerialize["created"] = o.Created.Get()
	toSerialize["last_updated"] = o.LastUpdated.Get()
	toSerialize["count_ipaddresses"] = o.CountIpaddresses
	toSerialize["count_fhrp_groups"] = o.CountFhrpGroups
	toSerialize["_occupied"] = o.Occupied

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Interface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"display",
		"device",
		"name",
		"type",
		"cable",
		"cable_end",
		"wireless_link",
		"link_peers",
		"link_peers_type",
		"l2vpn_termination",
		"connected_endpoints",
		"connected_endpoints_type",
		"connected_endpoints_reachable",
		"created",
		"last_updated",
		"count_ipaddresses",
		"count_fhrp_groups",
		"_occupied",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInterface := _Interface{}

	err = json.Unmarshal(data, &varInterface)

	if err != nil {
		return err
	}

	*o = Interface(varInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "device")
		delete(additionalProperties, "vdcs")
		delete(additionalProperties, "module")
		delete(additionalProperties, "name")
		delete(additionalProperties, "label")
		delete(additionalProperties, "type")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "parent")
		delete(additionalProperties, "bridge")
		delete(additionalProperties, "lag")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "mac_address")
		delete(additionalProperties, "speed")
		delete(additionalProperties, "duplex")
		delete(additionalProperties, "wwn")
		delete(additionalProperties, "mgmt_only")
		delete(additionalProperties, "description")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "rf_role")
		delete(additionalProperties, "rf_channel")
		delete(additionalProperties, "poe_mode")
		delete(additionalProperties, "poe_type")
		delete(additionalProperties, "rf_channel_frequency")
		delete(additionalProperties, "rf_channel_width")
		delete(additionalProperties, "tx_power")
		delete(additionalProperties, "untagged_vlan")
		delete(additionalProperties, "tagged_vlans")
		delete(additionalProperties, "mark_connected")
		delete(additionalProperties, "cable")
		delete(additionalProperties, "cable_end")
		delete(additionalProperties, "wireless_link")
		delete(additionalProperties, "link_peers")
		delete(additionalProperties, "link_peers_type")
		delete(additionalProperties, "wireless_lans")
		delete(additionalProperties, "vrf")
		delete(additionalProperties, "l2vpn_termination")
		delete(additionalProperties, "connected_endpoints")
		delete(additionalProperties, "connected_endpoints_type")
		delete(additionalProperties, "connected_endpoints_reachable")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "custom_fields")
		delete(additionalProperties, "created")
		delete(additionalProperties, "last_updated")
		delete(additionalProperties, "count_ipaddresses")
		delete(additionalProperties, "count_fhrp_groups")
		delete(additionalProperties, "_occupied")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInterface struct {
	value *Interface
	isSet bool
}

func (v NullableInterface) Get() *Interface {
	return v.value
}

func (v *NullableInterface) Set(val *Interface) {
	v.value = val
	v.isSet = true
}

func (v NullableInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterface(val *Interface) *NullableInterface {
	return &NullableInterface{value: val, isSet: true}
}

func (v NullableInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
