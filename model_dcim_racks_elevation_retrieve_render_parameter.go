/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimRacksElevationRetrieveRenderParameter the model 'DcimRacksElevationRetrieveRenderParameter'
type DcimRacksElevationRetrieveRenderParameter string

// List of dcim_racks_elevation_retrieve_render_parameter
const (
	DCIMRACKSELEVATIONRETRIEVERENDERPARAMETER_JSON DcimRacksElevationRetrieveRenderParameter = "json"
	DCIMRACKSELEVATIONRETRIEVERENDERPARAMETER_SVG  DcimRacksElevationRetrieveRenderParameter = "svg"
)

// All allowed values of DcimRacksElevationRetrieveRenderParameter enum
var AllowedDcimRacksElevationRetrieveRenderParameterEnumValues = []DcimRacksElevationRetrieveRenderParameter{
	"json",
	"svg",
}

func (v *DcimRacksElevationRetrieveRenderParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimRacksElevationRetrieveRenderParameter(value)
	for _, existing := range AllowedDcimRacksElevationRetrieveRenderParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimRacksElevationRetrieveRenderParameter", value)
}

// NewDcimRacksElevationRetrieveRenderParameterFromValue returns a pointer to a valid DcimRacksElevationRetrieveRenderParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimRacksElevationRetrieveRenderParameterFromValue(v string) (*DcimRacksElevationRetrieveRenderParameter, error) {
	ev := DcimRacksElevationRetrieveRenderParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimRacksElevationRetrieveRenderParameter: valid values are %v", v, AllowedDcimRacksElevationRetrieveRenderParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimRacksElevationRetrieveRenderParameter) IsValid() bool {
	for _, existing := range AllowedDcimRacksElevationRetrieveRenderParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_racks_elevation_retrieve_render_parameter value
func (v DcimRacksElevationRetrieveRenderParameter) Ptr() *DcimRacksElevationRetrieveRenderParameter {
	return &v
}

type NullableDcimRacksElevationRetrieveRenderParameter struct {
	value *DcimRacksElevationRetrieveRenderParameter
	isSet bool
}

func (v NullableDcimRacksElevationRetrieveRenderParameter) Get() *DcimRacksElevationRetrieveRenderParameter {
	return v.value
}

func (v *NullableDcimRacksElevationRetrieveRenderParameter) Set(val *DcimRacksElevationRetrieveRenderParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimRacksElevationRetrieveRenderParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimRacksElevationRetrieveRenderParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimRacksElevationRetrieveRenderParameter(val *DcimRacksElevationRetrieveRenderParameter) *NullableDcimRacksElevationRetrieveRenderParameter {
	return &NullableDcimRacksElevationRetrieveRenderParameter{value: val, isSet: true}
}

func (v NullableDcimRacksElevationRetrieveRenderParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimRacksElevationRetrieveRenderParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
