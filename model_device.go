/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Device type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Device{}

// Device Adds support for custom fields and tags.
type Device struct {
	Id         int32                 `json:"id"`
	Url        string                `json:"url"`
	Display    string                `json:"display"`
	Name       NullableString        `json:"name,omitempty"`
	DeviceType BriefDeviceType       `json:"device_type"`
	Role       BriefDeviceRole       `json:"role"`
	Tenant     NullableBriefTenant   `json:"tenant,omitempty"`
	Platform   NullableBriefPlatform `json:"platform,omitempty"`
	// Chassis serial number, assigned by the manufacturer
	Serial *string `json:"serial,omitempty"`
	// A unique tag used to identify this device
	AssetTag NullableString        `json:"asset_tag,omitempty"`
	Site     BriefSite             `json:"site"`
	Location NullableBriefLocation `json:"location,omitempty"`
	Rack     NullableBriefRack     `json:"rack,omitempty"`
	Position NullableFloat64       `json:"position,omitempty"`
	Face     *DeviceFace           `json:"face,omitempty"`
	// GPS coordinate in decimal format (xx.yyyyyy)
	Latitude NullableFloat64 `json:"latitude,omitempty"`
	// GPS coordinate in decimal format (xx.yyyyyy)
	Longitude      NullableFloat64             `json:"longitude,omitempty"`
	ParentDevice   NullableNestedDevice        `json:"parent_device"`
	Status         *DeviceStatus               `json:"status,omitempty"`
	Airflow        *DeviceAirflow              `json:"airflow,omitempty"`
	PrimaryIp      NullableBriefIPAddress      `json:"primary_ip"`
	PrimaryIp4     NullableBriefIPAddress      `json:"primary_ip4,omitempty"`
	PrimaryIp6     NullableBriefIPAddress      `json:"primary_ip6,omitempty"`
	OobIp          NullableBriefIPAddress      `json:"oob_ip,omitempty"`
	Cluster        NullableBriefCluster        `json:"cluster,omitempty"`
	VirtualChassis NullableBriefVirtualChassis `json:"virtual_chassis,omitempty"`
	VcPosition     NullableInt32               `json:"vc_position,omitempty"`
	// Virtual chassis master election priority
	VcPriority     NullableInt32               `json:"vc_priority,omitempty"`
	Description    *string                     `json:"description,omitempty"`
	Comments       *string                     `json:"comments,omitempty"`
	ConfigTemplate NullableBriefConfigTemplate `json:"config_template,omitempty"`
	// Local config context data takes precedence over source contexts in the final rendered config context
	LocalContextData       interface{}            `json:"local_context_data,omitempty"`
	Tags                   []NestedTag            `json:"tags,omitempty"`
	CustomFields           map[string]interface{} `json:"custom_fields,omitempty"`
	Created                NullableTime           `json:"created"`
	LastUpdated            NullableTime           `json:"last_updated"`
	ConsolePortCount       int32                  `json:"console_port_count"`
	ConsoleServerPortCount int32                  `json:"console_server_port_count"`
	PowerPortCount         int32                  `json:"power_port_count"`
	PowerOutletCount       int32                  `json:"power_outlet_count"`
	InterfaceCount         int32                  `json:"interface_count"`
	FrontPortCount         int32                  `json:"front_port_count"`
	RearPortCount          int32                  `json:"rear_port_count"`
	DeviceBayCount         int32                  `json:"device_bay_count"`
	ModuleBayCount         int32                  `json:"module_bay_count"`
	InventoryItemCount     int32                  `json:"inventory_item_count"`
	AdditionalProperties   map[string]interface{}
}

type _Device Device

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice(id int32, url string, display string, deviceType BriefDeviceType, role BriefDeviceRole, site BriefSite, parentDevice NullableNestedDevice, primaryIp NullableBriefIPAddress, created NullableTime, lastUpdated NullableTime, consolePortCount int32, consoleServerPortCount int32, powerPortCount int32, powerOutletCount int32, interfaceCount int32, frontPortCount int32, rearPortCount int32, deviceBayCount int32, moduleBayCount int32, inventoryItemCount int32) *Device {
	this := Device{}
	this.Id = id
	this.Url = url
	this.Display = display
	this.DeviceType = deviceType
	this.Role = role
	this.Site = site
	this.ParentDevice = parentDevice
	this.PrimaryIp = primaryIp
	this.Created = created
	this.LastUpdated = lastUpdated
	this.ConsolePortCount = consolePortCount
	this.ConsoleServerPortCount = consoleServerPortCount
	this.PowerPortCount = powerPortCount
	this.PowerOutletCount = powerOutletCount
	this.InterfaceCount = interfaceCount
	this.FrontPortCount = frontPortCount
	this.RearPortCount = rearPortCount
	this.DeviceBayCount = deviceBayCount
	this.ModuleBayCount = moduleBayCount
	this.InventoryItemCount = inventoryItemCount
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetId returns the Id field value
func (o *Device) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Device) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Device) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *Device) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Device) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Device) SetUrl(v string) {
	o.Url = v
}

// GetDisplay returns the Display field value
func (o *Device) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *Device) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *Device) SetDisplay(v string) {
	o.Display = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Device) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Device) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *Device) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Device) UnsetName() {
	o.Name.Unset()
}

// GetDeviceType returns the DeviceType field value
func (o *Device) GetDeviceType() BriefDeviceType {
	if o == nil {
		var ret BriefDeviceType
		return ret
	}

	return o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value
// and a boolean to check if the value has been set.
func (o *Device) GetDeviceTypeOk() (*BriefDeviceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceType, true
}

// SetDeviceType sets field value
func (o *Device) SetDeviceType(v BriefDeviceType) {
	o.DeviceType = v
}

// GetRole returns the Role field value
func (o *Device) GetRole() BriefDeviceRole {
	if o == nil {
		var ret BriefDeviceRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *Device) GetRoleOk() (*BriefDeviceRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *Device) SetRole(v BriefDeviceRole) {
	o.Role = v
}

// GetTenant returns the Tenant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetTenant() BriefTenant {
	if o == nil || IsNil(o.Tenant.Get()) {
		var ret BriefTenant
		return ret
	}
	return *o.Tenant.Get()
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetTenantOk() (*BriefTenant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenant.Get(), o.Tenant.IsSet()
}

// HasTenant returns a boolean if a field has been set.
func (o *Device) HasTenant() bool {
	if o != nil && o.Tenant.IsSet() {
		return true
	}

	return false
}

// SetTenant gets a reference to the given NullableBriefTenant and assigns it to the Tenant field.
func (o *Device) SetTenant(v BriefTenant) {
	o.Tenant.Set(&v)
}

// SetTenantNil sets the value for Tenant to be an explicit nil
func (o *Device) SetTenantNil() {
	o.Tenant.Set(nil)
}

// UnsetTenant ensures that no value is present for Tenant, not even an explicit nil
func (o *Device) UnsetTenant() {
	o.Tenant.Unset()
}

// GetPlatform returns the Platform field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetPlatform() BriefPlatform {
	if o == nil || IsNil(o.Platform.Get()) {
		var ret BriefPlatform
		return ret
	}
	return *o.Platform.Get()
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetPlatformOk() (*BriefPlatform, bool) {
	if o == nil {
		return nil, false
	}
	return o.Platform.Get(), o.Platform.IsSet()
}

// HasPlatform returns a boolean if a field has been set.
func (o *Device) HasPlatform() bool {
	if o != nil && o.Platform.IsSet() {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given NullableBriefPlatform and assigns it to the Platform field.
func (o *Device) SetPlatform(v BriefPlatform) {
	o.Platform.Set(&v)
}

// SetPlatformNil sets the value for Platform to be an explicit nil
func (o *Device) SetPlatformNil() {
	o.Platform.Set(nil)
}

// UnsetPlatform ensures that no value is present for Platform, not even an explicit nil
func (o *Device) UnsetPlatform() {
	o.Platform.Unset()
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *Device) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *Device) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *Device) SetSerial(v string) {
	o.Serial = &v
}

// GetAssetTag returns the AssetTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetAssetTag() string {
	if o == nil || IsNil(o.AssetTag.Get()) {
		var ret string
		return ret
	}
	return *o.AssetTag.Get()
}

// GetAssetTagOk returns a tuple with the AssetTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetAssetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssetTag.Get(), o.AssetTag.IsSet()
}

// HasAssetTag returns a boolean if a field has been set.
func (o *Device) HasAssetTag() bool {
	if o != nil && o.AssetTag.IsSet() {
		return true
	}

	return false
}

// SetAssetTag gets a reference to the given NullableString and assigns it to the AssetTag field.
func (o *Device) SetAssetTag(v string) {
	o.AssetTag.Set(&v)
}

// SetAssetTagNil sets the value for AssetTag to be an explicit nil
func (o *Device) SetAssetTagNil() {
	o.AssetTag.Set(nil)
}

// UnsetAssetTag ensures that no value is present for AssetTag, not even an explicit nil
func (o *Device) UnsetAssetTag() {
	o.AssetTag.Unset()
}

// GetSite returns the Site field value
func (o *Device) GetSite() BriefSite {
	if o == nil {
		var ret BriefSite
		return ret
	}

	return o.Site
}

// GetSiteOk returns a tuple with the Site field value
// and a boolean to check if the value has been set.
func (o *Device) GetSiteOk() (*BriefSite, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Site, true
}

// SetSite sets field value
func (o *Device) SetSite(v BriefSite) {
	o.Site = v
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetLocation() BriefLocation {
	if o == nil || IsNil(o.Location.Get()) {
		var ret BriefLocation
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetLocationOk() (*BriefLocation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *Device) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableBriefLocation and assigns it to the Location field.
func (o *Device) SetLocation(v BriefLocation) {
	o.Location.Set(&v)
}

// SetLocationNil sets the value for Location to be an explicit nil
func (o *Device) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *Device) UnsetLocation() {
	o.Location.Unset()
}

// GetRack returns the Rack field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetRack() BriefRack {
	if o == nil || IsNil(o.Rack.Get()) {
		var ret BriefRack
		return ret
	}
	return *o.Rack.Get()
}

// GetRackOk returns a tuple with the Rack field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetRackOk() (*BriefRack, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rack.Get(), o.Rack.IsSet()
}

// HasRack returns a boolean if a field has been set.
func (o *Device) HasRack() bool {
	if o != nil && o.Rack.IsSet() {
		return true
	}

	return false
}

// SetRack gets a reference to the given NullableBriefRack and assigns it to the Rack field.
func (o *Device) SetRack(v BriefRack) {
	o.Rack.Set(&v)
}

// SetRackNil sets the value for Rack to be an explicit nil
func (o *Device) SetRackNil() {
	o.Rack.Set(nil)
}

// UnsetRack ensures that no value is present for Rack, not even an explicit nil
func (o *Device) UnsetRack() {
	o.Rack.Unset()
}

// GetPosition returns the Position field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetPosition() float64 {
	if o == nil || IsNil(o.Position.Get()) {
		var ret float64
		return ret
	}
	return *o.Position.Get()
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetPositionOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Position.Get(), o.Position.IsSet()
}

// HasPosition returns a boolean if a field has been set.
func (o *Device) HasPosition() bool {
	if o != nil && o.Position.IsSet() {
		return true
	}

	return false
}

// SetPosition gets a reference to the given NullableFloat64 and assigns it to the Position field.
func (o *Device) SetPosition(v float64) {
	o.Position.Set(&v)
}

// SetPositionNil sets the value for Position to be an explicit nil
func (o *Device) SetPositionNil() {
	o.Position.Set(nil)
}

// UnsetPosition ensures that no value is present for Position, not even an explicit nil
func (o *Device) UnsetPosition() {
	o.Position.Unset()
}

// GetFace returns the Face field value if set, zero value otherwise.
func (o *Device) GetFace() DeviceFace {
	if o == nil || IsNil(o.Face) {
		var ret DeviceFace
		return ret
	}
	return *o.Face
}

// GetFaceOk returns a tuple with the Face field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetFaceOk() (*DeviceFace, bool) {
	if o == nil || IsNil(o.Face) {
		return nil, false
	}
	return o.Face, true
}

// HasFace returns a boolean if a field has been set.
func (o *Device) HasFace() bool {
	if o != nil && !IsNil(o.Face) {
		return true
	}

	return false
}

// SetFace gets a reference to the given DeviceFace and assigns it to the Face field.
func (o *Device) SetFace(v DeviceFace) {
	o.Face = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetLatitude() float64 {
	if o == nil || IsNil(o.Latitude.Get()) {
		var ret float64
		return ret
	}
	return *o.Latitude.Get()
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Latitude.Get(), o.Latitude.IsSet()
}

// HasLatitude returns a boolean if a field has been set.
func (o *Device) HasLatitude() bool {
	if o != nil && o.Latitude.IsSet() {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given NullableFloat64 and assigns it to the Latitude field.
func (o *Device) SetLatitude(v float64) {
	o.Latitude.Set(&v)
}

// SetLatitudeNil sets the value for Latitude to be an explicit nil
func (o *Device) SetLatitudeNil() {
	o.Latitude.Set(nil)
}

// UnsetLatitude ensures that no value is present for Latitude, not even an explicit nil
func (o *Device) UnsetLatitude() {
	o.Latitude.Unset()
}

// GetLongitude returns the Longitude field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetLongitude() float64 {
	if o == nil || IsNil(o.Longitude.Get()) {
		var ret float64
		return ret
	}
	return *o.Longitude.Get()
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Longitude.Get(), o.Longitude.IsSet()
}

// HasLongitude returns a boolean if a field has been set.
func (o *Device) HasLongitude() bool {
	if o != nil && o.Longitude.IsSet() {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given NullableFloat64 and assigns it to the Longitude field.
func (o *Device) SetLongitude(v float64) {
	o.Longitude.Set(&v)
}

// SetLongitudeNil sets the value for Longitude to be an explicit nil
func (o *Device) SetLongitudeNil() {
	o.Longitude.Set(nil)
}

// UnsetLongitude ensures that no value is present for Longitude, not even an explicit nil
func (o *Device) UnsetLongitude() {
	o.Longitude.Unset()
}

// GetParentDevice returns the ParentDevice field value
// If the value is explicit nil, the zero value for NestedDevice will be returned
func (o *Device) GetParentDevice() NestedDevice {
	if o == nil || o.ParentDevice.Get() == nil {
		var ret NestedDevice
		return ret
	}

	return *o.ParentDevice.Get()
}

// GetParentDeviceOk returns a tuple with the ParentDevice field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetParentDeviceOk() (*NestedDevice, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentDevice.Get(), o.ParentDevice.IsSet()
}

// SetParentDevice sets field value
func (o *Device) SetParentDevice(v NestedDevice) {
	o.ParentDevice.Set(&v)
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Device) GetStatus() DeviceStatus {
	if o == nil || IsNil(o.Status) {
		var ret DeviceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetStatusOk() (*DeviceStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Device) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DeviceStatus and assigns it to the Status field.
func (o *Device) SetStatus(v DeviceStatus) {
	o.Status = &v
}

// GetAirflow returns the Airflow field value if set, zero value otherwise.
func (o *Device) GetAirflow() DeviceAirflow {
	if o == nil || IsNil(o.Airflow) {
		var ret DeviceAirflow
		return ret
	}
	return *o.Airflow
}

// GetAirflowOk returns a tuple with the Airflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetAirflowOk() (*DeviceAirflow, bool) {
	if o == nil || IsNil(o.Airflow) {
		return nil, false
	}
	return o.Airflow, true
}

// HasAirflow returns a boolean if a field has been set.
func (o *Device) HasAirflow() bool {
	if o != nil && !IsNil(o.Airflow) {
		return true
	}

	return false
}

// SetAirflow gets a reference to the given DeviceAirflow and assigns it to the Airflow field.
func (o *Device) SetAirflow(v DeviceAirflow) {
	o.Airflow = &v
}

// GetPrimaryIp returns the PrimaryIp field value
// If the value is explicit nil, the zero value for BriefIPAddress will be returned
func (o *Device) GetPrimaryIp() BriefIPAddress {
	if o == nil || o.PrimaryIp.Get() == nil {
		var ret BriefIPAddress
		return ret
	}

	return *o.PrimaryIp.Get()
}

// GetPrimaryIpOk returns a tuple with the PrimaryIp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetPrimaryIpOk() (*BriefIPAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryIp.Get(), o.PrimaryIp.IsSet()
}

// SetPrimaryIp sets field value
func (o *Device) SetPrimaryIp(v BriefIPAddress) {
	o.PrimaryIp.Set(&v)
}

// GetPrimaryIp4 returns the PrimaryIp4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetPrimaryIp4() BriefIPAddress {
	if o == nil || IsNil(o.PrimaryIp4.Get()) {
		var ret BriefIPAddress
		return ret
	}
	return *o.PrimaryIp4.Get()
}

// GetPrimaryIp4Ok returns a tuple with the PrimaryIp4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetPrimaryIp4Ok() (*BriefIPAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryIp4.Get(), o.PrimaryIp4.IsSet()
}

// HasPrimaryIp4 returns a boolean if a field has been set.
func (o *Device) HasPrimaryIp4() bool {
	if o != nil && o.PrimaryIp4.IsSet() {
		return true
	}

	return false
}

// SetPrimaryIp4 gets a reference to the given NullableBriefIPAddress and assigns it to the PrimaryIp4 field.
func (o *Device) SetPrimaryIp4(v BriefIPAddress) {
	o.PrimaryIp4.Set(&v)
}

// SetPrimaryIp4Nil sets the value for PrimaryIp4 to be an explicit nil
func (o *Device) SetPrimaryIp4Nil() {
	o.PrimaryIp4.Set(nil)
}

// UnsetPrimaryIp4 ensures that no value is present for PrimaryIp4, not even an explicit nil
func (o *Device) UnsetPrimaryIp4() {
	o.PrimaryIp4.Unset()
}

// GetPrimaryIp6 returns the PrimaryIp6 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetPrimaryIp6() BriefIPAddress {
	if o == nil || IsNil(o.PrimaryIp6.Get()) {
		var ret BriefIPAddress
		return ret
	}
	return *o.PrimaryIp6.Get()
}

// GetPrimaryIp6Ok returns a tuple with the PrimaryIp6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetPrimaryIp6Ok() (*BriefIPAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryIp6.Get(), o.PrimaryIp6.IsSet()
}

// HasPrimaryIp6 returns a boolean if a field has been set.
func (o *Device) HasPrimaryIp6() bool {
	if o != nil && o.PrimaryIp6.IsSet() {
		return true
	}

	return false
}

// SetPrimaryIp6 gets a reference to the given NullableBriefIPAddress and assigns it to the PrimaryIp6 field.
func (o *Device) SetPrimaryIp6(v BriefIPAddress) {
	o.PrimaryIp6.Set(&v)
}

// SetPrimaryIp6Nil sets the value for PrimaryIp6 to be an explicit nil
func (o *Device) SetPrimaryIp6Nil() {
	o.PrimaryIp6.Set(nil)
}

// UnsetPrimaryIp6 ensures that no value is present for PrimaryIp6, not even an explicit nil
func (o *Device) UnsetPrimaryIp6() {
	o.PrimaryIp6.Unset()
}

// GetOobIp returns the OobIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetOobIp() BriefIPAddress {
	if o == nil || IsNil(o.OobIp.Get()) {
		var ret BriefIPAddress
		return ret
	}
	return *o.OobIp.Get()
}

// GetOobIpOk returns a tuple with the OobIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetOobIpOk() (*BriefIPAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.OobIp.Get(), o.OobIp.IsSet()
}

// HasOobIp returns a boolean if a field has been set.
func (o *Device) HasOobIp() bool {
	if o != nil && o.OobIp.IsSet() {
		return true
	}

	return false
}

// SetOobIp gets a reference to the given NullableBriefIPAddress and assigns it to the OobIp field.
func (o *Device) SetOobIp(v BriefIPAddress) {
	o.OobIp.Set(&v)
}

// SetOobIpNil sets the value for OobIp to be an explicit nil
func (o *Device) SetOobIpNil() {
	o.OobIp.Set(nil)
}

// UnsetOobIp ensures that no value is present for OobIp, not even an explicit nil
func (o *Device) UnsetOobIp() {
	o.OobIp.Unset()
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetCluster() BriefCluster {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret BriefCluster
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetClusterOk() (*BriefCluster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *Device) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableBriefCluster and assigns it to the Cluster field.
func (o *Device) SetCluster(v BriefCluster) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *Device) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *Device) UnsetCluster() {
	o.Cluster.Unset()
}

// GetVirtualChassis returns the VirtualChassis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetVirtualChassis() BriefVirtualChassis {
	if o == nil || IsNil(o.VirtualChassis.Get()) {
		var ret BriefVirtualChassis
		return ret
	}
	return *o.VirtualChassis.Get()
}

// GetVirtualChassisOk returns a tuple with the VirtualChassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetVirtualChassisOk() (*BriefVirtualChassis, bool) {
	if o == nil {
		return nil, false
	}
	return o.VirtualChassis.Get(), o.VirtualChassis.IsSet()
}

// HasVirtualChassis returns a boolean if a field has been set.
func (o *Device) HasVirtualChassis() bool {
	if o != nil && o.VirtualChassis.IsSet() {
		return true
	}

	return false
}

// SetVirtualChassis gets a reference to the given NullableBriefVirtualChassis and assigns it to the VirtualChassis field.
func (o *Device) SetVirtualChassis(v BriefVirtualChassis) {
	o.VirtualChassis.Set(&v)
}

// SetVirtualChassisNil sets the value for VirtualChassis to be an explicit nil
func (o *Device) SetVirtualChassisNil() {
	o.VirtualChassis.Set(nil)
}

// UnsetVirtualChassis ensures that no value is present for VirtualChassis, not even an explicit nil
func (o *Device) UnsetVirtualChassis() {
	o.VirtualChassis.Unset()
}

// GetVcPosition returns the VcPosition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetVcPosition() int32 {
	if o == nil || IsNil(o.VcPosition.Get()) {
		var ret int32
		return ret
	}
	return *o.VcPosition.Get()
}

// GetVcPositionOk returns a tuple with the VcPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetVcPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VcPosition.Get(), o.VcPosition.IsSet()
}

// HasVcPosition returns a boolean if a field has been set.
func (o *Device) HasVcPosition() bool {
	if o != nil && o.VcPosition.IsSet() {
		return true
	}

	return false
}

// SetVcPosition gets a reference to the given NullableInt32 and assigns it to the VcPosition field.
func (o *Device) SetVcPosition(v int32) {
	o.VcPosition.Set(&v)
}

// SetVcPositionNil sets the value for VcPosition to be an explicit nil
func (o *Device) SetVcPositionNil() {
	o.VcPosition.Set(nil)
}

// UnsetVcPosition ensures that no value is present for VcPosition, not even an explicit nil
func (o *Device) UnsetVcPosition() {
	o.VcPosition.Unset()
}

// GetVcPriority returns the VcPriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetVcPriority() int32 {
	if o == nil || IsNil(o.VcPriority.Get()) {
		var ret int32
		return ret
	}
	return *o.VcPriority.Get()
}

// GetVcPriorityOk returns a tuple with the VcPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetVcPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VcPriority.Get(), o.VcPriority.IsSet()
}

// HasVcPriority returns a boolean if a field has been set.
func (o *Device) HasVcPriority() bool {
	if o != nil && o.VcPriority.IsSet() {
		return true
	}

	return false
}

// SetVcPriority gets a reference to the given NullableInt32 and assigns it to the VcPriority field.
func (o *Device) SetVcPriority(v int32) {
	o.VcPriority.Set(&v)
}

// SetVcPriorityNil sets the value for VcPriority to be an explicit nil
func (o *Device) SetVcPriorityNil() {
	o.VcPriority.Set(nil)
}

// UnsetVcPriority ensures that no value is present for VcPriority, not even an explicit nil
func (o *Device) UnsetVcPriority() {
	o.VcPriority.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Device) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Device) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Device) SetDescription(v string) {
	o.Description = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Device) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Device) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *Device) SetComments(v string) {
	o.Comments = &v
}

// GetConfigTemplate returns the ConfigTemplate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetConfigTemplate() BriefConfigTemplate {
	if o == nil || IsNil(o.ConfigTemplate.Get()) {
		var ret BriefConfigTemplate
		return ret
	}
	return *o.ConfigTemplate.Get()
}

// GetConfigTemplateOk returns a tuple with the ConfigTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetConfigTemplateOk() (*BriefConfigTemplate, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigTemplate.Get(), o.ConfigTemplate.IsSet()
}

// HasConfigTemplate returns a boolean if a field has been set.
func (o *Device) HasConfigTemplate() bool {
	if o != nil && o.ConfigTemplate.IsSet() {
		return true
	}

	return false
}

// SetConfigTemplate gets a reference to the given NullableBriefConfigTemplate and assigns it to the ConfigTemplate field.
func (o *Device) SetConfigTemplate(v BriefConfigTemplate) {
	o.ConfigTemplate.Set(&v)
}

// SetConfigTemplateNil sets the value for ConfigTemplate to be an explicit nil
func (o *Device) SetConfigTemplateNil() {
	o.ConfigTemplate.Set(nil)
}

// UnsetConfigTemplate ensures that no value is present for ConfigTemplate, not even an explicit nil
func (o *Device) UnsetConfigTemplate() {
	o.ConfigTemplate.Unset()
}

// GetLocalContextData returns the LocalContextData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Device) GetLocalContextData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.LocalContextData
}

// GetLocalContextDataOk returns a tuple with the LocalContextData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetLocalContextDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.LocalContextData) {
		return nil, false
	}
	return &o.LocalContextData, true
}

// HasLocalContextData returns a boolean if a field has been set.
func (o *Device) HasLocalContextData() bool {
	if o != nil && !IsNil(o.LocalContextData) {
		return true
	}

	return false
}

// SetLocalContextData gets a reference to the given interface{} and assigns it to the LocalContextData field.
func (o *Device) SetLocalContextData(v interface{}) {
	o.LocalContextData = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Device) GetTags() []NestedTag {
	if o == nil || IsNil(o.Tags) {
		var ret []NestedTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetTagsOk() ([]NestedTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Device) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTag and assigns it to the Tags field.
func (o *Device) SetTags(v []NestedTag) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Device) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Device) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Device) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Device) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Device) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *Device) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetLastUpdated returns the LastUpdated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Device) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastUpdated.Get()
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdated.Get(), o.LastUpdated.IsSet()
}

// SetLastUpdated sets field value
func (o *Device) SetLastUpdated(v time.Time) {
	o.LastUpdated.Set(&v)
}

// GetConsolePortCount returns the ConsolePortCount field value
func (o *Device) GetConsolePortCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConsolePortCount
}

// GetConsolePortCountOk returns a tuple with the ConsolePortCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetConsolePortCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsolePortCount, true
}

// SetConsolePortCount sets field value
func (o *Device) SetConsolePortCount(v int32) {
	o.ConsolePortCount = v
}

// GetConsoleServerPortCount returns the ConsoleServerPortCount field value
func (o *Device) GetConsoleServerPortCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConsoleServerPortCount
}

// GetConsoleServerPortCountOk returns a tuple with the ConsoleServerPortCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetConsoleServerPortCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsoleServerPortCount, true
}

// SetConsoleServerPortCount sets field value
func (o *Device) SetConsoleServerPortCount(v int32) {
	o.ConsoleServerPortCount = v
}

// GetPowerPortCount returns the PowerPortCount field value
func (o *Device) GetPowerPortCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PowerPortCount
}

// GetPowerPortCountOk returns a tuple with the PowerPortCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetPowerPortCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PowerPortCount, true
}

// SetPowerPortCount sets field value
func (o *Device) SetPowerPortCount(v int32) {
	o.PowerPortCount = v
}

// GetPowerOutletCount returns the PowerOutletCount field value
func (o *Device) GetPowerOutletCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PowerOutletCount
}

// GetPowerOutletCountOk returns a tuple with the PowerOutletCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetPowerOutletCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PowerOutletCount, true
}

// SetPowerOutletCount sets field value
func (o *Device) SetPowerOutletCount(v int32) {
	o.PowerOutletCount = v
}

// GetInterfaceCount returns the InterfaceCount field value
func (o *Device) GetInterfaceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InterfaceCount
}

// GetInterfaceCountOk returns a tuple with the InterfaceCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetInterfaceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterfaceCount, true
}

// SetInterfaceCount sets field value
func (o *Device) SetInterfaceCount(v int32) {
	o.InterfaceCount = v
}

// GetFrontPortCount returns the FrontPortCount field value
func (o *Device) GetFrontPortCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FrontPortCount
}

// GetFrontPortCountOk returns a tuple with the FrontPortCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetFrontPortCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FrontPortCount, true
}

// SetFrontPortCount sets field value
func (o *Device) SetFrontPortCount(v int32) {
	o.FrontPortCount = v
}

// GetRearPortCount returns the RearPortCount field value
func (o *Device) GetRearPortCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RearPortCount
}

// GetRearPortCountOk returns a tuple with the RearPortCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetRearPortCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RearPortCount, true
}

// SetRearPortCount sets field value
func (o *Device) SetRearPortCount(v int32) {
	o.RearPortCount = v
}

// GetDeviceBayCount returns the DeviceBayCount field value
func (o *Device) GetDeviceBayCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DeviceBayCount
}

// GetDeviceBayCountOk returns a tuple with the DeviceBayCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetDeviceBayCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceBayCount, true
}

// SetDeviceBayCount sets field value
func (o *Device) SetDeviceBayCount(v int32) {
	o.DeviceBayCount = v
}

// GetModuleBayCount returns the ModuleBayCount field value
func (o *Device) GetModuleBayCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ModuleBayCount
}

// GetModuleBayCountOk returns a tuple with the ModuleBayCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetModuleBayCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModuleBayCount, true
}

// SetModuleBayCount sets field value
func (o *Device) SetModuleBayCount(v int32) {
	o.ModuleBayCount = v
}

// GetInventoryItemCount returns the InventoryItemCount field value
func (o *Device) GetInventoryItemCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InventoryItemCount
}

// GetInventoryItemCountOk returns a tuple with the InventoryItemCount field value
// and a boolean to check if the value has been set.
func (o *Device) GetInventoryItemCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InventoryItemCount, true
}

// SetInventoryItemCount sets field value
func (o *Device) SetInventoryItemCount(v int32) {
	o.InventoryItemCount = v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Device) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	toSerialize["display"] = o.Display
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["device_type"] = o.DeviceType
	toSerialize["role"] = o.Role
	if o.Tenant.IsSet() {
		toSerialize["tenant"] = o.Tenant.Get()
	}
	if o.Platform.IsSet() {
		toSerialize["platform"] = o.Platform.Get()
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if o.AssetTag.IsSet() {
		toSerialize["asset_tag"] = o.AssetTag.Get()
	}
	toSerialize["site"] = o.Site
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Rack.IsSet() {
		toSerialize["rack"] = o.Rack.Get()
	}
	if o.Position.IsSet() {
		toSerialize["position"] = o.Position.Get()
	}
	if !IsNil(o.Face) {
		toSerialize["face"] = o.Face
	}
	if o.Latitude.IsSet() {
		toSerialize["latitude"] = o.Latitude.Get()
	}
	if o.Longitude.IsSet() {
		toSerialize["longitude"] = o.Longitude.Get()
	}
	toSerialize["parent_device"] = o.ParentDevice.Get()
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Airflow) {
		toSerialize["airflow"] = o.Airflow
	}
	toSerialize["primary_ip"] = o.PrimaryIp.Get()
	if o.PrimaryIp4.IsSet() {
		toSerialize["primary_ip4"] = o.PrimaryIp4.Get()
	}
	if o.PrimaryIp6.IsSet() {
		toSerialize["primary_ip6"] = o.PrimaryIp6.Get()
	}
	if o.OobIp.IsSet() {
		toSerialize["oob_ip"] = o.OobIp.Get()
	}
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	if o.VirtualChassis.IsSet() {
		toSerialize["virtual_chassis"] = o.VirtualChassis.Get()
	}
	if o.VcPosition.IsSet() {
		toSerialize["vc_position"] = o.VcPosition.Get()
	}
	if o.VcPriority.IsSet() {
		toSerialize["vc_priority"] = o.VcPriority.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if o.ConfigTemplate.IsSet() {
		toSerialize["config_template"] = o.ConfigTemplate.Get()
	}
	if o.LocalContextData != nil {
		toSerialize["local_context_data"] = o.LocalContextData
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}
	toSerialize["created"] = o.Created.Get()
	toSerialize["last_updated"] = o.LastUpdated.Get()
	toSerialize["console_port_count"] = o.ConsolePortCount
	toSerialize["console_server_port_count"] = o.ConsoleServerPortCount
	toSerialize["power_port_count"] = o.PowerPortCount
	toSerialize["power_outlet_count"] = o.PowerOutletCount
	toSerialize["interface_count"] = o.InterfaceCount
	toSerialize["front_port_count"] = o.FrontPortCount
	toSerialize["rear_port_count"] = o.RearPortCount
	toSerialize["device_bay_count"] = o.DeviceBayCount
	toSerialize["module_bay_count"] = o.ModuleBayCount
	toSerialize["inventory_item_count"] = o.InventoryItemCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Device) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
		"display",
		"device_type",
		"role",
		"site",
		"parent_device",
		"primary_ip",
		"created",
		"last_updated",
		"console_port_count",
		"console_server_port_count",
		"power_port_count",
		"power_outlet_count",
		"interface_count",
		"front_port_count",
		"rear_port_count",
		"device_bay_count",
		"module_bay_count",
		"inventory_item_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevice := _Device{}

	err = json.Unmarshal(data, &varDevice)

	if err != nil {
		return err
	}

	*o = Device(varDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "url")
		delete(additionalProperties, "display")
		delete(additionalProperties, "name")
		delete(additionalProperties, "device_type")
		delete(additionalProperties, "role")
		delete(additionalProperties, "tenant")
		delete(additionalProperties, "platform")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "asset_tag")
		delete(additionalProperties, "site")
		delete(additionalProperties, "location")
		delete(additionalProperties, "rack")
		delete(additionalProperties, "position")
		delete(additionalProperties, "face")
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		delete(additionalProperties, "parent_device")
		delete(additionalProperties, "status")
		delete(additionalProperties, "airflow")
		delete(additionalProperties, "primary_ip")
		delete(additionalProperties, "primary_ip4")
		delete(additionalProperties, "primary_ip6")
		delete(additionalProperties, "oob_ip")
		delete(additionalProperties, "cluster")
		delete(additionalProperties, "virtual_chassis")
		delete(additionalProperties, "vc_position")
		delete(additionalProperties, "vc_priority")
		delete(additionalProperties, "description")
		delete(additionalProperties, "comments")
		delete(additionalProperties, "config_template")
		delete(additionalProperties, "local_context_data")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "custom_fields")
		delete(additionalProperties, "created")
		delete(additionalProperties, "last_updated")
		delete(additionalProperties, "console_port_count")
		delete(additionalProperties, "console_server_port_count")
		delete(additionalProperties, "power_port_count")
		delete(additionalProperties, "power_outlet_count")
		delete(additionalProperties, "interface_count")
		delete(additionalProperties, "front_port_count")
		delete(additionalProperties, "rear_port_count")
		delete(additionalProperties, "device_bay_count")
		delete(additionalProperties, "module_bay_count")
		delete(additionalProperties, "inventory_item_count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
