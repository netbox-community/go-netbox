/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// SchemaRetrieveLangParameter the model 'SchemaRetrieveLangParameter'
type SchemaRetrieveLangParameter string

// List of schema_retrieve_lang_parameter
const (
	SCHEMARETRIEVELANGPARAMETER_CS SchemaRetrieveLangParameter = "cs"
	SCHEMARETRIEVELANGPARAMETER_DA SchemaRetrieveLangParameter = "da"
	SCHEMARETRIEVELANGPARAMETER_DE SchemaRetrieveLangParameter = "de"
	SCHEMARETRIEVELANGPARAMETER_EN SchemaRetrieveLangParameter = "en"
	SCHEMARETRIEVELANGPARAMETER_ES SchemaRetrieveLangParameter = "es"
	SCHEMARETRIEVELANGPARAMETER_FR SchemaRetrieveLangParameter = "fr"
	SCHEMARETRIEVELANGPARAMETER_IT SchemaRetrieveLangParameter = "it"
	SCHEMARETRIEVELANGPARAMETER_JA SchemaRetrieveLangParameter = "ja"
	SCHEMARETRIEVELANGPARAMETER_NL SchemaRetrieveLangParameter = "nl"
	SCHEMARETRIEVELANGPARAMETER_PL SchemaRetrieveLangParameter = "pl"
	SCHEMARETRIEVELANGPARAMETER_PT SchemaRetrieveLangParameter = "pt"
	SCHEMARETRIEVELANGPARAMETER_RU SchemaRetrieveLangParameter = "ru"
	SCHEMARETRIEVELANGPARAMETER_TR SchemaRetrieveLangParameter = "tr"
	SCHEMARETRIEVELANGPARAMETER_UK SchemaRetrieveLangParameter = "uk"
	SCHEMARETRIEVELANGPARAMETER_ZH SchemaRetrieveLangParameter = "zh"
)

// All allowed values of SchemaRetrieveLangParameter enum
var AllowedSchemaRetrieveLangParameterEnumValues = []SchemaRetrieveLangParameter{
	"cs",
	"da",
	"de",
	"en",
	"es",
	"fr",
	"it",
	"ja",
	"nl",
	"pl",
	"pt",
	"ru",
	"tr",
	"uk",
	"zh",
}

func (v *SchemaRetrieveLangParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaRetrieveLangParameter(value)
	for _, existing := range AllowedSchemaRetrieveLangParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaRetrieveLangParameter", value)
}

// NewSchemaRetrieveLangParameterFromValue returns a pointer to a valid SchemaRetrieveLangParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaRetrieveLangParameterFromValue(v string) (*SchemaRetrieveLangParameter, error) {
	ev := SchemaRetrieveLangParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaRetrieveLangParameter: valid values are %v", v, AllowedSchemaRetrieveLangParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaRetrieveLangParameter) IsValid() bool {
	for _, existing := range AllowedSchemaRetrieveLangParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to schema_retrieve_lang_parameter value
func (v SchemaRetrieveLangParameter) Ptr() *SchemaRetrieveLangParameter {
	return &v
}

type NullableSchemaRetrieveLangParameter struct {
	value *SchemaRetrieveLangParameter
	isSet bool
}

func (v NullableSchemaRetrieveLangParameter) Get() *SchemaRetrieveLangParameter {
	return v.value
}

func (v *NullableSchemaRetrieveLangParameter) Set(val *SchemaRetrieveLangParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaRetrieveLangParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaRetrieveLangParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaRetrieveLangParameter(val *SchemaRetrieveLangParameter) *NullableSchemaRetrieveLangParameter {
	return &NullableSchemaRetrieveLangParameter{value: val, isSet: true}
}

func (v NullableSchemaRetrieveLangParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaRetrieveLangParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
