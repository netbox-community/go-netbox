/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// IPAddressRoleValue * `loopback` - Loopback * `secondary` - Secondary * `anycast` - Anycast * `vip` - VIP * `vrrp` - VRRP * `hsrp` - HSRP * `glbp` - GLBP * `carp` - CARP
type IPAddressRoleValue string

// List of IPAddress_role_value
const (
	IPADDRESSROLEVALUE_LOOPBACK  IPAddressRoleValue = "loopback"
	IPADDRESSROLEVALUE_SECONDARY IPAddressRoleValue = "secondary"
	IPADDRESSROLEVALUE_ANYCAST   IPAddressRoleValue = "anycast"
	IPADDRESSROLEVALUE_VIP       IPAddressRoleValue = "vip"
	IPADDRESSROLEVALUE_VRRP      IPAddressRoleValue = "vrrp"
	IPADDRESSROLEVALUE_HSRP      IPAddressRoleValue = "hsrp"
	IPADDRESSROLEVALUE_GLBP      IPAddressRoleValue = "glbp"
	IPADDRESSROLEVALUE_CARP      IPAddressRoleValue = "carp"
	IPADDRESSROLEVALUE_EMPTY     IPAddressRoleValue = ""
)

// All allowed values of IPAddressRoleValue enum
var AllowedIPAddressRoleValueEnumValues = []IPAddressRoleValue{
	"loopback",
	"secondary",
	"anycast",
	"vip",
	"vrrp",
	"hsrp",
	"glbp",
	"carp",
	"",
}

func (v *IPAddressRoleValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IPAddressRoleValue(value)
	for _, existing := range AllowedIPAddressRoleValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IPAddressRoleValue", value)
}

// NewIPAddressRoleValueFromValue returns a pointer to a valid IPAddressRoleValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIPAddressRoleValueFromValue(v string) (*IPAddressRoleValue, error) {
	ev := IPAddressRoleValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IPAddressRoleValue: valid values are %v", v, AllowedIPAddressRoleValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IPAddressRoleValue) IsValid() bool {
	for _, existing := range AllowedIPAddressRoleValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IPAddress_role_value value
func (v IPAddressRoleValue) Ptr() *IPAddressRoleValue {
	return &v
}

type NullableIPAddressRoleValue struct {
	value *IPAddressRoleValue
	isSet bool
}

func (v NullableIPAddressRoleValue) Get() *IPAddressRoleValue {
	return v.value
}

func (v *NullableIPAddressRoleValue) Set(val *IPAddressRoleValue) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAddressRoleValue) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAddressRoleValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAddressRoleValue(val *IPAddressRoleValue) *NullableIPAddressRoleValue {
	return &NullableIPAddressRoleValue{value: val, isSet: true}
}

func (v NullableIPAddressRoleValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAddressRoleValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
