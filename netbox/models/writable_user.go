// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WritableUser writable user
//
// swagger:model WritableUser
type WritableUser struct {

	// Date joined
	// Format: date-time
	DateJoined strfmt.DateTime `json:"date_joined,omitempty"`

	// Display
	// Read Only: true
	Display string `json:"display,omitempty"`

	// Email address
	// Max Length: 254
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// First name
	// Max Length: 150
	FirstName string `json:"first_name,omitempty"`

	// The groups this user belongs to. A user will get all permissions granted to each of their groups.
	// Unique: true
	Groups []int64 `json:"groups"`

	// ID
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Active
	//
	// Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
	IsActive bool `json:"is_active,omitempty"`

	// Staff status
	//
	// Designates whether the user can log into this admin site.
	IsStaff bool `json:"is_staff,omitempty"`

	// Last name
	// Max Length: 150
	LastName string `json:"last_name,omitempty"`

	// Password
	// Required: true
	// Max Length: 128
	// Min Length: 1
	Password *string `json:"password"`

	// Url
	// Read Only: true
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`

	// Username
	//
	// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	// Required: true
	// Max Length: 150
	// Min Length: 1
	// Pattern: ^[\w.@+-]+$
	Username *string `json:"username"`
}

// Validate validates this writable user
func (m *WritableUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateJoined(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritableUser) validateDateJoined(formats strfmt.Registry) error {
	if swag.IsZero(m.DateJoined) { // not required
		return nil
	}

	if err := validate.FormatOf("date_joined", "body", "date-time", m.DateJoined.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WritableUser) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("email", "body", m.Email.String(), 254); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WritableUser) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("first_name", "body", m.FirstName, 150); err != nil {
		return err
	}

	return nil
}

func (m *WritableUser) validateGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	if err := validate.UniqueItems("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *WritableUser) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("last_name", "body", m.LastName, 150); err != nil {
		return err
	}

	return nil
}

func (m *WritableUser) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", *m.Password, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 128); err != nil {
		return err
	}

	return nil
}

func (m *WritableUser) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WritableUser) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", *m.Username, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 150); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", *m.Username, `^[\w.@+-]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this writable user based on the context it is used
func (m *WritableUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisplay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WritableUser) contextValidateDisplay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "display", "body", string(m.Display)); err != nil {
		return err
	}

	return nil
}

func (m *WritableUser) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *WritableUser) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "url", "body", strfmt.URI(m.URL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WritableUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WritableUser) UnmarshalBinary(b []byte) error {
	var res WritableUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
