/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// BriefL2VPNTypeValue * `vpws` - VPWS * `vpls` - VPLS * `vxlan` - VXLAN * `vxlan-evpn` - VXLAN-EVPN * `mpls-evpn` - MPLS EVPN * `pbb-evpn` - PBB EVPN * `epl` - EPL * `evpl` - EVPL * `ep-lan` - Ethernet Private LAN * `evp-lan` - Ethernet Virtual Private LAN * `ep-tree` - Ethernet Private Tree * `evp-tree` - Ethernet Virtual Private Tree
type BriefL2VPNTypeValue string

// List of BriefL2VPN_type_value
const (
	BRIEFL2VPNTYPEVALUE_VPWS       BriefL2VPNTypeValue = "vpws"
	BRIEFL2VPNTYPEVALUE_VPLS       BriefL2VPNTypeValue = "vpls"
	BRIEFL2VPNTYPEVALUE_VXLAN      BriefL2VPNTypeValue = "vxlan"
	BRIEFL2VPNTYPEVALUE_VXLAN_EVPN BriefL2VPNTypeValue = "vxlan-evpn"
	BRIEFL2VPNTYPEVALUE_MPLS_EVPN  BriefL2VPNTypeValue = "mpls-evpn"
	BRIEFL2VPNTYPEVALUE_PBB_EVPN   BriefL2VPNTypeValue = "pbb-evpn"
	BRIEFL2VPNTYPEVALUE_EPL        BriefL2VPNTypeValue = "epl"
	BRIEFL2VPNTYPEVALUE_EVPL       BriefL2VPNTypeValue = "evpl"
	BRIEFL2VPNTYPEVALUE_EP_LAN     BriefL2VPNTypeValue = "ep-lan"
	BRIEFL2VPNTYPEVALUE_EVP_LAN    BriefL2VPNTypeValue = "evp-lan"
	BRIEFL2VPNTYPEVALUE_EP_TREE    BriefL2VPNTypeValue = "ep-tree"
	BRIEFL2VPNTYPEVALUE_EVP_TREE   BriefL2VPNTypeValue = "evp-tree"
)

// All allowed values of BriefL2VPNTypeValue enum
var AllowedBriefL2VPNTypeValueEnumValues = []BriefL2VPNTypeValue{
	"vpws",
	"vpls",
	"vxlan",
	"vxlan-evpn",
	"mpls-evpn",
	"pbb-evpn",
	"epl",
	"evpl",
	"ep-lan",
	"evp-lan",
	"ep-tree",
	"evp-tree",
}

func (v *BriefL2VPNTypeValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BriefL2VPNTypeValue(value)
	for _, existing := range AllowedBriefL2VPNTypeValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BriefL2VPNTypeValue", value)
}

// NewBriefL2VPNTypeValueFromValue returns a pointer to a valid BriefL2VPNTypeValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBriefL2VPNTypeValueFromValue(v string) (*BriefL2VPNTypeValue, error) {
	ev := BriefL2VPNTypeValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BriefL2VPNTypeValue: valid values are %v", v, AllowedBriefL2VPNTypeValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BriefL2VPNTypeValue) IsValid() bool {
	for _, existing := range AllowedBriefL2VPNTypeValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BriefL2VPN_type_value value
func (v BriefL2VPNTypeValue) Ptr() *BriefL2VPNTypeValue {
	return &v
}

type NullableBriefL2VPNTypeValue struct {
	value *BriefL2VPNTypeValue
	isSet bool
}

func (v NullableBriefL2VPNTypeValue) Get() *BriefL2VPNTypeValue {
	return v.value
}

func (v *NullableBriefL2VPNTypeValue) Set(val *BriefL2VPNTypeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableBriefL2VPNTypeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableBriefL2VPNTypeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBriefL2VPNTypeValue(val *BriefL2VPNTypeValue) *NullableBriefL2VPNTypeValue {
	return &NullableBriefL2VPNTypeValue{value: val, isSet: true}
}

func (v NullableBriefL2VPNTypeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBriefL2VPNTypeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
