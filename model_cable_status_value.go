/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// CableStatusValue * `connected` - Connected * `planned` - Planned * `decommissioning` - Decommissioning
type CableStatusValue string

// List of Cable_status_value
const (
	CABLESTATUSVALUE_CONNECTED       CableStatusValue = "connected"
	CABLESTATUSVALUE_PLANNED         CableStatusValue = "planned"
	CABLESTATUSVALUE_DECOMMISSIONING CableStatusValue = "decommissioning"
)

// All allowed values of CableStatusValue enum
var AllowedCableStatusValueEnumValues = []CableStatusValue{
	"connected",
	"planned",
	"decommissioning",
}

func (v *CableStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CableStatusValue(value)
	for _, existing := range AllowedCableStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CableStatusValue", value)
}

// NewCableStatusValueFromValue returns a pointer to a valid CableStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCableStatusValueFromValue(v string) (*CableStatusValue, error) {
	ev := CableStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CableStatusValue: valid values are %v", v, AllowedCableStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CableStatusValue) IsValid() bool {
	for _, existing := range AllowedCableStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Cable_status_value value
func (v CableStatusValue) Ptr() *CableStatusValue {
	return &v
}

type NullableCableStatusValue struct {
	value *CableStatusValue
	isSet bool
}

func (v NullableCableStatusValue) Get() *CableStatusValue {
	return v.value
}

func (v *NullableCableStatusValue) Set(val *CableStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableCableStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableCableStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCableStatusValue(val *CableStatusValue) *NullableCableStatusValue {
	return &NullableCableStatusValue{value: val, isSet: true}
}

func (v NullableCableStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCableStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
