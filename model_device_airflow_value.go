/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DeviceAirflowValue * `front-to-rear` - Front to rear * `rear-to-front` - Rear to front * `left-to-right` - Left to right * `right-to-left` - Right to left * `side-to-rear` - Side to rear * `passive` - Passive * `mixed` - Mixed
type DeviceAirflowValue string

// List of Device_airflow_value
const (
	DEVICEAIRFLOWVALUE_FRONT_TO_REAR DeviceAirflowValue = "front-to-rear"
	DEVICEAIRFLOWVALUE_REAR_TO_FRONT DeviceAirflowValue = "rear-to-front"
	DEVICEAIRFLOWVALUE_LEFT_TO_RIGHT DeviceAirflowValue = "left-to-right"
	DEVICEAIRFLOWVALUE_RIGHT_TO_LEFT DeviceAirflowValue = "right-to-left"
	DEVICEAIRFLOWVALUE_SIDE_TO_REAR  DeviceAirflowValue = "side-to-rear"
	DEVICEAIRFLOWVALUE_PASSIVE       DeviceAirflowValue = "passive"
	DEVICEAIRFLOWVALUE_MIXED         DeviceAirflowValue = "mixed"
	DEVICEAIRFLOWVALUE_EMPTY         DeviceAirflowValue = ""
)

// All allowed values of DeviceAirflowValue enum
var AllowedDeviceAirflowValueEnumValues = []DeviceAirflowValue{
	"front-to-rear",
	"rear-to-front",
	"left-to-right",
	"right-to-left",
	"side-to-rear",
	"passive",
	"mixed",
	"",
}

func (v *DeviceAirflowValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceAirflowValue(value)
	for _, existing := range AllowedDeviceAirflowValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceAirflowValue", value)
}

// NewDeviceAirflowValueFromValue returns a pointer to a valid DeviceAirflowValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceAirflowValueFromValue(v string) (*DeviceAirflowValue, error) {
	ev := DeviceAirflowValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceAirflowValue: valid values are %v", v, AllowedDeviceAirflowValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceAirflowValue) IsValid() bool {
	for _, existing := range AllowedDeviceAirflowValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Device_airflow_value value
func (v DeviceAirflowValue) Ptr() *DeviceAirflowValue {
	return &v
}

type NullableDeviceAirflowValue struct {
	value *DeviceAirflowValue
	isSet bool
}

func (v NullableDeviceAirflowValue) Get() *DeviceAirflowValue {
	return v.value
}

func (v *NullableDeviceAirflowValue) Set(val *DeviceAirflowValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAirflowValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAirflowValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAirflowValue(val *DeviceAirflowValue) *NullableDeviceAirflowValue {
	return &NullableDeviceAirflowValue{value: val, isSet: true}
}

func (v NullableDeviceAirflowValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAirflowValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
