/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// WirelessLANAuthCipherLabel the model 'WirelessLANAuthCipherLabel'
type WirelessLANAuthCipherLabel string

// List of WirelessLAN_auth_cipher_label
const (
	WIRELESSLANAUTHCIPHERLABEL_AUTO WirelessLANAuthCipherLabel = "Auto"
	WIRELESSLANAUTHCIPHERLABEL_TKIP WirelessLANAuthCipherLabel = "TKIP"
	WIRELESSLANAUTHCIPHERLABEL_AES  WirelessLANAuthCipherLabel = "AES"
)

// All allowed values of WirelessLANAuthCipherLabel enum
var AllowedWirelessLANAuthCipherLabelEnumValues = []WirelessLANAuthCipherLabel{
	"Auto",
	"TKIP",
	"AES",
}

func (v *WirelessLANAuthCipherLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WirelessLANAuthCipherLabel(value)
	for _, existing := range AllowedWirelessLANAuthCipherLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WirelessLANAuthCipherLabel", value)
}

// NewWirelessLANAuthCipherLabelFromValue returns a pointer to a valid WirelessLANAuthCipherLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWirelessLANAuthCipherLabelFromValue(v string) (*WirelessLANAuthCipherLabel, error) {
	ev := WirelessLANAuthCipherLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WirelessLANAuthCipherLabel: valid values are %v", v, AllowedWirelessLANAuthCipherLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WirelessLANAuthCipherLabel) IsValid() bool {
	for _, existing := range AllowedWirelessLANAuthCipherLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WirelessLAN_auth_cipher_label value
func (v WirelessLANAuthCipherLabel) Ptr() *WirelessLANAuthCipherLabel {
	return &v
}

type NullableWirelessLANAuthCipherLabel struct {
	value *WirelessLANAuthCipherLabel
	isSet bool
}

func (v NullableWirelessLANAuthCipherLabel) Get() *WirelessLANAuthCipherLabel {
	return v.value
}

func (v *NullableWirelessLANAuthCipherLabel) Set(val *WirelessLANAuthCipherLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableWirelessLANAuthCipherLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableWirelessLANAuthCipherLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWirelessLANAuthCipherLabel(val *WirelessLANAuthCipherLabel) *NullableWirelessLANAuthCipherLabel {
	return &NullableWirelessLANAuthCipherLabel{value: val, isSet: true}
}

func (v NullableWirelessLANAuthCipherLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWirelessLANAuthCipherLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
