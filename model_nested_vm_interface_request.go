/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the NestedVMInterfaceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NestedVMInterfaceRequest{}

// NestedVMInterfaceRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a dictionary of attributes which can be used to uniquely identify the related object. This class should be subclassed to return a full representation of the related object on read.
type NestedVMInterfaceRequest struct {
	Name                 string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _NestedVMInterfaceRequest NestedVMInterfaceRequest

// NewNestedVMInterfaceRequest instantiates a new NestedVMInterfaceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedVMInterfaceRequest(name string) *NestedVMInterfaceRequest {
	this := NestedVMInterfaceRequest{}
	this.Name = name
	return &this
}

// NewNestedVMInterfaceRequestWithDefaults instantiates a new NestedVMInterfaceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedVMInterfaceRequestWithDefaults() *NestedVMInterfaceRequest {
	this := NestedVMInterfaceRequest{}
	return &this
}

// GetName returns the Name field value
func (o *NestedVMInterfaceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NestedVMInterfaceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NestedVMInterfaceRequest) SetName(v string) {
	o.Name = v
}

func (o NestedVMInterfaceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NestedVMInterfaceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NestedVMInterfaceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNestedVMInterfaceRequest := _NestedVMInterfaceRequest{}

	err = json.Unmarshal(data, &varNestedVMInterfaceRequest)

	if err != nil {
		return err
	}

	*o = NestedVMInterfaceRequest(varNestedVMInterfaceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNestedVMInterfaceRequest struct {
	value *NestedVMInterfaceRequest
	isSet bool
}

func (v NullableNestedVMInterfaceRequest) Get() *NestedVMInterfaceRequest {
	return v.value
}

func (v *NullableNestedVMInterfaceRequest) Set(val *NestedVMInterfaceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedVMInterfaceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedVMInterfaceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedVMInterfaceRequest(val *NestedVMInterfaceRequest) *NullableNestedVMInterfaceRequest {
	return &NullableNestedVMInterfaceRequest{value: val, isSet: true}
}

func (v NullableNestedVMInterfaceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedVMInterfaceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
