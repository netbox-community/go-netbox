/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// checks if the WritableInterfaceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WritableInterfaceRequest{}

// WritableInterfaceRequest Adds support for custom fields and tags.
type WritableInterfaceRequest struct {
	Device BriefDeviceRequest         `json:"device"`
	Vdcs   []int32                    `json:"vdcs,omitempty"`
	Module NullableBriefModuleRequest `json:"module,omitempty"`
	Name   string                     `json:"name"`
	// Physical label
	Label      *string                        `json:"label,omitempty"`
	Type       InterfaceTypeValue             `json:"type"`
	Enabled    *bool                          `json:"enabled,omitempty"`
	Parent     NullableInt32                  `json:"parent,omitempty"`
	Bridge     NullableInt32                  `json:"bridge,omitempty"`
	Lag        NullableInt32                  `json:"lag,omitempty"`
	Mtu        NullableInt32                  `json:"mtu,omitempty"`
	MacAddress NullableString                 `json:"mac_address,omitempty"`
	Speed      NullableInt32                  `json:"speed,omitempty"`
	Duplex     NullableInterfaceRequestDuplex `json:"duplex,omitempty"`
	Wwn        NullableString                 `json:"wwn,omitempty"`
	// This interface is used only for out-of-band management
	MgmtOnly    *bool                                `json:"mgmt_only,omitempty"`
	Description *string                              `json:"description,omitempty"`
	Mode        *PatchedWritableInterfaceRequestMode `json:"mode,omitempty"`
	RfRole      *WirelessRole                        `json:"rf_role,omitempty"`
	RfChannel   *WirelessChannel                     `json:"rf_channel,omitempty"`
	PoeMode     *InterfacePoeModeValue               `json:"poe_mode,omitempty"`
	PoeType     *InterfacePoeTypeValue               `json:"poe_type,omitempty"`
	// Populated by selected channel (if set)
	RfChannelFrequency NullableFloat64 `json:"rf_channel_frequency,omitempty"`
	// Populated by selected channel (if set)
	RfChannelWidth NullableFloat64          `json:"rf_channel_width,omitempty"`
	TxPower        NullableInt32            `json:"tx_power,omitempty"`
	UntaggedVlan   NullableBriefVLANRequest `json:"untagged_vlan,omitempty"`
	TaggedVlans    []int32                  `json:"tagged_vlans,omitempty"`
	// Treat as if a cable is connected
	MarkConnected        *bool                   `json:"mark_connected,omitempty"`
	WirelessLans         []int32                 `json:"wireless_lans,omitempty"`
	Vrf                  NullableBriefVRFRequest `json:"vrf,omitempty"`
	Tags                 []NestedTagRequest      `json:"tags,omitempty"`
	CustomFields         map[string]interface{}  `json:"custom_fields,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WritableInterfaceRequest WritableInterfaceRequest

// NewWritableInterfaceRequest instantiates a new WritableInterfaceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWritableInterfaceRequest(device BriefDeviceRequest, name string, type_ InterfaceTypeValue) *WritableInterfaceRequest {
	this := WritableInterfaceRequest{}
	this.Device = device
	this.Name = name
	this.Type = type_
	return &this
}

// NewWritableInterfaceRequestWithDefaults instantiates a new WritableInterfaceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWritableInterfaceRequestWithDefaults() *WritableInterfaceRequest {
	this := WritableInterfaceRequest{}
	return &this
}

// GetDevice returns the Device field value
func (o *WritableInterfaceRequest) GetDevice() BriefDeviceRequest {
	if o == nil {
		var ret BriefDeviceRequest
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetDeviceOk() (*BriefDeviceRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *WritableInterfaceRequest) SetDevice(v BriefDeviceRequest) {
	o.Device = v
}

// GetVdcs returns the Vdcs field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetVdcs() []int32 {
	if o == nil || IsNil(o.Vdcs) {
		var ret []int32
		return ret
	}
	return o.Vdcs
}

// GetVdcsOk returns a tuple with the Vdcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetVdcsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Vdcs) {
		return nil, false
	}
	return o.Vdcs, true
}

// HasVdcs returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasVdcs() bool {
	if o != nil && !IsNil(o.Vdcs) {
		return true
	}

	return false
}

// SetVdcs gets a reference to the given []int32 and assigns it to the Vdcs field.
func (o *WritableInterfaceRequest) SetVdcs(v []int32) {
	o.Vdcs = v
}

// GetModule returns the Module field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetModule() BriefModuleRequest {
	if o == nil || IsNil(o.Module.Get()) {
		var ret BriefModuleRequest
		return ret
	}
	return *o.Module.Get()
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetModuleOk() (*BriefModuleRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Module.Get(), o.Module.IsSet()
}

// HasModule returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasModule() bool {
	if o != nil && o.Module.IsSet() {
		return true
	}

	return false
}

// SetModule gets a reference to the given NullableBriefModuleRequest and assigns it to the Module field.
func (o *WritableInterfaceRequest) SetModule(v BriefModuleRequest) {
	o.Module.Set(&v)
}

// SetModuleNil sets the value for Module to be an explicit nil
func (o *WritableInterfaceRequest) SetModuleNil() {
	o.Module.Set(nil)
}

// UnsetModule ensures that no value is present for Module, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetModule() {
	o.Module.Unset()
}

// GetName returns the Name field value
func (o *WritableInterfaceRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WritableInterfaceRequest) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *WritableInterfaceRequest) SetLabel(v string) {
	o.Label = &v
}

// GetType returns the Type field value
func (o *WritableInterfaceRequest) GetType() InterfaceTypeValue {
	if o == nil {
		var ret InterfaceTypeValue
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetTypeOk() (*InterfaceTypeValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WritableInterfaceRequest) SetType(v InterfaceTypeValue) {
	o.Type = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WritableInterfaceRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetParent returns the Parent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetParent() int32 {
	if o == nil || IsNil(o.Parent.Get()) {
		var ret int32
		return ret
	}
	return *o.Parent.Get()
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetParentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parent.Get(), o.Parent.IsSet()
}

// HasParent returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasParent() bool {
	if o != nil && o.Parent.IsSet() {
		return true
	}

	return false
}

// SetParent gets a reference to the given NullableInt32 and assigns it to the Parent field.
func (o *WritableInterfaceRequest) SetParent(v int32) {
	o.Parent.Set(&v)
}

// SetParentNil sets the value for Parent to be an explicit nil
func (o *WritableInterfaceRequest) SetParentNil() {
	o.Parent.Set(nil)
}

// UnsetParent ensures that no value is present for Parent, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetParent() {
	o.Parent.Unset()
}

// GetBridge returns the Bridge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetBridge() int32 {
	if o == nil || IsNil(o.Bridge.Get()) {
		var ret int32
		return ret
	}
	return *o.Bridge.Get()
}

// GetBridgeOk returns a tuple with the Bridge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetBridgeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bridge.Get(), o.Bridge.IsSet()
}

// HasBridge returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasBridge() bool {
	if o != nil && o.Bridge.IsSet() {
		return true
	}

	return false
}

// SetBridge gets a reference to the given NullableInt32 and assigns it to the Bridge field.
func (o *WritableInterfaceRequest) SetBridge(v int32) {
	o.Bridge.Set(&v)
}

// SetBridgeNil sets the value for Bridge to be an explicit nil
func (o *WritableInterfaceRequest) SetBridgeNil() {
	o.Bridge.Set(nil)
}

// UnsetBridge ensures that no value is present for Bridge, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetBridge() {
	o.Bridge.Unset()
}

// GetLag returns the Lag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetLag() int32 {
	if o == nil || IsNil(o.Lag.Get()) {
		var ret int32
		return ret
	}
	return *o.Lag.Get()
}

// GetLagOk returns a tuple with the Lag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetLagOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lag.Get(), o.Lag.IsSet()
}

// HasLag returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasLag() bool {
	if o != nil && o.Lag.IsSet() {
		return true
	}

	return false
}

// SetLag gets a reference to the given NullableInt32 and assigns it to the Lag field.
func (o *WritableInterfaceRequest) SetLag(v int32) {
	o.Lag.Set(&v)
}

// SetLagNil sets the value for Lag to be an explicit nil
func (o *WritableInterfaceRequest) SetLagNil() {
	o.Lag.Set(nil)
}

// UnsetLag ensures that no value is present for Lag, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetLag() {
	o.Lag.Unset()
}

// GetMtu returns the Mtu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu.Get()) {
		var ret int32
		return ret
	}
	return *o.Mtu.Get()
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetMtuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mtu.Get(), o.Mtu.IsSet()
}

// HasMtu returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasMtu() bool {
	if o != nil && o.Mtu.IsSet() {
		return true
	}

	return false
}

// SetMtu gets a reference to the given NullableInt32 and assigns it to the Mtu field.
func (o *WritableInterfaceRequest) SetMtu(v int32) {
	o.Mtu.Set(&v)
}

// SetMtuNil sets the value for Mtu to be an explicit nil
func (o *WritableInterfaceRequest) SetMtuNil() {
	o.Mtu.Set(nil)
}

// UnsetMtu ensures that no value is present for Mtu, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetMtu() {
	o.Mtu.Unset()
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress.Get()) {
		var ret string
		return ret
	}
	return *o.MacAddress.Get()
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MacAddress.Get(), o.MacAddress.IsSet()
}

// HasMacAddress returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasMacAddress() bool {
	if o != nil && o.MacAddress.IsSet() {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given NullableString and assigns it to the MacAddress field.
func (o *WritableInterfaceRequest) SetMacAddress(v string) {
	o.MacAddress.Set(&v)
}

// SetMacAddressNil sets the value for MacAddress to be an explicit nil
func (o *WritableInterfaceRequest) SetMacAddressNil() {
	o.MacAddress.Set(nil)
}

// UnsetMacAddress ensures that no value is present for MacAddress, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetMacAddress() {
	o.MacAddress.Unset()
}

// GetSpeed returns the Speed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetSpeed() int32 {
	if o == nil || IsNil(o.Speed.Get()) {
		var ret int32
		return ret
	}
	return *o.Speed.Get()
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetSpeedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Speed.Get(), o.Speed.IsSet()
}

// HasSpeed returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasSpeed() bool {
	if o != nil && o.Speed.IsSet() {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given NullableInt32 and assigns it to the Speed field.
func (o *WritableInterfaceRequest) SetSpeed(v int32) {
	o.Speed.Set(&v)
}

// SetSpeedNil sets the value for Speed to be an explicit nil
func (o *WritableInterfaceRequest) SetSpeedNil() {
	o.Speed.Set(nil)
}

// UnsetSpeed ensures that no value is present for Speed, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetSpeed() {
	o.Speed.Unset()
}

// GetDuplex returns the Duplex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetDuplex() InterfaceRequestDuplex {
	if o == nil || IsNil(o.Duplex.Get()) {
		var ret InterfaceRequestDuplex
		return ret
	}
	return *o.Duplex.Get()
}

// GetDuplexOk returns a tuple with the Duplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetDuplexOk() (*InterfaceRequestDuplex, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duplex.Get(), o.Duplex.IsSet()
}

// HasDuplex returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasDuplex() bool {
	if o != nil && o.Duplex.IsSet() {
		return true
	}

	return false
}

// SetDuplex gets a reference to the given NullableInterfaceRequestDuplex and assigns it to the Duplex field.
func (o *WritableInterfaceRequest) SetDuplex(v InterfaceRequestDuplex) {
	o.Duplex.Set(&v)
}

// SetDuplexNil sets the value for Duplex to be an explicit nil
func (o *WritableInterfaceRequest) SetDuplexNil() {
	o.Duplex.Set(nil)
}

// UnsetDuplex ensures that no value is present for Duplex, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetDuplex() {
	o.Duplex.Unset()
}

// GetWwn returns the Wwn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetWwn() string {
	if o == nil || IsNil(o.Wwn.Get()) {
		var ret string
		return ret
	}
	return *o.Wwn.Get()
}

// GetWwnOk returns a tuple with the Wwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetWwnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Wwn.Get(), o.Wwn.IsSet()
}

// HasWwn returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasWwn() bool {
	if o != nil && o.Wwn.IsSet() {
		return true
	}

	return false
}

// SetWwn gets a reference to the given NullableString and assigns it to the Wwn field.
func (o *WritableInterfaceRequest) SetWwn(v string) {
	o.Wwn.Set(&v)
}

// SetWwnNil sets the value for Wwn to be an explicit nil
func (o *WritableInterfaceRequest) SetWwnNil() {
	o.Wwn.Set(nil)
}

// UnsetWwn ensures that no value is present for Wwn, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetWwn() {
	o.Wwn.Unset()
}

// GetMgmtOnly returns the MgmtOnly field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetMgmtOnly() bool {
	if o == nil || IsNil(o.MgmtOnly) {
		var ret bool
		return ret
	}
	return *o.MgmtOnly
}

// GetMgmtOnlyOk returns a tuple with the MgmtOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetMgmtOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.MgmtOnly) {
		return nil, false
	}
	return o.MgmtOnly, true
}

// HasMgmtOnly returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasMgmtOnly() bool {
	if o != nil && !IsNil(o.MgmtOnly) {
		return true
	}

	return false
}

// SetMgmtOnly gets a reference to the given bool and assigns it to the MgmtOnly field.
func (o *WritableInterfaceRequest) SetMgmtOnly(v bool) {
	o.MgmtOnly = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WritableInterfaceRequest) SetDescription(v string) {
	o.Description = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetMode() PatchedWritableInterfaceRequestMode {
	if o == nil || IsNil(o.Mode) {
		var ret PatchedWritableInterfaceRequestMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetModeOk() (*PatchedWritableInterfaceRequestMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given PatchedWritableInterfaceRequestMode and assigns it to the Mode field.
func (o *WritableInterfaceRequest) SetMode(v PatchedWritableInterfaceRequestMode) {
	o.Mode = &v
}

// GetRfRole returns the RfRole field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetRfRole() WirelessRole {
	if o == nil || IsNil(o.RfRole) {
		var ret WirelessRole
		return ret
	}
	return *o.RfRole
}

// GetRfRoleOk returns a tuple with the RfRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetRfRoleOk() (*WirelessRole, bool) {
	if o == nil || IsNil(o.RfRole) {
		return nil, false
	}
	return o.RfRole, true
}

// HasRfRole returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasRfRole() bool {
	if o != nil && !IsNil(o.RfRole) {
		return true
	}

	return false
}

// SetRfRole gets a reference to the given WirelessRole and assigns it to the RfRole field.
func (o *WritableInterfaceRequest) SetRfRole(v WirelessRole) {
	o.RfRole = &v
}

// GetRfChannel returns the RfChannel field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetRfChannel() WirelessChannel {
	if o == nil || IsNil(o.RfChannel) {
		var ret WirelessChannel
		return ret
	}
	return *o.RfChannel
}

// GetRfChannelOk returns a tuple with the RfChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetRfChannelOk() (*WirelessChannel, bool) {
	if o == nil || IsNil(o.RfChannel) {
		return nil, false
	}
	return o.RfChannel, true
}

// HasRfChannel returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasRfChannel() bool {
	if o != nil && !IsNil(o.RfChannel) {
		return true
	}

	return false
}

// SetRfChannel gets a reference to the given WirelessChannel and assigns it to the RfChannel field.
func (o *WritableInterfaceRequest) SetRfChannel(v WirelessChannel) {
	o.RfChannel = &v
}

// GetPoeMode returns the PoeMode field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetPoeMode() InterfacePoeModeValue {
	if o == nil || IsNil(o.PoeMode) {
		var ret InterfacePoeModeValue
		return ret
	}
	return *o.PoeMode
}

// GetPoeModeOk returns a tuple with the PoeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetPoeModeOk() (*InterfacePoeModeValue, bool) {
	if o == nil || IsNil(o.PoeMode) {
		return nil, false
	}
	return o.PoeMode, true
}

// HasPoeMode returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasPoeMode() bool {
	if o != nil && !IsNil(o.PoeMode) {
		return true
	}

	return false
}

// SetPoeMode gets a reference to the given InterfacePoeModeValue and assigns it to the PoeMode field.
func (o *WritableInterfaceRequest) SetPoeMode(v InterfacePoeModeValue) {
	o.PoeMode = &v
}

// GetPoeType returns the PoeType field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetPoeType() InterfacePoeTypeValue {
	if o == nil || IsNil(o.PoeType) {
		var ret InterfacePoeTypeValue
		return ret
	}
	return *o.PoeType
}

// GetPoeTypeOk returns a tuple with the PoeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetPoeTypeOk() (*InterfacePoeTypeValue, bool) {
	if o == nil || IsNil(o.PoeType) {
		return nil, false
	}
	return o.PoeType, true
}

// HasPoeType returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasPoeType() bool {
	if o != nil && !IsNil(o.PoeType) {
		return true
	}

	return false
}

// SetPoeType gets a reference to the given InterfacePoeTypeValue and assigns it to the PoeType field.
func (o *WritableInterfaceRequest) SetPoeType(v InterfacePoeTypeValue) {
	o.PoeType = &v
}

// GetRfChannelFrequency returns the RfChannelFrequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetRfChannelFrequency() float64 {
	if o == nil || IsNil(o.RfChannelFrequency.Get()) {
		var ret float64
		return ret
	}
	return *o.RfChannelFrequency.Get()
}

// GetRfChannelFrequencyOk returns a tuple with the RfChannelFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetRfChannelFrequencyOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RfChannelFrequency.Get(), o.RfChannelFrequency.IsSet()
}

// HasRfChannelFrequency returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasRfChannelFrequency() bool {
	if o != nil && o.RfChannelFrequency.IsSet() {
		return true
	}

	return false
}

// SetRfChannelFrequency gets a reference to the given NullableFloat64 and assigns it to the RfChannelFrequency field.
func (o *WritableInterfaceRequest) SetRfChannelFrequency(v float64) {
	o.RfChannelFrequency.Set(&v)
}

// SetRfChannelFrequencyNil sets the value for RfChannelFrequency to be an explicit nil
func (o *WritableInterfaceRequest) SetRfChannelFrequencyNil() {
	o.RfChannelFrequency.Set(nil)
}

// UnsetRfChannelFrequency ensures that no value is present for RfChannelFrequency, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetRfChannelFrequency() {
	o.RfChannelFrequency.Unset()
}

// GetRfChannelWidth returns the RfChannelWidth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetRfChannelWidth() float64 {
	if o == nil || IsNil(o.RfChannelWidth.Get()) {
		var ret float64
		return ret
	}
	return *o.RfChannelWidth.Get()
}

// GetRfChannelWidthOk returns a tuple with the RfChannelWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetRfChannelWidthOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RfChannelWidth.Get(), o.RfChannelWidth.IsSet()
}

// HasRfChannelWidth returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasRfChannelWidth() bool {
	if o != nil && o.RfChannelWidth.IsSet() {
		return true
	}

	return false
}

// SetRfChannelWidth gets a reference to the given NullableFloat64 and assigns it to the RfChannelWidth field.
func (o *WritableInterfaceRequest) SetRfChannelWidth(v float64) {
	o.RfChannelWidth.Set(&v)
}

// SetRfChannelWidthNil sets the value for RfChannelWidth to be an explicit nil
func (o *WritableInterfaceRequest) SetRfChannelWidthNil() {
	o.RfChannelWidth.Set(nil)
}

// UnsetRfChannelWidth ensures that no value is present for RfChannelWidth, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetRfChannelWidth() {
	o.RfChannelWidth.Unset()
}

// GetTxPower returns the TxPower field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetTxPower() int32 {
	if o == nil || IsNil(o.TxPower.Get()) {
		var ret int32
		return ret
	}
	return *o.TxPower.Get()
}

// GetTxPowerOk returns a tuple with the TxPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetTxPowerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxPower.Get(), o.TxPower.IsSet()
}

// HasTxPower returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasTxPower() bool {
	if o != nil && o.TxPower.IsSet() {
		return true
	}

	return false
}

// SetTxPower gets a reference to the given NullableInt32 and assigns it to the TxPower field.
func (o *WritableInterfaceRequest) SetTxPower(v int32) {
	o.TxPower.Set(&v)
}

// SetTxPowerNil sets the value for TxPower to be an explicit nil
func (o *WritableInterfaceRequest) SetTxPowerNil() {
	o.TxPower.Set(nil)
}

// UnsetTxPower ensures that no value is present for TxPower, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetTxPower() {
	o.TxPower.Unset()
}

// GetUntaggedVlan returns the UntaggedVlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetUntaggedVlan() BriefVLANRequest {
	if o == nil || IsNil(o.UntaggedVlan.Get()) {
		var ret BriefVLANRequest
		return ret
	}
	return *o.UntaggedVlan.Get()
}

// GetUntaggedVlanOk returns a tuple with the UntaggedVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetUntaggedVlanOk() (*BriefVLANRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.UntaggedVlan.Get(), o.UntaggedVlan.IsSet()
}

// HasUntaggedVlan returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasUntaggedVlan() bool {
	if o != nil && o.UntaggedVlan.IsSet() {
		return true
	}

	return false
}

// SetUntaggedVlan gets a reference to the given NullableBriefVLANRequest and assigns it to the UntaggedVlan field.
func (o *WritableInterfaceRequest) SetUntaggedVlan(v BriefVLANRequest) {
	o.UntaggedVlan.Set(&v)
}

// SetUntaggedVlanNil sets the value for UntaggedVlan to be an explicit nil
func (o *WritableInterfaceRequest) SetUntaggedVlanNil() {
	o.UntaggedVlan.Set(nil)
}

// UnsetUntaggedVlan ensures that no value is present for UntaggedVlan, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetUntaggedVlan() {
	o.UntaggedVlan.Unset()
}

// GetTaggedVlans returns the TaggedVlans field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetTaggedVlans() []int32 {
	if o == nil || IsNil(o.TaggedVlans) {
		var ret []int32
		return ret
	}
	return o.TaggedVlans
}

// GetTaggedVlansOk returns a tuple with the TaggedVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetTaggedVlansOk() ([]int32, bool) {
	if o == nil || IsNil(o.TaggedVlans) {
		return nil, false
	}
	return o.TaggedVlans, true
}

// HasTaggedVlans returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasTaggedVlans() bool {
	if o != nil && !IsNil(o.TaggedVlans) {
		return true
	}

	return false
}

// SetTaggedVlans gets a reference to the given []int32 and assigns it to the TaggedVlans field.
func (o *WritableInterfaceRequest) SetTaggedVlans(v []int32) {
	o.TaggedVlans = v
}

// GetMarkConnected returns the MarkConnected field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetMarkConnected() bool {
	if o == nil || IsNil(o.MarkConnected) {
		var ret bool
		return ret
	}
	return *o.MarkConnected
}

// GetMarkConnectedOk returns a tuple with the MarkConnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetMarkConnectedOk() (*bool, bool) {
	if o == nil || IsNil(o.MarkConnected) {
		return nil, false
	}
	return o.MarkConnected, true
}

// HasMarkConnected returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasMarkConnected() bool {
	if o != nil && !IsNil(o.MarkConnected) {
		return true
	}

	return false
}

// SetMarkConnected gets a reference to the given bool and assigns it to the MarkConnected field.
func (o *WritableInterfaceRequest) SetMarkConnected(v bool) {
	o.MarkConnected = &v
}

// GetWirelessLans returns the WirelessLans field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetWirelessLans() []int32 {
	if o == nil || IsNil(o.WirelessLans) {
		var ret []int32
		return ret
	}
	return o.WirelessLans
}

// GetWirelessLansOk returns a tuple with the WirelessLans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetWirelessLansOk() ([]int32, bool) {
	if o == nil || IsNil(o.WirelessLans) {
		return nil, false
	}
	return o.WirelessLans, true
}

// HasWirelessLans returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasWirelessLans() bool {
	if o != nil && !IsNil(o.WirelessLans) {
		return true
	}

	return false
}

// SetWirelessLans gets a reference to the given []int32 and assigns it to the WirelessLans field.
func (o *WritableInterfaceRequest) SetWirelessLans(v []int32) {
	o.WirelessLans = v
}

// GetVrf returns the Vrf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableInterfaceRequest) GetVrf() BriefVRFRequest {
	if o == nil || IsNil(o.Vrf.Get()) {
		var ret BriefVRFRequest
		return ret
	}
	return *o.Vrf.Get()
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableInterfaceRequest) GetVrfOk() (*BriefVRFRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vrf.Get(), o.Vrf.IsSet()
}

// HasVrf returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasVrf() bool {
	if o != nil && o.Vrf.IsSet() {
		return true
	}

	return false
}

// SetVrf gets a reference to the given NullableBriefVRFRequest and assigns it to the Vrf field.
func (o *WritableInterfaceRequest) SetVrf(v BriefVRFRequest) {
	o.Vrf.Set(&v)
}

// SetVrfNil sets the value for Vrf to be an explicit nil
func (o *WritableInterfaceRequest) SetVrfNil() {
	o.Vrf.Set(nil)
}

// UnsetVrf ensures that no value is present for Vrf, not even an explicit nil
func (o *WritableInterfaceRequest) UnsetVrf() {
	o.Vrf.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetTags() []NestedTagRequest {
	if o == nil || IsNil(o.Tags) {
		var ret []NestedTagRequest
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetTagsOk() ([]NestedTagRequest, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []NestedTagRequest and assigns it to the Tags field.
func (o *WritableInterfaceRequest) SetTags(v []NestedTagRequest) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *WritableInterfaceRequest) GetCustomFields() map[string]interface{} {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableInterfaceRequest) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return map[string]interface{}{}, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *WritableInterfaceRequest) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *WritableInterfaceRequest) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

func (o WritableInterfaceRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WritableInterfaceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device"] = o.Device
	if !IsNil(o.Vdcs) {
		toSerialize["vdcs"] = o.Vdcs
	}
	if o.Module.IsSet() {
		toSerialize["module"] = o.Module.Get()
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Parent.IsSet() {
		toSerialize["parent"] = o.Parent.Get()
	}
	if o.Bridge.IsSet() {
		toSerialize["bridge"] = o.Bridge.Get()
	}
	if o.Lag.IsSet() {
		toSerialize["lag"] = o.Lag.Get()
	}
	if o.Mtu.IsSet() {
		toSerialize["mtu"] = o.Mtu.Get()
	}
	if o.MacAddress.IsSet() {
		toSerialize["mac_address"] = o.MacAddress.Get()
	}
	if o.Speed.IsSet() {
		toSerialize["speed"] = o.Speed.Get()
	}
	if o.Duplex.IsSet() {
		toSerialize["duplex"] = o.Duplex.Get()
	}
	if o.Wwn.IsSet() {
		toSerialize["wwn"] = o.Wwn.Get()
	}
	if !IsNil(o.MgmtOnly) {
		toSerialize["mgmt_only"] = o.MgmtOnly
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.RfRole) {
		toSerialize["rf_role"] = o.RfRole
	}
	if !IsNil(o.RfChannel) {
		toSerialize["rf_channel"] = o.RfChannel
	}
	if !IsNil(o.PoeMode) {
		toSerialize["poe_mode"] = o.PoeMode
	}
	if !IsNil(o.PoeType) {
		toSerialize["poe_type"] = o.PoeType
	}
	if o.RfChannelFrequency.IsSet() {
		toSerialize["rf_channel_frequency"] = o.RfChannelFrequency.Get()
	}
	if o.RfChannelWidth.IsSet() {
		toSerialize["rf_channel_width"] = o.RfChannelWidth.Get()
	}
	if o.TxPower.IsSet() {
		toSerialize["tx_power"] = o.TxPower.Get()
	}
	if o.UntaggedVlan.IsSet() {
		toSerialize["untagged_vlan"] = o.UntaggedVlan.Get()
	}
	if !IsNil(o.TaggedVlans) {
		toSerialize["tagged_vlans"] = o.TaggedVlans
	}
	if !IsNil(o.MarkConnected) {
		toSerialize["mark_connected"] = o.MarkConnected
	}
	if !IsNil(o.WirelessLans) {
		toSerialize["wireless_lans"] = o.WirelessLans
	}
	if o.Vrf.IsSet() {
		toSerialize["vrf"] = o.Vrf.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.CustomFields) {
		toSerialize["custom_fields"] = o.CustomFields
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WritableInterfaceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWritableInterfaceRequest := _WritableInterfaceRequest{}

	err = json.Unmarshal(data, &varWritableInterfaceRequest)

	if err != nil {
		return err
	}

	*o = WritableInterfaceRequest(varWritableInterfaceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device")
		delete(additionalProperties, "vdcs")
		delete(additionalProperties, "module")
		delete(additionalProperties, "name")
		delete(additionalProperties, "label")
		delete(additionalProperties, "type")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "parent")
		delete(additionalProperties, "bridge")
		delete(additionalProperties, "lag")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "mac_address")
		delete(additionalProperties, "speed")
		delete(additionalProperties, "duplex")
		delete(additionalProperties, "wwn")
		delete(additionalProperties, "mgmt_only")
		delete(additionalProperties, "description")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "rf_role")
		delete(additionalProperties, "rf_channel")
		delete(additionalProperties, "poe_mode")
		delete(additionalProperties, "poe_type")
		delete(additionalProperties, "rf_channel_frequency")
		delete(additionalProperties, "rf_channel_width")
		delete(additionalProperties, "tx_power")
		delete(additionalProperties, "untagged_vlan")
		delete(additionalProperties, "tagged_vlans")
		delete(additionalProperties, "mark_connected")
		delete(additionalProperties, "wireless_lans")
		delete(additionalProperties, "vrf")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "custom_fields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWritableInterfaceRequest struct {
	value *WritableInterfaceRequest
	isSet bool
}

func (v NullableWritableInterfaceRequest) Get() *WritableInterfaceRequest {
	return v.value
}

func (v *NullableWritableInterfaceRequest) Set(val *WritableInterfaceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableInterfaceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableInterfaceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableInterfaceRequest(val *WritableInterfaceRequest) *NullableWritableInterfaceRequest {
	return &NullableWritableInterfaceRequest{value: val, isSet: true}
}

func (v NullableWritableInterfaceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableInterfaceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
