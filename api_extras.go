/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
	"time"
)

// ExtrasAPIService ExtrasAPI service
type ExtrasAPIService service

type ApiExtrasBookmarksBulkDestroyRequest struct {
	ctx             context.Context
	ApiService      *ExtrasAPIService
	bookmarkRequest *[]BookmarkRequest
}

func (r ApiExtrasBookmarksBulkDestroyRequest) BookmarkRequest(bookmarkRequest []BookmarkRequest) ApiExtrasBookmarksBulkDestroyRequest {
	r.bookmarkRequest = &bookmarkRequest
	return r
}

func (r ApiExtrasBookmarksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasBookmarksBulkDestroyExecute(r)
}

/*
ExtrasBookmarksBulkDestroy Method for ExtrasBookmarksBulkDestroy

Delete a list of bookmark objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasBookmarksBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasBookmarksBulkDestroy(ctx context.Context) ApiExtrasBookmarksBulkDestroyRequest {
	return ApiExtrasBookmarksBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasBookmarksBulkDestroyExecute(r ApiExtrasBookmarksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasBookmarksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/bookmarks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bookmarkRequest == nil {
		return nil, reportError("bookmarkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bookmarkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasBookmarksBulkPartialUpdateRequest struct {
	ctx             context.Context
	ApiService      *ExtrasAPIService
	bookmarkRequest *[]BookmarkRequest
}

func (r ApiExtrasBookmarksBulkPartialUpdateRequest) BookmarkRequest(bookmarkRequest []BookmarkRequest) ApiExtrasBookmarksBulkPartialUpdateRequest {
	r.bookmarkRequest = &bookmarkRequest
	return r
}

func (r ApiExtrasBookmarksBulkPartialUpdateRequest) Execute() ([]Bookmark, *http.Response, error) {
	return r.ApiService.ExtrasBookmarksBulkPartialUpdateExecute(r)
}

/*
ExtrasBookmarksBulkPartialUpdate Method for ExtrasBookmarksBulkPartialUpdate

Patch a list of bookmark objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasBookmarksBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasBookmarksBulkPartialUpdate(ctx context.Context) ApiExtrasBookmarksBulkPartialUpdateRequest {
	return ApiExtrasBookmarksBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Bookmark
func (a *ExtrasAPIService) ExtrasBookmarksBulkPartialUpdateExecute(r ApiExtrasBookmarksBulkPartialUpdateRequest) ([]Bookmark, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Bookmark
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasBookmarksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/bookmarks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bookmarkRequest == nil {
		return localVarReturnValue, nil, reportError("bookmarkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bookmarkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasBookmarksBulkUpdateRequest struct {
	ctx             context.Context
	ApiService      *ExtrasAPIService
	bookmarkRequest *[]BookmarkRequest
}

func (r ApiExtrasBookmarksBulkUpdateRequest) BookmarkRequest(bookmarkRequest []BookmarkRequest) ApiExtrasBookmarksBulkUpdateRequest {
	r.bookmarkRequest = &bookmarkRequest
	return r
}

func (r ApiExtrasBookmarksBulkUpdateRequest) Execute() ([]Bookmark, *http.Response, error) {
	return r.ApiService.ExtrasBookmarksBulkUpdateExecute(r)
}

/*
ExtrasBookmarksBulkUpdate Method for ExtrasBookmarksBulkUpdate

Put a list of bookmark objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasBookmarksBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasBookmarksBulkUpdate(ctx context.Context) ApiExtrasBookmarksBulkUpdateRequest {
	return ApiExtrasBookmarksBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Bookmark
func (a *ExtrasAPIService) ExtrasBookmarksBulkUpdateExecute(r ApiExtrasBookmarksBulkUpdateRequest) ([]Bookmark, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Bookmark
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasBookmarksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/bookmarks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bookmarkRequest == nil {
		return localVarReturnValue, nil, reportError("bookmarkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bookmarkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasBookmarksCreateRequest struct {
	ctx             context.Context
	ApiService      *ExtrasAPIService
	bookmarkRequest *BookmarkRequest
}

func (r ApiExtrasBookmarksCreateRequest) BookmarkRequest(bookmarkRequest BookmarkRequest) ApiExtrasBookmarksCreateRequest {
	r.bookmarkRequest = &bookmarkRequest
	return r
}

func (r ApiExtrasBookmarksCreateRequest) Execute() (*Bookmark, *http.Response, error) {
	return r.ApiService.ExtrasBookmarksCreateExecute(r)
}

/*
ExtrasBookmarksCreate Method for ExtrasBookmarksCreate

Post a list of bookmark objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasBookmarksCreateRequest
*/
func (a *ExtrasAPIService) ExtrasBookmarksCreate(ctx context.Context) ApiExtrasBookmarksCreateRequest {
	return ApiExtrasBookmarksCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Bookmark
func (a *ExtrasAPIService) ExtrasBookmarksCreateExecute(r ApiExtrasBookmarksCreateRequest) (*Bookmark, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Bookmark
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasBookmarksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/bookmarks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bookmarkRequest == nil {
		return localVarReturnValue, nil, reportError("bookmarkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bookmarkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasBookmarksDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasBookmarksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasBookmarksDestroyExecute(r)
}

/*
ExtrasBookmarksDestroy Method for ExtrasBookmarksDestroy

Delete a bookmark object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bookmark.
	@return ApiExtrasBookmarksDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasBookmarksDestroy(ctx context.Context, id int32) ApiExtrasBookmarksDestroyRequest {
	return ApiExtrasBookmarksDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasBookmarksDestroyExecute(r ApiExtrasBookmarksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasBookmarksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/bookmarks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasBookmarksListRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	created           *time.Time
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	limit             *int32
	objectId          *[]int32
	objectIdEmpty     *bool
	objectIdGt        *[]int32
	objectIdGte       *[]int32
	objectIdLt        *[]int32
	objectIdLte       *[]int32
	objectIdN         *[]int32
	objectType        *string
	objectTypeN       *string
	objectTypeId      *[]int32
	objectTypeIdEmpty *[]int32
	objectTypeIdGt    *[]int32
	objectTypeIdGte   *[]int32
	objectTypeIdLt    *[]int32
	objectTypeIdLte   *[]int32
	objectTypeIdN     *[]int32
	offset            *int32
	ordering          *string
	user              *[]string
	userN             *[]string
	userId            *[]int32
	userIdN           *[]int32
}

func (r ApiExtrasBookmarksListRequest) Created(created time.Time) ApiExtrasBookmarksListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasBookmarksListRequest) Id(id []int32) ApiExtrasBookmarksListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasBookmarksListRequest) IdEmpty(idEmpty bool) ApiExtrasBookmarksListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasBookmarksListRequest) IdGt(idGt []int32) ApiExtrasBookmarksListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasBookmarksListRequest) IdGte(idGte []int32) ApiExtrasBookmarksListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasBookmarksListRequest) IdLt(idLt []int32) ApiExtrasBookmarksListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasBookmarksListRequest) IdLte(idLte []int32) ApiExtrasBookmarksListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasBookmarksListRequest) IdN(idN []int32) ApiExtrasBookmarksListRequest {
	r.idN = &idN
	return r
}

// Number of results to return per page.
func (r ApiExtrasBookmarksListRequest) Limit(limit int32) ApiExtrasBookmarksListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectId(objectId []int32) ApiExtrasBookmarksListRequest {
	r.objectId = &objectId
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectIdEmpty(objectIdEmpty bool) ApiExtrasBookmarksListRequest {
	r.objectIdEmpty = &objectIdEmpty
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectIdGt(objectIdGt []int32) ApiExtrasBookmarksListRequest {
	r.objectIdGt = &objectIdGt
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectIdGte(objectIdGte []int32) ApiExtrasBookmarksListRequest {
	r.objectIdGte = &objectIdGte
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectIdLt(objectIdLt []int32) ApiExtrasBookmarksListRequest {
	r.objectIdLt = &objectIdLt
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectIdLte(objectIdLte []int32) ApiExtrasBookmarksListRequest {
	r.objectIdLte = &objectIdLte
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectIdN(objectIdN []int32) ApiExtrasBookmarksListRequest {
	r.objectIdN = &objectIdN
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectType(objectType string) ApiExtrasBookmarksListRequest {
	r.objectType = &objectType
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectTypeN(objectTypeN string) ApiExtrasBookmarksListRequest {
	r.objectTypeN = &objectTypeN
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectTypeId(objectTypeId []int32) ApiExtrasBookmarksListRequest {
	r.objectTypeId = &objectTypeId
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectTypeIdEmpty(objectTypeIdEmpty []int32) ApiExtrasBookmarksListRequest {
	r.objectTypeIdEmpty = &objectTypeIdEmpty
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectTypeIdGt(objectTypeIdGt []int32) ApiExtrasBookmarksListRequest {
	r.objectTypeIdGt = &objectTypeIdGt
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectTypeIdGte(objectTypeIdGte []int32) ApiExtrasBookmarksListRequest {
	r.objectTypeIdGte = &objectTypeIdGte
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectTypeIdLt(objectTypeIdLt []int32) ApiExtrasBookmarksListRequest {
	r.objectTypeIdLt = &objectTypeIdLt
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectTypeIdLte(objectTypeIdLte []int32) ApiExtrasBookmarksListRequest {
	r.objectTypeIdLte = &objectTypeIdLte
	return r
}

func (r ApiExtrasBookmarksListRequest) ObjectTypeIdN(objectTypeIdN []int32) ApiExtrasBookmarksListRequest {
	r.objectTypeIdN = &objectTypeIdN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasBookmarksListRequest) Offset(offset int32) ApiExtrasBookmarksListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasBookmarksListRequest) Ordering(ordering string) ApiExtrasBookmarksListRequest {
	r.ordering = &ordering
	return r
}

// User (name)
func (r ApiExtrasBookmarksListRequest) User(user []string) ApiExtrasBookmarksListRequest {
	r.user = &user
	return r
}

// User (name)
func (r ApiExtrasBookmarksListRequest) UserN(userN []string) ApiExtrasBookmarksListRequest {
	r.userN = &userN
	return r
}

// User (ID)
func (r ApiExtrasBookmarksListRequest) UserId(userId []int32) ApiExtrasBookmarksListRequest {
	r.userId = &userId
	return r
}

// User (ID)
func (r ApiExtrasBookmarksListRequest) UserIdN(userIdN []int32) ApiExtrasBookmarksListRequest {
	r.userIdN = &userIdN
	return r
}

func (r ApiExtrasBookmarksListRequest) Execute() (*PaginatedBookmarkList, *http.Response, error) {
	return r.ApiService.ExtrasBookmarksListExecute(r)
}

/*
ExtrasBookmarksList Method for ExtrasBookmarksList

Get a list of bookmark objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasBookmarksListRequest
*/
func (a *ExtrasAPIService) ExtrasBookmarksList(ctx context.Context) ApiExtrasBookmarksListRequest {
	return ApiExtrasBookmarksListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedBookmarkList
func (a *ExtrasAPIService) ExtrasBookmarksListExecute(r ApiExtrasBookmarksListRequest) (*PaginatedBookmarkList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedBookmarkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasBookmarksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/bookmarks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created", r.created, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.objectId != nil {
		t := *r.objectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", t, "multi")
		}
	}
	if r.objectIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__empty", r.objectIdEmpty, "")
	}
	if r.objectIdGt != nil {
		t := *r.objectIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gt", t, "multi")
		}
	}
	if r.objectIdGte != nil {
		t := *r.objectIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gte", t, "multi")
		}
	}
	if r.objectIdLt != nil {
		t := *r.objectIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lt", t, "multi")
		}
	}
	if r.objectIdLte != nil {
		t := *r.objectIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lte", t, "multi")
		}
	}
	if r.objectIdN != nil {
		t := *r.objectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__n", t, "multi")
		}
	}
	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType, "")
	}
	if r.objectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__n", r.objectTypeN, "")
	}
	if r.objectTypeId != nil {
		t := *r.objectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", t, "multi")
		}
	}
	if r.objectTypeIdEmpty != nil {
		t := *r.objectTypeIdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__empty", t, "multi")
		}
	}
	if r.objectTypeIdGt != nil {
		t := *r.objectTypeIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__gt", t, "multi")
		}
	}
	if r.objectTypeIdGte != nil {
		t := *r.objectTypeIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__gte", t, "multi")
		}
	}
	if r.objectTypeIdLt != nil {
		t := *r.objectTypeIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__lt", t, "multi")
		}
	}
	if r.objectTypeIdLte != nil {
		t := *r.objectTypeIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__lte", t, "multi")
		}
	}
	if r.objectTypeIdN != nil {
		t := *r.objectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "multi")
		}
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", t, "multi")
		}
	}
	if r.userId != nil {
		t := *r.userId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", t, "multi")
		}
	}
	if r.userIdN != nil {
		t := *r.userIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasBookmarksPartialUpdateRequest struct {
	ctx                    context.Context
	ApiService             *ExtrasAPIService
	id                     int32
	patchedBookmarkRequest *PatchedBookmarkRequest
}

func (r ApiExtrasBookmarksPartialUpdateRequest) PatchedBookmarkRequest(patchedBookmarkRequest PatchedBookmarkRequest) ApiExtrasBookmarksPartialUpdateRequest {
	r.patchedBookmarkRequest = &patchedBookmarkRequest
	return r
}

func (r ApiExtrasBookmarksPartialUpdateRequest) Execute() (*Bookmark, *http.Response, error) {
	return r.ApiService.ExtrasBookmarksPartialUpdateExecute(r)
}

/*
ExtrasBookmarksPartialUpdate Method for ExtrasBookmarksPartialUpdate

Patch a bookmark object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bookmark.
	@return ApiExtrasBookmarksPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasBookmarksPartialUpdate(ctx context.Context, id int32) ApiExtrasBookmarksPartialUpdateRequest {
	return ApiExtrasBookmarksPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Bookmark
func (a *ExtrasAPIService) ExtrasBookmarksPartialUpdateExecute(r ApiExtrasBookmarksPartialUpdateRequest) (*Bookmark, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Bookmark
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasBookmarksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/bookmarks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedBookmarkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasBookmarksRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasBookmarksRetrieveRequest) Execute() (*Bookmark, *http.Response, error) {
	return r.ApiService.ExtrasBookmarksRetrieveExecute(r)
}

/*
ExtrasBookmarksRetrieve Method for ExtrasBookmarksRetrieve

Get a bookmark object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bookmark.
	@return ApiExtrasBookmarksRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasBookmarksRetrieve(ctx context.Context, id int32) ApiExtrasBookmarksRetrieveRequest {
	return ApiExtrasBookmarksRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Bookmark
func (a *ExtrasAPIService) ExtrasBookmarksRetrieveExecute(r ApiExtrasBookmarksRetrieveRequest) (*Bookmark, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Bookmark
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasBookmarksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/bookmarks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasBookmarksUpdateRequest struct {
	ctx             context.Context
	ApiService      *ExtrasAPIService
	id              int32
	bookmarkRequest *BookmarkRequest
}

func (r ApiExtrasBookmarksUpdateRequest) BookmarkRequest(bookmarkRequest BookmarkRequest) ApiExtrasBookmarksUpdateRequest {
	r.bookmarkRequest = &bookmarkRequest
	return r
}

func (r ApiExtrasBookmarksUpdateRequest) Execute() (*Bookmark, *http.Response, error) {
	return r.ApiService.ExtrasBookmarksUpdateExecute(r)
}

/*
ExtrasBookmarksUpdate Method for ExtrasBookmarksUpdate

Put a bookmark object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this bookmark.
	@return ApiExtrasBookmarksUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasBookmarksUpdate(ctx context.Context, id int32) ApiExtrasBookmarksUpdateRequest {
	return ApiExtrasBookmarksUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Bookmark
func (a *ExtrasAPIService) ExtrasBookmarksUpdateExecute(r ApiExtrasBookmarksUpdateRequest) (*Bookmark, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Bookmark
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasBookmarksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/bookmarks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bookmarkRequest == nil {
		return localVarReturnValue, nil, reportError("bookmarkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bookmarkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsBulkDestroyRequest struct {
	ctx                  context.Context
	ApiService           *ExtrasAPIService
	configContextRequest *[]ConfigContextRequest
}

func (r ApiExtrasConfigContextsBulkDestroyRequest) ConfigContextRequest(configContextRequest []ConfigContextRequest) ApiExtrasConfigContextsBulkDestroyRequest {
	r.configContextRequest = &configContextRequest
	return r
}

func (r ApiExtrasConfigContextsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextsBulkDestroyExecute(r)
}

/*
ExtrasConfigContextsBulkDestroy Method for ExtrasConfigContextsBulkDestroy

Delete a list of config context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigContextsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsBulkDestroy(ctx context.Context) ApiExtrasConfigContextsBulkDestroyRequest {
	return ApiExtrasConfigContextsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasConfigContextsBulkDestroyExecute(r ApiExtrasConfigContextsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextRequest == nil {
		return nil, reportError("configContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsBulkPartialUpdateRequest struct {
	ctx                  context.Context
	ApiService           *ExtrasAPIService
	configContextRequest *[]ConfigContextRequest
}

func (r ApiExtrasConfigContextsBulkPartialUpdateRequest) ConfigContextRequest(configContextRequest []ConfigContextRequest) ApiExtrasConfigContextsBulkPartialUpdateRequest {
	r.configContextRequest = &configContextRequest
	return r
}

func (r ApiExtrasConfigContextsBulkPartialUpdateRequest) Execute() ([]ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsBulkPartialUpdateExecute(r)
}

/*
ExtrasConfigContextsBulkPartialUpdate Method for ExtrasConfigContextsBulkPartialUpdate

Patch a list of config context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigContextsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsBulkPartialUpdate(ctx context.Context) ApiExtrasConfigContextsBulkPartialUpdateRequest {
	return ApiExtrasConfigContextsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsBulkPartialUpdateExecute(r ApiExtrasConfigContextsBulkPartialUpdateRequest) ([]ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextRequest == nil {
		return localVarReturnValue, nil, reportError("configContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsBulkUpdateRequest struct {
	ctx                  context.Context
	ApiService           *ExtrasAPIService
	configContextRequest *[]ConfigContextRequest
}

func (r ApiExtrasConfigContextsBulkUpdateRequest) ConfigContextRequest(configContextRequest []ConfigContextRequest) ApiExtrasConfigContextsBulkUpdateRequest {
	r.configContextRequest = &configContextRequest
	return r
}

func (r ApiExtrasConfigContextsBulkUpdateRequest) Execute() ([]ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsBulkUpdateExecute(r)
}

/*
ExtrasConfigContextsBulkUpdate Method for ExtrasConfigContextsBulkUpdate

Put a list of config context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigContextsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsBulkUpdate(ctx context.Context) ApiExtrasConfigContextsBulkUpdateRequest {
	return ApiExtrasConfigContextsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsBulkUpdateExecute(r ApiExtrasConfigContextsBulkUpdateRequest) ([]ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextRequest == nil {
		return localVarReturnValue, nil, reportError("configContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsCreateRequest struct {
	ctx                  context.Context
	ApiService           *ExtrasAPIService
	configContextRequest *ConfigContextRequest
}

func (r ApiExtrasConfigContextsCreateRequest) ConfigContextRequest(configContextRequest ConfigContextRequest) ApiExtrasConfigContextsCreateRequest {
	r.configContextRequest = &configContextRequest
	return r
}

func (r ApiExtrasConfigContextsCreateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsCreateExecute(r)
}

/*
ExtrasConfigContextsCreate Method for ExtrasConfigContextsCreate

Post a list of config context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigContextsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsCreate(ctx context.Context) ApiExtrasConfigContextsCreateRequest {
	return ApiExtrasConfigContextsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsCreateExecute(r ApiExtrasConfigContextsCreateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextRequest == nil {
		return localVarReturnValue, nil, reportError("configContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasConfigContextsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextsDestroyExecute(r)
}

/*
ExtrasConfigContextsDestroy Method for ExtrasConfigContextsDestroy

Delete a config context object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config context.
	@return ApiExtrasConfigContextsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsDestroy(ctx context.Context, id int32) ApiExtrasConfigContextsDestroyRequest {
	return ApiExtrasConfigContextsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasConfigContextsDestroyExecute(r ApiExtrasConfigContextsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsListRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	autoSyncEnabled   *bool
	clusterGroup      *[]string
	clusterGroupN     *[]string
	clusterGroupId    *[]int32
	clusterGroupIdN   *[]int32
	clusterId         *[]int32
	clusterIdN        *[]int32
	clusterType       *[]string
	clusterTypeN      *[]string
	clusterTypeId     *[]int32
	clusterTypeIdN    *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	dataFileId        *[]*int32
	dataFileIdN       *[]*int32
	dataSourceId      *[]*int32
	dataSourceIdN     *[]*int32
	dataSynced        *[]time.Time
	dataSyncedEmpty   *bool
	dataSyncedGt      *[]time.Time
	dataSyncedGte     *[]time.Time
	dataSyncedLt      *[]time.Time
	dataSyncedLte     *[]time.Time
	dataSyncedN       *[]time.Time
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	deviceRole        *[]string
	deviceRoleN       *[]string
	deviceRoleId      *[]int32
	deviceRoleIdN     *[]int32
	deviceTypeId      *[]int32
	deviceTypeIdN     *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	isActive          *bool
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	location          *[]string
	locationN         *[]string
	locationId        *[]int32
	locationIdN       *[]int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	platform          *[]string
	platformN         *[]string
	platformId        *[]int32
	platformIdN       *[]int32
	q                 *string
	region            *[]string
	regionN           *[]string
	regionId          *[]int32
	regionIdN         *[]int32
	role              *[]string
	roleN             *[]string
	roleId            *[]int32
	roleIdN           *[]int32
	site              *[]string
	siteN             *[]string
	siteGroup         *[]string
	siteGroupN        *[]string
	siteGroupId       *[]int32
	siteGroupIdN      *[]int32
	siteId            *[]int32
	siteIdN           *[]int32
	tag               *[]string
	tagN              *[]string
	tagId             *[]int32
	tagIdN            *[]int32
	tenant            *[]string
	tenantN           *[]string
	tenantGroup       *[]string
	tenantGroupN      *[]string
	tenantGroupId     *[]int32
	tenantGroupIdN    *[]int32
	tenantId          *[]int32
	tenantIdN         *[]int32
	updatedByRequest  *string
	weight            *[]int32
	weightEmpty       *bool
	weightGt          *[]int32
	weightGte         *[]int32
	weightLt          *[]int32
	weightLte         *[]int32
	weightN           *[]int32
}

func (r ApiExtrasConfigContextsListRequest) AutoSyncEnabled(autoSyncEnabled bool) ApiExtrasConfigContextsListRequest {
	r.autoSyncEnabled = &autoSyncEnabled
	return r
}

// Cluster group (slug)
func (r ApiExtrasConfigContextsListRequest) ClusterGroup(clusterGroup []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroup = &clusterGroup
	return r
}

// Cluster group (slug)
func (r ApiExtrasConfigContextsListRequest) ClusterGroupN(clusterGroupN []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroupN = &clusterGroupN
	return r
}

// Cluster group
func (r ApiExtrasConfigContextsListRequest) ClusterGroupId(clusterGroupId []int32) ApiExtrasConfigContextsListRequest {
	r.clusterGroupId = &clusterGroupId
	return r
}

// Cluster group
func (r ApiExtrasConfigContextsListRequest) ClusterGroupIdN(clusterGroupIdN []int32) ApiExtrasConfigContextsListRequest {
	r.clusterGroupIdN = &clusterGroupIdN
	return r
}

// Cluster
func (r ApiExtrasConfigContextsListRequest) ClusterId(clusterId []int32) ApiExtrasConfigContextsListRequest {
	r.clusterId = &clusterId
	return r
}

// Cluster
func (r ApiExtrasConfigContextsListRequest) ClusterIdN(clusterIdN []int32) ApiExtrasConfigContextsListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

// Cluster type (slug)
func (r ApiExtrasConfigContextsListRequest) ClusterType(clusterType []string) ApiExtrasConfigContextsListRequest {
	r.clusterType = &clusterType
	return r
}

// Cluster type (slug)
func (r ApiExtrasConfigContextsListRequest) ClusterTypeN(clusterTypeN []string) ApiExtrasConfigContextsListRequest {
	r.clusterTypeN = &clusterTypeN
	return r
}

// Cluster type
func (r ApiExtrasConfigContextsListRequest) ClusterTypeId(clusterTypeId []int32) ApiExtrasConfigContextsListRequest {
	r.clusterTypeId = &clusterTypeId
	return r
}

// Cluster type
func (r ApiExtrasConfigContextsListRequest) ClusterTypeIdN(clusterTypeIdN []int32) ApiExtrasConfigContextsListRequest {
	r.clusterTypeIdN = &clusterTypeIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Created(created []time.Time) ApiExtrasConfigContextsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasConfigContextsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasConfigContextsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasConfigContextsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasConfigContextsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasConfigContextsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasConfigContextsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasConfigContextsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasConfigContextsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasConfigContextsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasConfigContextsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasConfigContextsListRequest) CreatedN(createdN []time.Time) ApiExtrasConfigContextsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) CreatedByRequest(createdByRequest string) ApiExtrasConfigContextsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

// Data file (ID)
func (r ApiExtrasConfigContextsListRequest) DataFileId(dataFileId []*int32) ApiExtrasConfigContextsListRequest {
	r.dataFileId = &dataFileId
	return r
}

// Data file (ID)
func (r ApiExtrasConfigContextsListRequest) DataFileIdN(dataFileIdN []*int32) ApiExtrasConfigContextsListRequest {
	r.dataFileIdN = &dataFileIdN
	return r
}

// Data source (ID)
func (r ApiExtrasConfigContextsListRequest) DataSourceId(dataSourceId []*int32) ApiExtrasConfigContextsListRequest {
	r.dataSourceId = &dataSourceId
	return r
}

// Data source (ID)
func (r ApiExtrasConfigContextsListRequest) DataSourceIdN(dataSourceIdN []*int32) ApiExtrasConfigContextsListRequest {
	r.dataSourceIdN = &dataSourceIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) DataSynced(dataSynced []time.Time) ApiExtrasConfigContextsListRequest {
	r.dataSynced = &dataSynced
	return r
}

func (r ApiExtrasConfigContextsListRequest) DataSyncedEmpty(dataSyncedEmpty bool) ApiExtrasConfigContextsListRequest {
	r.dataSyncedEmpty = &dataSyncedEmpty
	return r
}

func (r ApiExtrasConfigContextsListRequest) DataSyncedGt(dataSyncedGt []time.Time) ApiExtrasConfigContextsListRequest {
	r.dataSyncedGt = &dataSyncedGt
	return r
}

func (r ApiExtrasConfigContextsListRequest) DataSyncedGte(dataSyncedGte []time.Time) ApiExtrasConfigContextsListRequest {
	r.dataSyncedGte = &dataSyncedGte
	return r
}

func (r ApiExtrasConfigContextsListRequest) DataSyncedLt(dataSyncedLt []time.Time) ApiExtrasConfigContextsListRequest {
	r.dataSyncedLt = &dataSyncedLt
	return r
}

func (r ApiExtrasConfigContextsListRequest) DataSyncedLte(dataSyncedLte []time.Time) ApiExtrasConfigContextsListRequest {
	r.dataSyncedLte = &dataSyncedLte
	return r
}

func (r ApiExtrasConfigContextsListRequest) DataSyncedN(dataSyncedN []time.Time) ApiExtrasConfigContextsListRequest {
	r.dataSyncedN = &dataSyncedN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Description(description []string) ApiExtrasConfigContextsListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiExtrasConfigContextsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionIc(descriptionIc []string) ApiExtrasConfigContextsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionIe(descriptionIe []string) ApiExtrasConfigContextsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionIew(descriptionIew []string) ApiExtrasConfigContextsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasConfigContextsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionN(descriptionN []string) ApiExtrasConfigContextsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionNic(descriptionNic []string) ApiExtrasConfigContextsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionNie(descriptionNie []string) ApiExtrasConfigContextsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasConfigContextsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasConfigContextsListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasConfigContextsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Role (slug)
func (r ApiExtrasConfigContextsListRequest) DeviceRole(deviceRole []string) ApiExtrasConfigContextsListRequest {
	r.deviceRole = &deviceRole
	return r
}

// Role (slug)
func (r ApiExtrasConfigContextsListRequest) DeviceRoleN(deviceRoleN []string) ApiExtrasConfigContextsListRequest {
	r.deviceRoleN = &deviceRoleN
	return r
}

// Role
func (r ApiExtrasConfigContextsListRequest) DeviceRoleId(deviceRoleId []int32) ApiExtrasConfigContextsListRequest {
	r.deviceRoleId = &deviceRoleId
	return r
}

// Role
func (r ApiExtrasConfigContextsListRequest) DeviceRoleIdN(deviceRoleIdN []int32) ApiExtrasConfigContextsListRequest {
	r.deviceRoleIdN = &deviceRoleIdN
	return r
}

// Device type
func (r ApiExtrasConfigContextsListRequest) DeviceTypeId(deviceTypeId []int32) ApiExtrasConfigContextsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type
func (r ApiExtrasConfigContextsListRequest) DeviceTypeIdN(deviceTypeIdN []int32) ApiExtrasConfigContextsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Id(id []int32) ApiExtrasConfigContextsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdEmpty(idEmpty bool) ApiExtrasConfigContextsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdGt(idGt []int32) ApiExtrasConfigContextsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdGte(idGte []int32) ApiExtrasConfigContextsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdLt(idLt []int32) ApiExtrasConfigContextsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdLte(idLte []int32) ApiExtrasConfigContextsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdN(idN []int32) ApiExtrasConfigContextsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasConfigContextsListRequest) IsActive(isActive bool) ApiExtrasConfigContextsListRequest {
	r.isActive = &isActive
	return r
}

func (r ApiExtrasConfigContextsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasConfigContextsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasConfigContextsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasConfigContextsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasConfigContextsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasConfigContextsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasConfigContextsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasConfigContextsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasConfigContextsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasConfigContextsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasConfigContextsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasConfigContextsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasConfigContextsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasConfigContextsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasConfigContextsListRequest) Limit(limit int32) ApiExtrasConfigContextsListRequest {
	r.limit = &limit
	return r
}

// Location (slug)
func (r ApiExtrasConfigContextsListRequest) Location(location []string) ApiExtrasConfigContextsListRequest {
	r.location = &location
	return r
}

// Location (slug)
func (r ApiExtrasConfigContextsListRequest) LocationN(locationN []string) ApiExtrasConfigContextsListRequest {
	r.locationN = &locationN
	return r
}

// Location
func (r ApiExtrasConfigContextsListRequest) LocationId(locationId []int32) ApiExtrasConfigContextsListRequest {
	r.locationId = &locationId
	return r
}

// Location
func (r ApiExtrasConfigContextsListRequest) LocationIdN(locationIdN []int32) ApiExtrasConfigContextsListRequest {
	r.locationIdN = &locationIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasConfigContextsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasConfigContextsListRequest) Name(name []string) ApiExtrasConfigContextsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameEmpty(nameEmpty bool) ApiExtrasConfigContextsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIc(nameIc []string) ApiExtrasConfigContextsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIe(nameIe []string) ApiExtrasConfigContextsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIew(nameIew []string) ApiExtrasConfigContextsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIsw(nameIsw []string) ApiExtrasConfigContextsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameN(nameN []string) ApiExtrasConfigContextsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNic(nameNic []string) ApiExtrasConfigContextsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNie(nameNie []string) ApiExtrasConfigContextsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNiew(nameNiew []string) ApiExtrasConfigContextsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNisw(nameNisw []string) ApiExtrasConfigContextsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasConfigContextsListRequest) Offset(offset int32) ApiExtrasConfigContextsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasConfigContextsListRequest) Ordering(ordering string) ApiExtrasConfigContextsListRequest {
	r.ordering = &ordering
	return r
}

// Platform (slug)
func (r ApiExtrasConfigContextsListRequest) Platform(platform []string) ApiExtrasConfigContextsListRequest {
	r.platform = &platform
	return r
}

// Platform (slug)
func (r ApiExtrasConfigContextsListRequest) PlatformN(platformN []string) ApiExtrasConfigContextsListRequest {
	r.platformN = &platformN
	return r
}

// Platform
func (r ApiExtrasConfigContextsListRequest) PlatformId(platformId []int32) ApiExtrasConfigContextsListRequest {
	r.platformId = &platformId
	return r
}

// Platform
func (r ApiExtrasConfigContextsListRequest) PlatformIdN(platformIdN []int32) ApiExtrasConfigContextsListRequest {
	r.platformIdN = &platformIdN
	return r
}

// Search
func (r ApiExtrasConfigContextsListRequest) Q(q string) ApiExtrasConfigContextsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiExtrasConfigContextsListRequest) Region(region []string) ApiExtrasConfigContextsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiExtrasConfigContextsListRequest) RegionN(regionN []string) ApiExtrasConfigContextsListRequest {
	r.regionN = &regionN
	return r
}

// Region
func (r ApiExtrasConfigContextsListRequest) RegionId(regionId []int32) ApiExtrasConfigContextsListRequest {
	r.regionId = &regionId
	return r
}

// Region
func (r ApiExtrasConfigContextsListRequest) RegionIdN(regionIdN []int32) ApiExtrasConfigContextsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiExtrasConfigContextsListRequest) Role(role []string) ApiExtrasConfigContextsListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiExtrasConfigContextsListRequest) RoleN(roleN []string) ApiExtrasConfigContextsListRequest {
	r.roleN = &roleN
	return r
}

// Role
func (r ApiExtrasConfigContextsListRequest) RoleId(roleId []int32) ApiExtrasConfigContextsListRequest {
	r.roleId = &roleId
	return r
}

// Role
func (r ApiExtrasConfigContextsListRequest) RoleIdN(roleIdN []int32) ApiExtrasConfigContextsListRequest {
	r.roleIdN = &roleIdN
	return r
}

// Site (slug)
func (r ApiExtrasConfigContextsListRequest) Site(site []string) ApiExtrasConfigContextsListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiExtrasConfigContextsListRequest) SiteN(siteN []string) ApiExtrasConfigContextsListRequest {
	r.siteN = &siteN
	return r
}

// Site group (slug)
func (r ApiExtrasConfigContextsListRequest) SiteGroup(siteGroup []string) ApiExtrasConfigContextsListRequest {
	r.siteGroup = &siteGroup
	return r
}

// Site group (slug)
func (r ApiExtrasConfigContextsListRequest) SiteGroupN(siteGroupN []string) ApiExtrasConfigContextsListRequest {
	r.siteGroupN = &siteGroupN
	return r
}

// Site group
func (r ApiExtrasConfigContextsListRequest) SiteGroupId(siteGroupId []int32) ApiExtrasConfigContextsListRequest {
	r.siteGroupId = &siteGroupId
	return r
}

// Site group
func (r ApiExtrasConfigContextsListRequest) SiteGroupIdN(siteGroupIdN []int32) ApiExtrasConfigContextsListRequest {
	r.siteGroupIdN = &siteGroupIdN
	return r
}

// Site
func (r ApiExtrasConfigContextsListRequest) SiteId(siteId []int32) ApiExtrasConfigContextsListRequest {
	r.siteId = &siteId
	return r
}

// Site
func (r ApiExtrasConfigContextsListRequest) SiteIdN(siteIdN []int32) ApiExtrasConfigContextsListRequest {
	r.siteIdN = &siteIdN
	return r
}

// Tag (slug)
func (r ApiExtrasConfigContextsListRequest) Tag(tag []string) ApiExtrasConfigContextsListRequest {
	r.tag = &tag
	return r
}

// Tag (slug)
func (r ApiExtrasConfigContextsListRequest) TagN(tagN []string) ApiExtrasConfigContextsListRequest {
	r.tagN = &tagN
	return r
}

// Tag
func (r ApiExtrasConfigContextsListRequest) TagId(tagId []int32) ApiExtrasConfigContextsListRequest {
	r.tagId = &tagId
	return r
}

// Tag
func (r ApiExtrasConfigContextsListRequest) TagIdN(tagIdN []int32) ApiExtrasConfigContextsListRequest {
	r.tagIdN = &tagIdN
	return r
}

// Tenant (slug)
func (r ApiExtrasConfigContextsListRequest) Tenant(tenant []string) ApiExtrasConfigContextsListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiExtrasConfigContextsListRequest) TenantN(tenantN []string) ApiExtrasConfigContextsListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant group (slug)
func (r ApiExtrasConfigContextsListRequest) TenantGroup(tenantGroup []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant group (slug)
func (r ApiExtrasConfigContextsListRequest) TenantGroupN(tenantGroupN []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant group
func (r ApiExtrasConfigContextsListRequest) TenantGroupId(tenantGroupId []int32) ApiExtrasConfigContextsListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant group
func (r ApiExtrasConfigContextsListRequest) TenantGroupIdN(tenantGroupIdN []int32) ApiExtrasConfigContextsListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant
func (r ApiExtrasConfigContextsListRequest) TenantId(tenantId []int32) ApiExtrasConfigContextsListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant
func (r ApiExtrasConfigContextsListRequest) TenantIdN(tenantIdN []int32) ApiExtrasConfigContextsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasConfigContextsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasConfigContextsListRequest) Weight(weight []int32) ApiExtrasConfigContextsListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasConfigContextsListRequest) WeightEmpty(weightEmpty bool) ApiExtrasConfigContextsListRequest {
	r.weightEmpty = &weightEmpty
	return r
}

func (r ApiExtrasConfigContextsListRequest) WeightGt(weightGt []int32) ApiExtrasConfigContextsListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasConfigContextsListRequest) WeightGte(weightGte []int32) ApiExtrasConfigContextsListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasConfigContextsListRequest) WeightLt(weightLt []int32) ApiExtrasConfigContextsListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasConfigContextsListRequest) WeightLte(weightLte []int32) ApiExtrasConfigContextsListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasConfigContextsListRequest) WeightN(weightN []int32) ApiExtrasConfigContextsListRequest {
	r.weightN = &weightN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Execute() (*PaginatedConfigContextList, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsListExecute(r)
}

/*
ExtrasConfigContextsList Method for ExtrasConfigContextsList

Get a list of config context objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigContextsListRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsList(ctx context.Context) ApiExtrasConfigContextsListRequest {
	return ApiExtrasConfigContextsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedConfigContextList
func (a *ExtrasAPIService) ExtrasConfigContextsListExecute(r ApiExtrasConfigContextsListRequest) (*PaginatedConfigContextList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedConfigContextList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.autoSyncEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto_sync_enabled", r.autoSyncEnabled, "")
	}
	if r.clusterGroup != nil {
		t := *r.clusterGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group", t, "multi")
		}
	}
	if r.clusterGroupN != nil {
		t := *r.clusterGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group__n", t, "multi")
		}
	}
	if r.clusterGroupId != nil {
		t := *r.clusterGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id", t, "multi")
		}
	}
	if r.clusterGroupIdN != nil {
		t := *r.clusterGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_group_id__n", t, "multi")
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id", t, "multi")
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_id__n", t, "multi")
		}
	}
	if r.clusterType != nil {
		t := *r.clusterType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type", t, "multi")
		}
	}
	if r.clusterTypeN != nil {
		t := *r.clusterTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type__n", t, "multi")
		}
	}
	if r.clusterTypeId != nil {
		t := *r.clusterTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id", t, "multi")
		}
	}
	if r.clusterTypeIdN != nil {
		t := *r.clusterTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cluster_type_id__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.dataFileId != nil {
		t := *r.dataFileId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id", t, "multi")
		}
	}
	if r.dataFileIdN != nil {
		t := *r.dataFileIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id__n", t, "multi")
		}
	}
	if r.dataSourceId != nil {
		t := *r.dataSourceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id", t, "multi")
		}
	}
	if r.dataSourceIdN != nil {
		t := *r.dataSourceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id__n", t, "multi")
		}
	}
	if r.dataSynced != nil {
		t := *r.dataSynced
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced", t, "multi")
		}
	}
	if r.dataSyncedEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__empty", r.dataSyncedEmpty, "")
	}
	if r.dataSyncedGt != nil {
		t := *r.dataSyncedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gt", t, "multi")
		}
	}
	if r.dataSyncedGte != nil {
		t := *r.dataSyncedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gte", t, "multi")
		}
	}
	if r.dataSyncedLt != nil {
		t := *r.dataSyncedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lt", t, "multi")
		}
	}
	if r.dataSyncedLte != nil {
		t := *r.dataSyncedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lte", t, "multi")
		}
	}
	if r.dataSyncedN != nil {
		t := *r.dataSyncedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__n", t, "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.deviceRole != nil {
		t := *r.deviceRole
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role", t, "multi")
		}
	}
	if r.deviceRoleN != nil {
		t := *r.deviceRoleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role__n", t, "multi")
		}
	}
	if r.deviceRoleId != nil {
		t := *r.deviceRoleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id", t, "multi")
		}
	}
	if r.deviceRoleIdN != nil {
		t := *r.deviceRoleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_role_id__n", t, "multi")
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id", t, "multi")
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "device_type_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.isActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_active", r.isActive, "")
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		t := *r.location
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location", t, "multi")
		}
	}
	if r.locationN != nil {
		t := *r.locationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location__n", t, "multi")
		}
	}
	if r.locationId != nil {
		t := *r.locationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id", t, "multi")
		}
	}
	if r.locationIdN != nil {
		t := *r.locationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "location_id__n", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.platform != nil {
		t := *r.platform
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform", t, "multi")
		}
	}
	if r.platformN != nil {
		t := *r.platformN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform__n", t, "multi")
		}
	}
	if r.platformId != nil {
		t := *r.platformId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id", t, "multi")
		}
	}
	if r.platformIdN != nil {
		t := *r.platformIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "platform_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region", t, "multi")
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region__n", t, "multi")
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id", t, "multi")
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "region_id__n", t, "multi")
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role", t, "multi")
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role__n", t, "multi")
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id", t, "multi")
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "role_id__n", t, "multi")
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site", t, "multi")
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site__n", t, "multi")
		}
	}
	if r.siteGroup != nil {
		t := *r.siteGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group", t, "multi")
		}
	}
	if r.siteGroupN != nil {
		t := *r.siteGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group__n", t, "multi")
		}
	}
	if r.siteGroupId != nil {
		t := *r.siteGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id", t, "multi")
		}
	}
	if r.siteGroupIdN != nil {
		t := *r.siteGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_group_id__n", t, "multi")
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id", t, "multi")
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "site_id__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tagId != nil {
		t := *r.tagId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag_id", t, "multi")
		}
	}
	if r.tagIdN != nil {
		t := *r.tagIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag_id__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "multi")
		}
	}
	if r.weightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight__empty", r.weightEmpty, "")
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *ExtrasAPIService
	id                          int32
	patchedConfigContextRequest *PatchedConfigContextRequest
}

func (r ApiExtrasConfigContextsPartialUpdateRequest) PatchedConfigContextRequest(patchedConfigContextRequest PatchedConfigContextRequest) ApiExtrasConfigContextsPartialUpdateRequest {
	r.patchedConfigContextRequest = &patchedConfigContextRequest
	return r
}

func (r ApiExtrasConfigContextsPartialUpdateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsPartialUpdateExecute(r)
}

/*
ExtrasConfigContextsPartialUpdate Method for ExtrasConfigContextsPartialUpdate

Patch a config context object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config context.
	@return ApiExtrasConfigContextsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsPartialUpdate(ctx context.Context, id int32) ApiExtrasConfigContextsPartialUpdateRequest {
	return ApiExtrasConfigContextsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsPartialUpdateExecute(r ApiExtrasConfigContextsPartialUpdateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedConfigContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasConfigContextsRetrieveRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsRetrieveExecute(r)
}

/*
ExtrasConfigContextsRetrieve Method for ExtrasConfigContextsRetrieve

Get a config context object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config context.
	@return ApiExtrasConfigContextsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsRetrieve(ctx context.Context, id int32) ApiExtrasConfigContextsRetrieveRequest {
	return ApiExtrasConfigContextsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsRetrieveExecute(r ApiExtrasConfigContextsRetrieveRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsSyncCreateRequest struct {
	ctx                  context.Context
	ApiService           *ExtrasAPIService
	id                   int32
	configContextRequest *ConfigContextRequest
}

func (r ApiExtrasConfigContextsSyncCreateRequest) ConfigContextRequest(configContextRequest ConfigContextRequest) ApiExtrasConfigContextsSyncCreateRequest {
	r.configContextRequest = &configContextRequest
	return r
}

func (r ApiExtrasConfigContextsSyncCreateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsSyncCreateExecute(r)
}

/*
ExtrasConfigContextsSyncCreate Method for ExtrasConfigContextsSyncCreate

Provide a /sync API endpoint to synchronize an object's data from its associated DataFile (if any).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config context.
	@return ApiExtrasConfigContextsSyncCreateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsSyncCreate(ctx context.Context, id int32) ApiExtrasConfigContextsSyncCreateRequest {
	return ApiExtrasConfigContextsSyncCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsSyncCreateExecute(r ApiExtrasConfigContextsSyncCreateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsSyncCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/{id}/sync/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextRequest == nil {
		return localVarReturnValue, nil, reportError("configContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsUpdateRequest struct {
	ctx                  context.Context
	ApiService           *ExtrasAPIService
	id                   int32
	configContextRequest *ConfigContextRequest
}

func (r ApiExtrasConfigContextsUpdateRequest) ConfigContextRequest(configContextRequest ConfigContextRequest) ApiExtrasConfigContextsUpdateRequest {
	r.configContextRequest = &configContextRequest
	return r
}

func (r ApiExtrasConfigContextsUpdateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsUpdateExecute(r)
}

/*
ExtrasConfigContextsUpdate Method for ExtrasConfigContextsUpdate

Put a config context object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config context.
	@return ApiExtrasConfigContextsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigContextsUpdate(ctx context.Context, id int32) ApiExtrasConfigContextsUpdateRequest {
	return ApiExtrasConfigContextsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigContext
func (a *ExtrasAPIService) ExtrasConfigContextsUpdateExecute(r ApiExtrasConfigContextsUpdateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigContextsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextRequest == nil {
		return localVarReturnValue, nil, reportError("configContextRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesBulkDestroyRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	configTemplateRequest *[]ConfigTemplateRequest
}

func (r ApiExtrasConfigTemplatesBulkDestroyRequest) ConfigTemplateRequest(configTemplateRequest []ConfigTemplateRequest) ApiExtrasConfigTemplatesBulkDestroyRequest {
	r.configTemplateRequest = &configTemplateRequest
	return r
}

func (r ApiExtrasConfigTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesBulkDestroyExecute(r)
}

/*
ExtrasConfigTemplatesBulkDestroy Method for ExtrasConfigTemplatesBulkDestroy

Delete a list of config template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigTemplatesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesBulkDestroy(ctx context.Context) ApiExtrasConfigTemplatesBulkDestroyRequest {
	return ApiExtrasConfigTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasConfigTemplatesBulkDestroyExecute(r ApiExtrasConfigTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configTemplateRequest == nil {
		return nil, reportError("configTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesBulkPartialUpdateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	configTemplateRequest *[]ConfigTemplateRequest
}

func (r ApiExtrasConfigTemplatesBulkPartialUpdateRequest) ConfigTemplateRequest(configTemplateRequest []ConfigTemplateRequest) ApiExtrasConfigTemplatesBulkPartialUpdateRequest {
	r.configTemplateRequest = &configTemplateRequest
	return r
}

func (r ApiExtrasConfigTemplatesBulkPartialUpdateRequest) Execute() ([]ConfigTemplate, *http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesBulkPartialUpdateExecute(r)
}

/*
ExtrasConfigTemplatesBulkPartialUpdate Method for ExtrasConfigTemplatesBulkPartialUpdate

Patch a list of config template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigTemplatesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesBulkPartialUpdate(ctx context.Context) ApiExtrasConfigTemplatesBulkPartialUpdateRequest {
	return ApiExtrasConfigTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConfigTemplate
func (a *ExtrasAPIService) ExtrasConfigTemplatesBulkPartialUpdateExecute(r ApiExtrasConfigTemplatesBulkPartialUpdateRequest) ([]ConfigTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConfigTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("configTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesBulkUpdateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	configTemplateRequest *[]ConfigTemplateRequest
}

func (r ApiExtrasConfigTemplatesBulkUpdateRequest) ConfigTemplateRequest(configTemplateRequest []ConfigTemplateRequest) ApiExtrasConfigTemplatesBulkUpdateRequest {
	r.configTemplateRequest = &configTemplateRequest
	return r
}

func (r ApiExtrasConfigTemplatesBulkUpdateRequest) Execute() ([]ConfigTemplate, *http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesBulkUpdateExecute(r)
}

/*
ExtrasConfigTemplatesBulkUpdate Method for ExtrasConfigTemplatesBulkUpdate

Put a list of config template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigTemplatesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesBulkUpdate(ctx context.Context) ApiExtrasConfigTemplatesBulkUpdateRequest {
	return ApiExtrasConfigTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConfigTemplate
func (a *ExtrasAPIService) ExtrasConfigTemplatesBulkUpdateExecute(r ApiExtrasConfigTemplatesBulkUpdateRequest) ([]ConfigTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConfigTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("configTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesCreateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	configTemplateRequest *ConfigTemplateRequest
}

func (r ApiExtrasConfigTemplatesCreateRequest) ConfigTemplateRequest(configTemplateRequest ConfigTemplateRequest) ApiExtrasConfigTemplatesCreateRequest {
	r.configTemplateRequest = &configTemplateRequest
	return r
}

func (r ApiExtrasConfigTemplatesCreateRequest) Execute() (*ConfigTemplate, *http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesCreateExecute(r)
}

/*
ExtrasConfigTemplatesCreate Method for ExtrasConfigTemplatesCreate

Post a list of config template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigTemplatesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesCreate(ctx context.Context) ApiExtrasConfigTemplatesCreateRequest {
	return ApiExtrasConfigTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConfigTemplate
func (a *ExtrasAPIService) ExtrasConfigTemplatesCreateExecute(r ApiExtrasConfigTemplatesCreateRequest) (*ConfigTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("configTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasConfigTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesDestroyExecute(r)
}

/*
ExtrasConfigTemplatesDestroy Method for ExtrasConfigTemplatesDestroy

Delete a config template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config template.
	@return ApiExtrasConfigTemplatesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesDestroy(ctx context.Context, id int32) ApiExtrasConfigTemplatesDestroyRequest {
	return ApiExtrasConfigTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasConfigTemplatesDestroyExecute(r ApiExtrasConfigTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesListRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	autoSyncEnabled   *bool
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	dataFileId        *[]*int32
	dataFileIdN       *[]*int32
	dataSourceId      *[]*int32
	dataSourceIdN     *[]*int32
	dataSynced        *[]time.Time
	dataSyncedEmpty   *bool
	dataSyncedGt      *[]time.Time
	dataSyncedGte     *[]time.Time
	dataSyncedLt      *[]time.Time
	dataSyncedLte     *[]time.Time
	dataSyncedN       *[]time.Time
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	tag               *[]string
	tagN              *[]string
	updatedByRequest  *string
}

func (r ApiExtrasConfigTemplatesListRequest) AutoSyncEnabled(autoSyncEnabled bool) ApiExtrasConfigTemplatesListRequest {
	r.autoSyncEnabled = &autoSyncEnabled
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) Created(created []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) CreatedN(createdN []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiExtrasConfigTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

// Data file (ID)
func (r ApiExtrasConfigTemplatesListRequest) DataFileId(dataFileId []*int32) ApiExtrasConfigTemplatesListRequest {
	r.dataFileId = &dataFileId
	return r
}

// Data file (ID)
func (r ApiExtrasConfigTemplatesListRequest) DataFileIdN(dataFileIdN []*int32) ApiExtrasConfigTemplatesListRequest {
	r.dataFileIdN = &dataFileIdN
	return r
}

// Data source (ID)
func (r ApiExtrasConfigTemplatesListRequest) DataSourceId(dataSourceId []*int32) ApiExtrasConfigTemplatesListRequest {
	r.dataSourceId = &dataSourceId
	return r
}

// Data source (ID)
func (r ApiExtrasConfigTemplatesListRequest) DataSourceIdN(dataSourceIdN []*int32) ApiExtrasConfigTemplatesListRequest {
	r.dataSourceIdN = &dataSourceIdN
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DataSynced(dataSynced []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.dataSynced = &dataSynced
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DataSyncedEmpty(dataSyncedEmpty bool) ApiExtrasConfigTemplatesListRequest {
	r.dataSyncedEmpty = &dataSyncedEmpty
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DataSyncedGt(dataSyncedGt []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.dataSyncedGt = &dataSyncedGt
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DataSyncedGte(dataSyncedGte []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.dataSyncedGte = &dataSyncedGte
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DataSyncedLt(dataSyncedLt []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.dataSyncedLt = &dataSyncedLt
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DataSyncedLte(dataSyncedLte []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.dataSyncedLte = &dataSyncedLte
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DataSyncedN(dataSyncedN []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.dataSyncedN = &dataSyncedN
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) Description(description []string) ApiExtrasConfigTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiExtrasConfigTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiExtrasConfigTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiExtrasConfigTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiExtrasConfigTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasConfigTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionN(descriptionN []string) ApiExtrasConfigTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiExtrasConfigTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiExtrasConfigTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasConfigTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasConfigTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) Id(id []int32) ApiExtrasConfigTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) IdEmpty(idEmpty bool) ApiExtrasConfigTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) IdGt(idGt []int32) ApiExtrasConfigTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) IdGte(idGte []int32) ApiExtrasConfigTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) IdLt(idLt []int32) ApiExtrasConfigTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) IdLte(idLte []int32) ApiExtrasConfigTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) IdN(idN []int32) ApiExtrasConfigTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasConfigTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasConfigTemplatesListRequest) Limit(limit int32) ApiExtrasConfigTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasConfigTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) Name(name []string) ApiExtrasConfigTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameEmpty(nameEmpty bool) ApiExtrasConfigTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameIc(nameIc []string) ApiExtrasConfigTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameIe(nameIe []string) ApiExtrasConfigTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameIew(nameIew []string) ApiExtrasConfigTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameIsw(nameIsw []string) ApiExtrasConfigTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameN(nameN []string) ApiExtrasConfigTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameNic(nameNic []string) ApiExtrasConfigTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameNie(nameNie []string) ApiExtrasConfigTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameNiew(nameNiew []string) ApiExtrasConfigTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) NameNisw(nameNisw []string) ApiExtrasConfigTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasConfigTemplatesListRequest) Offset(offset int32) ApiExtrasConfigTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasConfigTemplatesListRequest) Ordering(ordering string) ApiExtrasConfigTemplatesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasConfigTemplatesListRequest) Q(q string) ApiExtrasConfigTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) Tag(tag []string) ApiExtrasConfigTemplatesListRequest {
	r.tag = &tag
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) TagN(tagN []string) ApiExtrasConfigTemplatesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasConfigTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasConfigTemplatesListRequest) Execute() (*PaginatedConfigTemplateList, *http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesListExecute(r)
}

/*
ExtrasConfigTemplatesList Method for ExtrasConfigTemplatesList

Get a list of config template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasConfigTemplatesListRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesList(ctx context.Context) ApiExtrasConfigTemplatesListRequest {
	return ApiExtrasConfigTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedConfigTemplateList
func (a *ExtrasAPIService) ExtrasConfigTemplatesListExecute(r ApiExtrasConfigTemplatesListRequest) (*PaginatedConfigTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedConfigTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.autoSyncEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto_sync_enabled", r.autoSyncEnabled, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.dataFileId != nil {
		t := *r.dataFileId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id", t, "multi")
		}
	}
	if r.dataFileIdN != nil {
		t := *r.dataFileIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id__n", t, "multi")
		}
	}
	if r.dataSourceId != nil {
		t := *r.dataSourceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id", t, "multi")
		}
	}
	if r.dataSourceIdN != nil {
		t := *r.dataSourceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id__n", t, "multi")
		}
	}
	if r.dataSynced != nil {
		t := *r.dataSynced
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced", t, "multi")
		}
	}
	if r.dataSyncedEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__empty", r.dataSyncedEmpty, "")
	}
	if r.dataSyncedGt != nil {
		t := *r.dataSyncedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gt", t, "multi")
		}
	}
	if r.dataSyncedGte != nil {
		t := *r.dataSyncedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gte", t, "multi")
		}
	}
	if r.dataSyncedLt != nil {
		t := *r.dataSyncedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lt", t, "multi")
		}
	}
	if r.dataSyncedLte != nil {
		t := *r.dataSyncedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lte", t, "multi")
		}
	}
	if r.dataSyncedN != nil {
		t := *r.dataSyncedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__n", t, "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesPartialUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *ExtrasAPIService
	id                           int32
	patchedConfigTemplateRequest *PatchedConfigTemplateRequest
}

func (r ApiExtrasConfigTemplatesPartialUpdateRequest) PatchedConfigTemplateRequest(patchedConfigTemplateRequest PatchedConfigTemplateRequest) ApiExtrasConfigTemplatesPartialUpdateRequest {
	r.patchedConfigTemplateRequest = &patchedConfigTemplateRequest
	return r
}

func (r ApiExtrasConfigTemplatesPartialUpdateRequest) Execute() (*ConfigTemplate, *http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesPartialUpdateExecute(r)
}

/*
ExtrasConfigTemplatesPartialUpdate Method for ExtrasConfigTemplatesPartialUpdate

Patch a config template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config template.
	@return ApiExtrasConfigTemplatesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesPartialUpdate(ctx context.Context, id int32) ApiExtrasConfigTemplatesPartialUpdateRequest {
	return ApiExtrasConfigTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigTemplate
func (a *ExtrasAPIService) ExtrasConfigTemplatesPartialUpdateExecute(r ApiExtrasConfigTemplatesPartialUpdateRequest) (*ConfigTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedConfigTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesRenderCreateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	id                    int32
	configTemplateRequest *ConfigTemplateRequest
	format                *DcimDevicesRenderConfigCreateFormatParameter
}

func (r ApiExtrasConfigTemplatesRenderCreateRequest) ConfigTemplateRequest(configTemplateRequest ConfigTemplateRequest) ApiExtrasConfigTemplatesRenderCreateRequest {
	r.configTemplateRequest = &configTemplateRequest
	return r
}

func (r ApiExtrasConfigTemplatesRenderCreateRequest) Format(format DcimDevicesRenderConfigCreateFormatParameter) ApiExtrasConfigTemplatesRenderCreateRequest {
	r.format = &format
	return r
}

func (r ApiExtrasConfigTemplatesRenderCreateRequest) Execute() (*ConfigTemplate, *http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesRenderCreateExecute(r)
}

/*
ExtrasConfigTemplatesRenderCreate Method for ExtrasConfigTemplatesRenderCreate

Render a ConfigTemplate using the context data provided (if any). If the client requests "text/plain" data,
return the raw rendered content, rather than serialized JSON.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config template.
	@return ApiExtrasConfigTemplatesRenderCreateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesRenderCreate(ctx context.Context, id int32) ApiExtrasConfigTemplatesRenderCreateRequest {
	return ApiExtrasConfigTemplatesRenderCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigTemplate
func (a *ExtrasAPIService) ExtrasConfigTemplatesRenderCreateExecute(r ApiExtrasConfigTemplatesRenderCreateRequest) (*ConfigTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesRenderCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/{id}/render/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("configTemplateRequest is required and must be specified")
	}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasConfigTemplatesRetrieveRequest) Execute() (*ConfigTemplate, *http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesRetrieveExecute(r)
}

/*
ExtrasConfigTemplatesRetrieve Method for ExtrasConfigTemplatesRetrieve

Get a config template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config template.
	@return ApiExtrasConfigTemplatesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesRetrieve(ctx context.Context, id int32) ApiExtrasConfigTemplatesRetrieveRequest {
	return ApiExtrasConfigTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigTemplate
func (a *ExtrasAPIService) ExtrasConfigTemplatesRetrieveExecute(r ApiExtrasConfigTemplatesRetrieveRequest) (*ConfigTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesSyncCreateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	id                    int32
	configTemplateRequest *ConfigTemplateRequest
}

func (r ApiExtrasConfigTemplatesSyncCreateRequest) ConfigTemplateRequest(configTemplateRequest ConfigTemplateRequest) ApiExtrasConfigTemplatesSyncCreateRequest {
	r.configTemplateRequest = &configTemplateRequest
	return r
}

func (r ApiExtrasConfigTemplatesSyncCreateRequest) Execute() (*ConfigTemplate, *http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesSyncCreateExecute(r)
}

/*
ExtrasConfigTemplatesSyncCreate Method for ExtrasConfigTemplatesSyncCreate

Provide a /sync API endpoint to synchronize an object's data from its associated DataFile (if any).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config template.
	@return ApiExtrasConfigTemplatesSyncCreateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesSyncCreate(ctx context.Context, id int32) ApiExtrasConfigTemplatesSyncCreateRequest {
	return ApiExtrasConfigTemplatesSyncCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigTemplate
func (a *ExtrasAPIService) ExtrasConfigTemplatesSyncCreateExecute(r ApiExtrasConfigTemplatesSyncCreateRequest) (*ConfigTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesSyncCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/{id}/sync/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("configTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigTemplatesUpdateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	id                    int32
	configTemplateRequest *ConfigTemplateRequest
}

func (r ApiExtrasConfigTemplatesUpdateRequest) ConfigTemplateRequest(configTemplateRequest ConfigTemplateRequest) ApiExtrasConfigTemplatesUpdateRequest {
	r.configTemplateRequest = &configTemplateRequest
	return r
}

func (r ApiExtrasConfigTemplatesUpdateRequest) Execute() (*ConfigTemplate, *http.Response, error) {
	return r.ApiService.ExtrasConfigTemplatesUpdateExecute(r)
}

/*
ExtrasConfigTemplatesUpdate Method for ExtrasConfigTemplatesUpdate

Put a config template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this config template.
	@return ApiExtrasConfigTemplatesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasConfigTemplatesUpdate(ctx context.Context, id int32) ApiExtrasConfigTemplatesUpdateRequest {
	return ApiExtrasConfigTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigTemplate
func (a *ExtrasAPIService) ExtrasConfigTemplatesUpdateExecute(r ApiExtrasConfigTemplatesUpdateRequest) (*ConfigTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasConfigTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/config-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("configTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsBulkDestroyRequest struct {
	ctx                         context.Context
	ApiService                  *ExtrasAPIService
	customFieldChoiceSetRequest *[]CustomFieldChoiceSetRequest
}

func (r ApiExtrasCustomFieldChoiceSetsBulkDestroyRequest) CustomFieldChoiceSetRequest(customFieldChoiceSetRequest []CustomFieldChoiceSetRequest) ApiExtrasCustomFieldChoiceSetsBulkDestroyRequest {
	r.customFieldChoiceSetRequest = &customFieldChoiceSetRequest
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsBulkDestroyExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsBulkDestroy Method for ExtrasCustomFieldChoiceSetsBulkDestroy

Delete a list of custom field choice set objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldChoiceSetsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsBulkDestroy(ctx context.Context) ApiExtrasCustomFieldChoiceSetsBulkDestroyRequest {
	return ApiExtrasCustomFieldChoiceSetsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsBulkDestroyExecute(r ApiExtrasCustomFieldChoiceSetsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customFieldChoiceSetRequest == nil {
		return nil, reportError("customFieldChoiceSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customFieldChoiceSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsBulkPartialUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *ExtrasAPIService
	customFieldChoiceSetRequest *[]CustomFieldChoiceSetRequest
}

func (r ApiExtrasCustomFieldChoiceSetsBulkPartialUpdateRequest) CustomFieldChoiceSetRequest(customFieldChoiceSetRequest []CustomFieldChoiceSetRequest) ApiExtrasCustomFieldChoiceSetsBulkPartialUpdateRequest {
	r.customFieldChoiceSetRequest = &customFieldChoiceSetRequest
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsBulkPartialUpdateRequest) Execute() ([]CustomFieldChoiceSet, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsBulkPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsBulkPartialUpdate Method for ExtrasCustomFieldChoiceSetsBulkPartialUpdate

Patch a list of custom field choice set objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldChoiceSetsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsBulkPartialUpdate(ctx context.Context) ApiExtrasCustomFieldChoiceSetsBulkPartialUpdateRequest {
	return ApiExtrasCustomFieldChoiceSetsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CustomFieldChoiceSet
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsBulkPartialUpdateExecute(r ApiExtrasCustomFieldChoiceSetsBulkPartialUpdateRequest) ([]CustomFieldChoiceSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CustomFieldChoiceSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customFieldChoiceSetRequest == nil {
		return localVarReturnValue, nil, reportError("customFieldChoiceSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customFieldChoiceSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsBulkUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *ExtrasAPIService
	customFieldChoiceSetRequest *[]CustomFieldChoiceSetRequest
}

func (r ApiExtrasCustomFieldChoiceSetsBulkUpdateRequest) CustomFieldChoiceSetRequest(customFieldChoiceSetRequest []CustomFieldChoiceSetRequest) ApiExtrasCustomFieldChoiceSetsBulkUpdateRequest {
	r.customFieldChoiceSetRequest = &customFieldChoiceSetRequest
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsBulkUpdateRequest) Execute() ([]CustomFieldChoiceSet, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsBulkUpdateExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsBulkUpdate Method for ExtrasCustomFieldChoiceSetsBulkUpdate

Put a list of custom field choice set objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldChoiceSetsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsBulkUpdate(ctx context.Context) ApiExtrasCustomFieldChoiceSetsBulkUpdateRequest {
	return ApiExtrasCustomFieldChoiceSetsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CustomFieldChoiceSet
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsBulkUpdateExecute(r ApiExtrasCustomFieldChoiceSetsBulkUpdateRequest) ([]CustomFieldChoiceSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CustomFieldChoiceSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customFieldChoiceSetRequest == nil {
		return localVarReturnValue, nil, reportError("customFieldChoiceSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customFieldChoiceSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsChoicesRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasCustomFieldChoiceSetsChoicesRetrieveRequest) Execute() (*CustomFieldChoiceSet, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsChoicesRetrieveExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsChoicesRetrieve Method for ExtrasCustomFieldChoiceSetsChoicesRetrieve

Provides an endpoint to iterate through each choice in a set.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom field choice set.
	@return ApiExtrasCustomFieldChoiceSetsChoicesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsChoicesRetrieve(ctx context.Context, id int32) ApiExtrasCustomFieldChoiceSetsChoicesRetrieveRequest {
	return ApiExtrasCustomFieldChoiceSetsChoicesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomFieldChoiceSet
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsChoicesRetrieveExecute(r ApiExtrasCustomFieldChoiceSetsChoicesRetrieveRequest) (*CustomFieldChoiceSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomFieldChoiceSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsChoicesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/{id}/choices/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsCreateRequest struct {
	ctx                                 context.Context
	ApiService                          *ExtrasAPIService
	writableCustomFieldChoiceSetRequest *WritableCustomFieldChoiceSetRequest
}

func (r ApiExtrasCustomFieldChoiceSetsCreateRequest) WritableCustomFieldChoiceSetRequest(writableCustomFieldChoiceSetRequest WritableCustomFieldChoiceSetRequest) ApiExtrasCustomFieldChoiceSetsCreateRequest {
	r.writableCustomFieldChoiceSetRequest = &writableCustomFieldChoiceSetRequest
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsCreateRequest) Execute() (*CustomFieldChoiceSet, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsCreateExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsCreate Method for ExtrasCustomFieldChoiceSetsCreate

Post a list of custom field choice set objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldChoiceSetsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsCreate(ctx context.Context) ApiExtrasCustomFieldChoiceSetsCreateRequest {
	return ApiExtrasCustomFieldChoiceSetsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CustomFieldChoiceSet
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsCreateExecute(r ApiExtrasCustomFieldChoiceSetsCreateRequest) (*CustomFieldChoiceSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomFieldChoiceSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomFieldChoiceSetRequest == nil {
		return localVarReturnValue, nil, reportError("writableCustomFieldChoiceSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomFieldChoiceSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasCustomFieldChoiceSetsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsDestroyExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsDestroy Method for ExtrasCustomFieldChoiceSetsDestroy

Delete a custom field choice set object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom field choice set.
	@return ApiExtrasCustomFieldChoiceSetsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsDestroy(ctx context.Context, id int32) ApiExtrasCustomFieldChoiceSetsDestroyRequest {
	return ApiExtrasCustomFieldChoiceSetsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsDestroyExecute(r ApiExtrasCustomFieldChoiceSetsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsListRequest struct {
	ctx                 context.Context
	ApiService          *ExtrasAPIService
	baseChoices         *ExtrasCustomFieldChoiceSetsListBaseChoicesParameter
	baseChoicesN        *ExtrasCustomFieldChoiceSetsListBaseChoicesParameter
	choice              *[]string
	created             *[]time.Time
	createdEmpty        *[]time.Time
	createdGt           *[]time.Time
	createdGte          *[]time.Time
	createdLt           *[]time.Time
	createdLte          *[]time.Time
	createdN            *[]time.Time
	createdByRequest    *string
	description         *[]string
	descriptionEmpty    *bool
	descriptionIc       *[]string
	descriptionIe       *[]string
	descriptionIew      *[]string
	descriptionIsw      *[]string
	descriptionN        *[]string
	descriptionNic      *[]string
	descriptionNie      *[]string
	descriptionNiew     *[]string
	descriptionNisw     *[]string
	id                  *[]int32
	idEmpty             *bool
	idGt                *[]int32
	idGte               *[]int32
	idLt                *[]int32
	idLte               *[]int32
	idN                 *[]int32
	lastUpdated         *[]time.Time
	lastUpdatedEmpty    *[]time.Time
	lastUpdatedGt       *[]time.Time
	lastUpdatedGte      *[]time.Time
	lastUpdatedLt       *[]time.Time
	lastUpdatedLte      *[]time.Time
	lastUpdatedN        *[]time.Time
	limit               *int32
	modifiedByRequest   *string
	name                *[]string
	nameEmpty           *bool
	nameIc              *[]string
	nameIe              *[]string
	nameIew             *[]string
	nameIsw             *[]string
	nameN               *[]string
	nameNic             *[]string
	nameNie             *[]string
	nameNiew            *[]string
	nameNisw            *[]string
	offset              *int32
	orderAlphabetically *bool
	ordering            *string
	q                   *string
	updatedByRequest    *string
}

// Base set of predefined choices (optional)  * &#x60;IATA&#x60; - IATA (Airport codes) * &#x60;ISO_3166&#x60; - ISO 3166 (Country codes) * &#x60;UN_LOCODE&#x60; - UN/LOCODE (Location codes)
func (r ApiExtrasCustomFieldChoiceSetsListRequest) BaseChoices(baseChoices ExtrasCustomFieldChoiceSetsListBaseChoicesParameter) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.baseChoices = &baseChoices
	return r
}

// Base set of predefined choices (optional)  * &#x60;IATA&#x60; - IATA (Airport codes) * &#x60;ISO_3166&#x60; - ISO 3166 (Country codes) * &#x60;UN_LOCODE&#x60; - UN/LOCODE (Location codes)
func (r ApiExtrasCustomFieldChoiceSetsListRequest) BaseChoicesN(baseChoicesN ExtrasCustomFieldChoiceSetsListBaseChoicesParameter) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.baseChoicesN = &baseChoicesN
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) Choice(choice []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.choice = &choice
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) Created(created []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) CreatedN(createdN []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) CreatedByRequest(createdByRequest string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) Description(description []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionIc(descriptionIc []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionIe(descriptionIe []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionIew(descriptionIew []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionN(descriptionN []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionNic(descriptionNic []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionNie(descriptionNie []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) Id(id []int32) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) IdEmpty(idEmpty bool) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) IdGt(idGt []int32) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) IdGte(idGte []int32) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) IdLt(idLt []int32) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) IdLte(idLte []int32) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) IdN(idN []int32) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomFieldChoiceSetsListRequest) Limit(limit int32) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) Name(name []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameEmpty(nameEmpty bool) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameIc(nameIc []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameIe(nameIe []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameIew(nameIew []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameIsw(nameIsw []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameN(nameN []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameNic(nameNic []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameNie(nameNie []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameNiew(nameNiew []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) NameNisw(nameNisw []string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomFieldChoiceSetsListRequest) Offset(offset int32) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) OrderAlphabetically(orderAlphabetically bool) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.orderAlphabetically = &orderAlphabetically
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasCustomFieldChoiceSetsListRequest) Ordering(ordering string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasCustomFieldChoiceSetsListRequest) Q(q string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasCustomFieldChoiceSetsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsListRequest) Execute() (*PaginatedCustomFieldChoiceSetList, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsListExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsList Method for ExtrasCustomFieldChoiceSetsList

Get a list of custom field choice set objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldChoiceSetsListRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsList(ctx context.Context) ApiExtrasCustomFieldChoiceSetsListRequest {
	return ApiExtrasCustomFieldChoiceSetsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCustomFieldChoiceSetList
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsListExecute(r ApiExtrasCustomFieldChoiceSetsListRequest) (*PaginatedCustomFieldChoiceSetList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCustomFieldChoiceSetList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.baseChoices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_choices", r.baseChoices, "")
	}
	if r.baseChoicesN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "base_choices__n", r.baseChoicesN, "")
	}
	if r.choice != nil {
		t := *r.choice
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "choice", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "choice", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.orderAlphabetically != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_alphabetically", r.orderAlphabetically, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsPartialUpdateRequest struct {
	ctx                                        context.Context
	ApiService                                 *ExtrasAPIService
	id                                         int32
	patchedWritableCustomFieldChoiceSetRequest *PatchedWritableCustomFieldChoiceSetRequest
}

func (r ApiExtrasCustomFieldChoiceSetsPartialUpdateRequest) PatchedWritableCustomFieldChoiceSetRequest(patchedWritableCustomFieldChoiceSetRequest PatchedWritableCustomFieldChoiceSetRequest) ApiExtrasCustomFieldChoiceSetsPartialUpdateRequest {
	r.patchedWritableCustomFieldChoiceSetRequest = &patchedWritableCustomFieldChoiceSetRequest
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsPartialUpdateRequest) Execute() (*CustomFieldChoiceSet, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsPartialUpdate Method for ExtrasCustomFieldChoiceSetsPartialUpdate

Patch a custom field choice set object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom field choice set.
	@return ApiExtrasCustomFieldChoiceSetsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsPartialUpdate(ctx context.Context, id int32) ApiExtrasCustomFieldChoiceSetsPartialUpdateRequest {
	return ApiExtrasCustomFieldChoiceSetsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomFieldChoiceSet
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsPartialUpdateExecute(r ApiExtrasCustomFieldChoiceSetsPartialUpdateRequest) (*CustomFieldChoiceSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomFieldChoiceSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCustomFieldChoiceSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasCustomFieldChoiceSetsRetrieveRequest) Execute() (*CustomFieldChoiceSet, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsRetrieveExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsRetrieve Method for ExtrasCustomFieldChoiceSetsRetrieve

Get a custom field choice set object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom field choice set.
	@return ApiExtrasCustomFieldChoiceSetsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsRetrieve(ctx context.Context, id int32) ApiExtrasCustomFieldChoiceSetsRetrieveRequest {
	return ApiExtrasCustomFieldChoiceSetsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomFieldChoiceSet
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsRetrieveExecute(r ApiExtrasCustomFieldChoiceSetsRetrieveRequest) (*CustomFieldChoiceSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomFieldChoiceSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoiceSetsUpdateRequest struct {
	ctx                                 context.Context
	ApiService                          *ExtrasAPIService
	id                                  int32
	writableCustomFieldChoiceSetRequest *WritableCustomFieldChoiceSetRequest
}

func (r ApiExtrasCustomFieldChoiceSetsUpdateRequest) WritableCustomFieldChoiceSetRequest(writableCustomFieldChoiceSetRequest WritableCustomFieldChoiceSetRequest) ApiExtrasCustomFieldChoiceSetsUpdateRequest {
	r.writableCustomFieldChoiceSetRequest = &writableCustomFieldChoiceSetRequest
	return r
}

func (r ApiExtrasCustomFieldChoiceSetsUpdateRequest) Execute() (*CustomFieldChoiceSet, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoiceSetsUpdateExecute(r)
}

/*
ExtrasCustomFieldChoiceSetsUpdate Method for ExtrasCustomFieldChoiceSetsUpdate

Put a custom field choice set object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom field choice set.
	@return ApiExtrasCustomFieldChoiceSetsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsUpdate(ctx context.Context, id int32) ApiExtrasCustomFieldChoiceSetsUpdateRequest {
	return ApiExtrasCustomFieldChoiceSetsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomFieldChoiceSet
func (a *ExtrasAPIService) ExtrasCustomFieldChoiceSetsUpdateExecute(r ApiExtrasCustomFieldChoiceSetsUpdateRequest) (*CustomFieldChoiceSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomFieldChoiceSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldChoiceSetsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-field-choice-sets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomFieldChoiceSetRequest == nil {
		return localVarReturnValue, nil, reportError("writableCustomFieldChoiceSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomFieldChoiceSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsBulkDestroyRequest struct {
	ctx                context.Context
	ApiService         *ExtrasAPIService
	customFieldRequest *[]CustomFieldRequest
}

func (r ApiExtrasCustomFieldsBulkDestroyRequest) CustomFieldRequest(customFieldRequest []CustomFieldRequest) ApiExtrasCustomFieldsBulkDestroyRequest {
	r.customFieldRequest = &customFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsBulkDestroyExecute(r)
}

/*
ExtrasCustomFieldsBulkDestroy Method for ExtrasCustomFieldsBulkDestroy

Delete a list of custom field objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkDestroy(ctx context.Context) ApiExtrasCustomFieldsBulkDestroyRequest {
	return ApiExtrasCustomFieldsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkDestroyExecute(r ApiExtrasCustomFieldsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customFieldRequest == nil {
		return nil, reportError("customFieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsBulkPartialUpdateRequest struct {
	ctx                context.Context
	ApiService         *ExtrasAPIService
	customFieldRequest *[]CustomFieldRequest
}

func (r ApiExtrasCustomFieldsBulkPartialUpdateRequest) CustomFieldRequest(customFieldRequest []CustomFieldRequest) ApiExtrasCustomFieldsBulkPartialUpdateRequest {
	r.customFieldRequest = &customFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsBulkPartialUpdateRequest) Execute() ([]CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsBulkPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldsBulkPartialUpdate Method for ExtrasCustomFieldsBulkPartialUpdate

Patch a list of custom field objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkPartialUpdate(ctx context.Context) ApiExtrasCustomFieldsBulkPartialUpdateRequest {
	return ApiExtrasCustomFieldsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkPartialUpdateExecute(r ApiExtrasCustomFieldsBulkPartialUpdateRequest) ([]CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customFieldRequest == nil {
		return localVarReturnValue, nil, reportError("customFieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsBulkUpdateRequest struct {
	ctx                context.Context
	ApiService         *ExtrasAPIService
	customFieldRequest *[]CustomFieldRequest
}

func (r ApiExtrasCustomFieldsBulkUpdateRequest) CustomFieldRequest(customFieldRequest []CustomFieldRequest) ApiExtrasCustomFieldsBulkUpdateRequest {
	r.customFieldRequest = &customFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsBulkUpdateRequest) Execute() ([]CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsBulkUpdateExecute(r)
}

/*
ExtrasCustomFieldsBulkUpdate Method for ExtrasCustomFieldsBulkUpdate

Put a list of custom field objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkUpdate(ctx context.Context) ApiExtrasCustomFieldsBulkUpdateRequest {
	return ApiExtrasCustomFieldsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsBulkUpdateExecute(r ApiExtrasCustomFieldsBulkUpdateRequest) ([]CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customFieldRequest == nil {
		return localVarReturnValue, nil, reportError("customFieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsCreateRequest struct {
	ctx                        context.Context
	ApiService                 *ExtrasAPIService
	writableCustomFieldRequest *WritableCustomFieldRequest
}

func (r ApiExtrasCustomFieldsCreateRequest) WritableCustomFieldRequest(writableCustomFieldRequest WritableCustomFieldRequest) ApiExtrasCustomFieldsCreateRequest {
	r.writableCustomFieldRequest = &writableCustomFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsCreateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsCreateExecute(r)
}

/*
ExtrasCustomFieldsCreate Method for ExtrasCustomFieldsCreate

Post a list of custom field objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsCreate(ctx context.Context) ApiExtrasCustomFieldsCreateRequest {
	return ApiExtrasCustomFieldsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsCreateExecute(r ApiExtrasCustomFieldsCreateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomFieldRequest == nil {
		return localVarReturnValue, nil, reportError("writableCustomFieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasCustomFieldsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsDestroyExecute(r)
}

/*
ExtrasCustomFieldsDestroy Method for ExtrasCustomFieldsDestroy

Delete a custom field object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom field.
	@return ApiExtrasCustomFieldsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsDestroy(ctx context.Context, id int32) ApiExtrasCustomFieldsDestroyRequest {
	return ApiExtrasCustomFieldsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomFieldsDestroyExecute(r ApiExtrasCustomFieldsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsListRequest struct {
	ctx                    context.Context
	ApiService             *ExtrasAPIService
	choiceSet              *[]string
	choiceSetN             *[]string
	choiceSetId            *[]*int32
	choiceSetIdN           *[]*int32
	created                *[]time.Time
	createdEmpty           *[]time.Time
	createdGt              *[]time.Time
	createdGte             *[]time.Time
	createdLt              *[]time.Time
	createdLte             *[]time.Time
	createdN               *[]time.Time
	createdByRequest       *string
	description            *[]string
	descriptionEmpty       *bool
	descriptionIc          *[]string
	descriptionIe          *[]string
	descriptionIew         *[]string
	descriptionIsw         *[]string
	descriptionN           *[]string
	descriptionNic         *[]string
	descriptionNie         *[]string
	descriptionNiew        *[]string
	descriptionNisw        *[]string
	filterLogic            *ExtrasCustomFieldsListFilterLogicParameter
	filterLogicN           *ExtrasCustomFieldsListFilterLogicParameter
	groupName              *[]string
	groupNameEmpty         *bool
	groupNameIc            *[]string
	groupNameIe            *[]string
	groupNameIew           *[]string
	groupNameIsw           *[]string
	groupNameN             *[]string
	groupNameNic           *[]string
	groupNameNie           *[]string
	groupNameNiew          *[]string
	groupNameNisw          *[]string
	id                     *[]int32
	idEmpty                *bool
	idGt                   *[]int32
	idGte                  *[]int32
	idLt                   *[]int32
	idLte                  *[]int32
	idN                    *[]int32
	isCloneable            *bool
	label                  *[]string
	labelEmpty             *bool
	labelIc                *[]string
	labelIe                *[]string
	labelIew               *[]string
	labelIsw               *[]string
	labelN                 *[]string
	labelNic               *[]string
	labelNie               *[]string
	labelNiew              *[]string
	labelNisw              *[]string
	lastUpdated            *[]time.Time
	lastUpdatedEmpty       *[]time.Time
	lastUpdatedGt          *[]time.Time
	lastUpdatedGte         *[]time.Time
	lastUpdatedLt          *[]time.Time
	lastUpdatedLte         *[]time.Time
	lastUpdatedN           *[]time.Time
	limit                  *int32
	modifiedByRequest      *string
	name                   *[]string
	nameEmpty              *bool
	nameIc                 *[]string
	nameIe                 *[]string
	nameIew                *[]string
	nameIsw                *[]string
	nameN                  *[]string
	nameNic                *[]string
	nameNie                *[]string
	nameNiew               *[]string
	nameNisw               *[]string
	objectType             *string
	objectTypeIc           *string
	objectTypeIe           *string
	objectTypeIew          *string
	objectTypeIsw          *string
	objectTypeN            *string
	objectTypeNic          *string
	objectTypeNie          *string
	objectTypeNiew         *string
	objectTypeNisw         *string
	objectTypeId           *[]int32
	objectTypeIdN          *[]int32
	offset                 *int32
	ordering               *string
	q                      *string
	relatedObjectType      *string
	relatedObjectTypeN     *string
	relatedObjectTypeId    *[]int32
	relatedObjectTypeIdN   *[]int32
	required               *bool
	searchWeight           *[]int32
	searchWeightEmpty      *bool
	searchWeightGt         *[]int32
	searchWeightGte        *[]int32
	searchWeightLt         *[]int32
	searchWeightLte        *[]int32
	searchWeightN          *[]int32
	type_                  *[]string
	typeN                  *[]string
	uiEditable             *ExtrasCustomFieldsListUiEditableParameter
	uiEditableN            *ExtrasCustomFieldsListUiEditableParameter
	uiVisible              *ExtrasCustomFieldsListUiVisibleParameter
	uiVisibleN             *ExtrasCustomFieldsListUiVisibleParameter
	updatedByRequest       *string
	validationMaximum      *[]int32
	validationMaximumEmpty *bool
	validationMaximumGt    *[]int32
	validationMaximumGte   *[]int32
	validationMaximumLt    *[]int32
	validationMaximumLte   *[]int32
	validationMaximumN     *[]int32
	validationMinimum      *[]int32
	validationMinimumEmpty *bool
	validationMinimumGt    *[]int32
	validationMinimumGte   *[]int32
	validationMinimumLt    *[]int32
	validationMinimumLte   *[]int32
	validationMinimumN     *[]int32
	validationRegex        *[]string
	validationRegexEmpty   *bool
	validationRegexIc      *[]string
	validationRegexIe      *[]string
	validationRegexIew     *[]string
	validationRegexIsw     *[]string
	validationRegexN       *[]string
	validationRegexNic     *[]string
	validationRegexNie     *[]string
	validationRegexNiew    *[]string
	validationRegexNisw    *[]string
	weight                 *[]int32
	weightEmpty            *bool
	weightGt               *[]int32
	weightGte              *[]int32
	weightLt               *[]int32
	weightLte              *[]int32
	weightN                *[]int32
}

func (r ApiExtrasCustomFieldsListRequest) ChoiceSet(choiceSet []string) ApiExtrasCustomFieldsListRequest {
	r.choiceSet = &choiceSet
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ChoiceSetN(choiceSetN []string) ApiExtrasCustomFieldsListRequest {
	r.choiceSetN = &choiceSetN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ChoiceSetId(choiceSetId []*int32) ApiExtrasCustomFieldsListRequest {
	r.choiceSetId = &choiceSetId
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ChoiceSetIdN(choiceSetIdN []*int32) ApiExtrasCustomFieldsListRequest {
	r.choiceSetIdN = &choiceSetIdN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Created(created []time.Time) ApiExtrasCustomFieldsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasCustomFieldsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasCustomFieldsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasCustomFieldsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasCustomFieldsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasCustomFieldsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasCustomFieldsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) CreatedN(createdN []time.Time) ApiExtrasCustomFieldsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) CreatedByRequest(createdByRequest string) ApiExtrasCustomFieldsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Description(description []string) ApiExtrasCustomFieldsListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionIc(descriptionIc []string) ApiExtrasCustomFieldsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionIe(descriptionIe []string) ApiExtrasCustomFieldsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionIew(descriptionIew []string) ApiExtrasCustomFieldsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasCustomFieldsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionN(descriptionN []string) ApiExtrasCustomFieldsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionNic(descriptionNic []string) ApiExtrasCustomFieldsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionNie(descriptionNie []string) ApiExtrasCustomFieldsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasCustomFieldsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasCustomFieldsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

// Loose matches any instance of a given string; exact matches the entire field.  * &#x60;disabled&#x60; - Disabled * &#x60;loose&#x60; - Loose * &#x60;exact&#x60; - Exact
func (r ApiExtrasCustomFieldsListRequest) FilterLogic(filterLogic ExtrasCustomFieldsListFilterLogicParameter) ApiExtrasCustomFieldsListRequest {
	r.filterLogic = &filterLogic
	return r
}

// Loose matches any instance of a given string; exact matches the entire field.  * &#x60;disabled&#x60; - Disabled * &#x60;loose&#x60; - Loose * &#x60;exact&#x60; - Exact
func (r ApiExtrasCustomFieldsListRequest) FilterLogicN(filterLogicN ExtrasCustomFieldsListFilterLogicParameter) ApiExtrasCustomFieldsListRequest {
	r.filterLogicN = &filterLogicN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupName(groupName []string) ApiExtrasCustomFieldsListRequest {
	r.groupName = &groupName
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameEmpty(groupNameEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.groupNameEmpty = &groupNameEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameIc(groupNameIc []string) ApiExtrasCustomFieldsListRequest {
	r.groupNameIc = &groupNameIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameIe(groupNameIe []string) ApiExtrasCustomFieldsListRequest {
	r.groupNameIe = &groupNameIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameIew(groupNameIew []string) ApiExtrasCustomFieldsListRequest {
	r.groupNameIew = &groupNameIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameIsw(groupNameIsw []string) ApiExtrasCustomFieldsListRequest {
	r.groupNameIsw = &groupNameIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameN(groupNameN []string) ApiExtrasCustomFieldsListRequest {
	r.groupNameN = &groupNameN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameNic(groupNameNic []string) ApiExtrasCustomFieldsListRequest {
	r.groupNameNic = &groupNameNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameNie(groupNameNie []string) ApiExtrasCustomFieldsListRequest {
	r.groupNameNie = &groupNameNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameNiew(groupNameNiew []string) ApiExtrasCustomFieldsListRequest {
	r.groupNameNiew = &groupNameNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) GroupNameNisw(groupNameNisw []string) ApiExtrasCustomFieldsListRequest {
	r.groupNameNisw = &groupNameNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Id(id []int32) ApiExtrasCustomFieldsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdEmpty(idEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdGt(idGt []int32) ApiExtrasCustomFieldsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdGte(idGte []int32) ApiExtrasCustomFieldsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdLt(idLt []int32) ApiExtrasCustomFieldsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdLte(idLte []int32) ApiExtrasCustomFieldsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdN(idN []int32) ApiExtrasCustomFieldsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IsCloneable(isCloneable bool) ApiExtrasCustomFieldsListRequest {
	r.isCloneable = &isCloneable
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Label(label []string) ApiExtrasCustomFieldsListRequest {
	r.label = &label
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelEmpty(labelEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.labelEmpty = &labelEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelIc(labelIc []string) ApiExtrasCustomFieldsListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelIe(labelIe []string) ApiExtrasCustomFieldsListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelIew(labelIew []string) ApiExtrasCustomFieldsListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelIsw(labelIsw []string) ApiExtrasCustomFieldsListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelN(labelN []string) ApiExtrasCustomFieldsListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNic(labelNic []string) ApiExtrasCustomFieldsListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNie(labelNie []string) ApiExtrasCustomFieldsListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNiew(labelNiew []string) ApiExtrasCustomFieldsListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LabelNisw(labelNisw []string) ApiExtrasCustomFieldsListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasCustomFieldsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasCustomFieldsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasCustomFieldsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasCustomFieldsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasCustomFieldsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasCustomFieldsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasCustomFieldsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomFieldsListRequest) Limit(limit int32) ApiExtrasCustomFieldsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasCustomFieldsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Name(name []string) ApiExtrasCustomFieldsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameEmpty(nameEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameIc(nameIc []string) ApiExtrasCustomFieldsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameIe(nameIe []string) ApiExtrasCustomFieldsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameIew(nameIew []string) ApiExtrasCustomFieldsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameIsw(nameIsw []string) ApiExtrasCustomFieldsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameN(nameN []string) ApiExtrasCustomFieldsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNic(nameNic []string) ApiExtrasCustomFieldsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNie(nameNie []string) ApiExtrasCustomFieldsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNiew(nameNiew []string) ApiExtrasCustomFieldsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNisw(nameNisw []string) ApiExtrasCustomFieldsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectType(objectType string) ApiExtrasCustomFieldsListRequest {
	r.objectType = &objectType
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeIc(objectTypeIc string) ApiExtrasCustomFieldsListRequest {
	r.objectTypeIc = &objectTypeIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeIe(objectTypeIe string) ApiExtrasCustomFieldsListRequest {
	r.objectTypeIe = &objectTypeIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeIew(objectTypeIew string) ApiExtrasCustomFieldsListRequest {
	r.objectTypeIew = &objectTypeIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeIsw(objectTypeIsw string) ApiExtrasCustomFieldsListRequest {
	r.objectTypeIsw = &objectTypeIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeN(objectTypeN string) ApiExtrasCustomFieldsListRequest {
	r.objectTypeN = &objectTypeN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeNic(objectTypeNic string) ApiExtrasCustomFieldsListRequest {
	r.objectTypeNic = &objectTypeNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeNie(objectTypeNie string) ApiExtrasCustomFieldsListRequest {
	r.objectTypeNie = &objectTypeNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeNiew(objectTypeNiew string) ApiExtrasCustomFieldsListRequest {
	r.objectTypeNiew = &objectTypeNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeNisw(objectTypeNisw string) ApiExtrasCustomFieldsListRequest {
	r.objectTypeNisw = &objectTypeNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeId(objectTypeId []int32) ApiExtrasCustomFieldsListRequest {
	r.objectTypeId = &objectTypeId
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ObjectTypeIdN(objectTypeIdN []int32) ApiExtrasCustomFieldsListRequest {
	r.objectTypeIdN = &objectTypeIdN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomFieldsListRequest) Offset(offset int32) ApiExtrasCustomFieldsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasCustomFieldsListRequest) Ordering(ordering string) ApiExtrasCustomFieldsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasCustomFieldsListRequest) Q(q string) ApiExtrasCustomFieldsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasCustomFieldsListRequest) RelatedObjectType(relatedObjectType string) ApiExtrasCustomFieldsListRequest {
	r.relatedObjectType = &relatedObjectType
	return r
}

func (r ApiExtrasCustomFieldsListRequest) RelatedObjectTypeN(relatedObjectTypeN string) ApiExtrasCustomFieldsListRequest {
	r.relatedObjectTypeN = &relatedObjectTypeN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) RelatedObjectTypeId(relatedObjectTypeId []int32) ApiExtrasCustomFieldsListRequest {
	r.relatedObjectTypeId = &relatedObjectTypeId
	return r
}

func (r ApiExtrasCustomFieldsListRequest) RelatedObjectTypeIdN(relatedObjectTypeIdN []int32) ApiExtrasCustomFieldsListRequest {
	r.relatedObjectTypeIdN = &relatedObjectTypeIdN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Required(required bool) ApiExtrasCustomFieldsListRequest {
	r.required = &required
	return r
}

func (r ApiExtrasCustomFieldsListRequest) SearchWeight(searchWeight []int32) ApiExtrasCustomFieldsListRequest {
	r.searchWeight = &searchWeight
	return r
}

func (r ApiExtrasCustomFieldsListRequest) SearchWeightEmpty(searchWeightEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.searchWeightEmpty = &searchWeightEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) SearchWeightGt(searchWeightGt []int32) ApiExtrasCustomFieldsListRequest {
	r.searchWeightGt = &searchWeightGt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) SearchWeightGte(searchWeightGte []int32) ApiExtrasCustomFieldsListRequest {
	r.searchWeightGte = &searchWeightGte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) SearchWeightLt(searchWeightLt []int32) ApiExtrasCustomFieldsListRequest {
	r.searchWeightLt = &searchWeightLt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) SearchWeightLte(searchWeightLte []int32) ApiExtrasCustomFieldsListRequest {
	r.searchWeightLte = &searchWeightLte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) SearchWeightN(searchWeightN []int32) ApiExtrasCustomFieldsListRequest {
	r.searchWeightN = &searchWeightN
	return r
}

// The type of data this custom field holds
func (r ApiExtrasCustomFieldsListRequest) Type_(type_ []string) ApiExtrasCustomFieldsListRequest {
	r.type_ = &type_
	return r
}

// The type of data this custom field holds
func (r ApiExtrasCustomFieldsListRequest) TypeN(typeN []string) ApiExtrasCustomFieldsListRequest {
	r.typeN = &typeN
	return r
}

// Specifies whether the custom field value can be edited in the UI  * &#x60;yes&#x60; - Yes * &#x60;no&#x60; - No * &#x60;hidden&#x60; - Hidden
func (r ApiExtrasCustomFieldsListRequest) UiEditable(uiEditable ExtrasCustomFieldsListUiEditableParameter) ApiExtrasCustomFieldsListRequest {
	r.uiEditable = &uiEditable
	return r
}

// Specifies whether the custom field value can be edited in the UI  * &#x60;yes&#x60; - Yes * &#x60;no&#x60; - No * &#x60;hidden&#x60; - Hidden
func (r ApiExtrasCustomFieldsListRequest) UiEditableN(uiEditableN ExtrasCustomFieldsListUiEditableParameter) ApiExtrasCustomFieldsListRequest {
	r.uiEditableN = &uiEditableN
	return r
}

// Specifies whether the custom field is displayed in the UI  * &#x60;always&#x60; - Always * &#x60;if-set&#x60; - If set * &#x60;hidden&#x60; - Hidden
func (r ApiExtrasCustomFieldsListRequest) UiVisible(uiVisible ExtrasCustomFieldsListUiVisibleParameter) ApiExtrasCustomFieldsListRequest {
	r.uiVisible = &uiVisible
	return r
}

// Specifies whether the custom field is displayed in the UI  * &#x60;always&#x60; - Always * &#x60;if-set&#x60; - If set * &#x60;hidden&#x60; - Hidden
func (r ApiExtrasCustomFieldsListRequest) UiVisibleN(uiVisibleN ExtrasCustomFieldsListUiVisibleParameter) ApiExtrasCustomFieldsListRequest {
	r.uiVisibleN = &uiVisibleN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasCustomFieldsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMaximum(validationMaximum []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMaximum = &validationMaximum
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMaximumEmpty(validationMaximumEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.validationMaximumEmpty = &validationMaximumEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMaximumGt(validationMaximumGt []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMaximumGt = &validationMaximumGt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMaximumGte(validationMaximumGte []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMaximumGte = &validationMaximumGte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMaximumLt(validationMaximumLt []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMaximumLt = &validationMaximumLt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMaximumLte(validationMaximumLte []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMaximumLte = &validationMaximumLte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMaximumN(validationMaximumN []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMaximumN = &validationMaximumN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMinimum(validationMinimum []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMinimum = &validationMinimum
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMinimumEmpty(validationMinimumEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.validationMinimumEmpty = &validationMinimumEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMinimumGt(validationMinimumGt []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMinimumGt = &validationMinimumGt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMinimumGte(validationMinimumGte []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMinimumGte = &validationMinimumGte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMinimumLt(validationMinimumLt []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMinimumLt = &validationMinimumLt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMinimumLte(validationMinimumLte []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMinimumLte = &validationMinimumLte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationMinimumN(validationMinimumN []int32) ApiExtrasCustomFieldsListRequest {
	r.validationMinimumN = &validationMinimumN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegex(validationRegex []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegex = &validationRegex
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexEmpty(validationRegexEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.validationRegexEmpty = &validationRegexEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexIc(validationRegexIc []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegexIc = &validationRegexIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexIe(validationRegexIe []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegexIe = &validationRegexIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexIew(validationRegexIew []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegexIew = &validationRegexIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexIsw(validationRegexIsw []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegexIsw = &validationRegexIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexN(validationRegexN []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegexN = &validationRegexN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexNic(validationRegexNic []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegexNic = &validationRegexNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexNie(validationRegexNie []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegexNie = &validationRegexNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexNiew(validationRegexNiew []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegexNiew = &validationRegexNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ValidationRegexNisw(validationRegexNisw []string) ApiExtrasCustomFieldsListRequest {
	r.validationRegexNisw = &validationRegexNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Weight(weight []int32) ApiExtrasCustomFieldsListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightEmpty(weightEmpty bool) ApiExtrasCustomFieldsListRequest {
	r.weightEmpty = &weightEmpty
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightGt(weightGt []int32) ApiExtrasCustomFieldsListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightGte(weightGte []int32) ApiExtrasCustomFieldsListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightLt(weightLt []int32) ApiExtrasCustomFieldsListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightLte(weightLte []int32) ApiExtrasCustomFieldsListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightN(weightN []int32) ApiExtrasCustomFieldsListRequest {
	r.weightN = &weightN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Execute() (*PaginatedCustomFieldList, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsListExecute(r)
}

/*
ExtrasCustomFieldsList Method for ExtrasCustomFieldsList

Get a list of custom field objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomFieldsListRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsList(ctx context.Context) ApiExtrasCustomFieldsListRequest {
	return ApiExtrasCustomFieldsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCustomFieldList
func (a *ExtrasAPIService) ExtrasCustomFieldsListExecute(r ApiExtrasCustomFieldsListRequest) (*PaginatedCustomFieldList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCustomFieldList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.choiceSet != nil {
		t := *r.choiceSet
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "choice_set", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "choice_set", t, "multi")
		}
	}
	if r.choiceSetN != nil {
		t := *r.choiceSetN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "choice_set__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "choice_set__n", t, "multi")
		}
	}
	if r.choiceSetId != nil {
		t := *r.choiceSetId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "choice_set_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "choice_set_id", t, "multi")
		}
	}
	if r.choiceSetIdN != nil {
		t := *r.choiceSetIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "choice_set_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "choice_set_id__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.filterLogic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic", r.filterLogic, "")
	}
	if r.filterLogicN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter_logic__n", r.filterLogicN, "")
	}
	if r.groupName != nil {
		t := *r.groupName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", t, "multi")
		}
	}
	if r.groupNameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__empty", r.groupNameEmpty, "")
	}
	if r.groupNameIc != nil {
		t := *r.groupNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ic", t, "multi")
		}
	}
	if r.groupNameIe != nil {
		t := *r.groupNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ie", t, "multi")
		}
	}
	if r.groupNameIew != nil {
		t := *r.groupNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__iew", t, "multi")
		}
	}
	if r.groupNameIsw != nil {
		t := *r.groupNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__isw", t, "multi")
		}
	}
	if r.groupNameN != nil {
		t := *r.groupNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__n", t, "multi")
		}
	}
	if r.groupNameNic != nil {
		t := *r.groupNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nic", t, "multi")
		}
	}
	if r.groupNameNie != nil {
		t := *r.groupNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nie", t, "multi")
		}
	}
	if r.groupNameNiew != nil {
		t := *r.groupNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__niew", t, "multi")
		}
	}
	if r.groupNameNisw != nil {
		t := *r.groupNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.isCloneable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_cloneable", r.isCloneable, "")
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label", t, "multi")
		}
	}
	if r.labelEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label__empty", r.labelEmpty, "")
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ic", t, "multi")
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__ie", t, "multi")
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__iew", t, "multi")
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__isw", t, "multi")
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__n", t, "multi")
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nic", t, "multi")
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nie", t, "multi")
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__niew", t, "multi")
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "label__nisw", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType, "")
	}
	if r.objectTypeIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ic", r.objectTypeIc, "")
	}
	if r.objectTypeIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ie", r.objectTypeIe, "")
	}
	if r.objectTypeIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__iew", r.objectTypeIew, "")
	}
	if r.objectTypeIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__isw", r.objectTypeIsw, "")
	}
	if r.objectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__n", r.objectTypeN, "")
	}
	if r.objectTypeNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nic", r.objectTypeNic, "")
	}
	if r.objectTypeNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nie", r.objectTypeNie, "")
	}
	if r.objectTypeNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__niew", r.objectTypeNiew, "")
	}
	if r.objectTypeNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nisw", r.objectTypeNisw, "")
	}
	if r.objectTypeId != nil {
		t := *r.objectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", t, "multi")
		}
	}
	if r.objectTypeIdN != nil {
		t := *r.objectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.relatedObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_type", r.relatedObjectType, "")
	}
	if r.relatedObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_type__n", r.relatedObjectTypeN, "")
	}
	if r.relatedObjectTypeId != nil {
		t := *r.relatedObjectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_type_id", t, "multi")
		}
	}
	if r.relatedObjectTypeIdN != nil {
		t := *r.relatedObjectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_type_id__n", t, "multi")
		}
	}
	if r.required != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "required", r.required, "")
	}
	if r.searchWeight != nil {
		t := *r.searchWeight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight", t, "multi")
		}
	}
	if r.searchWeightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__empty", r.searchWeightEmpty, "")
	}
	if r.searchWeightGt != nil {
		t := *r.searchWeightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__gt", t, "multi")
		}
	}
	if r.searchWeightGte != nil {
		t := *r.searchWeightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__gte", t, "multi")
		}
	}
	if r.searchWeightLt != nil {
		t := *r.searchWeightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__lt", t, "multi")
		}
	}
	if r.searchWeightLte != nil {
		t := *r.searchWeightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__lte", t, "multi")
		}
	}
	if r.searchWeightN != nil {
		t := *r.searchWeightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "search_weight__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.uiEditable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ui_editable", r.uiEditable, "")
	}
	if r.uiEditableN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ui_editable__n", r.uiEditableN, "")
	}
	if r.uiVisible != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ui_visible", r.uiVisible, "")
	}
	if r.uiVisibleN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ui_visible__n", r.uiVisibleN, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.validationMaximum != nil {
		t := *r.validationMaximum
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum", t, "multi")
		}
	}
	if r.validationMaximumEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__empty", r.validationMaximumEmpty, "")
	}
	if r.validationMaximumGt != nil {
		t := *r.validationMaximumGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__gt", t, "multi")
		}
	}
	if r.validationMaximumGte != nil {
		t := *r.validationMaximumGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__gte", t, "multi")
		}
	}
	if r.validationMaximumLt != nil {
		t := *r.validationMaximumLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__lt", t, "multi")
		}
	}
	if r.validationMaximumLte != nil {
		t := *r.validationMaximumLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__lte", t, "multi")
		}
	}
	if r.validationMaximumN != nil {
		t := *r.validationMaximumN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_maximum__n", t, "multi")
		}
	}
	if r.validationMinimum != nil {
		t := *r.validationMinimum
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum", t, "multi")
		}
	}
	if r.validationMinimumEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__empty", r.validationMinimumEmpty, "")
	}
	if r.validationMinimumGt != nil {
		t := *r.validationMinimumGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__gt", t, "multi")
		}
	}
	if r.validationMinimumGte != nil {
		t := *r.validationMinimumGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__gte", t, "multi")
		}
	}
	if r.validationMinimumLt != nil {
		t := *r.validationMinimumLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__lt", t, "multi")
		}
	}
	if r.validationMinimumLte != nil {
		t := *r.validationMinimumLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__lte", t, "multi")
		}
	}
	if r.validationMinimumN != nil {
		t := *r.validationMinimumN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_minimum__n", t, "multi")
		}
	}
	if r.validationRegex != nil {
		t := *r.validationRegex
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex", t, "multi")
		}
	}
	if r.validationRegexEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__empty", r.validationRegexEmpty, "")
	}
	if r.validationRegexIc != nil {
		t := *r.validationRegexIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__ic", t, "multi")
		}
	}
	if r.validationRegexIe != nil {
		t := *r.validationRegexIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__ie", t, "multi")
		}
	}
	if r.validationRegexIew != nil {
		t := *r.validationRegexIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__iew", t, "multi")
		}
	}
	if r.validationRegexIsw != nil {
		t := *r.validationRegexIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__isw", t, "multi")
		}
	}
	if r.validationRegexN != nil {
		t := *r.validationRegexN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__n", t, "multi")
		}
	}
	if r.validationRegexNic != nil {
		t := *r.validationRegexNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__nic", t, "multi")
		}
	}
	if r.validationRegexNie != nil {
		t := *r.validationRegexNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__nie", t, "multi")
		}
	}
	if r.validationRegexNiew != nil {
		t := *r.validationRegexNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__niew", t, "multi")
		}
	}
	if r.validationRegexNisw != nil {
		t := *r.validationRegexNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "validation_regex__nisw", t, "multi")
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "multi")
		}
	}
	if r.weightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight__empty", r.weightEmpty, "")
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsPartialUpdateRequest struct {
	ctx                               context.Context
	ApiService                        *ExtrasAPIService
	id                                int32
	patchedWritableCustomFieldRequest *PatchedWritableCustomFieldRequest
}

func (r ApiExtrasCustomFieldsPartialUpdateRequest) PatchedWritableCustomFieldRequest(patchedWritableCustomFieldRequest PatchedWritableCustomFieldRequest) ApiExtrasCustomFieldsPartialUpdateRequest {
	r.patchedWritableCustomFieldRequest = &patchedWritableCustomFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsPartialUpdateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldsPartialUpdate Method for ExtrasCustomFieldsPartialUpdate

Patch a custom field object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom field.
	@return ApiExtrasCustomFieldsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsPartialUpdate(ctx context.Context, id int32) ApiExtrasCustomFieldsPartialUpdateRequest {
	return ApiExtrasCustomFieldsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsPartialUpdateExecute(r ApiExtrasCustomFieldsPartialUpdateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCustomFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasCustomFieldsRetrieveRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsRetrieveExecute(r)
}

/*
ExtrasCustomFieldsRetrieve Method for ExtrasCustomFieldsRetrieve

Get a custom field object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom field.
	@return ApiExtrasCustomFieldsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsRetrieve(ctx context.Context, id int32) ApiExtrasCustomFieldsRetrieveRequest {
	return ApiExtrasCustomFieldsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsRetrieveExecute(r ApiExtrasCustomFieldsRetrieveRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsUpdateRequest struct {
	ctx                        context.Context
	ApiService                 *ExtrasAPIService
	id                         int32
	writableCustomFieldRequest *WritableCustomFieldRequest
}

func (r ApiExtrasCustomFieldsUpdateRequest) WritableCustomFieldRequest(writableCustomFieldRequest WritableCustomFieldRequest) ApiExtrasCustomFieldsUpdateRequest {
	r.writableCustomFieldRequest = &writableCustomFieldRequest
	return r
}

func (r ApiExtrasCustomFieldsUpdateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsUpdateExecute(r)
}

/*
ExtrasCustomFieldsUpdate Method for ExtrasCustomFieldsUpdate

Put a custom field object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom field.
	@return ApiExtrasCustomFieldsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomFieldsUpdate(ctx context.Context, id int32) ApiExtrasCustomFieldsUpdateRequest {
	return ApiExtrasCustomFieldsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomField
func (a *ExtrasAPIService) ExtrasCustomFieldsUpdateExecute(r ApiExtrasCustomFieldsUpdateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomFieldsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomFieldRequest == nil {
		return localVarReturnValue, nil, reportError("writableCustomFieldRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomFieldRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	customLinkRequest *[]CustomLinkRequest
}

func (r ApiExtrasCustomLinksBulkDestroyRequest) CustomLinkRequest(customLinkRequest []CustomLinkRequest) ApiExtrasCustomLinksBulkDestroyRequest {
	r.customLinkRequest = &customLinkRequest
	return r
}

func (r ApiExtrasCustomLinksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomLinksBulkDestroyExecute(r)
}

/*
ExtrasCustomLinksBulkDestroy Method for ExtrasCustomLinksBulkDestroy

Delete a list of custom link objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomLinksBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksBulkDestroy(ctx context.Context) ApiExtrasCustomLinksBulkDestroyRequest {
	return ApiExtrasCustomLinksBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomLinksBulkDestroyExecute(r ApiExtrasCustomLinksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLinkRequest == nil {
		return nil, reportError("customLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	customLinkRequest *[]CustomLinkRequest
}

func (r ApiExtrasCustomLinksBulkPartialUpdateRequest) CustomLinkRequest(customLinkRequest []CustomLinkRequest) ApiExtrasCustomLinksBulkPartialUpdateRequest {
	r.customLinkRequest = &customLinkRequest
	return r
}

func (r ApiExtrasCustomLinksBulkPartialUpdateRequest) Execute() ([]CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksBulkPartialUpdateExecute(r)
}

/*
ExtrasCustomLinksBulkPartialUpdate Method for ExtrasCustomLinksBulkPartialUpdate

Patch a list of custom link objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomLinksBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksBulkPartialUpdate(ctx context.Context) ApiExtrasCustomLinksBulkPartialUpdateRequest {
	return ApiExtrasCustomLinksBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksBulkPartialUpdateExecute(r ApiExtrasCustomLinksBulkPartialUpdateRequest) ([]CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLinkRequest == nil {
		return localVarReturnValue, nil, reportError("customLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	customLinkRequest *[]CustomLinkRequest
}

func (r ApiExtrasCustomLinksBulkUpdateRequest) CustomLinkRequest(customLinkRequest []CustomLinkRequest) ApiExtrasCustomLinksBulkUpdateRequest {
	r.customLinkRequest = &customLinkRequest
	return r
}

func (r ApiExtrasCustomLinksBulkUpdateRequest) Execute() ([]CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksBulkUpdateExecute(r)
}

/*
ExtrasCustomLinksBulkUpdate Method for ExtrasCustomLinksBulkUpdate

Put a list of custom link objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomLinksBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksBulkUpdate(ctx context.Context) ApiExtrasCustomLinksBulkUpdateRequest {
	return ApiExtrasCustomLinksBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksBulkUpdateExecute(r ApiExtrasCustomLinksBulkUpdateRequest) ([]CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLinkRequest == nil {
		return localVarReturnValue, nil, reportError("customLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksCreateRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	customLinkRequest *CustomLinkRequest
}

func (r ApiExtrasCustomLinksCreateRequest) CustomLinkRequest(customLinkRequest CustomLinkRequest) ApiExtrasCustomLinksCreateRequest {
	r.customLinkRequest = &customLinkRequest
	return r
}

func (r ApiExtrasCustomLinksCreateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksCreateExecute(r)
}

/*
ExtrasCustomLinksCreate Method for ExtrasCustomLinksCreate

Post a list of custom link objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomLinksCreateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksCreate(ctx context.Context) ApiExtrasCustomLinksCreateRequest {
	return ApiExtrasCustomLinksCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksCreateExecute(r ApiExtrasCustomLinksCreateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLinkRequest == nil {
		return localVarReturnValue, nil, reportError("customLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasCustomLinksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomLinksDestroyExecute(r)
}

/*
ExtrasCustomLinksDestroy Method for ExtrasCustomLinksDestroy

Delete a custom link object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom link.
	@return ApiExtrasCustomLinksDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksDestroy(ctx context.Context, id int32) ApiExtrasCustomLinksDestroyRequest {
	return ApiExtrasCustomLinksDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasCustomLinksDestroyExecute(r ApiExtrasCustomLinksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksListRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	buttonClass       *ExtrasCustomLinksListButtonClassParameter
	buttonClassN      *ExtrasCustomLinksListButtonClassParameter
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	enabled           *bool
	groupName         *[]string
	groupNameEmpty    *bool
	groupNameIc       *[]string
	groupNameIe       *[]string
	groupNameIew      *[]string
	groupNameIsw      *[]string
	groupNameN        *[]string
	groupNameNic      *[]string
	groupNameNie      *[]string
	groupNameNiew     *[]string
	groupNameNisw     *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	linkText          *string
	linkTextIc        *string
	linkTextIe        *string
	linkTextIew       *string
	linkTextIsw       *string
	linkTextN         *string
	linkTextNic       *string
	linkTextNie       *string
	linkTextNiew      *string
	linkTextNisw      *string
	linkUrl           *string
	linkUrlIc         *string
	linkUrlIe         *string
	linkUrlIew        *string
	linkUrlIsw        *string
	linkUrlN          *string
	linkUrlNic        *string
	linkUrlNie        *string
	linkUrlNiew       *string
	linkUrlNisw       *string
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	newWindow         *bool
	objectType        *string
	objectTypeIc      *string
	objectTypeIe      *string
	objectTypeIew     *string
	objectTypeIsw     *string
	objectTypeN       *string
	objectTypeNic     *string
	objectTypeNie     *string
	objectTypeNiew    *string
	objectTypeNisw    *string
	objectTypeId      *[]int32
	objectTypeIdN     *[]int32
	offset            *int32
	ordering          *string
	q                 *string
	updatedByRequest  *string
	weight            *[]int32
	weightEmpty       *bool
	weightGt          *[]int32
	weightGte         *[]int32
	weightLt          *[]int32
	weightLte         *[]int32
	weightN           *[]int32
}

// The class of the first link in a group will be used for the dropdown button  * &#x60;default&#x60; - Default * &#x60;blue&#x60; - Blue * &#x60;indigo&#x60; - Indigo * &#x60;purple&#x60; - Purple * &#x60;pink&#x60; - Pink * &#x60;red&#x60; - Red * &#x60;orange&#x60; - Orange * &#x60;yellow&#x60; - Yellow * &#x60;green&#x60; - Green * &#x60;teal&#x60; - Teal * &#x60;cyan&#x60; - Cyan * &#x60;gray&#x60; - Gray * &#x60;black&#x60; - Black * &#x60;white&#x60; - White * &#x60;ghost-dark&#x60; - Link
func (r ApiExtrasCustomLinksListRequest) ButtonClass(buttonClass ExtrasCustomLinksListButtonClassParameter) ApiExtrasCustomLinksListRequest {
	r.buttonClass = &buttonClass
	return r
}

// The class of the first link in a group will be used for the dropdown button  * &#x60;default&#x60; - Default * &#x60;blue&#x60; - Blue * &#x60;indigo&#x60; - Indigo * &#x60;purple&#x60; - Purple * &#x60;pink&#x60; - Pink * &#x60;red&#x60; - Red * &#x60;orange&#x60; - Orange * &#x60;yellow&#x60; - Yellow * &#x60;green&#x60; - Green * &#x60;teal&#x60; - Teal * &#x60;cyan&#x60; - Cyan * &#x60;gray&#x60; - Gray * &#x60;black&#x60; - Black * &#x60;white&#x60; - White * &#x60;ghost-dark&#x60; - Link
func (r ApiExtrasCustomLinksListRequest) ButtonClassN(buttonClassN ExtrasCustomLinksListButtonClassParameter) ApiExtrasCustomLinksListRequest {
	r.buttonClassN = &buttonClassN
	return r
}

func (r ApiExtrasCustomLinksListRequest) Created(created []time.Time) ApiExtrasCustomLinksListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasCustomLinksListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasCustomLinksListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasCustomLinksListRequest) CreatedGt(createdGt []time.Time) ApiExtrasCustomLinksListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasCustomLinksListRequest) CreatedGte(createdGte []time.Time) ApiExtrasCustomLinksListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasCustomLinksListRequest) CreatedLt(createdLt []time.Time) ApiExtrasCustomLinksListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasCustomLinksListRequest) CreatedLte(createdLte []time.Time) ApiExtrasCustomLinksListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasCustomLinksListRequest) CreatedN(createdN []time.Time) ApiExtrasCustomLinksListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasCustomLinksListRequest) CreatedByRequest(createdByRequest string) ApiExtrasCustomLinksListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiExtrasCustomLinksListRequest) Enabled(enabled bool) ApiExtrasCustomLinksListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupName(groupName []string) ApiExtrasCustomLinksListRequest {
	r.groupName = &groupName
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameEmpty(groupNameEmpty bool) ApiExtrasCustomLinksListRequest {
	r.groupNameEmpty = &groupNameEmpty
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIc(groupNameIc []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIc = &groupNameIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIe(groupNameIe []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIe = &groupNameIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIew(groupNameIew []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIew = &groupNameIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIsw(groupNameIsw []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIsw = &groupNameIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameN(groupNameN []string) ApiExtrasCustomLinksListRequest {
	r.groupNameN = &groupNameN
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNic(groupNameNic []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNic = &groupNameNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNie(groupNameNie []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNie = &groupNameNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNiew(groupNameNiew []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNiew = &groupNameNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNisw(groupNameNisw []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNisw = &groupNameNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) Id(id []int32) ApiExtrasCustomLinksListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdEmpty(idEmpty bool) ApiExtrasCustomLinksListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdGt(idGt []int32) ApiExtrasCustomLinksListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdGte(idGte []int32) ApiExtrasCustomLinksListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdLt(idLt []int32) ApiExtrasCustomLinksListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdLte(idLte []int32) ApiExtrasCustomLinksListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasCustomLinksListRequest) IdN(idN []int32) ApiExtrasCustomLinksListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasCustomLinksListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasCustomLinksListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasCustomLinksListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasCustomLinksListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasCustomLinksListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasCustomLinksListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasCustomLinksListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasCustomLinksListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasCustomLinksListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasCustomLinksListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasCustomLinksListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasCustomLinksListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasCustomLinksListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasCustomLinksListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomLinksListRequest) Limit(limit int32) ApiExtrasCustomLinksListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkText(linkText string) ApiExtrasCustomLinksListRequest {
	r.linkText = &linkText
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkTextIc(linkTextIc string) ApiExtrasCustomLinksListRequest {
	r.linkTextIc = &linkTextIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkTextIe(linkTextIe string) ApiExtrasCustomLinksListRequest {
	r.linkTextIe = &linkTextIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkTextIew(linkTextIew string) ApiExtrasCustomLinksListRequest {
	r.linkTextIew = &linkTextIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkTextIsw(linkTextIsw string) ApiExtrasCustomLinksListRequest {
	r.linkTextIsw = &linkTextIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkTextN(linkTextN string) ApiExtrasCustomLinksListRequest {
	r.linkTextN = &linkTextN
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkTextNic(linkTextNic string) ApiExtrasCustomLinksListRequest {
	r.linkTextNic = &linkTextNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkTextNie(linkTextNie string) ApiExtrasCustomLinksListRequest {
	r.linkTextNie = &linkTextNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkTextNiew(linkTextNiew string) ApiExtrasCustomLinksListRequest {
	r.linkTextNiew = &linkTextNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkTextNisw(linkTextNisw string) ApiExtrasCustomLinksListRequest {
	r.linkTextNisw = &linkTextNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrl(linkUrl string) ApiExtrasCustomLinksListRequest {
	r.linkUrl = &linkUrl
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrlIc(linkUrlIc string) ApiExtrasCustomLinksListRequest {
	r.linkUrlIc = &linkUrlIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrlIe(linkUrlIe string) ApiExtrasCustomLinksListRequest {
	r.linkUrlIe = &linkUrlIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrlIew(linkUrlIew string) ApiExtrasCustomLinksListRequest {
	r.linkUrlIew = &linkUrlIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrlIsw(linkUrlIsw string) ApiExtrasCustomLinksListRequest {
	r.linkUrlIsw = &linkUrlIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrlN(linkUrlN string) ApiExtrasCustomLinksListRequest {
	r.linkUrlN = &linkUrlN
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrlNic(linkUrlNic string) ApiExtrasCustomLinksListRequest {
	r.linkUrlNic = &linkUrlNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrlNie(linkUrlNie string) ApiExtrasCustomLinksListRequest {
	r.linkUrlNie = &linkUrlNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrlNiew(linkUrlNiew string) ApiExtrasCustomLinksListRequest {
	r.linkUrlNiew = &linkUrlNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) LinkUrlNisw(linkUrlNisw string) ApiExtrasCustomLinksListRequest {
	r.linkUrlNisw = &linkUrlNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasCustomLinksListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasCustomLinksListRequest) Name(name []string) ApiExtrasCustomLinksListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameEmpty(nameEmpty bool) ApiExtrasCustomLinksListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIc(nameIc []string) ApiExtrasCustomLinksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIe(nameIe []string) ApiExtrasCustomLinksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIew(nameIew []string) ApiExtrasCustomLinksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIsw(nameIsw []string) ApiExtrasCustomLinksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameN(nameN []string) ApiExtrasCustomLinksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNic(nameNic []string) ApiExtrasCustomLinksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNie(nameNie []string) ApiExtrasCustomLinksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNiew(nameNiew []string) ApiExtrasCustomLinksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNisw(nameNisw []string) ApiExtrasCustomLinksListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) NewWindow(newWindow bool) ApiExtrasCustomLinksListRequest {
	r.newWindow = &newWindow
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectType(objectType string) ApiExtrasCustomLinksListRequest {
	r.objectType = &objectType
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeIc(objectTypeIc string) ApiExtrasCustomLinksListRequest {
	r.objectTypeIc = &objectTypeIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeIe(objectTypeIe string) ApiExtrasCustomLinksListRequest {
	r.objectTypeIe = &objectTypeIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeIew(objectTypeIew string) ApiExtrasCustomLinksListRequest {
	r.objectTypeIew = &objectTypeIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeIsw(objectTypeIsw string) ApiExtrasCustomLinksListRequest {
	r.objectTypeIsw = &objectTypeIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeN(objectTypeN string) ApiExtrasCustomLinksListRequest {
	r.objectTypeN = &objectTypeN
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeNic(objectTypeNic string) ApiExtrasCustomLinksListRequest {
	r.objectTypeNic = &objectTypeNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeNie(objectTypeNie string) ApiExtrasCustomLinksListRequest {
	r.objectTypeNie = &objectTypeNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeNiew(objectTypeNiew string) ApiExtrasCustomLinksListRequest {
	r.objectTypeNiew = &objectTypeNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeNisw(objectTypeNisw string) ApiExtrasCustomLinksListRequest {
	r.objectTypeNisw = &objectTypeNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeId(objectTypeId []int32) ApiExtrasCustomLinksListRequest {
	r.objectTypeId = &objectTypeId
	return r
}

func (r ApiExtrasCustomLinksListRequest) ObjectTypeIdN(objectTypeIdN []int32) ApiExtrasCustomLinksListRequest {
	r.objectTypeIdN = &objectTypeIdN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomLinksListRequest) Offset(offset int32) ApiExtrasCustomLinksListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasCustomLinksListRequest) Ordering(ordering string) ApiExtrasCustomLinksListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasCustomLinksListRequest) Q(q string) ApiExtrasCustomLinksListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasCustomLinksListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasCustomLinksListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasCustomLinksListRequest) Weight(weight []int32) ApiExtrasCustomLinksListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightEmpty(weightEmpty bool) ApiExtrasCustomLinksListRequest {
	r.weightEmpty = &weightEmpty
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightGt(weightGt []int32) ApiExtrasCustomLinksListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightGte(weightGte []int32) ApiExtrasCustomLinksListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightLt(weightLt []int32) ApiExtrasCustomLinksListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightLte(weightLte []int32) ApiExtrasCustomLinksListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightN(weightN []int32) ApiExtrasCustomLinksListRequest {
	r.weightN = &weightN
	return r
}

func (r ApiExtrasCustomLinksListRequest) Execute() (*PaginatedCustomLinkList, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksListExecute(r)
}

/*
ExtrasCustomLinksList Method for ExtrasCustomLinksList

Get a list of custom link objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasCustomLinksListRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksList(ctx context.Context) ApiExtrasCustomLinksListRequest {
	return ApiExtrasCustomLinksListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedCustomLinkList
func (a *ExtrasAPIService) ExtrasCustomLinksListExecute(r ApiExtrasCustomLinksListRequest) (*PaginatedCustomLinkList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedCustomLinkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.buttonClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "button_class", r.buttonClass, "")
	}
	if r.buttonClassN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "button_class__n", r.buttonClassN, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "")
	}
	if r.groupName != nil {
		t := *r.groupName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name", t, "multi")
		}
	}
	if r.groupNameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__empty", r.groupNameEmpty, "")
	}
	if r.groupNameIc != nil {
		t := *r.groupNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ic", t, "multi")
		}
	}
	if r.groupNameIe != nil {
		t := *r.groupNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__ie", t, "multi")
		}
	}
	if r.groupNameIew != nil {
		t := *r.groupNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__iew", t, "multi")
		}
	}
	if r.groupNameIsw != nil {
		t := *r.groupNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__isw", t, "multi")
		}
	}
	if r.groupNameN != nil {
		t := *r.groupNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__n", t, "multi")
		}
	}
	if r.groupNameNic != nil {
		t := *r.groupNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nic", t, "multi")
		}
	}
	if r.groupNameNie != nil {
		t := *r.groupNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nie", t, "multi")
		}
	}
	if r.groupNameNiew != nil {
		t := *r.groupNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__niew", t, "multi")
		}
	}
	if r.groupNameNisw != nil {
		t := *r.groupNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_name__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.linkText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text", r.linkText, "")
	}
	if r.linkTextIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text__ic", r.linkTextIc, "")
	}
	if r.linkTextIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text__ie", r.linkTextIe, "")
	}
	if r.linkTextIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text__iew", r.linkTextIew, "")
	}
	if r.linkTextIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text__isw", r.linkTextIsw, "")
	}
	if r.linkTextN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text__n", r.linkTextN, "")
	}
	if r.linkTextNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text__nic", r.linkTextNic, "")
	}
	if r.linkTextNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text__nie", r.linkTextNie, "")
	}
	if r.linkTextNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text__niew", r.linkTextNiew, "")
	}
	if r.linkTextNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_text__nisw", r.linkTextNisw, "")
	}
	if r.linkUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url", r.linkUrl, "")
	}
	if r.linkUrlIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url__ic", r.linkUrlIc, "")
	}
	if r.linkUrlIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url__ie", r.linkUrlIe, "")
	}
	if r.linkUrlIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url__iew", r.linkUrlIew, "")
	}
	if r.linkUrlIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url__isw", r.linkUrlIsw, "")
	}
	if r.linkUrlN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url__n", r.linkUrlN, "")
	}
	if r.linkUrlNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url__nic", r.linkUrlNic, "")
	}
	if r.linkUrlNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url__nie", r.linkUrlNie, "")
	}
	if r.linkUrlNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url__niew", r.linkUrlNiew, "")
	}
	if r.linkUrlNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link_url__nisw", r.linkUrlNisw, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.newWindow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "new_window", r.newWindow, "")
	}
	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType, "")
	}
	if r.objectTypeIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ic", r.objectTypeIc, "")
	}
	if r.objectTypeIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ie", r.objectTypeIe, "")
	}
	if r.objectTypeIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__iew", r.objectTypeIew, "")
	}
	if r.objectTypeIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__isw", r.objectTypeIsw, "")
	}
	if r.objectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__n", r.objectTypeN, "")
	}
	if r.objectTypeNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nic", r.objectTypeNic, "")
	}
	if r.objectTypeNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nie", r.objectTypeNie, "")
	}
	if r.objectTypeNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__niew", r.objectTypeNiew, "")
	}
	if r.objectTypeNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nisw", r.objectTypeNisw, "")
	}
	if r.objectTypeId != nil {
		t := *r.objectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", t, "multi")
		}
	}
	if r.objectTypeIdN != nil {
		t := *r.objectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "multi")
		}
	}
	if r.weightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight__empty", r.weightEmpty, "")
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksPartialUpdateRequest struct {
	ctx                      context.Context
	ApiService               *ExtrasAPIService
	id                       int32
	patchedCustomLinkRequest *PatchedCustomLinkRequest
}

func (r ApiExtrasCustomLinksPartialUpdateRequest) PatchedCustomLinkRequest(patchedCustomLinkRequest PatchedCustomLinkRequest) ApiExtrasCustomLinksPartialUpdateRequest {
	r.patchedCustomLinkRequest = &patchedCustomLinkRequest
	return r
}

func (r ApiExtrasCustomLinksPartialUpdateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksPartialUpdateExecute(r)
}

/*
ExtrasCustomLinksPartialUpdate Method for ExtrasCustomLinksPartialUpdate

Patch a custom link object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom link.
	@return ApiExtrasCustomLinksPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksPartialUpdate(ctx context.Context, id int32) ApiExtrasCustomLinksPartialUpdateRequest {
	return ApiExtrasCustomLinksPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksPartialUpdateExecute(r ApiExtrasCustomLinksPartialUpdateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCustomLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasCustomLinksRetrieveRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksRetrieveExecute(r)
}

/*
ExtrasCustomLinksRetrieve Method for ExtrasCustomLinksRetrieve

Get a custom link object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom link.
	@return ApiExtrasCustomLinksRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksRetrieve(ctx context.Context, id int32) ApiExtrasCustomLinksRetrieveRequest {
	return ApiExtrasCustomLinksRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksRetrieveExecute(r ApiExtrasCustomLinksRetrieveRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksUpdateRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	id                int32
	customLinkRequest *CustomLinkRequest
}

func (r ApiExtrasCustomLinksUpdateRequest) CustomLinkRequest(customLinkRequest CustomLinkRequest) ApiExtrasCustomLinksUpdateRequest {
	r.customLinkRequest = &customLinkRequest
	return r
}

func (r ApiExtrasCustomLinksUpdateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksUpdateExecute(r)
}

/*
ExtrasCustomLinksUpdate Method for ExtrasCustomLinksUpdate

Put a custom link object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this custom link.
	@return ApiExtrasCustomLinksUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasCustomLinksUpdate(ctx context.Context, id int32) ApiExtrasCustomLinksUpdateRequest {
	return ApiExtrasCustomLinksUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CustomLink
func (a *ExtrasAPIService) ExtrasCustomLinksUpdateExecute(r ApiExtrasCustomLinksUpdateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasCustomLinksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLinkRequest == nil {
		return localVarReturnValue, nil, reportError("customLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDashboardDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
}

func (r ApiExtrasDashboardDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasDashboardDestroyExecute(r)
}

/*
ExtrasDashboardDestroy Method for ExtrasDashboardDestroy

Delete a list of dashboard objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasDashboardDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasDashboardDestroy(ctx context.Context) ApiExtrasDashboardDestroyRequest {
	return ApiExtrasDashboardDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasDashboardDestroyExecute(r ApiExtrasDashboardDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDashboardDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/dashboard/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasDashboardPartialUpdateRequest struct {
	ctx                     context.Context
	ApiService              *ExtrasAPIService
	patchedDashboardRequest *PatchedDashboardRequest
}

func (r ApiExtrasDashboardPartialUpdateRequest) PatchedDashboardRequest(patchedDashboardRequest PatchedDashboardRequest) ApiExtrasDashboardPartialUpdateRequest {
	r.patchedDashboardRequest = &patchedDashboardRequest
	return r
}

func (r ApiExtrasDashboardPartialUpdateRequest) Execute() (*Dashboard, *http.Response, error) {
	return r.ApiService.ExtrasDashboardPartialUpdateExecute(r)
}

/*
ExtrasDashboardPartialUpdate Method for ExtrasDashboardPartialUpdate

Patch a list of dashboard objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasDashboardPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDashboardPartialUpdate(ctx context.Context) ApiExtrasDashboardPartialUpdateRequest {
	return ApiExtrasDashboardPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Dashboard
func (a *ExtrasAPIService) ExtrasDashboardPartialUpdateExecute(r ApiExtrasDashboardPartialUpdateRequest) (*Dashboard, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Dashboard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDashboardPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/dashboard/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDashboardRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDashboardRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
}

func (r ApiExtrasDashboardRetrieveRequest) Execute() (*Dashboard, *http.Response, error) {
	return r.ApiService.ExtrasDashboardRetrieveExecute(r)
}

/*
ExtrasDashboardRetrieve Method for ExtrasDashboardRetrieve

Get a list of dashboard objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasDashboardRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasDashboardRetrieve(ctx context.Context) ApiExtrasDashboardRetrieveRequest {
	return ApiExtrasDashboardRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Dashboard
func (a *ExtrasAPIService) ExtrasDashboardRetrieveExecute(r ApiExtrasDashboardRetrieveRequest) (*Dashboard, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Dashboard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDashboardRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/dashboard/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDashboardUpdateRequest struct {
	ctx              context.Context
	ApiService       *ExtrasAPIService
	dashboardRequest *DashboardRequest
}

func (r ApiExtrasDashboardUpdateRequest) DashboardRequest(dashboardRequest DashboardRequest) ApiExtrasDashboardUpdateRequest {
	r.dashboardRequest = &dashboardRequest
	return r
}

func (r ApiExtrasDashboardUpdateRequest) Execute() (*Dashboard, *http.Response, error) {
	return r.ApiService.ExtrasDashboardUpdateExecute(r)
}

/*
ExtrasDashboardUpdate Method for ExtrasDashboardUpdate

Put a list of dashboard objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasDashboardUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasDashboardUpdate(ctx context.Context) ApiExtrasDashboardUpdateRequest {
	return ApiExtrasDashboardUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Dashboard
func (a *ExtrasAPIService) ExtrasDashboardUpdateExecute(r ApiExtrasDashboardUpdateRequest) (*Dashboard, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Dashboard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasDashboardUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/dashboard/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dashboardRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasEventRulesBulkDestroyRequest struct {
	ctx              context.Context
	ApiService       *ExtrasAPIService
	eventRuleRequest *[]EventRuleRequest
}

func (r ApiExtrasEventRulesBulkDestroyRequest) EventRuleRequest(eventRuleRequest []EventRuleRequest) ApiExtrasEventRulesBulkDestroyRequest {
	r.eventRuleRequest = &eventRuleRequest
	return r
}

func (r ApiExtrasEventRulesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasEventRulesBulkDestroyExecute(r)
}

/*
ExtrasEventRulesBulkDestroy Method for ExtrasEventRulesBulkDestroy

Delete a list of event rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasEventRulesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasEventRulesBulkDestroy(ctx context.Context) ApiExtrasEventRulesBulkDestroyRequest {
	return ApiExtrasEventRulesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasEventRulesBulkDestroyExecute(r ApiExtrasEventRulesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasEventRulesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/event-rules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventRuleRequest == nil {
		return nil, reportError("eventRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasEventRulesBulkPartialUpdateRequest struct {
	ctx              context.Context
	ApiService       *ExtrasAPIService
	eventRuleRequest *[]EventRuleRequest
}

func (r ApiExtrasEventRulesBulkPartialUpdateRequest) EventRuleRequest(eventRuleRequest []EventRuleRequest) ApiExtrasEventRulesBulkPartialUpdateRequest {
	r.eventRuleRequest = &eventRuleRequest
	return r
}

func (r ApiExtrasEventRulesBulkPartialUpdateRequest) Execute() ([]EventRule, *http.Response, error) {
	return r.ApiService.ExtrasEventRulesBulkPartialUpdateExecute(r)
}

/*
ExtrasEventRulesBulkPartialUpdate Method for ExtrasEventRulesBulkPartialUpdate

Patch a list of event rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasEventRulesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasEventRulesBulkPartialUpdate(ctx context.Context) ApiExtrasEventRulesBulkPartialUpdateRequest {
	return ApiExtrasEventRulesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EventRule
func (a *ExtrasAPIService) ExtrasEventRulesBulkPartialUpdateExecute(r ApiExtrasEventRulesBulkPartialUpdateRequest) ([]EventRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EventRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasEventRulesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/event-rules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventRuleRequest == nil {
		return localVarReturnValue, nil, reportError("eventRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasEventRulesBulkUpdateRequest struct {
	ctx              context.Context
	ApiService       *ExtrasAPIService
	eventRuleRequest *[]EventRuleRequest
}

func (r ApiExtrasEventRulesBulkUpdateRequest) EventRuleRequest(eventRuleRequest []EventRuleRequest) ApiExtrasEventRulesBulkUpdateRequest {
	r.eventRuleRequest = &eventRuleRequest
	return r
}

func (r ApiExtrasEventRulesBulkUpdateRequest) Execute() ([]EventRule, *http.Response, error) {
	return r.ApiService.ExtrasEventRulesBulkUpdateExecute(r)
}

/*
ExtrasEventRulesBulkUpdate Method for ExtrasEventRulesBulkUpdate

Put a list of event rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasEventRulesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasEventRulesBulkUpdate(ctx context.Context) ApiExtrasEventRulesBulkUpdateRequest {
	return ApiExtrasEventRulesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EventRule
func (a *ExtrasAPIService) ExtrasEventRulesBulkUpdateExecute(r ApiExtrasEventRulesBulkUpdateRequest) ([]EventRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EventRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasEventRulesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/event-rules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventRuleRequest == nil {
		return localVarReturnValue, nil, reportError("eventRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eventRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasEventRulesCreateRequest struct {
	ctx                      context.Context
	ApiService               *ExtrasAPIService
	writableEventRuleRequest *WritableEventRuleRequest
}

func (r ApiExtrasEventRulesCreateRequest) WritableEventRuleRequest(writableEventRuleRequest WritableEventRuleRequest) ApiExtrasEventRulesCreateRequest {
	r.writableEventRuleRequest = &writableEventRuleRequest
	return r
}

func (r ApiExtrasEventRulesCreateRequest) Execute() (*EventRule, *http.Response, error) {
	return r.ApiService.ExtrasEventRulesCreateExecute(r)
}

/*
ExtrasEventRulesCreate Method for ExtrasEventRulesCreate

Post a list of event rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasEventRulesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasEventRulesCreate(ctx context.Context) ApiExtrasEventRulesCreateRequest {
	return ApiExtrasEventRulesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EventRule
func (a *ExtrasAPIService) ExtrasEventRulesCreateExecute(r ApiExtrasEventRulesCreateRequest) (*EventRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EventRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasEventRulesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/event-rules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableEventRuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableEventRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableEventRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasEventRulesDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasEventRulesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasEventRulesDestroyExecute(r)
}

/*
ExtrasEventRulesDestroy Method for ExtrasEventRulesDestroy

Delete a event rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this event rule.
	@return ApiExtrasEventRulesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasEventRulesDestroy(ctx context.Context, id int32) ApiExtrasEventRulesDestroyRequest {
	return ApiExtrasEventRulesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasEventRulesDestroyExecute(r ApiExtrasEventRulesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasEventRulesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/event-rules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasEventRulesListRequest struct {
	ctx                 context.Context
	ApiService          *ExtrasAPIService
	actionObjectId      *[]int32
	actionObjectIdEmpty *[]int32
	actionObjectIdGt    *[]int32
	actionObjectIdGte   *[]int32
	actionObjectIdLt    *[]int32
	actionObjectIdLte   *[]int32
	actionObjectIdN     *[]int32
	actionObjectType    *string
	actionObjectTypeN   *string
	actionType          *[]string
	actionTypeN         *[]string
	created             *[]time.Time
	createdEmpty        *[]time.Time
	createdGt           *[]time.Time
	createdGte          *[]time.Time
	createdLt           *[]time.Time
	createdLte          *[]time.Time
	createdN            *[]time.Time
	createdByRequest    *string
	description         *[]string
	descriptionEmpty    *bool
	descriptionIc       *[]string
	descriptionIe       *[]string
	descriptionIew      *[]string
	descriptionIsw      *[]string
	descriptionN        *[]string
	descriptionNic      *[]string
	descriptionNie      *[]string
	descriptionNiew     *[]string
	descriptionNisw     *[]string
	enabled             *bool
	id                  *[]int32
	idEmpty             *bool
	idGt                *[]int32
	idGte               *[]int32
	idLt                *[]int32
	idLte               *[]int32
	idN                 *[]int32
	lastUpdated         *[]time.Time
	lastUpdatedEmpty    *[]time.Time
	lastUpdatedGt       *[]time.Time
	lastUpdatedGte      *[]time.Time
	lastUpdatedLt       *[]time.Time
	lastUpdatedLte      *[]time.Time
	lastUpdatedN        *[]time.Time
	limit               *int32
	modifiedByRequest   *string
	name                *[]string
	nameEmpty           *bool
	nameIc              *[]string
	nameIe              *[]string
	nameIew             *[]string
	nameIsw             *[]string
	nameN               *[]string
	nameNic             *[]string
	nameNie             *[]string
	nameNiew            *[]string
	nameNisw            *[]string
	objectType          *string
	objectTypeIc        *string
	objectTypeIe        *string
	objectTypeIew       *string
	objectTypeIsw       *string
	objectTypeN         *string
	objectTypeNic       *string
	objectTypeNie       *string
	objectTypeNiew      *string
	objectTypeNisw      *string
	objectTypeId        *[]int32
	objectTypeIdN       *[]int32
	offset              *int32
	ordering            *string
	q                   *string
	tag                 *[]string
	tagN                *[]string
	typeCreate          *bool
	typeDelete          *bool
	typeJobEnd          *bool
	typeJobStart        *bool
	typeUpdate          *bool
	updatedByRequest    *string
}

func (r ApiExtrasEventRulesListRequest) ActionObjectId(actionObjectId []int32) ApiExtrasEventRulesListRequest {
	r.actionObjectId = &actionObjectId
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionObjectIdEmpty(actionObjectIdEmpty []int32) ApiExtrasEventRulesListRequest {
	r.actionObjectIdEmpty = &actionObjectIdEmpty
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionObjectIdGt(actionObjectIdGt []int32) ApiExtrasEventRulesListRequest {
	r.actionObjectIdGt = &actionObjectIdGt
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionObjectIdGte(actionObjectIdGte []int32) ApiExtrasEventRulesListRequest {
	r.actionObjectIdGte = &actionObjectIdGte
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionObjectIdLt(actionObjectIdLt []int32) ApiExtrasEventRulesListRequest {
	r.actionObjectIdLt = &actionObjectIdLt
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionObjectIdLte(actionObjectIdLte []int32) ApiExtrasEventRulesListRequest {
	r.actionObjectIdLte = &actionObjectIdLte
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionObjectIdN(actionObjectIdN []int32) ApiExtrasEventRulesListRequest {
	r.actionObjectIdN = &actionObjectIdN
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionObjectType(actionObjectType string) ApiExtrasEventRulesListRequest {
	r.actionObjectType = &actionObjectType
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionObjectTypeN(actionObjectTypeN string) ApiExtrasEventRulesListRequest {
	r.actionObjectTypeN = &actionObjectTypeN
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionType(actionType []string) ApiExtrasEventRulesListRequest {
	r.actionType = &actionType
	return r
}

func (r ApiExtrasEventRulesListRequest) ActionTypeN(actionTypeN []string) ApiExtrasEventRulesListRequest {
	r.actionTypeN = &actionTypeN
	return r
}

func (r ApiExtrasEventRulesListRequest) Created(created []time.Time) ApiExtrasEventRulesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasEventRulesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasEventRulesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasEventRulesListRequest) CreatedGt(createdGt []time.Time) ApiExtrasEventRulesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasEventRulesListRequest) CreatedGte(createdGte []time.Time) ApiExtrasEventRulesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasEventRulesListRequest) CreatedLt(createdLt []time.Time) ApiExtrasEventRulesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasEventRulesListRequest) CreatedLte(createdLte []time.Time) ApiExtrasEventRulesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasEventRulesListRequest) CreatedN(createdN []time.Time) ApiExtrasEventRulesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasEventRulesListRequest) CreatedByRequest(createdByRequest string) ApiExtrasEventRulesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiExtrasEventRulesListRequest) Description(description []string) ApiExtrasEventRulesListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiExtrasEventRulesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionIc(descriptionIc []string) ApiExtrasEventRulesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionIe(descriptionIe []string) ApiExtrasEventRulesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionIew(descriptionIew []string) ApiExtrasEventRulesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasEventRulesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionN(descriptionN []string) ApiExtrasEventRulesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionNic(descriptionNic []string) ApiExtrasEventRulesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionNie(descriptionNie []string) ApiExtrasEventRulesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasEventRulesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasEventRulesListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasEventRulesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasEventRulesListRequest) Enabled(enabled bool) ApiExtrasEventRulesListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiExtrasEventRulesListRequest) Id(id []int32) ApiExtrasEventRulesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasEventRulesListRequest) IdEmpty(idEmpty bool) ApiExtrasEventRulesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasEventRulesListRequest) IdGt(idGt []int32) ApiExtrasEventRulesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasEventRulesListRequest) IdGte(idGte []int32) ApiExtrasEventRulesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasEventRulesListRequest) IdLt(idLt []int32) ApiExtrasEventRulesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasEventRulesListRequest) IdLte(idLte []int32) ApiExtrasEventRulesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasEventRulesListRequest) IdN(idN []int32) ApiExtrasEventRulesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasEventRulesListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasEventRulesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasEventRulesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasEventRulesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasEventRulesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasEventRulesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasEventRulesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasEventRulesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasEventRulesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasEventRulesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasEventRulesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasEventRulesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasEventRulesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasEventRulesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasEventRulesListRequest) Limit(limit int32) ApiExtrasEventRulesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasEventRulesListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasEventRulesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasEventRulesListRequest) Name(name []string) ApiExtrasEventRulesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasEventRulesListRequest) NameEmpty(nameEmpty bool) ApiExtrasEventRulesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasEventRulesListRequest) NameIc(nameIc []string) ApiExtrasEventRulesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasEventRulesListRequest) NameIe(nameIe []string) ApiExtrasEventRulesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasEventRulesListRequest) NameIew(nameIew []string) ApiExtrasEventRulesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasEventRulesListRequest) NameIsw(nameIsw []string) ApiExtrasEventRulesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasEventRulesListRequest) NameN(nameN []string) ApiExtrasEventRulesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasEventRulesListRequest) NameNic(nameNic []string) ApiExtrasEventRulesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasEventRulesListRequest) NameNie(nameNie []string) ApiExtrasEventRulesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasEventRulesListRequest) NameNiew(nameNiew []string) ApiExtrasEventRulesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasEventRulesListRequest) NameNisw(nameNisw []string) ApiExtrasEventRulesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectType(objectType string) ApiExtrasEventRulesListRequest {
	r.objectType = &objectType
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeIc(objectTypeIc string) ApiExtrasEventRulesListRequest {
	r.objectTypeIc = &objectTypeIc
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeIe(objectTypeIe string) ApiExtrasEventRulesListRequest {
	r.objectTypeIe = &objectTypeIe
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeIew(objectTypeIew string) ApiExtrasEventRulesListRequest {
	r.objectTypeIew = &objectTypeIew
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeIsw(objectTypeIsw string) ApiExtrasEventRulesListRequest {
	r.objectTypeIsw = &objectTypeIsw
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeN(objectTypeN string) ApiExtrasEventRulesListRequest {
	r.objectTypeN = &objectTypeN
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeNic(objectTypeNic string) ApiExtrasEventRulesListRequest {
	r.objectTypeNic = &objectTypeNic
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeNie(objectTypeNie string) ApiExtrasEventRulesListRequest {
	r.objectTypeNie = &objectTypeNie
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeNiew(objectTypeNiew string) ApiExtrasEventRulesListRequest {
	r.objectTypeNiew = &objectTypeNiew
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeNisw(objectTypeNisw string) ApiExtrasEventRulesListRequest {
	r.objectTypeNisw = &objectTypeNisw
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeId(objectTypeId []int32) ApiExtrasEventRulesListRequest {
	r.objectTypeId = &objectTypeId
	return r
}

func (r ApiExtrasEventRulesListRequest) ObjectTypeIdN(objectTypeIdN []int32) ApiExtrasEventRulesListRequest {
	r.objectTypeIdN = &objectTypeIdN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasEventRulesListRequest) Offset(offset int32) ApiExtrasEventRulesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasEventRulesListRequest) Ordering(ordering string) ApiExtrasEventRulesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasEventRulesListRequest) Q(q string) ApiExtrasEventRulesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasEventRulesListRequest) Tag(tag []string) ApiExtrasEventRulesListRequest {
	r.tag = &tag
	return r
}

func (r ApiExtrasEventRulesListRequest) TagN(tagN []string) ApiExtrasEventRulesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiExtrasEventRulesListRequest) TypeCreate(typeCreate bool) ApiExtrasEventRulesListRequest {
	r.typeCreate = &typeCreate
	return r
}

func (r ApiExtrasEventRulesListRequest) TypeDelete(typeDelete bool) ApiExtrasEventRulesListRequest {
	r.typeDelete = &typeDelete
	return r
}

func (r ApiExtrasEventRulesListRequest) TypeJobEnd(typeJobEnd bool) ApiExtrasEventRulesListRequest {
	r.typeJobEnd = &typeJobEnd
	return r
}

func (r ApiExtrasEventRulesListRequest) TypeJobStart(typeJobStart bool) ApiExtrasEventRulesListRequest {
	r.typeJobStart = &typeJobStart
	return r
}

func (r ApiExtrasEventRulesListRequest) TypeUpdate(typeUpdate bool) ApiExtrasEventRulesListRequest {
	r.typeUpdate = &typeUpdate
	return r
}

func (r ApiExtrasEventRulesListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasEventRulesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasEventRulesListRequest) Execute() (*PaginatedEventRuleList, *http.Response, error) {
	return r.ApiService.ExtrasEventRulesListExecute(r)
}

/*
ExtrasEventRulesList Method for ExtrasEventRulesList

Get a list of event rule objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasEventRulesListRequest
*/
func (a *ExtrasAPIService) ExtrasEventRulesList(ctx context.Context) ApiExtrasEventRulesListRequest {
	return ApiExtrasEventRulesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedEventRuleList
func (a *ExtrasAPIService) ExtrasEventRulesListExecute(r ApiExtrasEventRulesListRequest) (*PaginatedEventRuleList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedEventRuleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasEventRulesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/event-rules/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.actionObjectId != nil {
		t := *r.actionObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id", t, "multi")
		}
	}
	if r.actionObjectIdEmpty != nil {
		t := *r.actionObjectIdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__empty", t, "multi")
		}
	}
	if r.actionObjectIdGt != nil {
		t := *r.actionObjectIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__gt", t, "multi")
		}
	}
	if r.actionObjectIdGte != nil {
		t := *r.actionObjectIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__gte", t, "multi")
		}
	}
	if r.actionObjectIdLt != nil {
		t := *r.actionObjectIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__lt", t, "multi")
		}
	}
	if r.actionObjectIdLte != nil {
		t := *r.actionObjectIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__lte", t, "multi")
		}
	}
	if r.actionObjectIdN != nil {
		t := *r.actionObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_id__n", t, "multi")
		}
	}
	if r.actionObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_type", r.actionObjectType, "")
	}
	if r.actionObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action_object_type__n", r.actionObjectTypeN, "")
	}
	if r.actionType != nil {
		t := *r.actionType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action_type", t, "multi")
		}
	}
	if r.actionTypeN != nil {
		t := *r.actionTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "action_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "action_type__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType, "")
	}
	if r.objectTypeIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ic", r.objectTypeIc, "")
	}
	if r.objectTypeIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ie", r.objectTypeIe, "")
	}
	if r.objectTypeIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__iew", r.objectTypeIew, "")
	}
	if r.objectTypeIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__isw", r.objectTypeIsw, "")
	}
	if r.objectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__n", r.objectTypeN, "")
	}
	if r.objectTypeNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nic", r.objectTypeNic, "")
	}
	if r.objectTypeNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nie", r.objectTypeNie, "")
	}
	if r.objectTypeNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__niew", r.objectTypeNiew, "")
	}
	if r.objectTypeNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nisw", r.objectTypeNisw, "")
	}
	if r.objectTypeId != nil {
		t := *r.objectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", t, "multi")
		}
	}
	if r.objectTypeIdN != nil {
		t := *r.objectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.typeCreate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_create", r.typeCreate, "")
	}
	if r.typeDelete != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_delete", r.typeDelete, "")
	}
	if r.typeJobEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_job_end", r.typeJobEnd, "")
	}
	if r.typeJobStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_job_start", r.typeJobStart, "")
	}
	if r.typeUpdate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_update", r.typeUpdate, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasEventRulesPartialUpdateRequest struct {
	ctx                             context.Context
	ApiService                      *ExtrasAPIService
	id                              int32
	patchedWritableEventRuleRequest *PatchedWritableEventRuleRequest
}

func (r ApiExtrasEventRulesPartialUpdateRequest) PatchedWritableEventRuleRequest(patchedWritableEventRuleRequest PatchedWritableEventRuleRequest) ApiExtrasEventRulesPartialUpdateRequest {
	r.patchedWritableEventRuleRequest = &patchedWritableEventRuleRequest
	return r
}

func (r ApiExtrasEventRulesPartialUpdateRequest) Execute() (*EventRule, *http.Response, error) {
	return r.ApiService.ExtrasEventRulesPartialUpdateExecute(r)
}

/*
ExtrasEventRulesPartialUpdate Method for ExtrasEventRulesPartialUpdate

Patch a event rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this event rule.
	@return ApiExtrasEventRulesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasEventRulesPartialUpdate(ctx context.Context, id int32) ApiExtrasEventRulesPartialUpdateRequest {
	return ApiExtrasEventRulesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EventRule
func (a *ExtrasAPIService) ExtrasEventRulesPartialUpdateExecute(r ApiExtrasEventRulesPartialUpdateRequest) (*EventRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EventRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasEventRulesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/event-rules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableEventRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasEventRulesRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasEventRulesRetrieveRequest) Execute() (*EventRule, *http.Response, error) {
	return r.ApiService.ExtrasEventRulesRetrieveExecute(r)
}

/*
ExtrasEventRulesRetrieve Method for ExtrasEventRulesRetrieve

Get a event rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this event rule.
	@return ApiExtrasEventRulesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasEventRulesRetrieve(ctx context.Context, id int32) ApiExtrasEventRulesRetrieveRequest {
	return ApiExtrasEventRulesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EventRule
func (a *ExtrasAPIService) ExtrasEventRulesRetrieveExecute(r ApiExtrasEventRulesRetrieveRequest) (*EventRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EventRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasEventRulesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/event-rules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasEventRulesUpdateRequest struct {
	ctx                      context.Context
	ApiService               *ExtrasAPIService
	id                       int32
	writableEventRuleRequest *WritableEventRuleRequest
}

func (r ApiExtrasEventRulesUpdateRequest) WritableEventRuleRequest(writableEventRuleRequest WritableEventRuleRequest) ApiExtrasEventRulesUpdateRequest {
	r.writableEventRuleRequest = &writableEventRuleRequest
	return r
}

func (r ApiExtrasEventRulesUpdateRequest) Execute() (*EventRule, *http.Response, error) {
	return r.ApiService.ExtrasEventRulesUpdateExecute(r)
}

/*
ExtrasEventRulesUpdate Method for ExtrasEventRulesUpdate

Put a event rule object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this event rule.
	@return ApiExtrasEventRulesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasEventRulesUpdate(ctx context.Context, id int32) ApiExtrasEventRulesUpdateRequest {
	return ApiExtrasEventRulesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EventRule
func (a *ExtrasAPIService) ExtrasEventRulesUpdateExecute(r ApiExtrasEventRulesUpdateRequest) (*EventRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EventRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasEventRulesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/event-rules/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableEventRuleRequest == nil {
		return localVarReturnValue, nil, reportError("writableEventRuleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableEventRuleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesBulkDestroyRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	exportTemplateRequest *[]ExportTemplateRequest
}

func (r ApiExtrasExportTemplatesBulkDestroyRequest) ExportTemplateRequest(exportTemplateRequest []ExportTemplateRequest) ApiExtrasExportTemplatesBulkDestroyRequest {
	r.exportTemplateRequest = &exportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesBulkDestroyExecute(r)
}

/*
ExtrasExportTemplatesBulkDestroy Method for ExtrasExportTemplatesBulkDestroy

Delete a list of export template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasExportTemplatesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkDestroy(ctx context.Context) ApiExtrasExportTemplatesBulkDestroyRequest {
	return ApiExtrasExportTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkDestroyExecute(r ApiExtrasExportTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplateRequest == nil {
		return nil, reportError("exportTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesBulkPartialUpdateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	exportTemplateRequest *[]ExportTemplateRequest
}

func (r ApiExtrasExportTemplatesBulkPartialUpdateRequest) ExportTemplateRequest(exportTemplateRequest []ExportTemplateRequest) ApiExtrasExportTemplatesBulkPartialUpdateRequest {
	r.exportTemplateRequest = &exportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesBulkPartialUpdateRequest) Execute() ([]ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesBulkPartialUpdateExecute(r)
}

/*
ExtrasExportTemplatesBulkPartialUpdate Method for ExtrasExportTemplatesBulkPartialUpdate

Patch a list of export template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasExportTemplatesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkPartialUpdate(ctx context.Context) ApiExtrasExportTemplatesBulkPartialUpdateRequest {
	return ApiExtrasExportTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkPartialUpdateExecute(r ApiExtrasExportTemplatesBulkPartialUpdateRequest) ([]ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("exportTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesBulkUpdateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	exportTemplateRequest *[]ExportTemplateRequest
}

func (r ApiExtrasExportTemplatesBulkUpdateRequest) ExportTemplateRequest(exportTemplateRequest []ExportTemplateRequest) ApiExtrasExportTemplatesBulkUpdateRequest {
	r.exportTemplateRequest = &exportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesBulkUpdateRequest) Execute() ([]ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesBulkUpdateExecute(r)
}

/*
ExtrasExportTemplatesBulkUpdate Method for ExtrasExportTemplatesBulkUpdate

Put a list of export template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasExportTemplatesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkUpdate(ctx context.Context) ApiExtrasExportTemplatesBulkUpdateRequest {
	return ApiExtrasExportTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesBulkUpdateExecute(r ApiExtrasExportTemplatesBulkUpdateRequest) ([]ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("exportTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesCreateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	exportTemplateRequest *ExportTemplateRequest
}

func (r ApiExtrasExportTemplatesCreateRequest) ExportTemplateRequest(exportTemplateRequest ExportTemplateRequest) ApiExtrasExportTemplatesCreateRequest {
	r.exportTemplateRequest = &exportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesCreateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesCreateExecute(r)
}

/*
ExtrasExportTemplatesCreate Method for ExtrasExportTemplatesCreate

Post a list of export template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasExportTemplatesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesCreate(ctx context.Context) ApiExtrasExportTemplatesCreateRequest {
	return ApiExtrasExportTemplatesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesCreateExecute(r ApiExtrasExportTemplatesCreateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("exportTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasExportTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesDestroyExecute(r)
}

/*
ExtrasExportTemplatesDestroy Method for ExtrasExportTemplatesDestroy

Delete a export template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this export template.
	@return ApiExtrasExportTemplatesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesDestroy(ctx context.Context, id int32) ApiExtrasExportTemplatesDestroyRequest {
	return ApiExtrasExportTemplatesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasExportTemplatesDestroyExecute(r ApiExtrasExportTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesListRequest struct {
	ctx                context.Context
	ApiService         *ExtrasAPIService
	asAttachment       *bool
	autoSyncEnabled    *bool
	created            *[]time.Time
	createdEmpty       *[]time.Time
	createdGt          *[]time.Time
	createdGte         *[]time.Time
	createdLt          *[]time.Time
	createdLte         *[]time.Time
	createdN           *[]time.Time
	createdByRequest   *string
	dataFileId         *[]*int32
	dataFileIdN        *[]*int32
	dataSourceId       *[]*int32
	dataSourceIdN      *[]*int32
	dataSynced         *[]time.Time
	dataSyncedEmpty    *bool
	dataSyncedGt       *[]time.Time
	dataSyncedGte      *[]time.Time
	dataSyncedLt       *[]time.Time
	dataSyncedLte      *[]time.Time
	dataSyncedN        *[]time.Time
	description        *[]string
	descriptionEmpty   *bool
	descriptionIc      *[]string
	descriptionIe      *[]string
	descriptionIew     *[]string
	descriptionIsw     *[]string
	descriptionN       *[]string
	descriptionNic     *[]string
	descriptionNie     *[]string
	descriptionNiew    *[]string
	descriptionNisw    *[]string
	fileExtension      *[]string
	fileExtensionEmpty *bool
	fileExtensionIc    *[]string
	fileExtensionIe    *[]string
	fileExtensionIew   *[]string
	fileExtensionIsw   *[]string
	fileExtensionN     *[]string
	fileExtensionNic   *[]string
	fileExtensionNie   *[]string
	fileExtensionNiew  *[]string
	fileExtensionNisw  *[]string
	id                 *[]int32
	idEmpty            *bool
	idGt               *[]int32
	idGte              *[]int32
	idLt               *[]int32
	idLte              *[]int32
	idN                *[]int32
	lastUpdated        *[]time.Time
	lastUpdatedEmpty   *[]time.Time
	lastUpdatedGt      *[]time.Time
	lastUpdatedGte     *[]time.Time
	lastUpdatedLt      *[]time.Time
	lastUpdatedLte     *[]time.Time
	lastUpdatedN       *[]time.Time
	limit              *int32
	mimeType           *[]string
	mimeTypeEmpty      *bool
	mimeTypeIc         *[]string
	mimeTypeIe         *[]string
	mimeTypeIew        *[]string
	mimeTypeIsw        *[]string
	mimeTypeN          *[]string
	mimeTypeNic        *[]string
	mimeTypeNie        *[]string
	mimeTypeNiew       *[]string
	mimeTypeNisw       *[]string
	modifiedByRequest  *string
	name               *[]string
	nameEmpty          *bool
	nameIc             *[]string
	nameIe             *[]string
	nameIew            *[]string
	nameIsw            *[]string
	nameN              *[]string
	nameNic            *[]string
	nameNie            *[]string
	nameNiew           *[]string
	nameNisw           *[]string
	objectType         *string
	objectTypeIc       *string
	objectTypeIe       *string
	objectTypeIew      *string
	objectTypeIsw      *string
	objectTypeN        *string
	objectTypeNic      *string
	objectTypeNie      *string
	objectTypeNiew     *string
	objectTypeNisw     *string
	objectTypeId       *[]int32
	objectTypeIdN      *[]int32
	offset             *int32
	ordering           *string
	q                  *string
	updatedByRequest   *string
}

func (r ApiExtrasExportTemplatesListRequest) AsAttachment(asAttachment bool) ApiExtrasExportTemplatesListRequest {
	r.asAttachment = &asAttachment
	return r
}

func (r ApiExtrasExportTemplatesListRequest) AutoSyncEnabled(autoSyncEnabled bool) ApiExtrasExportTemplatesListRequest {
	r.autoSyncEnabled = &autoSyncEnabled
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Created(created []time.Time) ApiExtrasExportTemplatesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasExportTemplatesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasExportTemplatesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasExportTemplatesListRequest) CreatedGt(createdGt []time.Time) ApiExtrasExportTemplatesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasExportTemplatesListRequest) CreatedGte(createdGte []time.Time) ApiExtrasExportTemplatesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasExportTemplatesListRequest) CreatedLt(createdLt []time.Time) ApiExtrasExportTemplatesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasExportTemplatesListRequest) CreatedLte(createdLte []time.Time) ApiExtrasExportTemplatesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasExportTemplatesListRequest) CreatedN(createdN []time.Time) ApiExtrasExportTemplatesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) CreatedByRequest(createdByRequest string) ApiExtrasExportTemplatesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

// Data file (ID)
func (r ApiExtrasExportTemplatesListRequest) DataFileId(dataFileId []*int32) ApiExtrasExportTemplatesListRequest {
	r.dataFileId = &dataFileId
	return r
}

// Data file (ID)
func (r ApiExtrasExportTemplatesListRequest) DataFileIdN(dataFileIdN []*int32) ApiExtrasExportTemplatesListRequest {
	r.dataFileIdN = &dataFileIdN
	return r
}

// Data source (ID)
func (r ApiExtrasExportTemplatesListRequest) DataSourceId(dataSourceId []*int32) ApiExtrasExportTemplatesListRequest {
	r.dataSourceId = &dataSourceId
	return r
}

// Data source (ID)
func (r ApiExtrasExportTemplatesListRequest) DataSourceIdN(dataSourceIdN []*int32) ApiExtrasExportTemplatesListRequest {
	r.dataSourceIdN = &dataSourceIdN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DataSynced(dataSynced []time.Time) ApiExtrasExportTemplatesListRequest {
	r.dataSynced = &dataSynced
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DataSyncedEmpty(dataSyncedEmpty bool) ApiExtrasExportTemplatesListRequest {
	r.dataSyncedEmpty = &dataSyncedEmpty
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DataSyncedGt(dataSyncedGt []time.Time) ApiExtrasExportTemplatesListRequest {
	r.dataSyncedGt = &dataSyncedGt
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DataSyncedGte(dataSyncedGte []time.Time) ApiExtrasExportTemplatesListRequest {
	r.dataSyncedGte = &dataSyncedGte
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DataSyncedLt(dataSyncedLt []time.Time) ApiExtrasExportTemplatesListRequest {
	r.dataSyncedLt = &dataSyncedLt
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DataSyncedLte(dataSyncedLte []time.Time) ApiExtrasExportTemplatesListRequest {
	r.dataSyncedLte = &dataSyncedLte
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DataSyncedN(dataSyncedN []time.Time) ApiExtrasExportTemplatesListRequest {
	r.dataSyncedN = &dataSyncedN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Description(description []string) ApiExtrasExportTemplatesListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiExtrasExportTemplatesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionIc(descriptionIc []string) ApiExtrasExportTemplatesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionIe(descriptionIe []string) ApiExtrasExportTemplatesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionIew(descriptionIew []string) ApiExtrasExportTemplatesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasExportTemplatesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionN(descriptionN []string) ApiExtrasExportTemplatesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionNic(descriptionNic []string) ApiExtrasExportTemplatesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionNie(descriptionNie []string) ApiExtrasExportTemplatesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasExportTemplatesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasExportTemplatesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtension(fileExtension []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtension = &fileExtension
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionEmpty(fileExtensionEmpty bool) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionEmpty = &fileExtensionEmpty
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionIc(fileExtensionIc []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionIc = &fileExtensionIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionIe(fileExtensionIe []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionIe = &fileExtensionIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionIew(fileExtensionIew []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionIew = &fileExtensionIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionIsw(fileExtensionIsw []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionIsw = &fileExtensionIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionN(fileExtensionN []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionN = &fileExtensionN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionNic(fileExtensionNic []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionNic = &fileExtensionNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionNie(fileExtensionNie []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionNie = &fileExtensionNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionNiew(fileExtensionNiew []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionNiew = &fileExtensionNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) FileExtensionNisw(fileExtensionNisw []string) ApiExtrasExportTemplatesListRequest {
	r.fileExtensionNisw = &fileExtensionNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Id(id []int32) ApiExtrasExportTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdEmpty(idEmpty bool) ApiExtrasExportTemplatesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdGt(idGt []int32) ApiExtrasExportTemplatesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdGte(idGte []int32) ApiExtrasExportTemplatesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdLt(idLt []int32) ApiExtrasExportTemplatesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdLte(idLte []int32) ApiExtrasExportTemplatesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdN(idN []int32) ApiExtrasExportTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasExportTemplatesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasExportTemplatesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasExportTemplatesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasExportTemplatesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasExportTemplatesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasExportTemplatesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasExportTemplatesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasExportTemplatesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasExportTemplatesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasExportTemplatesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasExportTemplatesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasExportTemplatesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasExportTemplatesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasExportTemplatesListRequest) Limit(limit int32) ApiExtrasExportTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeType(mimeType []string) ApiExtrasExportTemplatesListRequest {
	r.mimeType = &mimeType
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeEmpty(mimeTypeEmpty bool) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeEmpty = &mimeTypeEmpty
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeIc(mimeTypeIc []string) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeIc = &mimeTypeIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeIe(mimeTypeIe []string) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeIe = &mimeTypeIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeIew(mimeTypeIew []string) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeIew = &mimeTypeIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeIsw(mimeTypeIsw []string) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeIsw = &mimeTypeIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeN(mimeTypeN []string) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeN = &mimeTypeN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeNic(mimeTypeNic []string) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeNic = &mimeTypeNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeNie(mimeTypeNie []string) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeNie = &mimeTypeNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeNiew(mimeTypeNiew []string) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeNiew = &mimeTypeNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) MimeTypeNisw(mimeTypeNisw []string) ApiExtrasExportTemplatesListRequest {
	r.mimeTypeNisw = &mimeTypeNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasExportTemplatesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Name(name []string) ApiExtrasExportTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameEmpty(nameEmpty bool) ApiExtrasExportTemplatesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIc(nameIc []string) ApiExtrasExportTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIe(nameIe []string) ApiExtrasExportTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIew(nameIew []string) ApiExtrasExportTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIsw(nameIsw []string) ApiExtrasExportTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameN(nameN []string) ApiExtrasExportTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNic(nameNic []string) ApiExtrasExportTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNie(nameNie []string) ApiExtrasExportTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNiew(nameNiew []string) ApiExtrasExportTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNisw(nameNisw []string) ApiExtrasExportTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectType(objectType string) ApiExtrasExportTemplatesListRequest {
	r.objectType = &objectType
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeIc(objectTypeIc string) ApiExtrasExportTemplatesListRequest {
	r.objectTypeIc = &objectTypeIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeIe(objectTypeIe string) ApiExtrasExportTemplatesListRequest {
	r.objectTypeIe = &objectTypeIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeIew(objectTypeIew string) ApiExtrasExportTemplatesListRequest {
	r.objectTypeIew = &objectTypeIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeIsw(objectTypeIsw string) ApiExtrasExportTemplatesListRequest {
	r.objectTypeIsw = &objectTypeIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeN(objectTypeN string) ApiExtrasExportTemplatesListRequest {
	r.objectTypeN = &objectTypeN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeNic(objectTypeNic string) ApiExtrasExportTemplatesListRequest {
	r.objectTypeNic = &objectTypeNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeNie(objectTypeNie string) ApiExtrasExportTemplatesListRequest {
	r.objectTypeNie = &objectTypeNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeNiew(objectTypeNiew string) ApiExtrasExportTemplatesListRequest {
	r.objectTypeNiew = &objectTypeNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeNisw(objectTypeNisw string) ApiExtrasExportTemplatesListRequest {
	r.objectTypeNisw = &objectTypeNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeId(objectTypeId []int32) ApiExtrasExportTemplatesListRequest {
	r.objectTypeId = &objectTypeId
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ObjectTypeIdN(objectTypeIdN []int32) ApiExtrasExportTemplatesListRequest {
	r.objectTypeIdN = &objectTypeIdN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasExportTemplatesListRequest) Offset(offset int32) ApiExtrasExportTemplatesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasExportTemplatesListRequest) Ordering(ordering string) ApiExtrasExportTemplatesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasExportTemplatesListRequest) Q(q string) ApiExtrasExportTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasExportTemplatesListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasExportTemplatesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Execute() (*PaginatedExportTemplateList, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesListExecute(r)
}

/*
ExtrasExportTemplatesList Method for ExtrasExportTemplatesList

Get a list of export template objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasExportTemplatesListRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesList(ctx context.Context) ApiExtrasExportTemplatesListRequest {
	return ApiExtrasExportTemplatesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedExportTemplateList
func (a *ExtrasAPIService) ExtrasExportTemplatesListExecute(r ApiExtrasExportTemplatesListRequest) (*PaginatedExportTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedExportTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.asAttachment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "as_attachment", r.asAttachment, "")
	}
	if r.autoSyncEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auto_sync_enabled", r.autoSyncEnabled, "")
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.dataFileId != nil {
		t := *r.dataFileId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id", t, "multi")
		}
	}
	if r.dataFileIdN != nil {
		t := *r.dataFileIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_file_id__n", t, "multi")
		}
	}
	if r.dataSourceId != nil {
		t := *r.dataSourceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id", t, "multi")
		}
	}
	if r.dataSourceIdN != nil {
		t := *r.dataSourceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_source_id__n", t, "multi")
		}
	}
	if r.dataSynced != nil {
		t := *r.dataSynced
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced", t, "multi")
		}
	}
	if r.dataSyncedEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__empty", r.dataSyncedEmpty, "")
	}
	if r.dataSyncedGt != nil {
		t := *r.dataSyncedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gt", t, "multi")
		}
	}
	if r.dataSyncedGte != nil {
		t := *r.dataSyncedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__gte", t, "multi")
		}
	}
	if r.dataSyncedLt != nil {
		t := *r.dataSyncedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lt", t, "multi")
		}
	}
	if r.dataSyncedLte != nil {
		t := *r.dataSyncedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__lte", t, "multi")
		}
	}
	if r.dataSyncedN != nil {
		t := *r.dataSyncedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "data_synced__n", t, "multi")
		}
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.fileExtension != nil {
		t := *r.fileExtension
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension", t, "multi")
		}
	}
	if r.fileExtensionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__empty", r.fileExtensionEmpty, "")
	}
	if r.fileExtensionIc != nil {
		t := *r.fileExtensionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__ic", t, "multi")
		}
	}
	if r.fileExtensionIe != nil {
		t := *r.fileExtensionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__ie", t, "multi")
		}
	}
	if r.fileExtensionIew != nil {
		t := *r.fileExtensionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__iew", t, "multi")
		}
	}
	if r.fileExtensionIsw != nil {
		t := *r.fileExtensionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__isw", t, "multi")
		}
	}
	if r.fileExtensionN != nil {
		t := *r.fileExtensionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__n", t, "multi")
		}
	}
	if r.fileExtensionNic != nil {
		t := *r.fileExtensionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__nic", t, "multi")
		}
	}
	if r.fileExtensionNie != nil {
		t := *r.fileExtensionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__nie", t, "multi")
		}
	}
	if r.fileExtensionNiew != nil {
		t := *r.fileExtensionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__niew", t, "multi")
		}
	}
	if r.fileExtensionNisw != nil {
		t := *r.fileExtensionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "file_extension__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.mimeType != nil {
		t := *r.mimeType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type", t, "multi")
		}
	}
	if r.mimeTypeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__empty", r.mimeTypeEmpty, "")
	}
	if r.mimeTypeIc != nil {
		t := *r.mimeTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__ic", t, "multi")
		}
	}
	if r.mimeTypeIe != nil {
		t := *r.mimeTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__ie", t, "multi")
		}
	}
	if r.mimeTypeIew != nil {
		t := *r.mimeTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__iew", t, "multi")
		}
	}
	if r.mimeTypeIsw != nil {
		t := *r.mimeTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__isw", t, "multi")
		}
	}
	if r.mimeTypeN != nil {
		t := *r.mimeTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__n", t, "multi")
		}
	}
	if r.mimeTypeNic != nil {
		t := *r.mimeTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__nic", t, "multi")
		}
	}
	if r.mimeTypeNie != nil {
		t := *r.mimeTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__nie", t, "multi")
		}
	}
	if r.mimeTypeNiew != nil {
		t := *r.mimeTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__niew", t, "multi")
		}
	}
	if r.mimeTypeNisw != nil {
		t := *r.mimeTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "mime_type__nisw", t, "multi")
		}
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType, "")
	}
	if r.objectTypeIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ic", r.objectTypeIc, "")
	}
	if r.objectTypeIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ie", r.objectTypeIe, "")
	}
	if r.objectTypeIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__iew", r.objectTypeIew, "")
	}
	if r.objectTypeIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__isw", r.objectTypeIsw, "")
	}
	if r.objectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__n", r.objectTypeN, "")
	}
	if r.objectTypeNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nic", r.objectTypeNic, "")
	}
	if r.objectTypeNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nie", r.objectTypeNie, "")
	}
	if r.objectTypeNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__niew", r.objectTypeNiew, "")
	}
	if r.objectTypeNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nisw", r.objectTypeNisw, "")
	}
	if r.objectTypeId != nil {
		t := *r.objectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", t, "multi")
		}
	}
	if r.objectTypeIdN != nil {
		t := *r.objectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesPartialUpdateRequest struct {
	ctx                          context.Context
	ApiService                   *ExtrasAPIService
	id                           int32
	patchedExportTemplateRequest *PatchedExportTemplateRequest
}

func (r ApiExtrasExportTemplatesPartialUpdateRequest) PatchedExportTemplateRequest(patchedExportTemplateRequest PatchedExportTemplateRequest) ApiExtrasExportTemplatesPartialUpdateRequest {
	r.patchedExportTemplateRequest = &patchedExportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesPartialUpdateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesPartialUpdateExecute(r)
}

/*
ExtrasExportTemplatesPartialUpdate Method for ExtrasExportTemplatesPartialUpdate

Patch a export template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this export template.
	@return ApiExtrasExportTemplatesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesPartialUpdate(ctx context.Context, id int32) ApiExtrasExportTemplatesPartialUpdateRequest {
	return ApiExtrasExportTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesPartialUpdateExecute(r ApiExtrasExportTemplatesPartialUpdateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedExportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasExportTemplatesRetrieveRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesRetrieveExecute(r)
}

/*
ExtrasExportTemplatesRetrieve Method for ExtrasExportTemplatesRetrieve

Get a export template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this export template.
	@return ApiExtrasExportTemplatesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesRetrieve(ctx context.Context, id int32) ApiExtrasExportTemplatesRetrieveRequest {
	return ApiExtrasExportTemplatesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesRetrieveExecute(r ApiExtrasExportTemplatesRetrieveRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesSyncCreateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	id                    int32
	exportTemplateRequest *ExportTemplateRequest
}

func (r ApiExtrasExportTemplatesSyncCreateRequest) ExportTemplateRequest(exportTemplateRequest ExportTemplateRequest) ApiExtrasExportTemplatesSyncCreateRequest {
	r.exportTemplateRequest = &exportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesSyncCreateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesSyncCreateExecute(r)
}

/*
ExtrasExportTemplatesSyncCreate Method for ExtrasExportTemplatesSyncCreate

Provide a /sync API endpoint to synchronize an object's data from its associated DataFile (if any).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this export template.
	@return ApiExtrasExportTemplatesSyncCreateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesSyncCreate(ctx context.Context, id int32) ApiExtrasExportTemplatesSyncCreateRequest {
	return ApiExtrasExportTemplatesSyncCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesSyncCreateExecute(r ApiExtrasExportTemplatesSyncCreateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesSyncCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/{id}/sync/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("exportTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesUpdateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	id                    int32
	exportTemplateRequest *ExportTemplateRequest
}

func (r ApiExtrasExportTemplatesUpdateRequest) ExportTemplateRequest(exportTemplateRequest ExportTemplateRequest) ApiExtrasExportTemplatesUpdateRequest {
	r.exportTemplateRequest = &exportTemplateRequest
	return r
}

func (r ApiExtrasExportTemplatesUpdateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesUpdateExecute(r)
}

/*
ExtrasExportTemplatesUpdate Method for ExtrasExportTemplatesUpdate

Put a export template object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this export template.
	@return ApiExtrasExportTemplatesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasExportTemplatesUpdate(ctx context.Context, id int32) ApiExtrasExportTemplatesUpdateRequest {
	return ApiExtrasExportTemplatesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ExportTemplate
func (a *ExtrasAPIService) ExtrasExportTemplatesUpdateExecute(r ApiExtrasExportTemplatesUpdateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasExportTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplateRequest == nil {
		return localVarReturnValue, nil, reportError("exportTemplateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsBulkDestroyRequest struct {
	ctx                    context.Context
	ApiService             *ExtrasAPIService
	imageAttachmentRequest *[]ImageAttachmentRequest
}

func (r ApiExtrasImageAttachmentsBulkDestroyRequest) ImageAttachmentRequest(imageAttachmentRequest []ImageAttachmentRequest) ApiExtrasImageAttachmentsBulkDestroyRequest {
	r.imageAttachmentRequest = &imageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsBulkDestroyExecute(r)
}

/*
ExtrasImageAttachmentsBulkDestroy Method for ExtrasImageAttachmentsBulkDestroy

Delete a list of image attachment objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasImageAttachmentsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkDestroy(ctx context.Context) ApiExtrasImageAttachmentsBulkDestroyRequest {
	return ApiExtrasImageAttachmentsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkDestroyExecute(r ApiExtrasImageAttachmentsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachmentRequest == nil {
		return nil, reportError("imageAttachmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsBulkPartialUpdateRequest struct {
	ctx                    context.Context
	ApiService             *ExtrasAPIService
	imageAttachmentRequest *[]ImageAttachmentRequest
}

func (r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) ImageAttachmentRequest(imageAttachmentRequest []ImageAttachmentRequest) ApiExtrasImageAttachmentsBulkPartialUpdateRequest {
	r.imageAttachmentRequest = &imageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) Execute() ([]ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsBulkPartialUpdateExecute(r)
}

/*
ExtrasImageAttachmentsBulkPartialUpdate Method for ExtrasImageAttachmentsBulkPartialUpdate

Patch a list of image attachment objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasImageAttachmentsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkPartialUpdate(ctx context.Context) ApiExtrasImageAttachmentsBulkPartialUpdateRequest {
	return ApiExtrasImageAttachmentsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkPartialUpdateExecute(r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) ([]ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachmentRequest == nil {
		return localVarReturnValue, nil, reportError("imageAttachmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsBulkUpdateRequest struct {
	ctx                    context.Context
	ApiService             *ExtrasAPIService
	imageAttachmentRequest *[]ImageAttachmentRequest
}

func (r ApiExtrasImageAttachmentsBulkUpdateRequest) ImageAttachmentRequest(imageAttachmentRequest []ImageAttachmentRequest) ApiExtrasImageAttachmentsBulkUpdateRequest {
	r.imageAttachmentRequest = &imageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsBulkUpdateRequest) Execute() ([]ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsBulkUpdateExecute(r)
}

/*
ExtrasImageAttachmentsBulkUpdate Method for ExtrasImageAttachmentsBulkUpdate

Put a list of image attachment objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasImageAttachmentsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkUpdate(ctx context.Context) ApiExtrasImageAttachmentsBulkUpdateRequest {
	return ApiExtrasImageAttachmentsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsBulkUpdateExecute(r ApiExtrasImageAttachmentsBulkUpdateRequest) ([]ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachmentRequest == nil {
		return localVarReturnValue, nil, reportError("imageAttachmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsCreateRequest struct {
	ctx                    context.Context
	ApiService             *ExtrasAPIService
	imageAttachmentRequest *ImageAttachmentRequest
}

func (r ApiExtrasImageAttachmentsCreateRequest) ImageAttachmentRequest(imageAttachmentRequest ImageAttachmentRequest) ApiExtrasImageAttachmentsCreateRequest {
	r.imageAttachmentRequest = &imageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsCreateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsCreateExecute(r)
}

/*
ExtrasImageAttachmentsCreate Method for ExtrasImageAttachmentsCreate

Post a list of image attachment objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasImageAttachmentsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsCreate(ctx context.Context) ApiExtrasImageAttachmentsCreateRequest {
	return ApiExtrasImageAttachmentsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsCreateExecute(r ApiExtrasImageAttachmentsCreateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachmentRequest == nil {
		return localVarReturnValue, nil, reportError("imageAttachmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasImageAttachmentsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsDestroyExecute(r)
}

/*
ExtrasImageAttachmentsDestroy Method for ExtrasImageAttachmentsDestroy

Delete a image attachment object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this image attachment.
	@return ApiExtrasImageAttachmentsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsDestroy(ctx context.Context, id int32) ApiExtrasImageAttachmentsDestroyRequest {
	return ApiExtrasImageAttachmentsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasImageAttachmentsDestroyExecute(r ApiExtrasImageAttachmentsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsListRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	imageHeight       *[]int32
	imageHeightEmpty  *bool
	imageHeightGt     *[]int32
	imageHeightGte    *[]int32
	imageHeightLt     *[]int32
	imageHeightLte    *[]int32
	imageHeightN      *[]int32
	imageWidth        *[]int32
	imageWidthEmpty   *bool
	imageWidthGt      *[]int32
	imageWidthGte     *[]int32
	imageWidthLt      *[]int32
	imageWidthLte     *[]int32
	imageWidthN       *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	objectId          *[]int32
	objectIdEmpty     *bool
	objectIdGt        *[]int32
	objectIdGte       *[]int32
	objectIdLt        *[]int32
	objectIdLte       *[]int32
	objectIdN         *[]int32
	objectType        *string
	objectTypeN       *string
	objectTypeId      *int32
	objectTypeIdN     *int32
	offset            *int32
	ordering          *string
	q                 *string
	updatedByRequest  *string
}

func (r ApiExtrasImageAttachmentsListRequest) Created(created []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) CreatedN(createdN []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) CreatedByRequest(createdByRequest string) ApiExtrasImageAttachmentsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) Id(id []int32) ApiExtrasImageAttachmentsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdEmpty(idEmpty bool) ApiExtrasImageAttachmentsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdGt(idGt []int32) ApiExtrasImageAttachmentsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdGte(idGte []int32) ApiExtrasImageAttachmentsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdLt(idLt []int32) ApiExtrasImageAttachmentsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdLte(idLte []int32) ApiExtrasImageAttachmentsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdN(idN []int32) ApiExtrasImageAttachmentsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageHeight(imageHeight []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageHeight = &imageHeight
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageHeightEmpty(imageHeightEmpty bool) ApiExtrasImageAttachmentsListRequest {
	r.imageHeightEmpty = &imageHeightEmpty
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageHeightGt(imageHeightGt []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageHeightGt = &imageHeightGt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageHeightGte(imageHeightGte []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageHeightGte = &imageHeightGte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageHeightLt(imageHeightLt []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageHeightLt = &imageHeightLt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageHeightLte(imageHeightLte []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageHeightLte = &imageHeightLte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageHeightN(imageHeightN []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageHeightN = &imageHeightN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageWidth(imageWidth []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageWidth = &imageWidth
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageWidthEmpty(imageWidthEmpty bool) ApiExtrasImageAttachmentsListRequest {
	r.imageWidthEmpty = &imageWidthEmpty
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageWidthGt(imageWidthGt []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageWidthGt = &imageWidthGt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageWidthGte(imageWidthGte []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageWidthGte = &imageWidthGte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageWidthLt(imageWidthLt []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageWidthLt = &imageWidthLt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageWidthLte(imageWidthLte []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageWidthLte = &imageWidthLte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ImageWidthN(imageWidthN []int32) ApiExtrasImageAttachmentsListRequest {
	r.imageWidthN = &imageWidthN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasImageAttachmentsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasImageAttachmentsListRequest) Limit(limit int32) ApiExtrasImageAttachmentsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasImageAttachmentsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) Name(name []string) ApiExtrasImageAttachmentsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameEmpty(nameEmpty bool) ApiExtrasImageAttachmentsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIc(nameIc []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIe(nameIe []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIew(nameIew []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIsw(nameIsw []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameN(nameN []string) ApiExtrasImageAttachmentsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNic(nameNic []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNie(nameNie []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNiew(nameNiew []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNisw(nameNisw []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectId(objectId []int32) ApiExtrasImageAttachmentsListRequest {
	r.objectId = &objectId
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdEmpty(objectIdEmpty bool) ApiExtrasImageAttachmentsListRequest {
	r.objectIdEmpty = &objectIdEmpty
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdGt(objectIdGt []int32) ApiExtrasImageAttachmentsListRequest {
	r.objectIdGt = &objectIdGt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdGte(objectIdGte []int32) ApiExtrasImageAttachmentsListRequest {
	r.objectIdGte = &objectIdGte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdLt(objectIdLt []int32) ApiExtrasImageAttachmentsListRequest {
	r.objectIdLt = &objectIdLt
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdLte(objectIdLte []int32) ApiExtrasImageAttachmentsListRequest {
	r.objectIdLte = &objectIdLte
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdN(objectIdN []int32) ApiExtrasImageAttachmentsListRequest {
	r.objectIdN = &objectIdN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectType(objectType string) ApiExtrasImageAttachmentsListRequest {
	r.objectType = &objectType
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectTypeN(objectTypeN string) ApiExtrasImageAttachmentsListRequest {
	r.objectTypeN = &objectTypeN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectTypeId(objectTypeId int32) ApiExtrasImageAttachmentsListRequest {
	r.objectTypeId = &objectTypeId
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectTypeIdN(objectTypeIdN int32) ApiExtrasImageAttachmentsListRequest {
	r.objectTypeIdN = &objectTypeIdN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasImageAttachmentsListRequest) Offset(offset int32) ApiExtrasImageAttachmentsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasImageAttachmentsListRequest) Ordering(ordering string) ApiExtrasImageAttachmentsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasImageAttachmentsListRequest) Q(q string) ApiExtrasImageAttachmentsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasImageAttachmentsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) Execute() (*PaginatedImageAttachmentList, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsListExecute(r)
}

/*
ExtrasImageAttachmentsList Method for ExtrasImageAttachmentsList

Get a list of image attachment objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasImageAttachmentsListRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsList(ctx context.Context) ApiExtrasImageAttachmentsListRequest {
	return ApiExtrasImageAttachmentsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedImageAttachmentList
func (a *ExtrasAPIService) ExtrasImageAttachmentsListExecute(r ApiExtrasImageAttachmentsListRequest) (*PaginatedImageAttachmentList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedImageAttachmentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.imageHeight != nil {
		t := *r.imageHeight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_height", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_height", t, "multi")
		}
	}
	if r.imageHeightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__empty", r.imageHeightEmpty, "")
	}
	if r.imageHeightGt != nil {
		t := *r.imageHeightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__gt", t, "multi")
		}
	}
	if r.imageHeightGte != nil {
		t := *r.imageHeightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__gte", t, "multi")
		}
	}
	if r.imageHeightLt != nil {
		t := *r.imageHeightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__lt", t, "multi")
		}
	}
	if r.imageHeightLte != nil {
		t := *r.imageHeightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__lte", t, "multi")
		}
	}
	if r.imageHeightN != nil {
		t := *r.imageHeightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_height__n", t, "multi")
		}
	}
	if r.imageWidth != nil {
		t := *r.imageWidth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_width", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_width", t, "multi")
		}
	}
	if r.imageWidthEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__empty", r.imageWidthEmpty, "")
	}
	if r.imageWidthGt != nil {
		t := *r.imageWidthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__gt", t, "multi")
		}
	}
	if r.imageWidthGte != nil {
		t := *r.imageWidthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__gte", t, "multi")
		}
	}
	if r.imageWidthLt != nil {
		t := *r.imageWidthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__lt", t, "multi")
		}
	}
	if r.imageWidthLte != nil {
		t := *r.imageWidthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__lte", t, "multi")
		}
	}
	if r.imageWidthN != nil {
		t := *r.imageWidthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "image_width__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.objectId != nil {
		t := *r.objectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", t, "multi")
		}
	}
	if r.objectIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__empty", r.objectIdEmpty, "")
	}
	if r.objectIdGt != nil {
		t := *r.objectIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gt", t, "multi")
		}
	}
	if r.objectIdGte != nil {
		t := *r.objectIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gte", t, "multi")
		}
	}
	if r.objectIdLt != nil {
		t := *r.objectIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lt", t, "multi")
		}
	}
	if r.objectIdLte != nil {
		t := *r.objectIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lte", t, "multi")
		}
	}
	if r.objectIdN != nil {
		t := *r.objectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__n", t, "multi")
		}
	}
	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType, "")
	}
	if r.objectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__n", r.objectTypeN, "")
	}
	if r.objectTypeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", r.objectTypeId, "")
	}
	if r.objectTypeIdN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", r.objectTypeIdN, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsPartialUpdateRequest struct {
	ctx                           context.Context
	ApiService                    *ExtrasAPIService
	id                            int32
	patchedImageAttachmentRequest *PatchedImageAttachmentRequest
}

func (r ApiExtrasImageAttachmentsPartialUpdateRequest) PatchedImageAttachmentRequest(patchedImageAttachmentRequest PatchedImageAttachmentRequest) ApiExtrasImageAttachmentsPartialUpdateRequest {
	r.patchedImageAttachmentRequest = &patchedImageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsPartialUpdateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsPartialUpdateExecute(r)
}

/*
ExtrasImageAttachmentsPartialUpdate Method for ExtrasImageAttachmentsPartialUpdate

Patch a image attachment object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this image attachment.
	@return ApiExtrasImageAttachmentsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsPartialUpdate(ctx context.Context, id int32) ApiExtrasImageAttachmentsPartialUpdateRequest {
	return ApiExtrasImageAttachmentsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsPartialUpdateExecute(r ApiExtrasImageAttachmentsPartialUpdateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedImageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasImageAttachmentsRetrieveRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsRetrieveExecute(r)
}

/*
ExtrasImageAttachmentsRetrieve Method for ExtrasImageAttachmentsRetrieve

Get a image attachment object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this image attachment.
	@return ApiExtrasImageAttachmentsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsRetrieve(ctx context.Context, id int32) ApiExtrasImageAttachmentsRetrieveRequest {
	return ApiExtrasImageAttachmentsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsRetrieveExecute(r ApiExtrasImageAttachmentsRetrieveRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsUpdateRequest struct {
	ctx                    context.Context
	ApiService             *ExtrasAPIService
	id                     int32
	imageAttachmentRequest *ImageAttachmentRequest
}

func (r ApiExtrasImageAttachmentsUpdateRequest) ImageAttachmentRequest(imageAttachmentRequest ImageAttachmentRequest) ApiExtrasImageAttachmentsUpdateRequest {
	r.imageAttachmentRequest = &imageAttachmentRequest
	return r
}

func (r ApiExtrasImageAttachmentsUpdateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsUpdateExecute(r)
}

/*
ExtrasImageAttachmentsUpdate Method for ExtrasImageAttachmentsUpdate

Put a image attachment object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this image attachment.
	@return ApiExtrasImageAttachmentsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasImageAttachmentsUpdate(ctx context.Context, id int32) ApiExtrasImageAttachmentsUpdateRequest {
	return ApiExtrasImageAttachmentsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ImageAttachment
func (a *ExtrasAPIService) ExtrasImageAttachmentsUpdateExecute(r ApiExtrasImageAttachmentsUpdateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasImageAttachmentsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachmentRequest == nil {
		return localVarReturnValue, nil, reportError("imageAttachmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJournalEntriesBulkDestroyRequest struct {
	ctx                 context.Context
	ApiService          *ExtrasAPIService
	journalEntryRequest *[]JournalEntryRequest
}

func (r ApiExtrasJournalEntriesBulkDestroyRequest) JournalEntryRequest(journalEntryRequest []JournalEntryRequest) ApiExtrasJournalEntriesBulkDestroyRequest {
	r.journalEntryRequest = &journalEntryRequest
	return r
}

func (r ApiExtrasJournalEntriesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJournalEntriesBulkDestroyExecute(r)
}

/*
ExtrasJournalEntriesBulkDestroy Method for ExtrasJournalEntriesBulkDestroy

Delete a list of journal entry objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasJournalEntriesBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJournalEntriesBulkDestroy(ctx context.Context) ApiExtrasJournalEntriesBulkDestroyRequest {
	return ApiExtrasJournalEntriesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJournalEntriesBulkDestroyExecute(r ApiExtrasJournalEntriesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJournalEntriesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/journal-entries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.journalEntryRequest == nil {
		return nil, reportError("journalEntryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.journalEntryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJournalEntriesBulkPartialUpdateRequest struct {
	ctx                 context.Context
	ApiService          *ExtrasAPIService
	journalEntryRequest *[]JournalEntryRequest
}

func (r ApiExtrasJournalEntriesBulkPartialUpdateRequest) JournalEntryRequest(journalEntryRequest []JournalEntryRequest) ApiExtrasJournalEntriesBulkPartialUpdateRequest {
	r.journalEntryRequest = &journalEntryRequest
	return r
}

func (r ApiExtrasJournalEntriesBulkPartialUpdateRequest) Execute() ([]JournalEntry, *http.Response, error) {
	return r.ApiService.ExtrasJournalEntriesBulkPartialUpdateExecute(r)
}

/*
ExtrasJournalEntriesBulkPartialUpdate Method for ExtrasJournalEntriesBulkPartialUpdate

Patch a list of journal entry objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasJournalEntriesBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJournalEntriesBulkPartialUpdate(ctx context.Context) ApiExtrasJournalEntriesBulkPartialUpdateRequest {
	return ApiExtrasJournalEntriesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []JournalEntry
func (a *ExtrasAPIService) ExtrasJournalEntriesBulkPartialUpdateExecute(r ApiExtrasJournalEntriesBulkPartialUpdateRequest) ([]JournalEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []JournalEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJournalEntriesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/journal-entries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.journalEntryRequest == nil {
		return localVarReturnValue, nil, reportError("journalEntryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.journalEntryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJournalEntriesBulkUpdateRequest struct {
	ctx                 context.Context
	ApiService          *ExtrasAPIService
	journalEntryRequest *[]JournalEntryRequest
}

func (r ApiExtrasJournalEntriesBulkUpdateRequest) JournalEntryRequest(journalEntryRequest []JournalEntryRequest) ApiExtrasJournalEntriesBulkUpdateRequest {
	r.journalEntryRequest = &journalEntryRequest
	return r
}

func (r ApiExtrasJournalEntriesBulkUpdateRequest) Execute() ([]JournalEntry, *http.Response, error) {
	return r.ApiService.ExtrasJournalEntriesBulkUpdateExecute(r)
}

/*
ExtrasJournalEntriesBulkUpdate Method for ExtrasJournalEntriesBulkUpdate

Put a list of journal entry objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasJournalEntriesBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJournalEntriesBulkUpdate(ctx context.Context) ApiExtrasJournalEntriesBulkUpdateRequest {
	return ApiExtrasJournalEntriesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []JournalEntry
func (a *ExtrasAPIService) ExtrasJournalEntriesBulkUpdateExecute(r ApiExtrasJournalEntriesBulkUpdateRequest) ([]JournalEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []JournalEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJournalEntriesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/journal-entries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.journalEntryRequest == nil {
		return localVarReturnValue, nil, reportError("journalEntryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.journalEntryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJournalEntriesCreateRequest struct {
	ctx                         context.Context
	ApiService                  *ExtrasAPIService
	writableJournalEntryRequest *WritableJournalEntryRequest
}

func (r ApiExtrasJournalEntriesCreateRequest) WritableJournalEntryRequest(writableJournalEntryRequest WritableJournalEntryRequest) ApiExtrasJournalEntriesCreateRequest {
	r.writableJournalEntryRequest = &writableJournalEntryRequest
	return r
}

func (r ApiExtrasJournalEntriesCreateRequest) Execute() (*JournalEntry, *http.Response, error) {
	return r.ApiService.ExtrasJournalEntriesCreateExecute(r)
}

/*
ExtrasJournalEntriesCreate Method for ExtrasJournalEntriesCreate

Post a list of journal entry objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasJournalEntriesCreateRequest
*/
func (a *ExtrasAPIService) ExtrasJournalEntriesCreate(ctx context.Context) ApiExtrasJournalEntriesCreateRequest {
	return ApiExtrasJournalEntriesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return JournalEntry
func (a *ExtrasAPIService) ExtrasJournalEntriesCreateExecute(r ApiExtrasJournalEntriesCreateRequest) (*JournalEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JournalEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJournalEntriesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/journal-entries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableJournalEntryRequest == nil {
		return localVarReturnValue, nil, reportError("writableJournalEntryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableJournalEntryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJournalEntriesDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasJournalEntriesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJournalEntriesDestroyExecute(r)
}

/*
ExtrasJournalEntriesDestroy Method for ExtrasJournalEntriesDestroy

Delete a journal entry object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this journal entry.
	@return ApiExtrasJournalEntriesDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasJournalEntriesDestroy(ctx context.Context, id int32) ApiExtrasJournalEntriesDestroyRequest {
	return ApiExtrasJournalEntriesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasJournalEntriesDestroyExecute(r ApiExtrasJournalEntriesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJournalEntriesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/journal-entries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJournalEntriesListRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	assignedObjectId      *[]int32
	assignedObjectIdEmpty *bool
	assignedObjectIdGt    *[]int32
	assignedObjectIdGte   *[]int32
	assignedObjectIdLt    *[]int32
	assignedObjectIdLte   *[]int32
	assignedObjectIdN     *[]int32
	assignedObjectType    *string
	assignedObjectTypeN   *string
	assignedObjectTypeId  *[]int32
	assignedObjectTypeIdN *[]int32
	createdAfter          *time.Time
	createdBefore         *time.Time
	createdBy             *[]string
	createdByN            *[]string
	createdById           *[]*int32
	createdByIdN          *[]*int32
	createdByRequest      *string
	id                    *[]int32
	idEmpty               *bool
	idGt                  *[]int32
	idGte                 *[]int32
	idLt                  *[]int32
	idLte                 *[]int32
	idN                   *[]int32
	kind                  *[]string
	kindN                 *[]string
	lastUpdated           *[]time.Time
	lastUpdatedEmpty      *[]time.Time
	lastUpdatedGt         *[]time.Time
	lastUpdatedGte        *[]time.Time
	lastUpdatedLt         *[]time.Time
	lastUpdatedLte        *[]time.Time
	lastUpdatedN          *[]time.Time
	limit                 *int32
	modifiedByRequest     *string
	offset                *int32
	ordering              *string
	q                     *string
	tag                   *[]string
	tagN                  *[]string
	updatedByRequest      *string
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectId(assignedObjectId []int32) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectId = &assignedObjectId
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectIdEmpty(assignedObjectIdEmpty bool) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectIdEmpty = &assignedObjectIdEmpty
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectIdGt(assignedObjectIdGt []int32) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectIdGt = &assignedObjectIdGt
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectIdGte(assignedObjectIdGte []int32) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectIdGte = &assignedObjectIdGte
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectIdLt(assignedObjectIdLt []int32) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectIdLt = &assignedObjectIdLt
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectIdLte(assignedObjectIdLte []int32) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectIdLte = &assignedObjectIdLte
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectIdN(assignedObjectIdN []int32) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectIdN = &assignedObjectIdN
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectType(assignedObjectType string) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectType = &assignedObjectType
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectTypeN(assignedObjectTypeN string) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectTypeN = &assignedObjectTypeN
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectTypeId(assignedObjectTypeId []int32) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectTypeId = &assignedObjectTypeId
	return r
}

func (r ApiExtrasJournalEntriesListRequest) AssignedObjectTypeIdN(assignedObjectTypeIdN []int32) ApiExtrasJournalEntriesListRequest {
	r.assignedObjectTypeIdN = &assignedObjectTypeIdN
	return r
}

func (r ApiExtrasJournalEntriesListRequest) CreatedAfter(createdAfter time.Time) ApiExtrasJournalEntriesListRequest {
	r.createdAfter = &createdAfter
	return r
}

func (r ApiExtrasJournalEntriesListRequest) CreatedBefore(createdBefore time.Time) ApiExtrasJournalEntriesListRequest {
	r.createdBefore = &createdBefore
	return r
}

// User (name)
func (r ApiExtrasJournalEntriesListRequest) CreatedBy(createdBy []string) ApiExtrasJournalEntriesListRequest {
	r.createdBy = &createdBy
	return r
}

// User (name)
func (r ApiExtrasJournalEntriesListRequest) CreatedByN(createdByN []string) ApiExtrasJournalEntriesListRequest {
	r.createdByN = &createdByN
	return r
}

// User (ID)
func (r ApiExtrasJournalEntriesListRequest) CreatedById(createdById []*int32) ApiExtrasJournalEntriesListRequest {
	r.createdById = &createdById
	return r
}

// User (ID)
func (r ApiExtrasJournalEntriesListRequest) CreatedByIdN(createdByIdN []*int32) ApiExtrasJournalEntriesListRequest {
	r.createdByIdN = &createdByIdN
	return r
}

func (r ApiExtrasJournalEntriesListRequest) CreatedByRequest(createdByRequest string) ApiExtrasJournalEntriesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiExtrasJournalEntriesListRequest) Id(id []int32) ApiExtrasJournalEntriesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasJournalEntriesListRequest) IdEmpty(idEmpty bool) ApiExtrasJournalEntriesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasJournalEntriesListRequest) IdGt(idGt []int32) ApiExtrasJournalEntriesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasJournalEntriesListRequest) IdGte(idGte []int32) ApiExtrasJournalEntriesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasJournalEntriesListRequest) IdLt(idLt []int32) ApiExtrasJournalEntriesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasJournalEntriesListRequest) IdLte(idLte []int32) ApiExtrasJournalEntriesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasJournalEntriesListRequest) IdN(idN []int32) ApiExtrasJournalEntriesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasJournalEntriesListRequest) Kind(kind []string) ApiExtrasJournalEntriesListRequest {
	r.kind = &kind
	return r
}

func (r ApiExtrasJournalEntriesListRequest) KindN(kindN []string) ApiExtrasJournalEntriesListRequest {
	r.kindN = &kindN
	return r
}

func (r ApiExtrasJournalEntriesListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasJournalEntriesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasJournalEntriesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasJournalEntriesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasJournalEntriesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasJournalEntriesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasJournalEntriesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasJournalEntriesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasJournalEntriesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasJournalEntriesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasJournalEntriesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasJournalEntriesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasJournalEntriesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasJournalEntriesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasJournalEntriesListRequest) Limit(limit int32) ApiExtrasJournalEntriesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasJournalEntriesListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasJournalEntriesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJournalEntriesListRequest) Offset(offset int32) ApiExtrasJournalEntriesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasJournalEntriesListRequest) Ordering(ordering string) ApiExtrasJournalEntriesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasJournalEntriesListRequest) Q(q string) ApiExtrasJournalEntriesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasJournalEntriesListRequest) Tag(tag []string) ApiExtrasJournalEntriesListRequest {
	r.tag = &tag
	return r
}

func (r ApiExtrasJournalEntriesListRequest) TagN(tagN []string) ApiExtrasJournalEntriesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiExtrasJournalEntriesListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasJournalEntriesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasJournalEntriesListRequest) Execute() (*PaginatedJournalEntryList, *http.Response, error) {
	return r.ApiService.ExtrasJournalEntriesListExecute(r)
}

/*
ExtrasJournalEntriesList Method for ExtrasJournalEntriesList

Get a list of journal entry objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasJournalEntriesListRequest
*/
func (a *ExtrasAPIService) ExtrasJournalEntriesList(ctx context.Context) ApiExtrasJournalEntriesListRequest {
	return ApiExtrasJournalEntriesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedJournalEntryList
func (a *ExtrasAPIService) ExtrasJournalEntriesListExecute(r ApiExtrasJournalEntriesListRequest) (*PaginatedJournalEntryList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedJournalEntryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJournalEntriesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/journal-entries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assignedObjectId != nil {
		t := *r.assignedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id", t, "multi")
		}
	}
	if r.assignedObjectIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__empty", r.assignedObjectIdEmpty, "")
	}
	if r.assignedObjectIdGt != nil {
		t := *r.assignedObjectIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gt", t, "multi")
		}
	}
	if r.assignedObjectIdGte != nil {
		t := *r.assignedObjectIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__gte", t, "multi")
		}
	}
	if r.assignedObjectIdLt != nil {
		t := *r.assignedObjectIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lt", t, "multi")
		}
	}
	if r.assignedObjectIdLte != nil {
		t := *r.assignedObjectIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__lte", t, "multi")
		}
	}
	if r.assignedObjectIdN != nil {
		t := *r.assignedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_id__n", t, "multi")
		}
	}
	if r.assignedObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type", r.assignedObjectType, "")
	}
	if r.assignedObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type__n", r.assignedObjectTypeN, "")
	}
	if r.assignedObjectTypeId != nil {
		t := *r.assignedObjectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id", t, "multi")
		}
	}
	if r.assignedObjectTypeIdN != nil {
		t := *r.assignedObjectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assigned_object_type_id__n", t, "multi")
		}
	}
	if r.createdAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_after", r.createdAfter, "")
	}
	if r.createdBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_before", r.createdBefore, "")
	}
	if r.createdBy != nil {
		t := *r.createdBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created_by", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created_by", t, "multi")
		}
	}
	if r.createdByN != nil {
		t := *r.createdByN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created_by__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created_by__n", t, "multi")
		}
	}
	if r.createdById != nil {
		t := *r.createdById
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_id", t, "multi")
		}
	}
	if r.createdByIdN != nil {
		t := *r.createdByIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_id__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.kind != nil {
		t := *r.kind
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "kind", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "kind", t, "multi")
		}
	}
	if r.kindN != nil {
		t := *r.kindN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "kind__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "kind__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJournalEntriesPartialUpdateRequest struct {
	ctx                                context.Context
	ApiService                         *ExtrasAPIService
	id                                 int32
	patchedWritableJournalEntryRequest *PatchedWritableJournalEntryRequest
}

func (r ApiExtrasJournalEntriesPartialUpdateRequest) PatchedWritableJournalEntryRequest(patchedWritableJournalEntryRequest PatchedWritableJournalEntryRequest) ApiExtrasJournalEntriesPartialUpdateRequest {
	r.patchedWritableJournalEntryRequest = &patchedWritableJournalEntryRequest
	return r
}

func (r ApiExtrasJournalEntriesPartialUpdateRequest) Execute() (*JournalEntry, *http.Response, error) {
	return r.ApiService.ExtrasJournalEntriesPartialUpdateExecute(r)
}

/*
ExtrasJournalEntriesPartialUpdate Method for ExtrasJournalEntriesPartialUpdate

Patch a journal entry object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this journal entry.
	@return ApiExtrasJournalEntriesPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJournalEntriesPartialUpdate(ctx context.Context, id int32) ApiExtrasJournalEntriesPartialUpdateRequest {
	return ApiExtrasJournalEntriesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return JournalEntry
func (a *ExtrasAPIService) ExtrasJournalEntriesPartialUpdateExecute(r ApiExtrasJournalEntriesPartialUpdateRequest) (*JournalEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JournalEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJournalEntriesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/journal-entries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableJournalEntryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJournalEntriesRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasJournalEntriesRetrieveRequest) Execute() (*JournalEntry, *http.Response, error) {
	return r.ApiService.ExtrasJournalEntriesRetrieveExecute(r)
}

/*
ExtrasJournalEntriesRetrieve Method for ExtrasJournalEntriesRetrieve

Get a journal entry object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this journal entry.
	@return ApiExtrasJournalEntriesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasJournalEntriesRetrieve(ctx context.Context, id int32) ApiExtrasJournalEntriesRetrieveRequest {
	return ApiExtrasJournalEntriesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return JournalEntry
func (a *ExtrasAPIService) ExtrasJournalEntriesRetrieveExecute(r ApiExtrasJournalEntriesRetrieveRequest) (*JournalEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JournalEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJournalEntriesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/journal-entries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJournalEntriesUpdateRequest struct {
	ctx                         context.Context
	ApiService                  *ExtrasAPIService
	id                          int32
	writableJournalEntryRequest *WritableJournalEntryRequest
}

func (r ApiExtrasJournalEntriesUpdateRequest) WritableJournalEntryRequest(writableJournalEntryRequest WritableJournalEntryRequest) ApiExtrasJournalEntriesUpdateRequest {
	r.writableJournalEntryRequest = &writableJournalEntryRequest
	return r
}

func (r ApiExtrasJournalEntriesUpdateRequest) Execute() (*JournalEntry, *http.Response, error) {
	return r.ApiService.ExtrasJournalEntriesUpdateExecute(r)
}

/*
ExtrasJournalEntriesUpdate Method for ExtrasJournalEntriesUpdate

Put a journal entry object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this journal entry.
	@return ApiExtrasJournalEntriesUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasJournalEntriesUpdate(ctx context.Context, id int32) ApiExtrasJournalEntriesUpdateRequest {
	return ApiExtrasJournalEntriesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return JournalEntry
func (a *ExtrasAPIService) ExtrasJournalEntriesUpdateExecute(r ApiExtrasJournalEntriesUpdateRequest) (*JournalEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JournalEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasJournalEntriesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/journal-entries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableJournalEntryRequest == nil {
		return localVarReturnValue, nil, reportError("writableJournalEntryRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableJournalEntryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectChangesListRequest struct {
	ctx                  context.Context
	ApiService           *ExtrasAPIService
	action               *ExtrasObjectChangesListActionParameter
	actionN              *ExtrasObjectChangesListActionParameter
	changedObjectId      *[]int32
	changedObjectIdEmpty *bool
	changedObjectIdGt    *[]int32
	changedObjectIdGte   *[]int32
	changedObjectIdLt    *[]int32
	changedObjectIdLte   *[]int32
	changedObjectIdN     *[]int32
	changedObjectType    *string
	changedObjectTypeN   *string
	changedObjectTypeId  *[]int32
	changedObjectTypeIdN *[]int32
	id                   *[]int32
	idEmpty              *bool
	idGt                 *[]int32
	idGte                *[]int32
	idLt                 *[]int32
	idLte                *[]int32
	idN                  *[]int32
	limit                *int32
	objectRepr           *[]string
	objectReprEmpty      *bool
	objectReprIc         *[]string
	objectReprIe         *[]string
	objectReprIew        *[]string
	objectReprIsw        *[]string
	objectReprN          *[]string
	objectReprNic        *[]string
	objectReprNie        *[]string
	objectReprNiew       *[]string
	objectReprNisw       *[]string
	offset               *int32
	ordering             *string
	q                    *string
	relatedObjectId      *[]int32
	relatedObjectIdEmpty *bool
	relatedObjectIdGt    *[]int32
	relatedObjectIdGte   *[]int32
	relatedObjectIdLt    *[]int32
	relatedObjectIdLte   *[]int32
	relatedObjectIdN     *[]int32
	relatedObjectType    *int32
	relatedObjectTypeN   *int32
	requestId            *string
	timeAfter            *time.Time
	timeBefore           *time.Time
	user                 *[]string
	userN                *[]string
	userId               *[]*int32
	userIdN              *[]*int32
	userName             *[]string
	userNameEmpty        *bool
	userNameIc           *[]string
	userNameIe           *[]string
	userNameIew          *[]string
	userNameIsw          *[]string
	userNameN            *[]string
	userNameNic          *[]string
	userNameNie          *[]string
	userNameNiew         *[]string
	userNameNisw         *[]string
}

// * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted
func (r ApiExtrasObjectChangesListRequest) Action(action ExtrasObjectChangesListActionParameter) ApiExtrasObjectChangesListRequest {
	r.action = &action
	return r
}

// * &#x60;create&#x60; - Created * &#x60;update&#x60; - Updated * &#x60;delete&#x60; - Deleted
func (r ApiExtrasObjectChangesListRequest) ActionN(actionN ExtrasObjectChangesListActionParameter) ApiExtrasObjectChangesListRequest {
	r.actionN = &actionN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectId(changedObjectId []int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectId = &changedObjectId
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdEmpty(changedObjectIdEmpty bool) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdEmpty = &changedObjectIdEmpty
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdGt(changedObjectIdGt []int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdGt = &changedObjectIdGt
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdGte(changedObjectIdGte []int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdGte = &changedObjectIdGte
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdLt(changedObjectIdLt []int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdLt = &changedObjectIdLt
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdLte(changedObjectIdLte []int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdLte = &changedObjectIdLte
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdN(changedObjectIdN []int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdN = &changedObjectIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectType(changedObjectType string) ApiExtrasObjectChangesListRequest {
	r.changedObjectType = &changedObjectType
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeN(changedObjectTypeN string) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeN = &changedObjectTypeN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeId(changedObjectTypeId []int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeId = &changedObjectTypeId
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeIdN(changedObjectTypeIdN []int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeIdN = &changedObjectTypeIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) Id(id []int32) ApiExtrasObjectChangesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdEmpty(idEmpty bool) ApiExtrasObjectChangesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdGt(idGt []int32) ApiExtrasObjectChangesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdGte(idGte []int32) ApiExtrasObjectChangesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdLt(idLt []int32) ApiExtrasObjectChangesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdLte(idLte []int32) ApiExtrasObjectChangesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdN(idN []int32) ApiExtrasObjectChangesListRequest {
	r.idN = &idN
	return r
}

// Number of results to return per page.
func (r ApiExtrasObjectChangesListRequest) Limit(limit int32) ApiExtrasObjectChangesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectRepr(objectRepr []string) ApiExtrasObjectChangesListRequest {
	r.objectRepr = &objectRepr
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprEmpty(objectReprEmpty bool) ApiExtrasObjectChangesListRequest {
	r.objectReprEmpty = &objectReprEmpty
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIc(objectReprIc []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIc = &objectReprIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIe(objectReprIe []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIe = &objectReprIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIew(objectReprIew []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIew = &objectReprIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIsw(objectReprIsw []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIsw = &objectReprIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprN(objectReprN []string) ApiExtrasObjectChangesListRequest {
	r.objectReprN = &objectReprN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNic(objectReprNic []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNic = &objectReprNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNie(objectReprNie []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNie = &objectReprNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNiew(objectReprNiew []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNiew = &objectReprNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNisw(objectReprNisw []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNisw = &objectReprNisw
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasObjectChangesListRequest) Offset(offset int32) ApiExtrasObjectChangesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasObjectChangesListRequest) Ordering(ordering string) ApiExtrasObjectChangesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasObjectChangesListRequest) Q(q string) ApiExtrasObjectChangesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasObjectChangesListRequest) RelatedObjectId(relatedObjectId []int32) ApiExtrasObjectChangesListRequest {
	r.relatedObjectId = &relatedObjectId
	return r
}

func (r ApiExtrasObjectChangesListRequest) RelatedObjectIdEmpty(relatedObjectIdEmpty bool) ApiExtrasObjectChangesListRequest {
	r.relatedObjectIdEmpty = &relatedObjectIdEmpty
	return r
}

func (r ApiExtrasObjectChangesListRequest) RelatedObjectIdGt(relatedObjectIdGt []int32) ApiExtrasObjectChangesListRequest {
	r.relatedObjectIdGt = &relatedObjectIdGt
	return r
}

func (r ApiExtrasObjectChangesListRequest) RelatedObjectIdGte(relatedObjectIdGte []int32) ApiExtrasObjectChangesListRequest {
	r.relatedObjectIdGte = &relatedObjectIdGte
	return r
}

func (r ApiExtrasObjectChangesListRequest) RelatedObjectIdLt(relatedObjectIdLt []int32) ApiExtrasObjectChangesListRequest {
	r.relatedObjectIdLt = &relatedObjectIdLt
	return r
}

func (r ApiExtrasObjectChangesListRequest) RelatedObjectIdLte(relatedObjectIdLte []int32) ApiExtrasObjectChangesListRequest {
	r.relatedObjectIdLte = &relatedObjectIdLte
	return r
}

func (r ApiExtrasObjectChangesListRequest) RelatedObjectIdN(relatedObjectIdN []int32) ApiExtrasObjectChangesListRequest {
	r.relatedObjectIdN = &relatedObjectIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) RelatedObjectType(relatedObjectType int32) ApiExtrasObjectChangesListRequest {
	r.relatedObjectType = &relatedObjectType
	return r
}

func (r ApiExtrasObjectChangesListRequest) RelatedObjectTypeN(relatedObjectTypeN int32) ApiExtrasObjectChangesListRequest {
	r.relatedObjectTypeN = &relatedObjectTypeN
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestId(requestId string) ApiExtrasObjectChangesListRequest {
	r.requestId = &requestId
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeAfter(timeAfter time.Time) ApiExtrasObjectChangesListRequest {
	r.timeAfter = &timeAfter
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeBefore(timeBefore time.Time) ApiExtrasObjectChangesListRequest {
	r.timeBefore = &timeBefore
	return r
}

// User name
func (r ApiExtrasObjectChangesListRequest) User(user []string) ApiExtrasObjectChangesListRequest {
	r.user = &user
	return r
}

// User name
func (r ApiExtrasObjectChangesListRequest) UserN(userN []string) ApiExtrasObjectChangesListRequest {
	r.userN = &userN
	return r
}

// User (ID)
func (r ApiExtrasObjectChangesListRequest) UserId(userId []*int32) ApiExtrasObjectChangesListRequest {
	r.userId = &userId
	return r
}

// User (ID)
func (r ApiExtrasObjectChangesListRequest) UserIdN(userIdN []*int32) ApiExtrasObjectChangesListRequest {
	r.userIdN = &userIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserName(userName []string) ApiExtrasObjectChangesListRequest {
	r.userName = &userName
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameEmpty(userNameEmpty bool) ApiExtrasObjectChangesListRequest {
	r.userNameEmpty = &userNameEmpty
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIc(userNameIc []string) ApiExtrasObjectChangesListRequest {
	r.userNameIc = &userNameIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIe(userNameIe []string) ApiExtrasObjectChangesListRequest {
	r.userNameIe = &userNameIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIew(userNameIew []string) ApiExtrasObjectChangesListRequest {
	r.userNameIew = &userNameIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIsw(userNameIsw []string) ApiExtrasObjectChangesListRequest {
	r.userNameIsw = &userNameIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameN(userNameN []string) ApiExtrasObjectChangesListRequest {
	r.userNameN = &userNameN
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNic(userNameNic []string) ApiExtrasObjectChangesListRequest {
	r.userNameNic = &userNameNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNie(userNameNie []string) ApiExtrasObjectChangesListRequest {
	r.userNameNie = &userNameNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNiew(userNameNiew []string) ApiExtrasObjectChangesListRequest {
	r.userNameNiew = &userNameNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNisw(userNameNisw []string) ApiExtrasObjectChangesListRequest {
	r.userNameNisw = &userNameNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) Execute() (*PaginatedObjectChangeList, *http.Response, error) {
	return r.ApiService.ExtrasObjectChangesListExecute(r)
}

/*
ExtrasObjectChangesList Method for ExtrasObjectChangesList

Retrieve a list of recent changes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasObjectChangesListRequest
*/
func (a *ExtrasAPIService) ExtrasObjectChangesList(ctx context.Context) ApiExtrasObjectChangesListRequest {
	return ApiExtrasObjectChangesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedObjectChangeList
func (a *ExtrasAPIService) ExtrasObjectChangesListExecute(r ApiExtrasObjectChangesListRequest) (*PaginatedObjectChangeList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedObjectChangeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectChangesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/object-changes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.action != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action", r.action, "")
	}
	if r.actionN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "action__n", r.actionN, "")
	}
	if r.changedObjectId != nil {
		t := *r.changedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id", t, "multi")
		}
	}
	if r.changedObjectIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__empty", r.changedObjectIdEmpty, "")
	}
	if r.changedObjectIdGt != nil {
		t := *r.changedObjectIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__gt", t, "multi")
		}
	}
	if r.changedObjectIdGte != nil {
		t := *r.changedObjectIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__gte", t, "multi")
		}
	}
	if r.changedObjectIdLt != nil {
		t := *r.changedObjectIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__lt", t, "multi")
		}
	}
	if r.changedObjectIdLte != nil {
		t := *r.changedObjectIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__lte", t, "multi")
		}
	}
	if r.changedObjectIdN != nil {
		t := *r.changedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_id__n", t, "multi")
		}
	}
	if r.changedObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type", r.changedObjectType, "")
	}
	if r.changedObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type__n", r.changedObjectTypeN, "")
	}
	if r.changedObjectTypeId != nil {
		t := *r.changedObjectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type_id", t, "multi")
		}
	}
	if r.changedObjectTypeIdN != nil {
		t := *r.changedObjectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "changed_object_type_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.objectRepr != nil {
		t := *r.objectRepr
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr", t, "multi")
		}
	}
	if r.objectReprEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__empty", r.objectReprEmpty, "")
	}
	if r.objectReprIc != nil {
		t := *r.objectReprIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ic", t, "multi")
		}
	}
	if r.objectReprIe != nil {
		t := *r.objectReprIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__ie", t, "multi")
		}
	}
	if r.objectReprIew != nil {
		t := *r.objectReprIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__iew", t, "multi")
		}
	}
	if r.objectReprIsw != nil {
		t := *r.objectReprIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__isw", t, "multi")
		}
	}
	if r.objectReprN != nil {
		t := *r.objectReprN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__n", t, "multi")
		}
	}
	if r.objectReprNic != nil {
		t := *r.objectReprNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nic", t, "multi")
		}
	}
	if r.objectReprNie != nil {
		t := *r.objectReprNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nie", t, "multi")
		}
	}
	if r.objectReprNiew != nil {
		t := *r.objectReprNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__niew", t, "multi")
		}
	}
	if r.objectReprNisw != nil {
		t := *r.objectReprNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_repr__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.relatedObjectId != nil {
		t := *r.relatedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id", t, "multi")
		}
	}
	if r.relatedObjectIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__empty", r.relatedObjectIdEmpty, "")
	}
	if r.relatedObjectIdGt != nil {
		t := *r.relatedObjectIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__gt", t, "multi")
		}
	}
	if r.relatedObjectIdGte != nil {
		t := *r.relatedObjectIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__gte", t, "multi")
		}
	}
	if r.relatedObjectIdLt != nil {
		t := *r.relatedObjectIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__lt", t, "multi")
		}
	}
	if r.relatedObjectIdLte != nil {
		t := *r.relatedObjectIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__lte", t, "multi")
		}
	}
	if r.relatedObjectIdN != nil {
		t := *r.relatedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_id__n", t, "multi")
		}
	}
	if r.relatedObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_type", r.relatedObjectType, "")
	}
	if r.relatedObjectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "related_object_type__n", r.relatedObjectTypeN, "")
	}
	if r.requestId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_id", r.requestId, "")
	}
	if r.timeAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time_after", r.timeAfter, "")
	}
	if r.timeBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time_before", r.timeBefore, "")
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "multi")
		}
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", t, "multi")
		}
	}
	if r.userId != nil {
		t := *r.userId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", t, "multi")
		}
	}
	if r.userIdN != nil {
		t := *r.userIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", t, "multi")
		}
	}
	if r.userName != nil {
		t := *r.userName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name", t, "multi")
		}
	}
	if r.userNameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__empty", r.userNameEmpty, "")
	}
	if r.userNameIc != nil {
		t := *r.userNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ic", t, "multi")
		}
	}
	if r.userNameIe != nil {
		t := *r.userNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__ie", t, "multi")
		}
	}
	if r.userNameIew != nil {
		t := *r.userNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__iew", t, "multi")
		}
	}
	if r.userNameIsw != nil {
		t := *r.userNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__isw", t, "multi")
		}
	}
	if r.userNameN != nil {
		t := *r.userNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__n", t, "multi")
		}
	}
	if r.userNameNic != nil {
		t := *r.userNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nic", t, "multi")
		}
	}
	if r.userNameNie != nil {
		t := *r.userNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nie", t, "multi")
		}
	}
	if r.userNameNiew != nil {
		t := *r.userNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__niew", t, "multi")
		}
	}
	if r.userNameNisw != nil {
		t := *r.userNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_name__nisw", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectChangesRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasObjectChangesRetrieveRequest) Execute() (*ObjectChange, *http.Response, error) {
	return r.ApiService.ExtrasObjectChangesRetrieveExecute(r)
}

/*
ExtrasObjectChangesRetrieve Method for ExtrasObjectChangesRetrieve

Retrieve a list of recent changes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this object change.
	@return ApiExtrasObjectChangesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasObjectChangesRetrieve(ctx context.Context, id int32) ApiExtrasObjectChangesRetrieveRequest {
	return ApiExtrasObjectChangesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ObjectChange
func (a *ExtrasAPIService) ExtrasObjectChangesRetrieveExecute(r ApiExtrasObjectChangesRetrieveRequest) (*ObjectChange, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ObjectChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectChangesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/object-changes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectTypesListRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	appLabel   *string
	id         *int32
	limit      *int32
	model      *string
	offset     *int32
	ordering   *string
	q          *string
}

func (r ApiExtrasObjectTypesListRequest) AppLabel(appLabel string) ApiExtrasObjectTypesListRequest {
	r.appLabel = &appLabel
	return r
}

func (r ApiExtrasObjectTypesListRequest) Id(id int32) ApiExtrasObjectTypesListRequest {
	r.id = &id
	return r
}

// Number of results to return per page.
func (r ApiExtrasObjectTypesListRequest) Limit(limit int32) ApiExtrasObjectTypesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasObjectTypesListRequest) Model(model string) ApiExtrasObjectTypesListRequest {
	r.model = &model
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasObjectTypesListRequest) Offset(offset int32) ApiExtrasObjectTypesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasObjectTypesListRequest) Ordering(ordering string) ApiExtrasObjectTypesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasObjectTypesListRequest) Q(q string) ApiExtrasObjectTypesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasObjectTypesListRequest) Execute() (*PaginatedObjectTypeList, *http.Response, error) {
	return r.ApiService.ExtrasObjectTypesListExecute(r)
}

/*
ExtrasObjectTypesList Method for ExtrasObjectTypesList

Read-only list of ObjectTypes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasObjectTypesListRequest
*/
func (a *ExtrasAPIService) ExtrasObjectTypesList(ctx context.Context) ApiExtrasObjectTypesListRequest {
	return ApiExtrasObjectTypesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedObjectTypeList
func (a *ExtrasAPIService) ExtrasObjectTypesListExecute(r ApiExtrasObjectTypesListRequest) (*PaginatedObjectTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedObjectTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/object-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.appLabel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "app_label", r.appLabel, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectTypesRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasObjectTypesRetrieveRequest) Execute() (*ObjectType, *http.Response, error) {
	return r.ApiService.ExtrasObjectTypesRetrieveExecute(r)
}

/*
ExtrasObjectTypesRetrieve Method for ExtrasObjectTypesRetrieve

Read-only list of ObjectTypes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this object type.
	@return ApiExtrasObjectTypesRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasObjectTypesRetrieve(ctx context.Context, id int32) ApiExtrasObjectTypesRetrieveRequest {
	return ApiExtrasObjectTypesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ObjectType
func (a *ExtrasAPIService) ExtrasObjectTypesRetrieveExecute(r ApiExtrasObjectTypesRetrieveRequest) (*ObjectType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ObjectType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasObjectTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/object-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedFiltersBulkDestroyRequest struct {
	ctx                context.Context
	ApiService         *ExtrasAPIService
	savedFilterRequest *[]SavedFilterRequest
}

func (r ApiExtrasSavedFiltersBulkDestroyRequest) SavedFilterRequest(savedFilterRequest []SavedFilterRequest) ApiExtrasSavedFiltersBulkDestroyRequest {
	r.savedFilterRequest = &savedFilterRequest
	return r
}

func (r ApiExtrasSavedFiltersBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSavedFiltersBulkDestroyExecute(r)
}

/*
ExtrasSavedFiltersBulkDestroy Method for ExtrasSavedFiltersBulkDestroy

Delete a list of saved filter objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasSavedFiltersBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSavedFiltersBulkDestroy(ctx context.Context) ApiExtrasSavedFiltersBulkDestroyRequest {
	return ApiExtrasSavedFiltersBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSavedFiltersBulkDestroyExecute(r ApiExtrasSavedFiltersBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedFiltersBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/saved-filters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.savedFilterRequest == nil {
		return nil, reportError("savedFilterRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.savedFilterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSavedFiltersBulkPartialUpdateRequest struct {
	ctx                context.Context
	ApiService         *ExtrasAPIService
	savedFilterRequest *[]SavedFilterRequest
}

func (r ApiExtrasSavedFiltersBulkPartialUpdateRequest) SavedFilterRequest(savedFilterRequest []SavedFilterRequest) ApiExtrasSavedFiltersBulkPartialUpdateRequest {
	r.savedFilterRequest = &savedFilterRequest
	return r
}

func (r ApiExtrasSavedFiltersBulkPartialUpdateRequest) Execute() ([]SavedFilter, *http.Response, error) {
	return r.ApiService.ExtrasSavedFiltersBulkPartialUpdateExecute(r)
}

/*
ExtrasSavedFiltersBulkPartialUpdate Method for ExtrasSavedFiltersBulkPartialUpdate

Patch a list of saved filter objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasSavedFiltersBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedFiltersBulkPartialUpdate(ctx context.Context) ApiExtrasSavedFiltersBulkPartialUpdateRequest {
	return ApiExtrasSavedFiltersBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SavedFilter
func (a *ExtrasAPIService) ExtrasSavedFiltersBulkPartialUpdateExecute(r ApiExtrasSavedFiltersBulkPartialUpdateRequest) ([]SavedFilter, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SavedFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedFiltersBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/saved-filters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.savedFilterRequest == nil {
		return localVarReturnValue, nil, reportError("savedFilterRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.savedFilterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedFiltersBulkUpdateRequest struct {
	ctx                context.Context
	ApiService         *ExtrasAPIService
	savedFilterRequest *[]SavedFilterRequest
}

func (r ApiExtrasSavedFiltersBulkUpdateRequest) SavedFilterRequest(savedFilterRequest []SavedFilterRequest) ApiExtrasSavedFiltersBulkUpdateRequest {
	r.savedFilterRequest = &savedFilterRequest
	return r
}

func (r ApiExtrasSavedFiltersBulkUpdateRequest) Execute() ([]SavedFilter, *http.Response, error) {
	return r.ApiService.ExtrasSavedFiltersBulkUpdateExecute(r)
}

/*
ExtrasSavedFiltersBulkUpdate Method for ExtrasSavedFiltersBulkUpdate

Put a list of saved filter objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasSavedFiltersBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedFiltersBulkUpdate(ctx context.Context) ApiExtrasSavedFiltersBulkUpdateRequest {
	return ApiExtrasSavedFiltersBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SavedFilter
func (a *ExtrasAPIService) ExtrasSavedFiltersBulkUpdateExecute(r ApiExtrasSavedFiltersBulkUpdateRequest) ([]SavedFilter, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SavedFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedFiltersBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/saved-filters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.savedFilterRequest == nil {
		return localVarReturnValue, nil, reportError("savedFilterRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.savedFilterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedFiltersCreateRequest struct {
	ctx                context.Context
	ApiService         *ExtrasAPIService
	savedFilterRequest *SavedFilterRequest
}

func (r ApiExtrasSavedFiltersCreateRequest) SavedFilterRequest(savedFilterRequest SavedFilterRequest) ApiExtrasSavedFiltersCreateRequest {
	r.savedFilterRequest = &savedFilterRequest
	return r
}

func (r ApiExtrasSavedFiltersCreateRequest) Execute() (*SavedFilter, *http.Response, error) {
	return r.ApiService.ExtrasSavedFiltersCreateExecute(r)
}

/*
ExtrasSavedFiltersCreate Method for ExtrasSavedFiltersCreate

Post a list of saved filter objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasSavedFiltersCreateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedFiltersCreate(ctx context.Context) ApiExtrasSavedFiltersCreateRequest {
	return ApiExtrasSavedFiltersCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SavedFilter
func (a *ExtrasAPIService) ExtrasSavedFiltersCreateExecute(r ApiExtrasSavedFiltersCreateRequest) (*SavedFilter, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SavedFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedFiltersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/saved-filters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.savedFilterRequest == nil {
		return localVarReturnValue, nil, reportError("savedFilterRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.savedFilterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedFiltersDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasSavedFiltersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSavedFiltersDestroyExecute(r)
}

/*
ExtrasSavedFiltersDestroy Method for ExtrasSavedFiltersDestroy

Delete a saved filter object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this saved filter.
	@return ApiExtrasSavedFiltersDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasSavedFiltersDestroy(ctx context.Context, id int32) ApiExtrasSavedFiltersDestroyRequest {
	return ApiExtrasSavedFiltersDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasSavedFiltersDestroyExecute(r ApiExtrasSavedFiltersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedFiltersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/saved-filters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSavedFiltersListRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	enabled           *bool
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	objectType        *string
	objectTypeIc      *string
	objectTypeIe      *string
	objectTypeIew     *string
	objectTypeIsw     *string
	objectTypeN       *string
	objectTypeNic     *string
	objectTypeNie     *string
	objectTypeNiew    *string
	objectTypeNisw    *string
	objectTypeId      *[]int32
	objectTypeIdN     *[]int32
	offset            *int32
	ordering          *string
	q                 *string
	shared            *bool
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	updatedByRequest  *string
	usable            *bool
	user              *[]string
	userN             *[]string
	userId            *[]*int32
	userIdN           *[]*int32
	weight            *[]int32
	weightEmpty       *bool
	weightGt          *[]int32
	weightGte         *[]int32
	weightLt          *[]int32
	weightLte         *[]int32
	weightN           *[]int32
}

func (r ApiExtrasSavedFiltersListRequest) Created(created []time.Time) ApiExtrasSavedFiltersListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasSavedFiltersListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasSavedFiltersListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasSavedFiltersListRequest) CreatedGt(createdGt []time.Time) ApiExtrasSavedFiltersListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasSavedFiltersListRequest) CreatedGte(createdGte []time.Time) ApiExtrasSavedFiltersListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasSavedFiltersListRequest) CreatedLt(createdLt []time.Time) ApiExtrasSavedFiltersListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasSavedFiltersListRequest) CreatedLte(createdLte []time.Time) ApiExtrasSavedFiltersListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasSavedFiltersListRequest) CreatedN(createdN []time.Time) ApiExtrasSavedFiltersListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasSavedFiltersListRequest) CreatedByRequest(createdByRequest string) ApiExtrasSavedFiltersListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiExtrasSavedFiltersListRequest) Description(description []string) ApiExtrasSavedFiltersListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionEmpty(descriptionEmpty bool) ApiExtrasSavedFiltersListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionIc(descriptionIc []string) ApiExtrasSavedFiltersListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionIe(descriptionIe []string) ApiExtrasSavedFiltersListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionIew(descriptionIew []string) ApiExtrasSavedFiltersListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasSavedFiltersListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionN(descriptionN []string) ApiExtrasSavedFiltersListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionNic(descriptionNic []string) ApiExtrasSavedFiltersListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionNie(descriptionNie []string) ApiExtrasSavedFiltersListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasSavedFiltersListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasSavedFiltersListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasSavedFiltersListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasSavedFiltersListRequest) Enabled(enabled bool) ApiExtrasSavedFiltersListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiExtrasSavedFiltersListRequest) Id(id []int32) ApiExtrasSavedFiltersListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasSavedFiltersListRequest) IdEmpty(idEmpty bool) ApiExtrasSavedFiltersListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasSavedFiltersListRequest) IdGt(idGt []int32) ApiExtrasSavedFiltersListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasSavedFiltersListRequest) IdGte(idGte []int32) ApiExtrasSavedFiltersListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasSavedFiltersListRequest) IdLt(idLt []int32) ApiExtrasSavedFiltersListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasSavedFiltersListRequest) IdLte(idLte []int32) ApiExtrasSavedFiltersListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasSavedFiltersListRequest) IdN(idN []int32) ApiExtrasSavedFiltersListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasSavedFiltersListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasSavedFiltersListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasSavedFiltersListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasSavedFiltersListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasSavedFiltersListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasSavedFiltersListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasSavedFiltersListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasSavedFiltersListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasSavedFiltersListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasSavedFiltersListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasSavedFiltersListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasSavedFiltersListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasSavedFiltersListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasSavedFiltersListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasSavedFiltersListRequest) Limit(limit int32) ApiExtrasSavedFiltersListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasSavedFiltersListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasSavedFiltersListRequest) Name(name []string) ApiExtrasSavedFiltersListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameEmpty(nameEmpty bool) ApiExtrasSavedFiltersListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameIc(nameIc []string) ApiExtrasSavedFiltersListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameIe(nameIe []string) ApiExtrasSavedFiltersListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameIew(nameIew []string) ApiExtrasSavedFiltersListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameIsw(nameIsw []string) ApiExtrasSavedFiltersListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameN(nameN []string) ApiExtrasSavedFiltersListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameNic(nameNic []string) ApiExtrasSavedFiltersListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameNie(nameNie []string) ApiExtrasSavedFiltersListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameNiew(nameNiew []string) ApiExtrasSavedFiltersListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasSavedFiltersListRequest) NameNisw(nameNisw []string) ApiExtrasSavedFiltersListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectType(objectType string) ApiExtrasSavedFiltersListRequest {
	r.objectType = &objectType
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeIc(objectTypeIc string) ApiExtrasSavedFiltersListRequest {
	r.objectTypeIc = &objectTypeIc
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeIe(objectTypeIe string) ApiExtrasSavedFiltersListRequest {
	r.objectTypeIe = &objectTypeIe
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeIew(objectTypeIew string) ApiExtrasSavedFiltersListRequest {
	r.objectTypeIew = &objectTypeIew
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeIsw(objectTypeIsw string) ApiExtrasSavedFiltersListRequest {
	r.objectTypeIsw = &objectTypeIsw
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeN(objectTypeN string) ApiExtrasSavedFiltersListRequest {
	r.objectTypeN = &objectTypeN
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeNic(objectTypeNic string) ApiExtrasSavedFiltersListRequest {
	r.objectTypeNic = &objectTypeNic
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeNie(objectTypeNie string) ApiExtrasSavedFiltersListRequest {
	r.objectTypeNie = &objectTypeNie
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeNiew(objectTypeNiew string) ApiExtrasSavedFiltersListRequest {
	r.objectTypeNiew = &objectTypeNiew
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeNisw(objectTypeNisw string) ApiExtrasSavedFiltersListRequest {
	r.objectTypeNisw = &objectTypeNisw
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeId(objectTypeId []int32) ApiExtrasSavedFiltersListRequest {
	r.objectTypeId = &objectTypeId
	return r
}

func (r ApiExtrasSavedFiltersListRequest) ObjectTypeIdN(objectTypeIdN []int32) ApiExtrasSavedFiltersListRequest {
	r.objectTypeIdN = &objectTypeIdN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSavedFiltersListRequest) Offset(offset int32) ApiExtrasSavedFiltersListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasSavedFiltersListRequest) Ordering(ordering string) ApiExtrasSavedFiltersListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasSavedFiltersListRequest) Q(q string) ApiExtrasSavedFiltersListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasSavedFiltersListRequest) Shared(shared bool) ApiExtrasSavedFiltersListRequest {
	r.shared = &shared
	return r
}

func (r ApiExtrasSavedFiltersListRequest) Slug(slug []string) ApiExtrasSavedFiltersListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugEmpty(slugEmpty bool) ApiExtrasSavedFiltersListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugIc(slugIc []string) ApiExtrasSavedFiltersListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugIe(slugIe []string) ApiExtrasSavedFiltersListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugIew(slugIew []string) ApiExtrasSavedFiltersListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugIsw(slugIsw []string) ApiExtrasSavedFiltersListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugN(slugN []string) ApiExtrasSavedFiltersListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugNic(slugNic []string) ApiExtrasSavedFiltersListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugNie(slugNie []string) ApiExtrasSavedFiltersListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugNiew(slugNiew []string) ApiExtrasSavedFiltersListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasSavedFiltersListRequest) SlugNisw(slugNisw []string) ApiExtrasSavedFiltersListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasSavedFiltersListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasSavedFiltersListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasSavedFiltersListRequest) Usable(usable bool) ApiExtrasSavedFiltersListRequest {
	r.usable = &usable
	return r
}

// User (name)
func (r ApiExtrasSavedFiltersListRequest) User(user []string) ApiExtrasSavedFiltersListRequest {
	r.user = &user
	return r
}

// User (name)
func (r ApiExtrasSavedFiltersListRequest) UserN(userN []string) ApiExtrasSavedFiltersListRequest {
	r.userN = &userN
	return r
}

// User (ID)
func (r ApiExtrasSavedFiltersListRequest) UserId(userId []*int32) ApiExtrasSavedFiltersListRequest {
	r.userId = &userId
	return r
}

// User (ID)
func (r ApiExtrasSavedFiltersListRequest) UserIdN(userIdN []*int32) ApiExtrasSavedFiltersListRequest {
	r.userIdN = &userIdN
	return r
}

func (r ApiExtrasSavedFiltersListRequest) Weight(weight []int32) ApiExtrasSavedFiltersListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasSavedFiltersListRequest) WeightEmpty(weightEmpty bool) ApiExtrasSavedFiltersListRequest {
	r.weightEmpty = &weightEmpty
	return r
}

func (r ApiExtrasSavedFiltersListRequest) WeightGt(weightGt []int32) ApiExtrasSavedFiltersListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasSavedFiltersListRequest) WeightGte(weightGte []int32) ApiExtrasSavedFiltersListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasSavedFiltersListRequest) WeightLt(weightLt []int32) ApiExtrasSavedFiltersListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasSavedFiltersListRequest) WeightLte(weightLte []int32) ApiExtrasSavedFiltersListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasSavedFiltersListRequest) WeightN(weightN []int32) ApiExtrasSavedFiltersListRequest {
	r.weightN = &weightN
	return r
}

func (r ApiExtrasSavedFiltersListRequest) Execute() (*PaginatedSavedFilterList, *http.Response, error) {
	return r.ApiService.ExtrasSavedFiltersListExecute(r)
}

/*
ExtrasSavedFiltersList Method for ExtrasSavedFiltersList

Get a list of saved filter objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasSavedFiltersListRequest
*/
func (a *ExtrasAPIService) ExtrasSavedFiltersList(ctx context.Context) ApiExtrasSavedFiltersListRequest {
	return ApiExtrasSavedFiltersListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedSavedFilterList
func (a *ExtrasAPIService) ExtrasSavedFiltersListExecute(r ApiExtrasSavedFiltersListRequest) (*PaginatedSavedFilterList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedSavedFilterList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedFiltersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/saved-filters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType, "")
	}
	if r.objectTypeIc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ic", r.objectTypeIc, "")
	}
	if r.objectTypeIe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__ie", r.objectTypeIe, "")
	}
	if r.objectTypeIew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__iew", r.objectTypeIew, "")
	}
	if r.objectTypeIsw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__isw", r.objectTypeIsw, "")
	}
	if r.objectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__n", r.objectTypeN, "")
	}
	if r.objectTypeNic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nic", r.objectTypeNic, "")
	}
	if r.objectTypeNie != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nie", r.objectTypeNie, "")
	}
	if r.objectTypeNiew != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__niew", r.objectTypeNiew, "")
	}
	if r.objectTypeNisw != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__nisw", r.objectTypeNisw, "")
	}
	if r.objectTypeId != nil {
		t := *r.objectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id", t, "multi")
		}
	}
	if r.objectTypeIdN != nil {
		t := *r.objectTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_type_id__n", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.shared != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shared", r.shared, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.usable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usable", r.usable, "")
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user", t, "multi")
		}
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", t, "multi")
		}
	}
	if r.userId != nil {
		t := *r.userId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", t, "multi")
		}
	}
	if r.userIdN != nil {
		t := *r.userIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_id__n", t, "multi")
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight", t, "multi")
		}
	}
	if r.weightEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "weight__empty", r.weightEmpty, "")
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gt", t, "multi")
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__gte", t, "multi")
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lt", t, "multi")
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__lte", t, "multi")
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "weight__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedFiltersPartialUpdateRequest struct {
	ctx                       context.Context
	ApiService                *ExtrasAPIService
	id                        int32
	patchedSavedFilterRequest *PatchedSavedFilterRequest
}

func (r ApiExtrasSavedFiltersPartialUpdateRequest) PatchedSavedFilterRequest(patchedSavedFilterRequest PatchedSavedFilterRequest) ApiExtrasSavedFiltersPartialUpdateRequest {
	r.patchedSavedFilterRequest = &patchedSavedFilterRequest
	return r
}

func (r ApiExtrasSavedFiltersPartialUpdateRequest) Execute() (*SavedFilter, *http.Response, error) {
	return r.ApiService.ExtrasSavedFiltersPartialUpdateExecute(r)
}

/*
ExtrasSavedFiltersPartialUpdate Method for ExtrasSavedFiltersPartialUpdate

Patch a saved filter object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this saved filter.
	@return ApiExtrasSavedFiltersPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedFiltersPartialUpdate(ctx context.Context, id int32) ApiExtrasSavedFiltersPartialUpdateRequest {
	return ApiExtrasSavedFiltersPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SavedFilter
func (a *ExtrasAPIService) ExtrasSavedFiltersPartialUpdateExecute(r ApiExtrasSavedFiltersPartialUpdateRequest) (*SavedFilter, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SavedFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedFiltersPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/saved-filters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSavedFilterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedFiltersRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasSavedFiltersRetrieveRequest) Execute() (*SavedFilter, *http.Response, error) {
	return r.ApiService.ExtrasSavedFiltersRetrieveExecute(r)
}

/*
ExtrasSavedFiltersRetrieve Method for ExtrasSavedFiltersRetrieve

Get a saved filter object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this saved filter.
	@return ApiExtrasSavedFiltersRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasSavedFiltersRetrieve(ctx context.Context, id int32) ApiExtrasSavedFiltersRetrieveRequest {
	return ApiExtrasSavedFiltersRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SavedFilter
func (a *ExtrasAPIService) ExtrasSavedFiltersRetrieveExecute(r ApiExtrasSavedFiltersRetrieveRequest) (*SavedFilter, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SavedFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedFiltersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/saved-filters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSavedFiltersUpdateRequest struct {
	ctx                context.Context
	ApiService         *ExtrasAPIService
	id                 int32
	savedFilterRequest *SavedFilterRequest
}

func (r ApiExtrasSavedFiltersUpdateRequest) SavedFilterRequest(savedFilterRequest SavedFilterRequest) ApiExtrasSavedFiltersUpdateRequest {
	r.savedFilterRequest = &savedFilterRequest
	return r
}

func (r ApiExtrasSavedFiltersUpdateRequest) Execute() (*SavedFilter, *http.Response, error) {
	return r.ApiService.ExtrasSavedFiltersUpdateExecute(r)
}

/*
ExtrasSavedFiltersUpdate Method for ExtrasSavedFiltersUpdate

Put a saved filter object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this saved filter.
	@return ApiExtrasSavedFiltersUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasSavedFiltersUpdate(ctx context.Context, id int32) ApiExtrasSavedFiltersUpdateRequest {
	return ApiExtrasSavedFiltersUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SavedFilter
func (a *ExtrasAPIService) ExtrasSavedFiltersUpdateExecute(r ApiExtrasSavedFiltersUpdateRequest) (*SavedFilter, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SavedFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasSavedFiltersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/saved-filters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.savedFilterRequest == nil {
		return localVarReturnValue, nil, reportError("savedFilterRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.savedFilterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScriptsCreateRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
}

func (r ApiExtrasScriptsCreateRequest) Execute() (*Script, *http.Response, error) {
	return r.ApiService.ExtrasScriptsCreateExecute(r)
}

/*
ExtrasScriptsCreate Method for ExtrasScriptsCreate

Post a list of script objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasScriptsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasScriptsCreate(ctx context.Context) ApiExtrasScriptsCreateRequest {
	return ApiExtrasScriptsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Script
func (a *ExtrasAPIService) ExtrasScriptsCreateExecute(r ApiExtrasScriptsCreateRequest) (*Script, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Script
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScriptsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/scripts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScriptsDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         string
}

func (r ApiExtrasScriptsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasScriptsDestroyExecute(r)
}

/*
ExtrasScriptsDestroy Method for ExtrasScriptsDestroy

Delete a script object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExtrasScriptsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasScriptsDestroy(ctx context.Context, id string) ApiExtrasScriptsDestroyRequest {
	return ApiExtrasScriptsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasScriptsDestroyExecute(r ApiExtrasScriptsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScriptsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/scripts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasScriptsListRequest struct {
	ctx          context.Context
	ApiService   *ExtrasAPIService
	id           *[]int32
	idEmpty      *bool
	idGt         *[]int32
	idGte        *[]int32
	idLt         *[]int32
	idLte        *[]int32
	idN          *[]int32
	isExecutable *bool
	limit        *int32
	moduleId     *[]int32
	moduleIdN    *[]int32
	name         *[]string
	nameEmpty    *bool
	nameIc       *[]string
	nameIe       *[]string
	nameIew      *[]string
	nameIsw      *[]string
	nameN        *[]string
	nameNic      *[]string
	nameNie      *[]string
	nameNiew     *[]string
	nameNisw     *[]string
	offset       *int32
	ordering     *string
	q            *string
}

func (r ApiExtrasScriptsListRequest) Id(id []int32) ApiExtrasScriptsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasScriptsListRequest) IdEmpty(idEmpty bool) ApiExtrasScriptsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasScriptsListRequest) IdGt(idGt []int32) ApiExtrasScriptsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasScriptsListRequest) IdGte(idGte []int32) ApiExtrasScriptsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasScriptsListRequest) IdLt(idLt []int32) ApiExtrasScriptsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasScriptsListRequest) IdLte(idLte []int32) ApiExtrasScriptsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasScriptsListRequest) IdN(idN []int32) ApiExtrasScriptsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasScriptsListRequest) IsExecutable(isExecutable bool) ApiExtrasScriptsListRequest {
	r.isExecutable = &isExecutable
	return r
}

// Number of results to return per page.
func (r ApiExtrasScriptsListRequest) Limit(limit int32) ApiExtrasScriptsListRequest {
	r.limit = &limit
	return r
}

// Script module (ID)
func (r ApiExtrasScriptsListRequest) ModuleId(moduleId []int32) ApiExtrasScriptsListRequest {
	r.moduleId = &moduleId
	return r
}

// Script module (ID)
func (r ApiExtrasScriptsListRequest) ModuleIdN(moduleIdN []int32) ApiExtrasScriptsListRequest {
	r.moduleIdN = &moduleIdN
	return r
}

func (r ApiExtrasScriptsListRequest) Name(name []string) ApiExtrasScriptsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasScriptsListRequest) NameEmpty(nameEmpty bool) ApiExtrasScriptsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasScriptsListRequest) NameIc(nameIc []string) ApiExtrasScriptsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasScriptsListRequest) NameIe(nameIe []string) ApiExtrasScriptsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasScriptsListRequest) NameIew(nameIew []string) ApiExtrasScriptsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasScriptsListRequest) NameIsw(nameIsw []string) ApiExtrasScriptsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasScriptsListRequest) NameN(nameN []string) ApiExtrasScriptsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasScriptsListRequest) NameNic(nameNic []string) ApiExtrasScriptsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasScriptsListRequest) NameNie(nameNie []string) ApiExtrasScriptsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasScriptsListRequest) NameNiew(nameNiew []string) ApiExtrasScriptsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasScriptsListRequest) NameNisw(nameNisw []string) ApiExtrasScriptsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasScriptsListRequest) Offset(offset int32) ApiExtrasScriptsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasScriptsListRequest) Ordering(ordering string) ApiExtrasScriptsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasScriptsListRequest) Q(q string) ApiExtrasScriptsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasScriptsListRequest) Execute() (*PaginatedScriptList, *http.Response, error) {
	return r.ApiService.ExtrasScriptsListExecute(r)
}

/*
ExtrasScriptsList Method for ExtrasScriptsList

Get a list of script objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasScriptsListRequest
*/
func (a *ExtrasAPIService) ExtrasScriptsList(ctx context.Context) ApiExtrasScriptsListRequest {
	return ApiExtrasScriptsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedScriptList
func (a *ExtrasAPIService) ExtrasScriptsListExecute(r ApiExtrasScriptsListRequest) (*PaginatedScriptList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedScriptList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScriptsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/scripts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.isExecutable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_executable", r.isExecutable, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.moduleId != nil {
		t := *r.moduleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id", t, "multi")
		}
	}
	if r.moduleIdN != nil {
		t := *r.moduleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "module_id__n", t, "multi")
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScriptsPartialUpdateRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         string
}

func (r ApiExtrasScriptsPartialUpdateRequest) Execute() (*Script, *http.Response, error) {
	return r.ApiService.ExtrasScriptsPartialUpdateExecute(r)
}

/*
ExtrasScriptsPartialUpdate Method for ExtrasScriptsPartialUpdate

Patch a script object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExtrasScriptsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasScriptsPartialUpdate(ctx context.Context, id string) ApiExtrasScriptsPartialUpdateRequest {
	return ApiExtrasScriptsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Script
func (a *ExtrasAPIService) ExtrasScriptsPartialUpdateExecute(r ApiExtrasScriptsPartialUpdateRequest) (*Script, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Script
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScriptsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/scripts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScriptsRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         string
}

func (r ApiExtrasScriptsRetrieveRequest) Execute() (*Script, *http.Response, error) {
	return r.ApiService.ExtrasScriptsRetrieveExecute(r)
}

/*
ExtrasScriptsRetrieve Method for ExtrasScriptsRetrieve

Get a script object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExtrasScriptsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasScriptsRetrieve(ctx context.Context, id string) ApiExtrasScriptsRetrieveRequest {
	return ApiExtrasScriptsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Script
func (a *ExtrasAPIService) ExtrasScriptsRetrieveExecute(r ApiExtrasScriptsRetrieveRequest) (*Script, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Script
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScriptsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/scripts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScriptsUpdateRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         string
}

func (r ApiExtrasScriptsUpdateRequest) Execute() (*Script, *http.Response, error) {
	return r.ApiService.ExtrasScriptsUpdateExecute(r)
}

/*
ExtrasScriptsUpdate Method for ExtrasScriptsUpdate

Put a script object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiExtrasScriptsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasScriptsUpdate(ctx context.Context, id string) ApiExtrasScriptsUpdateRequest {
	return ApiExtrasScriptsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Script
func (a *ExtrasAPIService) ExtrasScriptsUpdateExecute(r ApiExtrasScriptsUpdateRequest) (*Script, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Script
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasScriptsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/scripts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsBulkDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	tagRequest *[]TagRequest
}

func (r ApiExtrasTagsBulkDestroyRequest) TagRequest(tagRequest []TagRequest) ApiExtrasTagsBulkDestroyRequest {
	r.tagRequest = &tagRequest
	return r
}

func (r ApiExtrasTagsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasTagsBulkDestroyExecute(r)
}

/*
ExtrasTagsBulkDestroy Method for ExtrasTagsBulkDestroy

Delete a list of tag objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasTagsBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasTagsBulkDestroy(ctx context.Context) ApiExtrasTagsBulkDestroyRequest {
	return ApiExtrasTagsBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasTagsBulkDestroyExecute(r ApiExtrasTagsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagRequest == nil {
		return nil, reportError("tagRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasTagsBulkPartialUpdateRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	tagRequest *[]TagRequest
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) TagRequest(tagRequest []TagRequest) ApiExtrasTagsBulkPartialUpdateRequest {
	r.tagRequest = &tagRequest
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) Execute() ([]Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsBulkPartialUpdateExecute(r)
}

/*
ExtrasTagsBulkPartialUpdate Method for ExtrasTagsBulkPartialUpdate

Patch a list of tag objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasTagsBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsBulkPartialUpdate(ctx context.Context) ApiExtrasTagsBulkPartialUpdateRequest {
	return ApiExtrasTagsBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Tag
func (a *ExtrasAPIService) ExtrasTagsBulkPartialUpdateExecute(r ApiExtrasTagsBulkPartialUpdateRequest) ([]Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagRequest == nil {
		return localVarReturnValue, nil, reportError("tagRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsBulkUpdateRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	tagRequest *[]TagRequest
}

func (r ApiExtrasTagsBulkUpdateRequest) TagRequest(tagRequest []TagRequest) ApiExtrasTagsBulkUpdateRequest {
	r.tagRequest = &tagRequest
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) Execute() ([]Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsBulkUpdateExecute(r)
}

/*
ExtrasTagsBulkUpdate Method for ExtrasTagsBulkUpdate

Put a list of tag objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasTagsBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsBulkUpdate(ctx context.Context) ApiExtrasTagsBulkUpdateRequest {
	return ApiExtrasTagsBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Tag
func (a *ExtrasAPIService) ExtrasTagsBulkUpdateExecute(r ApiExtrasTagsBulkUpdateRequest) ([]Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagRequest == nil {
		return localVarReturnValue, nil, reportError("tagRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsCreateRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	tagRequest *TagRequest
}

func (r ApiExtrasTagsCreateRequest) TagRequest(tagRequest TagRequest) ApiExtrasTagsCreateRequest {
	r.tagRequest = &tagRequest
	return r
}

func (r ApiExtrasTagsCreateRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsCreateExecute(r)
}

/*
ExtrasTagsCreate Method for ExtrasTagsCreate

Post a list of tag objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasTagsCreateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsCreate(ctx context.Context) ApiExtrasTagsCreateRequest {
	return ApiExtrasTagsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Tag
func (a *ExtrasAPIService) ExtrasTagsCreateExecute(r ApiExtrasTagsCreateRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagRequest == nil {
		return localVarReturnValue, nil, reportError("tagRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasTagsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasTagsDestroyExecute(r)
}

/*
ExtrasTagsDestroy Method for ExtrasTagsDestroy

Delete a tag object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this tag.
	@return ApiExtrasTagsDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasTagsDestroy(ctx context.Context, id int32) ApiExtrasTagsDestroyRequest {
	return ApiExtrasTagsDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasTagsDestroyExecute(r ApiExtrasTagsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasTagsListRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	color             *[]string
	colorEmpty        *bool
	colorIc           *[]string
	colorIe           *[]string
	colorIew          *[]string
	colorIsw          *[]string
	colorN            *[]string
	colorNic          *[]string
	colorNie          *[]string
	colorNiew         *[]string
	colorNisw         *[]string
	contentType       *[]string
	contentTypeId     *[]int32
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	forObjectTypeId   *[]int32
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	objectTypes       *[]int32
	objectTypesN      *[]int32
	offset            *int32
	ordering          *string
	q                 *string
	slug              *[]string
	slugEmpty         *bool
	slugIc            *[]string
	slugIe            *[]string
	slugIew           *[]string
	slugIsw           *[]string
	slugN             *[]string
	slugNic           *[]string
	slugNie           *[]string
	slugNiew          *[]string
	slugNisw          *[]string
	updatedByRequest  *string
}

func (r ApiExtrasTagsListRequest) Color(color []string) ApiExtrasTagsListRequest {
	r.color = &color
	return r
}

func (r ApiExtrasTagsListRequest) ColorEmpty(colorEmpty bool) ApiExtrasTagsListRequest {
	r.colorEmpty = &colorEmpty
	return r
}

func (r ApiExtrasTagsListRequest) ColorIc(colorIc []string) ApiExtrasTagsListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiExtrasTagsListRequest) ColorIe(colorIe []string) ApiExtrasTagsListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiExtrasTagsListRequest) ColorIew(colorIew []string) ApiExtrasTagsListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiExtrasTagsListRequest) ColorIsw(colorIsw []string) ApiExtrasTagsListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiExtrasTagsListRequest) ColorN(colorN []string) ApiExtrasTagsListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiExtrasTagsListRequest) ColorNic(colorNic []string) ApiExtrasTagsListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiExtrasTagsListRequest) ColorNie(colorNie []string) ApiExtrasTagsListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiExtrasTagsListRequest) ColorNiew(colorNiew []string) ApiExtrasTagsListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiExtrasTagsListRequest) ColorNisw(colorNisw []string) ApiExtrasTagsListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiExtrasTagsListRequest) ContentType(contentType []string) ApiExtrasTagsListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypeId(contentTypeId []int32) ApiExtrasTagsListRequest {
	r.contentTypeId = &contentTypeId
	return r
}

func (r ApiExtrasTagsListRequest) Created(created []time.Time) ApiExtrasTagsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasTagsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasTagsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasTagsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasTagsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasTagsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasTagsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasTagsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasTagsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasTagsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasTagsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasTagsListRequest) CreatedN(createdN []time.Time) ApiExtrasTagsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasTagsListRequest) CreatedByRequest(createdByRequest string) ApiExtrasTagsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiExtrasTagsListRequest) Description(description []string) ApiExtrasTagsListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiExtrasTagsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionIc(descriptionIc []string) ApiExtrasTagsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionIe(descriptionIe []string) ApiExtrasTagsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionIew(descriptionIew []string) ApiExtrasTagsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasTagsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionN(descriptionN []string) ApiExtrasTagsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionNic(descriptionNic []string) ApiExtrasTagsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionNie(descriptionNie []string) ApiExtrasTagsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasTagsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasTagsListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasTagsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasTagsListRequest) ForObjectTypeId(forObjectTypeId []int32) ApiExtrasTagsListRequest {
	r.forObjectTypeId = &forObjectTypeId
	return r
}

func (r ApiExtrasTagsListRequest) Id(id []int32) ApiExtrasTagsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasTagsListRequest) IdEmpty(idEmpty bool) ApiExtrasTagsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasTagsListRequest) IdGt(idGt []int32) ApiExtrasTagsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasTagsListRequest) IdGte(idGte []int32) ApiExtrasTagsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasTagsListRequest) IdLt(idLt []int32) ApiExtrasTagsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasTagsListRequest) IdLte(idLte []int32) ApiExtrasTagsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasTagsListRequest) IdN(idN []int32) ApiExtrasTagsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasTagsListRequest) Limit(limit int32) ApiExtrasTagsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasTagsListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasTagsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasTagsListRequest) Name(name []string) ApiExtrasTagsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasTagsListRequest) NameEmpty(nameEmpty bool) ApiExtrasTagsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasTagsListRequest) NameIc(nameIc []string) ApiExtrasTagsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasTagsListRequest) NameIe(nameIe []string) ApiExtrasTagsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasTagsListRequest) NameIew(nameIew []string) ApiExtrasTagsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasTagsListRequest) NameIsw(nameIsw []string) ApiExtrasTagsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasTagsListRequest) NameN(nameN []string) ApiExtrasTagsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasTagsListRequest) NameNic(nameNic []string) ApiExtrasTagsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasTagsListRequest) NameNie(nameNie []string) ApiExtrasTagsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasTagsListRequest) NameNiew(nameNiew []string) ApiExtrasTagsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasTagsListRequest) NameNisw(nameNisw []string) ApiExtrasTagsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasTagsListRequest) ObjectTypes(objectTypes []int32) ApiExtrasTagsListRequest {
	r.objectTypes = &objectTypes
	return r
}

func (r ApiExtrasTagsListRequest) ObjectTypesN(objectTypesN []int32) ApiExtrasTagsListRequest {
	r.objectTypesN = &objectTypesN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasTagsListRequest) Offset(offset int32) ApiExtrasTagsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasTagsListRequest) Ordering(ordering string) ApiExtrasTagsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiExtrasTagsListRequest) Q(q string) ApiExtrasTagsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasTagsListRequest) Slug(slug []string) ApiExtrasTagsListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasTagsListRequest) SlugEmpty(slugEmpty bool) ApiExtrasTagsListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiExtrasTagsListRequest) SlugIc(slugIc []string) ApiExtrasTagsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasTagsListRequest) SlugIe(slugIe []string) ApiExtrasTagsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasTagsListRequest) SlugIew(slugIew []string) ApiExtrasTagsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasTagsListRequest) SlugIsw(slugIsw []string) ApiExtrasTagsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasTagsListRequest) SlugN(slugN []string) ApiExtrasTagsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasTagsListRequest) SlugNic(slugNic []string) ApiExtrasTagsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasTagsListRequest) SlugNie(slugNie []string) ApiExtrasTagsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasTagsListRequest) SlugNiew(slugNiew []string) ApiExtrasTagsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasTagsListRequest) SlugNisw(slugNisw []string) ApiExtrasTagsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasTagsListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasTagsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasTagsListRequest) Execute() (*PaginatedTagList, *http.Response, error) {
	return r.ApiService.ExtrasTagsListExecute(r)
}

/*
ExtrasTagsList Method for ExtrasTagsList

Get a list of tag objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasTagsListRequest
*/
func (a *ExtrasAPIService) ExtrasTagsList(ctx context.Context) ApiExtrasTagsListRequest {
	return ApiExtrasTagsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedTagList
func (a *ExtrasAPIService) ExtrasTagsListExecute(r ApiExtrasTagsListRequest) (*PaginatedTagList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedTagList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color", t, "multi")
		}
	}
	if r.colorEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "color__empty", r.colorEmpty, "")
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ic", t, "multi")
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__ie", t, "multi")
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__iew", t, "multi")
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__isw", t, "multi")
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__n", t, "multi")
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nic", t, "multi")
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nie", t, "multi")
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__niew", t, "multi")
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "color__nisw", t, "multi")
		}
	}
	if r.contentType != nil {
		t := *r.contentType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_type", t, "multi")
		}
	}
	if r.contentTypeId != nil {
		t := *r.contentTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "content_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "content_type_id", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.forObjectTypeId != nil {
		t := *r.forObjectTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "for_object_type_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "for_object_type_id", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.objectTypes != nil {
		t := *r.objectTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_types", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_types", t, "multi")
		}
	}
	if r.objectTypesN != nil {
		t := *r.objectTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_types__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_types__n", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *ExtrasAPIService
	id                int32
	patchedTagRequest *PatchedTagRequest
}

func (r ApiExtrasTagsPartialUpdateRequest) PatchedTagRequest(patchedTagRequest PatchedTagRequest) ApiExtrasTagsPartialUpdateRequest {
	r.patchedTagRequest = &patchedTagRequest
	return r
}

func (r ApiExtrasTagsPartialUpdateRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsPartialUpdateExecute(r)
}

/*
ExtrasTagsPartialUpdate Method for ExtrasTagsPartialUpdate

Patch a tag object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this tag.
	@return ApiExtrasTagsPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsPartialUpdate(ctx context.Context, id int32) ApiExtrasTagsPartialUpdateRequest {
	return ApiExtrasTagsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Tag
func (a *ExtrasAPIService) ExtrasTagsPartialUpdateExecute(r ApiExtrasTagsPartialUpdateRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedTagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasTagsRetrieveRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsRetrieveExecute(r)
}

/*
ExtrasTagsRetrieve Method for ExtrasTagsRetrieve

Get a tag object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this tag.
	@return ApiExtrasTagsRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasTagsRetrieve(ctx context.Context, id int32) ApiExtrasTagsRetrieveRequest {
	return ApiExtrasTagsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Tag
func (a *ExtrasAPIService) ExtrasTagsRetrieveExecute(r ApiExtrasTagsRetrieveRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsUpdateRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
	tagRequest *TagRequest
}

func (r ApiExtrasTagsUpdateRequest) TagRequest(tagRequest TagRequest) ApiExtrasTagsUpdateRequest {
	r.tagRequest = &tagRequest
	return r
}

func (r ApiExtrasTagsUpdateRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsUpdateExecute(r)
}

/*
ExtrasTagsUpdate Method for ExtrasTagsUpdate

Put a tag object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this tag.
	@return ApiExtrasTagsUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasTagsUpdate(ctx context.Context, id int32) ApiExtrasTagsUpdateRequest {
	return ApiExtrasTagsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Tag
func (a *ExtrasAPIService) ExtrasTagsUpdateExecute(r ApiExtrasTagsUpdateRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasTagsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagRequest == nil {
		return localVarReturnValue, nil, reportError("tagRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksBulkDestroyRequest struct {
	ctx            context.Context
	ApiService     *ExtrasAPIService
	webhookRequest *[]WebhookRequest
}

func (r ApiExtrasWebhooksBulkDestroyRequest) WebhookRequest(webhookRequest []WebhookRequest) ApiExtrasWebhooksBulkDestroyRequest {
	r.webhookRequest = &webhookRequest
	return r
}

func (r ApiExtrasWebhooksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasWebhooksBulkDestroyExecute(r)
}

/*
ExtrasWebhooksBulkDestroy Method for ExtrasWebhooksBulkDestroy

Delete a list of webhook objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasWebhooksBulkDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksBulkDestroy(ctx context.Context) ApiExtrasWebhooksBulkDestroyRequest {
	return ApiExtrasWebhooksBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasWebhooksBulkDestroyExecute(r ApiExtrasWebhooksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhookRequest == nil {
		return nil, reportError("webhookRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasWebhooksBulkPartialUpdateRequest struct {
	ctx            context.Context
	ApiService     *ExtrasAPIService
	webhookRequest *[]WebhookRequest
}

func (r ApiExtrasWebhooksBulkPartialUpdateRequest) WebhookRequest(webhookRequest []WebhookRequest) ApiExtrasWebhooksBulkPartialUpdateRequest {
	r.webhookRequest = &webhookRequest
	return r
}

func (r ApiExtrasWebhooksBulkPartialUpdateRequest) Execute() ([]Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksBulkPartialUpdateExecute(r)
}

/*
ExtrasWebhooksBulkPartialUpdate Method for ExtrasWebhooksBulkPartialUpdate

Patch a list of webhook objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasWebhooksBulkPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksBulkPartialUpdate(ctx context.Context) ApiExtrasWebhooksBulkPartialUpdateRequest {
	return ApiExtrasWebhooksBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Webhook
func (a *ExtrasAPIService) ExtrasWebhooksBulkPartialUpdateExecute(r ApiExtrasWebhooksBulkPartialUpdateRequest) ([]Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhookRequest == nil {
		return localVarReturnValue, nil, reportError("webhookRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksBulkUpdateRequest struct {
	ctx            context.Context
	ApiService     *ExtrasAPIService
	webhookRequest *[]WebhookRequest
}

func (r ApiExtrasWebhooksBulkUpdateRequest) WebhookRequest(webhookRequest []WebhookRequest) ApiExtrasWebhooksBulkUpdateRequest {
	r.webhookRequest = &webhookRequest
	return r
}

func (r ApiExtrasWebhooksBulkUpdateRequest) Execute() ([]Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksBulkUpdateExecute(r)
}

/*
ExtrasWebhooksBulkUpdate Method for ExtrasWebhooksBulkUpdate

Put a list of webhook objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasWebhooksBulkUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksBulkUpdate(ctx context.Context) ApiExtrasWebhooksBulkUpdateRequest {
	return ApiExtrasWebhooksBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Webhook
func (a *ExtrasAPIService) ExtrasWebhooksBulkUpdateExecute(r ApiExtrasWebhooksBulkUpdateRequest) ([]Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhookRequest == nil {
		return localVarReturnValue, nil, reportError("webhookRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksCreateRequest struct {
	ctx            context.Context
	ApiService     *ExtrasAPIService
	webhookRequest *WebhookRequest
}

func (r ApiExtrasWebhooksCreateRequest) WebhookRequest(webhookRequest WebhookRequest) ApiExtrasWebhooksCreateRequest {
	r.webhookRequest = &webhookRequest
	return r
}

func (r ApiExtrasWebhooksCreateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksCreateExecute(r)
}

/*
ExtrasWebhooksCreate Method for ExtrasWebhooksCreate

Post a list of webhook objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasWebhooksCreateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksCreate(ctx context.Context) ApiExtrasWebhooksCreateRequest {
	return ApiExtrasWebhooksCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Webhook
func (a *ExtrasAPIService) ExtrasWebhooksCreateExecute(r ApiExtrasWebhooksCreateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhookRequest == nil {
		return localVarReturnValue, nil, reportError("webhookRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksDestroyRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasWebhooksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasWebhooksDestroyExecute(r)
}

/*
ExtrasWebhooksDestroy Method for ExtrasWebhooksDestroy

Delete a webhook object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this webhook.
	@return ApiExtrasWebhooksDestroyRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksDestroy(ctx context.Context, id int32) ApiExtrasWebhooksDestroyRequest {
	return ApiExtrasWebhooksDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExtrasAPIService) ExtrasWebhooksDestroyExecute(r ApiExtrasWebhooksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasWebhooksListRequest struct {
	ctx                  context.Context
	ApiService           *ExtrasAPIService
	caFilePath           *[]string
	caFilePathEmpty      *bool
	caFilePathIc         *[]string
	caFilePathIe         *[]string
	caFilePathIew        *[]string
	caFilePathIsw        *[]string
	caFilePathN          *[]string
	caFilePathNic        *[]string
	caFilePathNie        *[]string
	caFilePathNiew       *[]string
	caFilePathNisw       *[]string
	created              *[]time.Time
	createdEmpty         *[]time.Time
	createdGt            *[]time.Time
	createdGte           *[]time.Time
	createdLt            *[]time.Time
	createdLte           *[]time.Time
	createdN             *[]time.Time
	createdByRequest     *string
	description          *[]string
	descriptionEmpty     *bool
	descriptionIc        *[]string
	descriptionIe        *[]string
	descriptionIew       *[]string
	descriptionIsw       *[]string
	descriptionN         *[]string
	descriptionNic       *[]string
	descriptionNie       *[]string
	descriptionNiew      *[]string
	descriptionNisw      *[]string
	httpContentType      *[]string
	httpContentTypeEmpty *bool
	httpContentTypeIc    *[]string
	httpContentTypeIe    *[]string
	httpContentTypeIew   *[]string
	httpContentTypeIsw   *[]string
	httpContentTypeN     *[]string
	httpContentTypeNic   *[]string
	httpContentTypeNie   *[]string
	httpContentTypeNiew  *[]string
	httpContentTypeNisw  *[]string
	httpMethod           *[]string
	httpMethodN          *[]string
	id                   *[]int32
	idEmpty              *bool
	idGt                 *[]int32
	idGte                *[]int32
	idLt                 *[]int32
	idLte                *[]int32
	idN                  *[]int32
	lastUpdated          *[]time.Time
	lastUpdatedEmpty     *[]time.Time
	lastUpdatedGt        *[]time.Time
	lastUpdatedGte       *[]time.Time
	lastUpdatedLt        *[]time.Time
	lastUpdatedLte       *[]time.Time
	lastUpdatedN         *[]time.Time
	limit                *int32
	modifiedByRequest    *string
	name                 *[]string
	nameEmpty            *bool
	nameIc               *[]string
	nameIe               *[]string
	nameIew              *[]string
	nameIsw              *[]string
	nameN                *[]string
	nameNic              *[]string
	nameNie              *[]string
	nameNiew             *[]string
	nameNisw             *[]string
	offset               *int32
	ordering             *string
	payloadUrl           *[]string
	q                    *string
	secret               *[]string
	secretEmpty          *bool
	secretIc             *[]string
	secretIe             *[]string
	secretIew            *[]string
	secretIsw            *[]string
	secretN              *[]string
	secretNic            *[]string
	secretNie            *[]string
	secretNiew           *[]string
	secretNisw           *[]string
	sslVerification      *bool
	tag                  *[]string
	tagN                 *[]string
	updatedByRequest     *string
}

func (r ApiExtrasWebhooksListRequest) CaFilePath(caFilePath []string) ApiExtrasWebhooksListRequest {
	r.caFilePath = &caFilePath
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathEmpty(caFilePathEmpty bool) ApiExtrasWebhooksListRequest {
	r.caFilePathEmpty = &caFilePathEmpty
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathIc(caFilePathIc []string) ApiExtrasWebhooksListRequest {
	r.caFilePathIc = &caFilePathIc
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathIe(caFilePathIe []string) ApiExtrasWebhooksListRequest {
	r.caFilePathIe = &caFilePathIe
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathIew(caFilePathIew []string) ApiExtrasWebhooksListRequest {
	r.caFilePathIew = &caFilePathIew
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathIsw(caFilePathIsw []string) ApiExtrasWebhooksListRequest {
	r.caFilePathIsw = &caFilePathIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathN(caFilePathN []string) ApiExtrasWebhooksListRequest {
	r.caFilePathN = &caFilePathN
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathNic(caFilePathNic []string) ApiExtrasWebhooksListRequest {
	r.caFilePathNic = &caFilePathNic
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathNie(caFilePathNie []string) ApiExtrasWebhooksListRequest {
	r.caFilePathNie = &caFilePathNie
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathNiew(caFilePathNiew []string) ApiExtrasWebhooksListRequest {
	r.caFilePathNiew = &caFilePathNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) CaFilePathNisw(caFilePathNisw []string) ApiExtrasWebhooksListRequest {
	r.caFilePathNisw = &caFilePathNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) Created(created []time.Time) ApiExtrasWebhooksListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasWebhooksListRequest) CreatedEmpty(createdEmpty []time.Time) ApiExtrasWebhooksListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiExtrasWebhooksListRequest) CreatedGt(createdGt []time.Time) ApiExtrasWebhooksListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasWebhooksListRequest) CreatedGte(createdGte []time.Time) ApiExtrasWebhooksListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasWebhooksListRequest) CreatedLt(createdLt []time.Time) ApiExtrasWebhooksListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasWebhooksListRequest) CreatedLte(createdLte []time.Time) ApiExtrasWebhooksListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasWebhooksListRequest) CreatedN(createdN []time.Time) ApiExtrasWebhooksListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasWebhooksListRequest) CreatedByRequest(createdByRequest string) ApiExtrasWebhooksListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiExtrasWebhooksListRequest) Description(description []string) ApiExtrasWebhooksListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionEmpty(descriptionEmpty bool) ApiExtrasWebhooksListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionIc(descriptionIc []string) ApiExtrasWebhooksListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionIe(descriptionIe []string) ApiExtrasWebhooksListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionIew(descriptionIew []string) ApiExtrasWebhooksListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasWebhooksListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionN(descriptionN []string) ApiExtrasWebhooksListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionNic(descriptionNic []string) ApiExtrasWebhooksListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionNie(descriptionNie []string) ApiExtrasWebhooksListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasWebhooksListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasWebhooksListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentType(httpContentType []string) ApiExtrasWebhooksListRequest {
	r.httpContentType = &httpContentType
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeEmpty(httpContentTypeEmpty bool) ApiExtrasWebhooksListRequest {
	r.httpContentTypeEmpty = &httpContentTypeEmpty
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeIc(httpContentTypeIc []string) ApiExtrasWebhooksListRequest {
	r.httpContentTypeIc = &httpContentTypeIc
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeIe(httpContentTypeIe []string) ApiExtrasWebhooksListRequest {
	r.httpContentTypeIe = &httpContentTypeIe
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeIew(httpContentTypeIew []string) ApiExtrasWebhooksListRequest {
	r.httpContentTypeIew = &httpContentTypeIew
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeIsw(httpContentTypeIsw []string) ApiExtrasWebhooksListRequest {
	r.httpContentTypeIsw = &httpContentTypeIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeN(httpContentTypeN []string) ApiExtrasWebhooksListRequest {
	r.httpContentTypeN = &httpContentTypeN
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeNic(httpContentTypeNic []string) ApiExtrasWebhooksListRequest {
	r.httpContentTypeNic = &httpContentTypeNic
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeNie(httpContentTypeNie []string) ApiExtrasWebhooksListRequest {
	r.httpContentTypeNie = &httpContentTypeNie
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeNiew(httpContentTypeNiew []string) ApiExtrasWebhooksListRequest {
	r.httpContentTypeNiew = &httpContentTypeNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpContentTypeNisw(httpContentTypeNisw []string) ApiExtrasWebhooksListRequest {
	r.httpContentTypeNisw = &httpContentTypeNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpMethod(httpMethod []string) ApiExtrasWebhooksListRequest {
	r.httpMethod = &httpMethod
	return r
}

func (r ApiExtrasWebhooksListRequest) HttpMethodN(httpMethodN []string) ApiExtrasWebhooksListRequest {
	r.httpMethodN = &httpMethodN
	return r
}

func (r ApiExtrasWebhooksListRequest) Id(id []int32) ApiExtrasWebhooksListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasWebhooksListRequest) IdEmpty(idEmpty bool) ApiExtrasWebhooksListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiExtrasWebhooksListRequest) IdGt(idGt []int32) ApiExtrasWebhooksListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiExtrasWebhooksListRequest) IdGte(idGte []int32) ApiExtrasWebhooksListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiExtrasWebhooksListRequest) IdLt(idLt []int32) ApiExtrasWebhooksListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiExtrasWebhooksListRequest) IdLte(idLte []int32) ApiExtrasWebhooksListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiExtrasWebhooksListRequest) IdN(idN []int32) ApiExtrasWebhooksListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasWebhooksListRequest) LastUpdated(lastUpdated []time.Time) ApiExtrasWebhooksListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasWebhooksListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiExtrasWebhooksListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiExtrasWebhooksListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiExtrasWebhooksListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiExtrasWebhooksListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiExtrasWebhooksListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasWebhooksListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiExtrasWebhooksListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiExtrasWebhooksListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiExtrasWebhooksListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiExtrasWebhooksListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiExtrasWebhooksListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiExtrasWebhooksListRequest) Limit(limit int32) ApiExtrasWebhooksListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasWebhooksListRequest) ModifiedByRequest(modifiedByRequest string) ApiExtrasWebhooksListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiExtrasWebhooksListRequest) Name(name []string) ApiExtrasWebhooksListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasWebhooksListRequest) NameEmpty(nameEmpty bool) ApiExtrasWebhooksListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIc(nameIc []string) ApiExtrasWebhooksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIe(nameIe []string) ApiExtrasWebhooksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIew(nameIew []string) ApiExtrasWebhooksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIsw(nameIsw []string) ApiExtrasWebhooksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) NameN(nameN []string) ApiExtrasWebhooksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNic(nameNic []string) ApiExtrasWebhooksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNie(nameNie []string) ApiExtrasWebhooksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNiew(nameNiew []string) ApiExtrasWebhooksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNisw(nameNisw []string) ApiExtrasWebhooksListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasWebhooksListRequest) Offset(offset int32) ApiExtrasWebhooksListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiExtrasWebhooksListRequest) Ordering(ordering string) ApiExtrasWebhooksListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrl(payloadUrl []string) ApiExtrasWebhooksListRequest {
	r.payloadUrl = &payloadUrl
	return r
}

// Search
func (r ApiExtrasWebhooksListRequest) Q(q string) ApiExtrasWebhooksListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasWebhooksListRequest) Secret(secret []string) ApiExtrasWebhooksListRequest {
	r.secret = &secret
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretEmpty(secretEmpty bool) ApiExtrasWebhooksListRequest {
	r.secretEmpty = &secretEmpty
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretIc(secretIc []string) ApiExtrasWebhooksListRequest {
	r.secretIc = &secretIc
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretIe(secretIe []string) ApiExtrasWebhooksListRequest {
	r.secretIe = &secretIe
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretIew(secretIew []string) ApiExtrasWebhooksListRequest {
	r.secretIew = &secretIew
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretIsw(secretIsw []string) ApiExtrasWebhooksListRequest {
	r.secretIsw = &secretIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretN(secretN []string) ApiExtrasWebhooksListRequest {
	r.secretN = &secretN
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretNic(secretNic []string) ApiExtrasWebhooksListRequest {
	r.secretNic = &secretNic
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretNie(secretNie []string) ApiExtrasWebhooksListRequest {
	r.secretNie = &secretNie
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretNiew(secretNiew []string) ApiExtrasWebhooksListRequest {
	r.secretNiew = &secretNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) SecretNisw(secretNisw []string) ApiExtrasWebhooksListRequest {
	r.secretNisw = &secretNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) SslVerification(sslVerification bool) ApiExtrasWebhooksListRequest {
	r.sslVerification = &sslVerification
	return r
}

func (r ApiExtrasWebhooksListRequest) Tag(tag []string) ApiExtrasWebhooksListRequest {
	r.tag = &tag
	return r
}

func (r ApiExtrasWebhooksListRequest) TagN(tagN []string) ApiExtrasWebhooksListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiExtrasWebhooksListRequest) UpdatedByRequest(updatedByRequest string) ApiExtrasWebhooksListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiExtrasWebhooksListRequest) Execute() (*PaginatedWebhookList, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksListExecute(r)
}

/*
ExtrasWebhooksList Method for ExtrasWebhooksList

Get a list of webhook objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExtrasWebhooksListRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksList(ctx context.Context) ApiExtrasWebhooksListRequest {
	return ApiExtrasWebhooksListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedWebhookList
func (a *ExtrasAPIService) ExtrasWebhooksListExecute(r ApiExtrasWebhooksListRequest) (*PaginatedWebhookList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedWebhookList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.caFilePath != nil {
		t := *r.caFilePath
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path", t, "multi")
		}
	}
	if r.caFilePathEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__empty", r.caFilePathEmpty, "")
	}
	if r.caFilePathIc != nil {
		t := *r.caFilePathIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ic", t, "multi")
		}
	}
	if r.caFilePathIe != nil {
		t := *r.caFilePathIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__ie", t, "multi")
		}
	}
	if r.caFilePathIew != nil {
		t := *r.caFilePathIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__iew", t, "multi")
		}
	}
	if r.caFilePathIsw != nil {
		t := *r.caFilePathIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__isw", t, "multi")
		}
	}
	if r.caFilePathN != nil {
		t := *r.caFilePathN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__n", t, "multi")
		}
	}
	if r.caFilePathNic != nil {
		t := *r.caFilePathNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nic", t, "multi")
		}
	}
	if r.caFilePathNie != nil {
		t := *r.caFilePathNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nie", t, "multi")
		}
	}
	if r.caFilePathNiew != nil {
		t := *r.caFilePathNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__niew", t, "multi")
		}
	}
	if r.caFilePathNisw != nil {
		t := *r.caFilePathNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ca_file_path__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.httpContentType != nil {
		t := *r.httpContentType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type", t, "multi")
		}
	}
	if r.httpContentTypeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__empty", r.httpContentTypeEmpty, "")
	}
	if r.httpContentTypeIc != nil {
		t := *r.httpContentTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__ic", t, "multi")
		}
	}
	if r.httpContentTypeIe != nil {
		t := *r.httpContentTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__ie", t, "multi")
		}
	}
	if r.httpContentTypeIew != nil {
		t := *r.httpContentTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__iew", t, "multi")
		}
	}
	if r.httpContentTypeIsw != nil {
		t := *r.httpContentTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__isw", t, "multi")
		}
	}
	if r.httpContentTypeN != nil {
		t := *r.httpContentTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__n", t, "multi")
		}
	}
	if r.httpContentTypeNic != nil {
		t := *r.httpContentTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__nic", t, "multi")
		}
	}
	if r.httpContentTypeNie != nil {
		t := *r.httpContentTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__nie", t, "multi")
		}
	}
	if r.httpContentTypeNiew != nil {
		t := *r.httpContentTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__niew", t, "multi")
		}
	}
	if r.httpContentTypeNisw != nil {
		t := *r.httpContentTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_content_type__nisw", t, "multi")
		}
	}
	if r.httpMethod != nil {
		t := *r.httpMethod
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method", t, "multi")
		}
	}
	if r.httpMethodN != nil {
		t := *r.httpMethodN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "http_method__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.payloadUrl != nil {
		t := *r.payloadUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "payload_url", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.secret != nil {
		t := *r.secret
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret", t, "multi")
		}
	}
	if r.secretEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "secret__empty", r.secretEmpty, "")
	}
	if r.secretIc != nil {
		t := *r.secretIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__ic", t, "multi")
		}
	}
	if r.secretIe != nil {
		t := *r.secretIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__ie", t, "multi")
		}
	}
	if r.secretIew != nil {
		t := *r.secretIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__iew", t, "multi")
		}
	}
	if r.secretIsw != nil {
		t := *r.secretIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__isw", t, "multi")
		}
	}
	if r.secretN != nil {
		t := *r.secretN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__n", t, "multi")
		}
	}
	if r.secretNic != nil {
		t := *r.secretNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__nic", t, "multi")
		}
	}
	if r.secretNie != nil {
		t := *r.secretNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__nie", t, "multi")
		}
	}
	if r.secretNiew != nil {
		t := *r.secretNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__niew", t, "multi")
		}
	}
	if r.secretNisw != nil {
		t := *r.secretNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "secret__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "secret__nisw", t, "multi")
		}
	}
	if r.sslVerification != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssl_verification", r.sslVerification, "")
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksPartialUpdateRequest struct {
	ctx                   context.Context
	ApiService            *ExtrasAPIService
	id                    int32
	patchedWebhookRequest *PatchedWebhookRequest
}

func (r ApiExtrasWebhooksPartialUpdateRequest) PatchedWebhookRequest(patchedWebhookRequest PatchedWebhookRequest) ApiExtrasWebhooksPartialUpdateRequest {
	r.patchedWebhookRequest = &patchedWebhookRequest
	return r
}

func (r ApiExtrasWebhooksPartialUpdateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksPartialUpdateExecute(r)
}

/*
ExtrasWebhooksPartialUpdate Method for ExtrasWebhooksPartialUpdate

Patch a webhook object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this webhook.
	@return ApiExtrasWebhooksPartialUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksPartialUpdate(ctx context.Context, id int32) ApiExtrasWebhooksPartialUpdateRequest {
	return ApiExtrasWebhooksPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Webhook
func (a *ExtrasAPIService) ExtrasWebhooksPartialUpdateExecute(r ApiExtrasWebhooksPartialUpdateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWebhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksRetrieveRequest struct {
	ctx        context.Context
	ApiService *ExtrasAPIService
	id         int32
}

func (r ApiExtrasWebhooksRetrieveRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksRetrieveExecute(r)
}

/*
ExtrasWebhooksRetrieve Method for ExtrasWebhooksRetrieve

Get a webhook object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this webhook.
	@return ApiExtrasWebhooksRetrieveRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksRetrieve(ctx context.Context, id int32) ApiExtrasWebhooksRetrieveRequest {
	return ApiExtrasWebhooksRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Webhook
func (a *ExtrasAPIService) ExtrasWebhooksRetrieveExecute(r ApiExtrasWebhooksRetrieveRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksUpdateRequest struct {
	ctx            context.Context
	ApiService     *ExtrasAPIService
	id             int32
	webhookRequest *WebhookRequest
}

func (r ApiExtrasWebhooksUpdateRequest) WebhookRequest(webhookRequest WebhookRequest) ApiExtrasWebhooksUpdateRequest {
	r.webhookRequest = &webhookRequest
	return r
}

func (r ApiExtrasWebhooksUpdateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksUpdateExecute(r)
}

/*
ExtrasWebhooksUpdate Method for ExtrasWebhooksUpdate

Put a webhook object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this webhook.
	@return ApiExtrasWebhooksUpdateRequest
*/
func (a *ExtrasAPIService) ExtrasWebhooksUpdate(ctx context.Context, id int32) ApiExtrasWebhooksUpdateRequest {
	return ApiExtrasWebhooksUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Webhook
func (a *ExtrasAPIService) ExtrasWebhooksUpdateExecute(r ApiExtrasWebhooksUpdateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasAPIService.ExtrasWebhooksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhookRequest == nil {
		return localVarReturnValue, nil, reportError("webhookRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhookRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
