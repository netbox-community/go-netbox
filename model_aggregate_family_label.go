/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// AggregateFamilyLabel the model 'AggregateFamilyLabel'
type AggregateFamilyLabel string

// List of Aggregate_family_label
const (
	AGGREGATEFAMILYLABEL_IPV4 AggregateFamilyLabel = "IPv4"
	AGGREGATEFAMILYLABEL_IPV6 AggregateFamilyLabel = "IPv6"
)

// All allowed values of AggregateFamilyLabel enum
var AllowedAggregateFamilyLabelEnumValues = []AggregateFamilyLabel{
	"IPv4",
	"IPv6",
}

func (v *AggregateFamilyLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggregateFamilyLabel(value)
	for _, existing := range AllowedAggregateFamilyLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggregateFamilyLabel", value)
}

// NewAggregateFamilyLabelFromValue returns a pointer to a valid AggregateFamilyLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregateFamilyLabelFromValue(v string) (*AggregateFamilyLabel, error) {
	ev := AggregateFamilyLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggregateFamilyLabel: valid values are %v", v, AllowedAggregateFamilyLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregateFamilyLabel) IsValid() bool {
	for _, existing := range AllowedAggregateFamilyLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Aggregate_family_label value
func (v AggregateFamilyLabel) Ptr() *AggregateFamilyLabel {
	return &v
}

type NullableAggregateFamilyLabel struct {
	value *AggregateFamilyLabel
	isSet bool
}

func (v NullableAggregateFamilyLabel) Get() *AggregateFamilyLabel {
	return v.value
}

func (v *NullableAggregateFamilyLabel) Set(val *AggregateFamilyLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateFamilyLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateFamilyLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateFamilyLabel(val *AggregateFamilyLabel) *NullableAggregateFamilyLabel {
	return &NullableAggregateFamilyLabel{value: val, isSet: true}
}

func (v NullableAggregateFamilyLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateFamilyLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
