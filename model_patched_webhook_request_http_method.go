/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// PatchedWebhookRequestHttpMethod * `GET` - GET * `POST` - POST * `PUT` - PUT * `PATCH` - PATCH * `DELETE` - DELETE
type PatchedWebhookRequestHttpMethod string

// List of PatchedWebhookRequest_http_method
const (
	PATCHEDWEBHOOKREQUESTHTTPMETHOD_GET    PatchedWebhookRequestHttpMethod = "GET"
	PATCHEDWEBHOOKREQUESTHTTPMETHOD_POST   PatchedWebhookRequestHttpMethod = "POST"
	PATCHEDWEBHOOKREQUESTHTTPMETHOD_PUT    PatchedWebhookRequestHttpMethod = "PUT"
	PATCHEDWEBHOOKREQUESTHTTPMETHOD_PATCH  PatchedWebhookRequestHttpMethod = "PATCH"
	PATCHEDWEBHOOKREQUESTHTTPMETHOD_DELETE PatchedWebhookRequestHttpMethod = "DELETE"
)

// All allowed values of PatchedWebhookRequestHttpMethod enum
var AllowedPatchedWebhookRequestHttpMethodEnumValues = []PatchedWebhookRequestHttpMethod{
	"GET",
	"POST",
	"PUT",
	"PATCH",
	"DELETE",
}

func (v *PatchedWebhookRequestHttpMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PatchedWebhookRequestHttpMethod(value)
	for _, existing := range AllowedPatchedWebhookRequestHttpMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PatchedWebhookRequestHttpMethod", value)
}

// NewPatchedWebhookRequestHttpMethodFromValue returns a pointer to a valid PatchedWebhookRequestHttpMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPatchedWebhookRequestHttpMethodFromValue(v string) (*PatchedWebhookRequestHttpMethod, error) {
	ev := PatchedWebhookRequestHttpMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PatchedWebhookRequestHttpMethod: valid values are %v", v, AllowedPatchedWebhookRequestHttpMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PatchedWebhookRequestHttpMethod) IsValid() bool {
	for _, existing := range AllowedPatchedWebhookRequestHttpMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PatchedWebhookRequest_http_method value
func (v PatchedWebhookRequestHttpMethod) Ptr() *PatchedWebhookRequestHttpMethod {
	return &v
}

type NullablePatchedWebhookRequestHttpMethod struct {
	value *PatchedWebhookRequestHttpMethod
	isSet bool
}

func (v NullablePatchedWebhookRequestHttpMethod) Get() *PatchedWebhookRequestHttpMethod {
	return v.value
}

func (v *NullablePatchedWebhookRequestHttpMethod) Set(val *PatchedWebhookRequestHttpMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWebhookRequestHttpMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWebhookRequestHttpMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWebhookRequestHttpMethod(val *PatchedWebhookRequestHttpMethod) *NullablePatchedWebhookRequestHttpMethod {
	return &NullablePatchedWebhookRequestHttpMethod{value: val, isSet: true}
}

func (v NullablePatchedWebhookRequestHttpMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWebhookRequestHttpMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
