/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// IKEPolicyModeLabel the model 'IKEPolicyModeLabel'
type IKEPolicyModeLabel string

// List of IKEPolicy_mode_label
const (
	IKEPOLICYMODELABEL_AGGRESSIVE IKEPolicyModeLabel = "Aggressive"
	IKEPOLICYMODELABEL_MAIN       IKEPolicyModeLabel = "Main"
)

// All allowed values of IKEPolicyModeLabel enum
var AllowedIKEPolicyModeLabelEnumValues = []IKEPolicyModeLabel{
	"Aggressive",
	"Main",
}

func (v *IKEPolicyModeLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IKEPolicyModeLabel(value)
	for _, existing := range AllowedIKEPolicyModeLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IKEPolicyModeLabel", value)
}

// NewIKEPolicyModeLabelFromValue returns a pointer to a valid IKEPolicyModeLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIKEPolicyModeLabelFromValue(v string) (*IKEPolicyModeLabel, error) {
	ev := IKEPolicyModeLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IKEPolicyModeLabel: valid values are %v", v, AllowedIKEPolicyModeLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IKEPolicyModeLabel) IsValid() bool {
	for _, existing := range AllowedIKEPolicyModeLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IKEPolicy_mode_label value
func (v IKEPolicyModeLabel) Ptr() *IKEPolicyModeLabel {
	return &v
}

type NullableIKEPolicyModeLabel struct {
	value *IKEPolicyModeLabel
	isSet bool
}

func (v NullableIKEPolicyModeLabel) Get() *IKEPolicyModeLabel {
	return v.value
}

func (v *NullableIKEPolicyModeLabel) Set(val *IKEPolicyModeLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableIKEPolicyModeLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableIKEPolicyModeLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIKEPolicyModeLabel(val *IKEPolicyModeLabel) *NullableIKEPolicyModeLabel {
	return &NullableIKEPolicyModeLabel{value: val, isSet: true}
}

func (v NullableIKEPolicyModeLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIKEPolicyModeLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
