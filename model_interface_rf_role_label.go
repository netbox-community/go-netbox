/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// InterfaceRfRoleLabel the model 'InterfaceRfRoleLabel'
type InterfaceRfRoleLabel string

// List of Interface_rf_role_label
const (
	INTERFACERFROLELABEL_ACCESS_POINT InterfaceRfRoleLabel = "Access point"
	INTERFACERFROLELABEL_STATION      InterfaceRfRoleLabel = "Station"
)

// All allowed values of InterfaceRfRoleLabel enum
var AllowedInterfaceRfRoleLabelEnumValues = []InterfaceRfRoleLabel{
	"Access point",
	"Station",
}

func (v *InterfaceRfRoleLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InterfaceRfRoleLabel(value)
	for _, existing := range AllowedInterfaceRfRoleLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InterfaceRfRoleLabel", value)
}

// NewInterfaceRfRoleLabelFromValue returns a pointer to a valid InterfaceRfRoleLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInterfaceRfRoleLabelFromValue(v string) (*InterfaceRfRoleLabel, error) {
	ev := InterfaceRfRoleLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InterfaceRfRoleLabel: valid values are %v", v, AllowedInterfaceRfRoleLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InterfaceRfRoleLabel) IsValid() bool {
	for _, existing := range AllowedInterfaceRfRoleLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Interface_rf_role_label value
func (v InterfaceRfRoleLabel) Ptr() *InterfaceRfRoleLabel {
	return &v
}

type NullableInterfaceRfRoleLabel struct {
	value *InterfaceRfRoleLabel
	isSet bool
}

func (v NullableInterfaceRfRoleLabel) Get() *InterfaceRfRoleLabel {
	return v.value
}

func (v *NullableInterfaceRfRoleLabel) Set(val *InterfaceRfRoleLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceRfRoleLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceRfRoleLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceRfRoleLabel(val *InterfaceRfRoleLabel) *NullableInterfaceRfRoleLabel {
	return &NullableInterfaceRfRoleLabel{value: val, isSet: true}
}

func (v NullableInterfaceRfRoleLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceRfRoleLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
