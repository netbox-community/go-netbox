/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// TunnelStatusLabel the model 'TunnelStatusLabel'
type TunnelStatusLabel string

// List of Tunnel_status_label
const (
	TUNNELSTATUSLABEL_PLANNED  TunnelStatusLabel = "Planned"
	TUNNELSTATUSLABEL_ACTIVE   TunnelStatusLabel = "Active"
	TUNNELSTATUSLABEL_DISABLED TunnelStatusLabel = "Disabled"
)

// All allowed values of TunnelStatusLabel enum
var AllowedTunnelStatusLabelEnumValues = []TunnelStatusLabel{
	"Planned",
	"Active",
	"Disabled",
}

func (v *TunnelStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TunnelStatusLabel(value)
	for _, existing := range AllowedTunnelStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TunnelStatusLabel", value)
}

// NewTunnelStatusLabelFromValue returns a pointer to a valid TunnelStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTunnelStatusLabelFromValue(v string) (*TunnelStatusLabel, error) {
	ev := TunnelStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TunnelStatusLabel: valid values are %v", v, AllowedTunnelStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TunnelStatusLabel) IsValid() bool {
	for _, existing := range AllowedTunnelStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Tunnel_status_label value
func (v TunnelStatusLabel) Ptr() *TunnelStatusLabel {
	return &v
}

type NullableTunnelStatusLabel struct {
	value *TunnelStatusLabel
	isSet bool
}

func (v NullableTunnelStatusLabel) Get() *TunnelStatusLabel {
	return v.value
}

func (v *NullableTunnelStatusLabel) Set(val *TunnelStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableTunnelStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableTunnelStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTunnelStatusLabel(val *TunnelStatusLabel) *NullableTunnelStatusLabel {
	return &NullableTunnelStatusLabel{value: val, isSet: true}
}

func (v NullableTunnelStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTunnelStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
