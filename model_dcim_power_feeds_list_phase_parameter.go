/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimPowerFeedsListPhaseParameter the model 'DcimPowerFeedsListPhaseParameter'
type DcimPowerFeedsListPhaseParameter string

// List of dcim_power_feeds_list_phase_parameter
const (
	DCIMPOWERFEEDSLISTPHASEPARAMETER_SINGLE_PHASE DcimPowerFeedsListPhaseParameter = "single-phase"
	DCIMPOWERFEEDSLISTPHASEPARAMETER_THREE_PHASE  DcimPowerFeedsListPhaseParameter = "three-phase"
)

// All allowed values of DcimPowerFeedsListPhaseParameter enum
var AllowedDcimPowerFeedsListPhaseParameterEnumValues = []DcimPowerFeedsListPhaseParameter{
	"single-phase",
	"three-phase",
}

func (v *DcimPowerFeedsListPhaseParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimPowerFeedsListPhaseParameter(value)
	for _, existing := range AllowedDcimPowerFeedsListPhaseParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimPowerFeedsListPhaseParameter", value)
}

// NewDcimPowerFeedsListPhaseParameterFromValue returns a pointer to a valid DcimPowerFeedsListPhaseParameter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimPowerFeedsListPhaseParameterFromValue(v string) (*DcimPowerFeedsListPhaseParameter, error) {
	ev := DcimPowerFeedsListPhaseParameter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimPowerFeedsListPhaseParameter: valid values are %v", v, AllowedDcimPowerFeedsListPhaseParameterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimPowerFeedsListPhaseParameter) IsValid() bool {
	for _, existing := range AllowedDcimPowerFeedsListPhaseParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_power_feeds_list_phase_parameter value
func (v DcimPowerFeedsListPhaseParameter) Ptr() *DcimPowerFeedsListPhaseParameter {
	return &v
}

type NullableDcimPowerFeedsListPhaseParameter struct {
	value *DcimPowerFeedsListPhaseParameter
	isSet bool
}

func (v NullableDcimPowerFeedsListPhaseParameter) Get() *DcimPowerFeedsListPhaseParameter {
	return v.value
}

func (v *NullableDcimPowerFeedsListPhaseParameter) Set(val *DcimPowerFeedsListPhaseParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimPowerFeedsListPhaseParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimPowerFeedsListPhaseParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimPowerFeedsListPhaseParameter(val *DcimPowerFeedsListPhaseParameter) *NullableDcimPowerFeedsListPhaseParameter {
	return &NullableDcimPowerFeedsListPhaseParameter{value: val, isSet: true}
}

func (v NullableDcimPowerFeedsListPhaseParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimPowerFeedsListPhaseParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
