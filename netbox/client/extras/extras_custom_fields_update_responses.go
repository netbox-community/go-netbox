// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package extras

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/perimeter-81/go-netbox/netbox/models"
)

// ExtrasCustomFieldsUpdateReader is a Reader for the ExtrasCustomFieldsUpdate structure.
type ExtrasCustomFieldsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExtrasCustomFieldsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExtrasCustomFieldsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewExtrasCustomFieldsUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExtrasCustomFieldsUpdateOK creates a ExtrasCustomFieldsUpdateOK with default headers values
func NewExtrasCustomFieldsUpdateOK() *ExtrasCustomFieldsUpdateOK {
	return &ExtrasCustomFieldsUpdateOK{}
}

/*
ExtrasCustomFieldsUpdateOK describes a response with status code 200, with default header values.

ExtrasCustomFieldsUpdateOK extras custom fields update o k
*/
type ExtrasCustomFieldsUpdateOK struct {
	Payload *models.CustomField
}

// IsSuccess returns true when this extras custom fields update o k response has a 2xx status code
func (o *ExtrasCustomFieldsUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this extras custom fields update o k response has a 3xx status code
func (o *ExtrasCustomFieldsUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this extras custom fields update o k response has a 4xx status code
func (o *ExtrasCustomFieldsUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this extras custom fields update o k response has a 5xx status code
func (o *ExtrasCustomFieldsUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this extras custom fields update o k response a status code equal to that given
func (o *ExtrasCustomFieldsUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *ExtrasCustomFieldsUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /extras/custom-fields/{id}/][%d] extrasCustomFieldsUpdateOK  %+v", 200, o.Payload)
}

func (o *ExtrasCustomFieldsUpdateOK) String() string {
	return fmt.Sprintf("[PUT /extras/custom-fields/{id}/][%d] extrasCustomFieldsUpdateOK  %+v", 200, o.Payload)
}

func (o *ExtrasCustomFieldsUpdateOK) GetPayload() *models.CustomField {
	return o.Payload
}

func (o *ExtrasCustomFieldsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomField)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExtrasCustomFieldsUpdateDefault creates a ExtrasCustomFieldsUpdateDefault with default headers values
func NewExtrasCustomFieldsUpdateDefault(code int) *ExtrasCustomFieldsUpdateDefault {
	return &ExtrasCustomFieldsUpdateDefault{
		_statusCode: code,
	}
}

/*
ExtrasCustomFieldsUpdateDefault describes a response with status code -1, with default header values.

ExtrasCustomFieldsUpdateDefault extras custom fields update default
*/
type ExtrasCustomFieldsUpdateDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the extras custom fields update default response
func (o *ExtrasCustomFieldsUpdateDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this extras custom fields update default response has a 2xx status code
func (o *ExtrasCustomFieldsUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this extras custom fields update default response has a 3xx status code
func (o *ExtrasCustomFieldsUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this extras custom fields update default response has a 4xx status code
func (o *ExtrasCustomFieldsUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this extras custom fields update default response has a 5xx status code
func (o *ExtrasCustomFieldsUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this extras custom fields update default response a status code equal to that given
func (o *ExtrasCustomFieldsUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ExtrasCustomFieldsUpdateDefault) Error() string {
	return fmt.Sprintf("[PUT /extras/custom-fields/{id}/][%d] extras_custom-fields_update default  %+v", o._statusCode, o.Payload)
}

func (o *ExtrasCustomFieldsUpdateDefault) String() string {
	return fmt.Sprintf("[PUT /extras/custom-fields/{id}/][%d] extras_custom-fields_update default  %+v", o._statusCode, o.Payload)
}

func (o *ExtrasCustomFieldsUpdateDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *ExtrasCustomFieldsUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
