/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.0.11 (4.0)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
	"time"
)

// CoreAPIService CoreAPI service
type CoreAPIService service

type ApiCoreDataFilesListRequest struct {
	ctx               context.Context
	ApiService        *CoreAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	hash              *[]string
	hashEmpty         *bool
	hashIc            *[]string
	hashIe            *[]string
	hashIew           *[]string
	hashIsw           *[]string
	hashN             *[]string
	hashNic           *[]string
	hashNie           *[]string
	hashNiew          *[]string
	hashNisw          *[]string
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	offset            *int32
	ordering          *string
	path              *[]string
	pathEmpty         *bool
	pathIc            *[]string
	pathIe            *[]string
	pathIew           *[]string
	pathIsw           *[]string
	pathN             *[]string
	pathNic           *[]string
	pathNie           *[]string
	pathNiew          *[]string
	pathNisw          *[]string
	q                 *string
	size              *[]int32
	sizeEmpty         *bool
	sizeGt            *[]int32
	sizeGte           *[]int32
	sizeLt            *[]int32
	sizeLte           *[]int32
	sizeN             *[]int32
	source            *[]string
	sourceN           *[]string
	sourceId          *[]int32
	sourceIdN         *[]int32
	updatedByRequest  *string
}

func (r ApiCoreDataFilesListRequest) Created(created []time.Time) ApiCoreDataFilesListRequest {
	r.created = &created
	return r
}

func (r ApiCoreDataFilesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiCoreDataFilesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiCoreDataFilesListRequest) CreatedGt(createdGt []time.Time) ApiCoreDataFilesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCoreDataFilesListRequest) CreatedGte(createdGte []time.Time) ApiCoreDataFilesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCoreDataFilesListRequest) CreatedLt(createdLt []time.Time) ApiCoreDataFilesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCoreDataFilesListRequest) CreatedLte(createdLte []time.Time) ApiCoreDataFilesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCoreDataFilesListRequest) CreatedN(createdN []time.Time) ApiCoreDataFilesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCoreDataFilesListRequest) CreatedByRequest(createdByRequest string) ApiCoreDataFilesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiCoreDataFilesListRequest) Hash(hash []string) ApiCoreDataFilesListRequest {
	r.hash = &hash
	return r
}

func (r ApiCoreDataFilesListRequest) HashEmpty(hashEmpty bool) ApiCoreDataFilesListRequest {
	r.hashEmpty = &hashEmpty
	return r
}

func (r ApiCoreDataFilesListRequest) HashIc(hashIc []string) ApiCoreDataFilesListRequest {
	r.hashIc = &hashIc
	return r
}

func (r ApiCoreDataFilesListRequest) HashIe(hashIe []string) ApiCoreDataFilesListRequest {
	r.hashIe = &hashIe
	return r
}

func (r ApiCoreDataFilesListRequest) HashIew(hashIew []string) ApiCoreDataFilesListRequest {
	r.hashIew = &hashIew
	return r
}

func (r ApiCoreDataFilesListRequest) HashIsw(hashIsw []string) ApiCoreDataFilesListRequest {
	r.hashIsw = &hashIsw
	return r
}

func (r ApiCoreDataFilesListRequest) HashN(hashN []string) ApiCoreDataFilesListRequest {
	r.hashN = &hashN
	return r
}

func (r ApiCoreDataFilesListRequest) HashNic(hashNic []string) ApiCoreDataFilesListRequest {
	r.hashNic = &hashNic
	return r
}

func (r ApiCoreDataFilesListRequest) HashNie(hashNie []string) ApiCoreDataFilesListRequest {
	r.hashNie = &hashNie
	return r
}

func (r ApiCoreDataFilesListRequest) HashNiew(hashNiew []string) ApiCoreDataFilesListRequest {
	r.hashNiew = &hashNiew
	return r
}

func (r ApiCoreDataFilesListRequest) HashNisw(hashNisw []string) ApiCoreDataFilesListRequest {
	r.hashNisw = &hashNisw
	return r
}

func (r ApiCoreDataFilesListRequest) Id(id []int32) ApiCoreDataFilesListRequest {
	r.id = &id
	return r
}

func (r ApiCoreDataFilesListRequest) IdEmpty(idEmpty bool) ApiCoreDataFilesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiCoreDataFilesListRequest) IdGt(idGt []int32) ApiCoreDataFilesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiCoreDataFilesListRequest) IdGte(idGte []int32) ApiCoreDataFilesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiCoreDataFilesListRequest) IdLt(idLt []int32) ApiCoreDataFilesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiCoreDataFilesListRequest) IdLte(idLte []int32) ApiCoreDataFilesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiCoreDataFilesListRequest) IdN(idN []int32) ApiCoreDataFilesListRequest {
	r.idN = &idN
	return r
}

func (r ApiCoreDataFilesListRequest) LastUpdated(lastUpdated []time.Time) ApiCoreDataFilesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCoreDataFilesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiCoreDataFilesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiCoreDataFilesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCoreDataFilesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCoreDataFilesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCoreDataFilesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCoreDataFilesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCoreDataFilesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCoreDataFilesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCoreDataFilesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCoreDataFilesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCoreDataFilesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCoreDataFilesListRequest) Limit(limit int32) ApiCoreDataFilesListRequest {
	r.limit = &limit
	return r
}

func (r ApiCoreDataFilesListRequest) ModifiedByRequest(modifiedByRequest string) ApiCoreDataFilesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiCoreDataFilesListRequest) Offset(offset int32) ApiCoreDataFilesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiCoreDataFilesListRequest) Ordering(ordering string) ApiCoreDataFilesListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiCoreDataFilesListRequest) Path(path []string) ApiCoreDataFilesListRequest {
	r.path = &path
	return r
}

func (r ApiCoreDataFilesListRequest) PathEmpty(pathEmpty bool) ApiCoreDataFilesListRequest {
	r.pathEmpty = &pathEmpty
	return r
}

func (r ApiCoreDataFilesListRequest) PathIc(pathIc []string) ApiCoreDataFilesListRequest {
	r.pathIc = &pathIc
	return r
}

func (r ApiCoreDataFilesListRequest) PathIe(pathIe []string) ApiCoreDataFilesListRequest {
	r.pathIe = &pathIe
	return r
}

func (r ApiCoreDataFilesListRequest) PathIew(pathIew []string) ApiCoreDataFilesListRequest {
	r.pathIew = &pathIew
	return r
}

func (r ApiCoreDataFilesListRequest) PathIsw(pathIsw []string) ApiCoreDataFilesListRequest {
	r.pathIsw = &pathIsw
	return r
}

func (r ApiCoreDataFilesListRequest) PathN(pathN []string) ApiCoreDataFilesListRequest {
	r.pathN = &pathN
	return r
}

func (r ApiCoreDataFilesListRequest) PathNic(pathNic []string) ApiCoreDataFilesListRequest {
	r.pathNic = &pathNic
	return r
}

func (r ApiCoreDataFilesListRequest) PathNie(pathNie []string) ApiCoreDataFilesListRequest {
	r.pathNie = &pathNie
	return r
}

func (r ApiCoreDataFilesListRequest) PathNiew(pathNiew []string) ApiCoreDataFilesListRequest {
	r.pathNiew = &pathNiew
	return r
}

func (r ApiCoreDataFilesListRequest) PathNisw(pathNisw []string) ApiCoreDataFilesListRequest {
	r.pathNisw = &pathNisw
	return r
}

func (r ApiCoreDataFilesListRequest) Q(q string) ApiCoreDataFilesListRequest {
	r.q = &q
	return r
}

func (r ApiCoreDataFilesListRequest) Size(size []int32) ApiCoreDataFilesListRequest {
	r.size = &size
	return r
}

func (r ApiCoreDataFilesListRequest) SizeEmpty(sizeEmpty bool) ApiCoreDataFilesListRequest {
	r.sizeEmpty = &sizeEmpty
	return r
}

func (r ApiCoreDataFilesListRequest) SizeGt(sizeGt []int32) ApiCoreDataFilesListRequest {
	r.sizeGt = &sizeGt
	return r
}

func (r ApiCoreDataFilesListRequest) SizeGte(sizeGte []int32) ApiCoreDataFilesListRequest {
	r.sizeGte = &sizeGte
	return r
}

func (r ApiCoreDataFilesListRequest) SizeLt(sizeLt []int32) ApiCoreDataFilesListRequest {
	r.sizeLt = &sizeLt
	return r
}

func (r ApiCoreDataFilesListRequest) SizeLte(sizeLte []int32) ApiCoreDataFilesListRequest {
	r.sizeLte = &sizeLte
	return r
}

func (r ApiCoreDataFilesListRequest) SizeN(sizeN []int32) ApiCoreDataFilesListRequest {
	r.sizeN = &sizeN
	return r
}

// Data source (name)
func (r ApiCoreDataFilesListRequest) Source(source []string) ApiCoreDataFilesListRequest {
	r.source = &source
	return r
}

// Data source (name)
func (r ApiCoreDataFilesListRequest) SourceN(sourceN []string) ApiCoreDataFilesListRequest {
	r.sourceN = &sourceN
	return r
}

// Data source (ID)
func (r ApiCoreDataFilesListRequest) SourceId(sourceId []int32) ApiCoreDataFilesListRequest {
	r.sourceId = &sourceId
	return r
}

// Data source (ID)
func (r ApiCoreDataFilesListRequest) SourceIdN(sourceIdN []int32) ApiCoreDataFilesListRequest {
	r.sourceIdN = &sourceIdN
	return r
}

func (r ApiCoreDataFilesListRequest) UpdatedByRequest(updatedByRequest string) ApiCoreDataFilesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiCoreDataFilesListRequest) Execute() (*PaginatedDataFileList, *http.Response, error) {
	return r.ApiService.CoreDataFilesListExecute(r)
}

/*
CoreDataFilesList Method for CoreDataFilesList

Get a list of data file objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCoreDataFilesListRequest
*/
func (a *CoreAPIService) CoreDataFilesList(ctx context.Context) ApiCoreDataFilesListRequest {
	return ApiCoreDataFilesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedDataFileList
func (a *CoreAPIService) CoreDataFilesListExecute(r ApiCoreDataFilesListRequest) (*PaginatedDataFileList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedDataFileList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataFilesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-files/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.hash != nil {
		t := *r.hash
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash", t, "multi")
		}
	}
	if r.hashEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hash__empty", r.hashEmpty, "")
	}
	if r.hashIc != nil {
		t := *r.hashIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash__ic", t, "multi")
		}
	}
	if r.hashIe != nil {
		t := *r.hashIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash__ie", t, "multi")
		}
	}
	if r.hashIew != nil {
		t := *r.hashIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash__iew", t, "multi")
		}
	}
	if r.hashIsw != nil {
		t := *r.hashIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash__isw", t, "multi")
		}
	}
	if r.hashN != nil {
		t := *r.hashN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash__n", t, "multi")
		}
	}
	if r.hashNic != nil {
		t := *r.hashNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash__nic", t, "multi")
		}
	}
	if r.hashNie != nil {
		t := *r.hashNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash__nie", t, "multi")
		}
	}
	if r.hashNiew != nil {
		t := *r.hashNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash__niew", t, "multi")
		}
	}
	if r.hashNisw != nil {
		t := *r.hashNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hash__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hash__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.path != nil {
		t := *r.path
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path", t, "multi")
		}
	}
	if r.pathEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path__empty", r.pathEmpty, "")
	}
	if r.pathIc != nil {
		t := *r.pathIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path__ic", t, "multi")
		}
	}
	if r.pathIe != nil {
		t := *r.pathIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path__ie", t, "multi")
		}
	}
	if r.pathIew != nil {
		t := *r.pathIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path__iew", t, "multi")
		}
	}
	if r.pathIsw != nil {
		t := *r.pathIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path__isw", t, "multi")
		}
	}
	if r.pathN != nil {
		t := *r.pathN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path__n", t, "multi")
		}
	}
	if r.pathNic != nil {
		t := *r.pathNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path__nic", t, "multi")
		}
	}
	if r.pathNie != nil {
		t := *r.pathNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path__nie", t, "multi")
		}
	}
	if r.pathNiew != nil {
		t := *r.pathNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path__niew", t, "multi")
		}
	}
	if r.pathNisw != nil {
		t := *r.pathNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "path__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "path__nisw", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.size != nil {
		t := *r.size
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "size", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "size", t, "multi")
		}
	}
	if r.sizeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size__empty", r.sizeEmpty, "")
	}
	if r.sizeGt != nil {
		t := *r.sizeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "size__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "size__gt", t, "multi")
		}
	}
	if r.sizeGte != nil {
		t := *r.sizeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "size__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "size__gte", t, "multi")
		}
	}
	if r.sizeLt != nil {
		t := *r.sizeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "size__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "size__lt", t, "multi")
		}
	}
	if r.sizeLte != nil {
		t := *r.sizeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "size__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "size__lte", t, "multi")
		}
	}
	if r.sizeN != nil {
		t := *r.sizeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "size__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "size__n", t, "multi")
		}
	}
	if r.source != nil {
		t := *r.source
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source", t, "multi")
		}
	}
	if r.sourceN != nil {
		t := *r.sourceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source__n", t, "multi")
		}
	}
	if r.sourceId != nil {
		t := *r.sourceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id", t, "multi")
		}
	}
	if r.sourceIdN != nil {
		t := *r.sourceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreDataFilesRetrieveRequest struct {
	ctx        context.Context
	ApiService *CoreAPIService
	id         int32
}

func (r ApiCoreDataFilesRetrieveRequest) Execute() (*DataFile, *http.Response, error) {
	return r.ApiService.CoreDataFilesRetrieveExecute(r)
}

/*
CoreDataFilesRetrieve Method for CoreDataFilesRetrieve

Get a data file object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this data file.
	@return ApiCoreDataFilesRetrieveRequest
*/
func (a *CoreAPIService) CoreDataFilesRetrieve(ctx context.Context, id int32) ApiCoreDataFilesRetrieveRequest {
	return ApiCoreDataFilesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DataFile
func (a *CoreAPIService) CoreDataFilesRetrieveExecute(r ApiCoreDataFilesRetrieveRequest) (*DataFile, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataFilesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-files/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreDataSourcesBulkDestroyRequest struct {
	ctx               context.Context
	ApiService        *CoreAPIService
	dataSourceRequest *[]DataSourceRequest
}

func (r ApiCoreDataSourcesBulkDestroyRequest) DataSourceRequest(dataSourceRequest []DataSourceRequest) ApiCoreDataSourcesBulkDestroyRequest {
	r.dataSourceRequest = &dataSourceRequest
	return r
}

func (r ApiCoreDataSourcesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CoreDataSourcesBulkDestroyExecute(r)
}

/*
CoreDataSourcesBulkDestroy Method for CoreDataSourcesBulkDestroy

Delete a list of data source objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCoreDataSourcesBulkDestroyRequest
*/
func (a *CoreAPIService) CoreDataSourcesBulkDestroy(ctx context.Context) ApiCoreDataSourcesBulkDestroyRequest {
	return ApiCoreDataSourcesBulkDestroyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CoreAPIService) CoreDataSourcesBulkDestroyExecute(r ApiCoreDataSourcesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dataSourceRequest == nil {
		return nil, reportError("dataSourceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dataSourceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCoreDataSourcesBulkPartialUpdateRequest struct {
	ctx               context.Context
	ApiService        *CoreAPIService
	dataSourceRequest *[]DataSourceRequest
}

func (r ApiCoreDataSourcesBulkPartialUpdateRequest) DataSourceRequest(dataSourceRequest []DataSourceRequest) ApiCoreDataSourcesBulkPartialUpdateRequest {
	r.dataSourceRequest = &dataSourceRequest
	return r
}

func (r ApiCoreDataSourcesBulkPartialUpdateRequest) Execute() ([]DataSource, *http.Response, error) {
	return r.ApiService.CoreDataSourcesBulkPartialUpdateExecute(r)
}

/*
CoreDataSourcesBulkPartialUpdate Method for CoreDataSourcesBulkPartialUpdate

Patch a list of data source objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCoreDataSourcesBulkPartialUpdateRequest
*/
func (a *CoreAPIService) CoreDataSourcesBulkPartialUpdate(ctx context.Context) ApiCoreDataSourcesBulkPartialUpdateRequest {
	return ApiCoreDataSourcesBulkPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DataSource
func (a *CoreAPIService) CoreDataSourcesBulkPartialUpdateExecute(r ApiCoreDataSourcesBulkPartialUpdateRequest) ([]DataSource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DataSource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dataSourceRequest == nil {
		return localVarReturnValue, nil, reportError("dataSourceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dataSourceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreDataSourcesBulkUpdateRequest struct {
	ctx               context.Context
	ApiService        *CoreAPIService
	dataSourceRequest *[]DataSourceRequest
}

func (r ApiCoreDataSourcesBulkUpdateRequest) DataSourceRequest(dataSourceRequest []DataSourceRequest) ApiCoreDataSourcesBulkUpdateRequest {
	r.dataSourceRequest = &dataSourceRequest
	return r
}

func (r ApiCoreDataSourcesBulkUpdateRequest) Execute() ([]DataSource, *http.Response, error) {
	return r.ApiService.CoreDataSourcesBulkUpdateExecute(r)
}

/*
CoreDataSourcesBulkUpdate Method for CoreDataSourcesBulkUpdate

Put a list of data source objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCoreDataSourcesBulkUpdateRequest
*/
func (a *CoreAPIService) CoreDataSourcesBulkUpdate(ctx context.Context) ApiCoreDataSourcesBulkUpdateRequest {
	return ApiCoreDataSourcesBulkUpdateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DataSource
func (a *CoreAPIService) CoreDataSourcesBulkUpdateExecute(r ApiCoreDataSourcesBulkUpdateRequest) ([]DataSource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DataSource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dataSourceRequest == nil {
		return localVarReturnValue, nil, reportError("dataSourceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dataSourceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreDataSourcesCreateRequest struct {
	ctx                       context.Context
	ApiService                *CoreAPIService
	writableDataSourceRequest *WritableDataSourceRequest
}

func (r ApiCoreDataSourcesCreateRequest) WritableDataSourceRequest(writableDataSourceRequest WritableDataSourceRequest) ApiCoreDataSourcesCreateRequest {
	r.writableDataSourceRequest = &writableDataSourceRequest
	return r
}

func (r ApiCoreDataSourcesCreateRequest) Execute() (*DataSource, *http.Response, error) {
	return r.ApiService.CoreDataSourcesCreateExecute(r)
}

/*
CoreDataSourcesCreate Method for CoreDataSourcesCreate

Post a list of data source objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCoreDataSourcesCreateRequest
*/
func (a *CoreAPIService) CoreDataSourcesCreate(ctx context.Context) ApiCoreDataSourcesCreateRequest {
	return ApiCoreDataSourcesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DataSource
func (a *CoreAPIService) CoreDataSourcesCreateExecute(r ApiCoreDataSourcesCreateRequest) (*DataSource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataSource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDataSourceRequest == nil {
		return localVarReturnValue, nil, reportError("writableDataSourceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDataSourceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreDataSourcesDestroyRequest struct {
	ctx        context.Context
	ApiService *CoreAPIService
	id         int32
}

func (r ApiCoreDataSourcesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.CoreDataSourcesDestroyExecute(r)
}

/*
CoreDataSourcesDestroy Method for CoreDataSourcesDestroy

Delete a data source object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this data source.
	@return ApiCoreDataSourcesDestroyRequest
*/
func (a *CoreAPIService) CoreDataSourcesDestroy(ctx context.Context, id int32) ApiCoreDataSourcesDestroyRequest {
	return ApiCoreDataSourcesDestroyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CoreAPIService) CoreDataSourcesDestroyExecute(r ApiCoreDataSourcesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCoreDataSourcesListRequest struct {
	ctx               context.Context
	ApiService        *CoreAPIService
	created           *[]time.Time
	createdEmpty      *[]time.Time
	createdGt         *[]time.Time
	createdGte        *[]time.Time
	createdLt         *[]time.Time
	createdLte        *[]time.Time
	createdN          *[]time.Time
	createdByRequest  *string
	description       *[]string
	descriptionEmpty  *bool
	descriptionIc     *[]string
	descriptionIe     *[]string
	descriptionIew    *[]string
	descriptionIsw    *[]string
	descriptionN      *[]string
	descriptionNic    *[]string
	descriptionNie    *[]string
	descriptionNiew   *[]string
	descriptionNisw   *[]string
	enabled           *bool
	id                *[]int32
	idEmpty           *bool
	idGt              *[]int32
	idGte             *[]int32
	idLt              *[]int32
	idLte             *[]int32
	idN               *[]int32
	lastSynced        *[]time.Time
	lastSyncedEmpty   *bool
	lastSyncedGt      *[]time.Time
	lastSyncedGte     *[]time.Time
	lastSyncedLt      *[]time.Time
	lastSyncedLte     *[]time.Time
	lastSyncedN       *[]time.Time
	lastUpdated       *[]time.Time
	lastUpdatedEmpty  *[]time.Time
	lastUpdatedGt     *[]time.Time
	lastUpdatedGte    *[]time.Time
	lastUpdatedLt     *[]time.Time
	lastUpdatedLte    *[]time.Time
	lastUpdatedN      *[]time.Time
	limit             *int32
	modifiedByRequest *string
	name              *[]string
	nameEmpty         *bool
	nameIc            *[]string
	nameIe            *[]string
	nameIew           *[]string
	nameIsw           *[]string
	nameN             *[]string
	nameNic           *[]string
	nameNie           *[]string
	nameNiew          *[]string
	nameNisw          *[]string
	offset            *int32
	ordering          *string
	q                 *string
	sourceUrl         *[]string
	sourceUrlEmpty    *bool
	sourceUrlIc       *[]string
	sourceUrlIe       *[]string
	sourceUrlIew      *[]string
	sourceUrlIsw      *[]string
	sourceUrlN        *[]string
	sourceUrlNic      *[]string
	sourceUrlNie      *[]string
	sourceUrlNiew     *[]string
	sourceUrlNisw     *[]string
	status            *[]string
	statusN           *[]string
	tag               *[]string
	tagN              *[]string
	type_             *[]string
	typeN             *[]string
	updatedByRequest  *string
}

func (r ApiCoreDataSourcesListRequest) Created(created []time.Time) ApiCoreDataSourcesListRequest {
	r.created = &created
	return r
}

func (r ApiCoreDataSourcesListRequest) CreatedEmpty(createdEmpty []time.Time) ApiCoreDataSourcesListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiCoreDataSourcesListRequest) CreatedGt(createdGt []time.Time) ApiCoreDataSourcesListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiCoreDataSourcesListRequest) CreatedGte(createdGte []time.Time) ApiCoreDataSourcesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiCoreDataSourcesListRequest) CreatedLt(createdLt []time.Time) ApiCoreDataSourcesListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiCoreDataSourcesListRequest) CreatedLte(createdLte []time.Time) ApiCoreDataSourcesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiCoreDataSourcesListRequest) CreatedN(createdN []time.Time) ApiCoreDataSourcesListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiCoreDataSourcesListRequest) CreatedByRequest(createdByRequest string) ApiCoreDataSourcesListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiCoreDataSourcesListRequest) Description(description []string) ApiCoreDataSourcesListRequest {
	r.description = &description
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionEmpty(descriptionEmpty bool) ApiCoreDataSourcesListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionIc(descriptionIc []string) ApiCoreDataSourcesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionIe(descriptionIe []string) ApiCoreDataSourcesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionIew(descriptionIew []string) ApiCoreDataSourcesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionIsw(descriptionIsw []string) ApiCoreDataSourcesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionN(descriptionN []string) ApiCoreDataSourcesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionNic(descriptionNic []string) ApiCoreDataSourcesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionNie(descriptionNie []string) ApiCoreDataSourcesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionNiew(descriptionNiew []string) ApiCoreDataSourcesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiCoreDataSourcesListRequest) DescriptionNisw(descriptionNisw []string) ApiCoreDataSourcesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiCoreDataSourcesListRequest) Enabled(enabled bool) ApiCoreDataSourcesListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiCoreDataSourcesListRequest) Id(id []int32) ApiCoreDataSourcesListRequest {
	r.id = &id
	return r
}

func (r ApiCoreDataSourcesListRequest) IdEmpty(idEmpty bool) ApiCoreDataSourcesListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiCoreDataSourcesListRequest) IdGt(idGt []int32) ApiCoreDataSourcesListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiCoreDataSourcesListRequest) IdGte(idGte []int32) ApiCoreDataSourcesListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiCoreDataSourcesListRequest) IdLt(idLt []int32) ApiCoreDataSourcesListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiCoreDataSourcesListRequest) IdLte(idLte []int32) ApiCoreDataSourcesListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiCoreDataSourcesListRequest) IdN(idN []int32) ApiCoreDataSourcesListRequest {
	r.idN = &idN
	return r
}

func (r ApiCoreDataSourcesListRequest) LastSynced(lastSynced []time.Time) ApiCoreDataSourcesListRequest {
	r.lastSynced = &lastSynced
	return r
}

func (r ApiCoreDataSourcesListRequest) LastSyncedEmpty(lastSyncedEmpty bool) ApiCoreDataSourcesListRequest {
	r.lastSyncedEmpty = &lastSyncedEmpty
	return r
}

func (r ApiCoreDataSourcesListRequest) LastSyncedGt(lastSyncedGt []time.Time) ApiCoreDataSourcesListRequest {
	r.lastSyncedGt = &lastSyncedGt
	return r
}

func (r ApiCoreDataSourcesListRequest) LastSyncedGte(lastSyncedGte []time.Time) ApiCoreDataSourcesListRequest {
	r.lastSyncedGte = &lastSyncedGte
	return r
}

func (r ApiCoreDataSourcesListRequest) LastSyncedLt(lastSyncedLt []time.Time) ApiCoreDataSourcesListRequest {
	r.lastSyncedLt = &lastSyncedLt
	return r
}

func (r ApiCoreDataSourcesListRequest) LastSyncedLte(lastSyncedLte []time.Time) ApiCoreDataSourcesListRequest {
	r.lastSyncedLte = &lastSyncedLte
	return r
}

func (r ApiCoreDataSourcesListRequest) LastSyncedN(lastSyncedN []time.Time) ApiCoreDataSourcesListRequest {
	r.lastSyncedN = &lastSyncedN
	return r
}

func (r ApiCoreDataSourcesListRequest) LastUpdated(lastUpdated []time.Time) ApiCoreDataSourcesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiCoreDataSourcesListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiCoreDataSourcesListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiCoreDataSourcesListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiCoreDataSourcesListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiCoreDataSourcesListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiCoreDataSourcesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiCoreDataSourcesListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiCoreDataSourcesListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiCoreDataSourcesListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiCoreDataSourcesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiCoreDataSourcesListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiCoreDataSourcesListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiCoreDataSourcesListRequest) Limit(limit int32) ApiCoreDataSourcesListRequest {
	r.limit = &limit
	return r
}

func (r ApiCoreDataSourcesListRequest) ModifiedByRequest(modifiedByRequest string) ApiCoreDataSourcesListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiCoreDataSourcesListRequest) Name(name []string) ApiCoreDataSourcesListRequest {
	r.name = &name
	return r
}

func (r ApiCoreDataSourcesListRequest) NameEmpty(nameEmpty bool) ApiCoreDataSourcesListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiCoreDataSourcesListRequest) NameIc(nameIc []string) ApiCoreDataSourcesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiCoreDataSourcesListRequest) NameIe(nameIe []string) ApiCoreDataSourcesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiCoreDataSourcesListRequest) NameIew(nameIew []string) ApiCoreDataSourcesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiCoreDataSourcesListRequest) NameIsw(nameIsw []string) ApiCoreDataSourcesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiCoreDataSourcesListRequest) NameN(nameN []string) ApiCoreDataSourcesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiCoreDataSourcesListRequest) NameNic(nameNic []string) ApiCoreDataSourcesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiCoreDataSourcesListRequest) NameNie(nameNie []string) ApiCoreDataSourcesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiCoreDataSourcesListRequest) NameNiew(nameNiew []string) ApiCoreDataSourcesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiCoreDataSourcesListRequest) NameNisw(nameNisw []string) ApiCoreDataSourcesListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiCoreDataSourcesListRequest) Offset(offset int32) ApiCoreDataSourcesListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiCoreDataSourcesListRequest) Ordering(ordering string) ApiCoreDataSourcesListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiCoreDataSourcesListRequest) Q(q string) ApiCoreDataSourcesListRequest {
	r.q = &q
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrl(sourceUrl []string) ApiCoreDataSourcesListRequest {
	r.sourceUrl = &sourceUrl
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlEmpty(sourceUrlEmpty bool) ApiCoreDataSourcesListRequest {
	r.sourceUrlEmpty = &sourceUrlEmpty
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlIc(sourceUrlIc []string) ApiCoreDataSourcesListRequest {
	r.sourceUrlIc = &sourceUrlIc
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlIe(sourceUrlIe []string) ApiCoreDataSourcesListRequest {
	r.sourceUrlIe = &sourceUrlIe
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlIew(sourceUrlIew []string) ApiCoreDataSourcesListRequest {
	r.sourceUrlIew = &sourceUrlIew
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlIsw(sourceUrlIsw []string) ApiCoreDataSourcesListRequest {
	r.sourceUrlIsw = &sourceUrlIsw
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlN(sourceUrlN []string) ApiCoreDataSourcesListRequest {
	r.sourceUrlN = &sourceUrlN
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlNic(sourceUrlNic []string) ApiCoreDataSourcesListRequest {
	r.sourceUrlNic = &sourceUrlNic
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlNie(sourceUrlNie []string) ApiCoreDataSourcesListRequest {
	r.sourceUrlNie = &sourceUrlNie
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlNiew(sourceUrlNiew []string) ApiCoreDataSourcesListRequest {
	r.sourceUrlNiew = &sourceUrlNiew
	return r
}

func (r ApiCoreDataSourcesListRequest) SourceUrlNisw(sourceUrlNisw []string) ApiCoreDataSourcesListRequest {
	r.sourceUrlNisw = &sourceUrlNisw
	return r
}

func (r ApiCoreDataSourcesListRequest) Status(status []string) ApiCoreDataSourcesListRequest {
	r.status = &status
	return r
}

func (r ApiCoreDataSourcesListRequest) StatusN(statusN []string) ApiCoreDataSourcesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiCoreDataSourcesListRequest) Tag(tag []string) ApiCoreDataSourcesListRequest {
	r.tag = &tag
	return r
}

func (r ApiCoreDataSourcesListRequest) TagN(tagN []string) ApiCoreDataSourcesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiCoreDataSourcesListRequest) Type_(type_ []string) ApiCoreDataSourcesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiCoreDataSourcesListRequest) TypeN(typeN []string) ApiCoreDataSourcesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiCoreDataSourcesListRequest) UpdatedByRequest(updatedByRequest string) ApiCoreDataSourcesListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiCoreDataSourcesListRequest) Execute() (*PaginatedDataSourceList, *http.Response, error) {
	return r.ApiService.CoreDataSourcesListExecute(r)
}

/*
CoreDataSourcesList Method for CoreDataSourcesList

Get a list of data source objects.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCoreDataSourcesListRequest
*/
func (a *CoreAPIService) CoreDataSourcesList(ctx context.Context) ApiCoreDataSourcesListRequest {
	return ApiCoreDataSourcesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedDataSourceList
func (a *CoreAPIService) CoreDataSourcesListExecute(r ApiCoreDataSourcesListRequest) (*PaginatedDataSourceList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedDataSourceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.enabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enabled", r.enabled, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastSynced != nil {
		t := *r.lastSynced
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced", t, "multi")
		}
	}
	if r.lastSyncedEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__empty", r.lastSyncedEmpty, "")
	}
	if r.lastSyncedGt != nil {
		t := *r.lastSyncedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__gt", t, "multi")
		}
	}
	if r.lastSyncedGte != nil {
		t := *r.lastSyncedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__gte", t, "multi")
		}
	}
	if r.lastSyncedLt != nil {
		t := *r.lastSyncedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__lt", t, "multi")
		}
	}
	if r.lastSyncedLte != nil {
		t := *r.lastSyncedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__lte", t, "multi")
		}
	}
	if r.lastSyncedN != nil {
		t := *r.lastSyncedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.sourceUrl != nil {
		t := *r.sourceUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url", t, "multi")
		}
	}
	if r.sourceUrlEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__empty", r.sourceUrlEmpty, "")
	}
	if r.sourceUrlIc != nil {
		t := *r.sourceUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__ic", t, "multi")
		}
	}
	if r.sourceUrlIe != nil {
		t := *r.sourceUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__ie", t, "multi")
		}
	}
	if r.sourceUrlIew != nil {
		t := *r.sourceUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__iew", t, "multi")
		}
	}
	if r.sourceUrlIsw != nil {
		t := *r.sourceUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__isw", t, "multi")
		}
	}
	if r.sourceUrlN != nil {
		t := *r.sourceUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__n", t, "multi")
		}
	}
	if r.sourceUrlNic != nil {
		t := *r.sourceUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__nic", t, "multi")
		}
	}
	if r.sourceUrlNie != nil {
		t := *r.sourceUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__nie", t, "multi")
		}
	}
	if r.sourceUrlNiew != nil {
		t := *r.sourceUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__niew", t, "multi")
		}
	}
	if r.sourceUrlNisw != nil {
		t := *r.sourceUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source_url__nisw", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type", t, "multi")
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "type__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreDataSourcesPartialUpdateRequest struct {
	ctx                              context.Context
	ApiService                       *CoreAPIService
	id                               int32
	patchedWritableDataSourceRequest *PatchedWritableDataSourceRequest
}

func (r ApiCoreDataSourcesPartialUpdateRequest) PatchedWritableDataSourceRequest(patchedWritableDataSourceRequest PatchedWritableDataSourceRequest) ApiCoreDataSourcesPartialUpdateRequest {
	r.patchedWritableDataSourceRequest = &patchedWritableDataSourceRequest
	return r
}

func (r ApiCoreDataSourcesPartialUpdateRequest) Execute() (*DataSource, *http.Response, error) {
	return r.ApiService.CoreDataSourcesPartialUpdateExecute(r)
}

/*
CoreDataSourcesPartialUpdate Method for CoreDataSourcesPartialUpdate

Patch a data source object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this data source.
	@return ApiCoreDataSourcesPartialUpdateRequest
*/
func (a *CoreAPIService) CoreDataSourcesPartialUpdate(ctx context.Context, id int32) ApiCoreDataSourcesPartialUpdateRequest {
	return ApiCoreDataSourcesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DataSource
func (a *CoreAPIService) CoreDataSourcesPartialUpdateExecute(r ApiCoreDataSourcesPartialUpdateRequest) (*DataSource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataSource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDataSourceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreDataSourcesRetrieveRequest struct {
	ctx        context.Context
	ApiService *CoreAPIService
	id         int32
}

func (r ApiCoreDataSourcesRetrieveRequest) Execute() (*DataSource, *http.Response, error) {
	return r.ApiService.CoreDataSourcesRetrieveExecute(r)
}

/*
CoreDataSourcesRetrieve Method for CoreDataSourcesRetrieve

Get a data source object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this data source.
	@return ApiCoreDataSourcesRetrieveRequest
*/
func (a *CoreAPIService) CoreDataSourcesRetrieve(ctx context.Context, id int32) ApiCoreDataSourcesRetrieveRequest {
	return ApiCoreDataSourcesRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DataSource
func (a *CoreAPIService) CoreDataSourcesRetrieveExecute(r ApiCoreDataSourcesRetrieveRequest) (*DataSource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataSource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreDataSourcesSyncCreateRequest struct {
	ctx                       context.Context
	ApiService                *CoreAPIService
	id                        int32
	writableDataSourceRequest *WritableDataSourceRequest
}

func (r ApiCoreDataSourcesSyncCreateRequest) WritableDataSourceRequest(writableDataSourceRequest WritableDataSourceRequest) ApiCoreDataSourcesSyncCreateRequest {
	r.writableDataSourceRequest = &writableDataSourceRequest
	return r
}

func (r ApiCoreDataSourcesSyncCreateRequest) Execute() (*DataSource, *http.Response, error) {
	return r.ApiService.CoreDataSourcesSyncCreateExecute(r)
}

/*
CoreDataSourcesSyncCreate Method for CoreDataSourcesSyncCreate

Enqueue a job to synchronize the DataSource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this data source.
	@return ApiCoreDataSourcesSyncCreateRequest
*/
func (a *CoreAPIService) CoreDataSourcesSyncCreate(ctx context.Context, id int32) ApiCoreDataSourcesSyncCreateRequest {
	return ApiCoreDataSourcesSyncCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DataSource
func (a *CoreAPIService) CoreDataSourcesSyncCreateExecute(r ApiCoreDataSourcesSyncCreateRequest) (*DataSource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataSource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesSyncCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/{id}/sync/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDataSourceRequest == nil {
		return localVarReturnValue, nil, reportError("writableDataSourceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDataSourceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreDataSourcesUpdateRequest struct {
	ctx                       context.Context
	ApiService                *CoreAPIService
	id                        int32
	writableDataSourceRequest *WritableDataSourceRequest
}

func (r ApiCoreDataSourcesUpdateRequest) WritableDataSourceRequest(writableDataSourceRequest WritableDataSourceRequest) ApiCoreDataSourcesUpdateRequest {
	r.writableDataSourceRequest = &writableDataSourceRequest
	return r
}

func (r ApiCoreDataSourcesUpdateRequest) Execute() (*DataSource, *http.Response, error) {
	return r.ApiService.CoreDataSourcesUpdateExecute(r)
}

/*
CoreDataSourcesUpdate Method for CoreDataSourcesUpdate

Put a data source object.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this data source.
	@return ApiCoreDataSourcesUpdateRequest
*/
func (a *CoreAPIService) CoreDataSourcesUpdate(ctx context.Context, id int32) ApiCoreDataSourcesUpdateRequest {
	return ApiCoreDataSourcesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DataSource
func (a *CoreAPIService) CoreDataSourcesUpdateExecute(r ApiCoreDataSourcesUpdateRequest) (*DataSource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DataSource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreDataSourcesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/data-sources/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDataSourceRequest == nil {
		return localVarReturnValue, nil, reportError("writableDataSourceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDataSourceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreJobsListRequest struct {
	ctx             context.Context
	ApiService      *CoreAPIService
	completed       *time.Time
	completedAfter  *time.Time
	completedBefore *time.Time
	created         *time.Time
	createdAfter    *time.Time
	createdBefore   *time.Time
	id              *[]int32
	idEmpty         *bool
	idGt            *[]int32
	idGte           *[]int32
	idLt            *[]int32
	idLte           *[]int32
	idN             *[]int32
	interval        *[]int32
	intervalEmpty   *bool
	intervalGt      *[]int32
	intervalGte     *[]int32
	intervalLt      *[]int32
	intervalLte     *[]int32
	intervalN       *[]int32
	jobId           *string
	limit           *int32
	name            *[]string
	nameEmpty       *bool
	nameIc          *[]string
	nameIe          *[]string
	nameIew         *[]string
	nameIsw         *[]string
	nameN           *[]string
	nameNic         *[]string
	nameNie         *[]string
	nameNiew        *[]string
	nameNisw        *[]string
	objectId        *[]int32
	objectIdEmpty   *bool
	objectIdGt      *[]int32
	objectIdGte     *[]int32
	objectIdLt      *[]int32
	objectIdLte     *[]int32
	objectIdN       *[]int32
	objectType      *int32
	objectTypeN     *int32
	offset          *int32
	ordering        *string
	q               *string
	scheduled       *time.Time
	scheduledAfter  *time.Time
	scheduledBefore *time.Time
	started         *time.Time
	startedAfter    *time.Time
	startedBefore   *time.Time
	status          *[]string
	statusN         *[]string
	user            *int32
	userN           *int32
}

func (r ApiCoreJobsListRequest) Completed(completed time.Time) ApiCoreJobsListRequest {
	r.completed = &completed
	return r
}

func (r ApiCoreJobsListRequest) CompletedAfter(completedAfter time.Time) ApiCoreJobsListRequest {
	r.completedAfter = &completedAfter
	return r
}

func (r ApiCoreJobsListRequest) CompletedBefore(completedBefore time.Time) ApiCoreJobsListRequest {
	r.completedBefore = &completedBefore
	return r
}

func (r ApiCoreJobsListRequest) Created(created time.Time) ApiCoreJobsListRequest {
	r.created = &created
	return r
}

func (r ApiCoreJobsListRequest) CreatedAfter(createdAfter time.Time) ApiCoreJobsListRequest {
	r.createdAfter = &createdAfter
	return r
}

func (r ApiCoreJobsListRequest) CreatedBefore(createdBefore time.Time) ApiCoreJobsListRequest {
	r.createdBefore = &createdBefore
	return r
}

func (r ApiCoreJobsListRequest) Id(id []int32) ApiCoreJobsListRequest {
	r.id = &id
	return r
}

func (r ApiCoreJobsListRequest) IdEmpty(idEmpty bool) ApiCoreJobsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiCoreJobsListRequest) IdGt(idGt []int32) ApiCoreJobsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiCoreJobsListRequest) IdGte(idGte []int32) ApiCoreJobsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiCoreJobsListRequest) IdLt(idLt []int32) ApiCoreJobsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiCoreJobsListRequest) IdLte(idLte []int32) ApiCoreJobsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiCoreJobsListRequest) IdN(idN []int32) ApiCoreJobsListRequest {
	r.idN = &idN
	return r
}

func (r ApiCoreJobsListRequest) Interval(interval []int32) ApiCoreJobsListRequest {
	r.interval = &interval
	return r
}

func (r ApiCoreJobsListRequest) IntervalEmpty(intervalEmpty bool) ApiCoreJobsListRequest {
	r.intervalEmpty = &intervalEmpty
	return r
}

func (r ApiCoreJobsListRequest) IntervalGt(intervalGt []int32) ApiCoreJobsListRequest {
	r.intervalGt = &intervalGt
	return r
}

func (r ApiCoreJobsListRequest) IntervalGte(intervalGte []int32) ApiCoreJobsListRequest {
	r.intervalGte = &intervalGte
	return r
}

func (r ApiCoreJobsListRequest) IntervalLt(intervalLt []int32) ApiCoreJobsListRequest {
	r.intervalLt = &intervalLt
	return r
}

func (r ApiCoreJobsListRequest) IntervalLte(intervalLte []int32) ApiCoreJobsListRequest {
	r.intervalLte = &intervalLte
	return r
}

func (r ApiCoreJobsListRequest) IntervalN(intervalN []int32) ApiCoreJobsListRequest {
	r.intervalN = &intervalN
	return r
}

func (r ApiCoreJobsListRequest) JobId(jobId string) ApiCoreJobsListRequest {
	r.jobId = &jobId
	return r
}

// Number of results to return per page.
func (r ApiCoreJobsListRequest) Limit(limit int32) ApiCoreJobsListRequest {
	r.limit = &limit
	return r
}

func (r ApiCoreJobsListRequest) Name(name []string) ApiCoreJobsListRequest {
	r.name = &name
	return r
}

func (r ApiCoreJobsListRequest) NameEmpty(nameEmpty bool) ApiCoreJobsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiCoreJobsListRequest) NameIc(nameIc []string) ApiCoreJobsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiCoreJobsListRequest) NameIe(nameIe []string) ApiCoreJobsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiCoreJobsListRequest) NameIew(nameIew []string) ApiCoreJobsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiCoreJobsListRequest) NameIsw(nameIsw []string) ApiCoreJobsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiCoreJobsListRequest) NameN(nameN []string) ApiCoreJobsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiCoreJobsListRequest) NameNic(nameNic []string) ApiCoreJobsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiCoreJobsListRequest) NameNie(nameNie []string) ApiCoreJobsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiCoreJobsListRequest) NameNiew(nameNiew []string) ApiCoreJobsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiCoreJobsListRequest) NameNisw(nameNisw []string) ApiCoreJobsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiCoreJobsListRequest) ObjectId(objectId []int32) ApiCoreJobsListRequest {
	r.objectId = &objectId
	return r
}

func (r ApiCoreJobsListRequest) ObjectIdEmpty(objectIdEmpty bool) ApiCoreJobsListRequest {
	r.objectIdEmpty = &objectIdEmpty
	return r
}

func (r ApiCoreJobsListRequest) ObjectIdGt(objectIdGt []int32) ApiCoreJobsListRequest {
	r.objectIdGt = &objectIdGt
	return r
}

func (r ApiCoreJobsListRequest) ObjectIdGte(objectIdGte []int32) ApiCoreJobsListRequest {
	r.objectIdGte = &objectIdGte
	return r
}

func (r ApiCoreJobsListRequest) ObjectIdLt(objectIdLt []int32) ApiCoreJobsListRequest {
	r.objectIdLt = &objectIdLt
	return r
}

func (r ApiCoreJobsListRequest) ObjectIdLte(objectIdLte []int32) ApiCoreJobsListRequest {
	r.objectIdLte = &objectIdLte
	return r
}

func (r ApiCoreJobsListRequest) ObjectIdN(objectIdN []int32) ApiCoreJobsListRequest {
	r.objectIdN = &objectIdN
	return r
}

func (r ApiCoreJobsListRequest) ObjectType(objectType int32) ApiCoreJobsListRequest {
	r.objectType = &objectType
	return r
}

func (r ApiCoreJobsListRequest) ObjectTypeN(objectTypeN int32) ApiCoreJobsListRequest {
	r.objectTypeN = &objectTypeN
	return r
}

// The initial index from which to return the results.
func (r ApiCoreJobsListRequest) Offset(offset int32) ApiCoreJobsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiCoreJobsListRequest) Ordering(ordering string) ApiCoreJobsListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiCoreJobsListRequest) Q(q string) ApiCoreJobsListRequest {
	r.q = &q
	return r
}

func (r ApiCoreJobsListRequest) Scheduled(scheduled time.Time) ApiCoreJobsListRequest {
	r.scheduled = &scheduled
	return r
}

func (r ApiCoreJobsListRequest) ScheduledAfter(scheduledAfter time.Time) ApiCoreJobsListRequest {
	r.scheduledAfter = &scheduledAfter
	return r
}

func (r ApiCoreJobsListRequest) ScheduledBefore(scheduledBefore time.Time) ApiCoreJobsListRequest {
	r.scheduledBefore = &scheduledBefore
	return r
}

func (r ApiCoreJobsListRequest) Started(started time.Time) ApiCoreJobsListRequest {
	r.started = &started
	return r
}

func (r ApiCoreJobsListRequest) StartedAfter(startedAfter time.Time) ApiCoreJobsListRequest {
	r.startedAfter = &startedAfter
	return r
}

func (r ApiCoreJobsListRequest) StartedBefore(startedBefore time.Time) ApiCoreJobsListRequest {
	r.startedBefore = &startedBefore
	return r
}

func (r ApiCoreJobsListRequest) Status(status []string) ApiCoreJobsListRequest {
	r.status = &status
	return r
}

func (r ApiCoreJobsListRequest) StatusN(statusN []string) ApiCoreJobsListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiCoreJobsListRequest) User(user int32) ApiCoreJobsListRequest {
	r.user = &user
	return r
}

func (r ApiCoreJobsListRequest) UserN(userN int32) ApiCoreJobsListRequest {
	r.userN = &userN
	return r
}

func (r ApiCoreJobsListRequest) Execute() (*PaginatedJobList, *http.Response, error) {
	return r.ApiService.CoreJobsListExecute(r)
}

/*
CoreJobsList Method for CoreJobsList

Retrieve a list of job results

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCoreJobsListRequest
*/
func (a *CoreAPIService) CoreJobsList(ctx context.Context) ApiCoreJobsListRequest {
	return ApiCoreJobsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedJobList
func (a *CoreAPIService) CoreJobsListExecute(r ApiCoreJobsListRequest) (*PaginatedJobList, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedJobList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreJobsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.completed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completed", r.completed, "")
	}
	if r.completedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completed__after", r.completedAfter, "")
	}
	if r.completedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "completed__before", r.completedBefore, "")
	}
	if r.created != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created", r.created, "")
	}
	if r.createdAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__after", r.createdAfter, "")
	}
	if r.createdBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created__before", r.createdBefore, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.interval != nil {
		t := *r.interval
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interval", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interval", t, "multi")
		}
	}
	if r.intervalEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interval__empty", r.intervalEmpty, "")
	}
	if r.intervalGt != nil {
		t := *r.intervalGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interval__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interval__gt", t, "multi")
		}
	}
	if r.intervalGte != nil {
		t := *r.intervalGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interval__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interval__gte", t, "multi")
		}
	}
	if r.intervalLt != nil {
		t := *r.intervalLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interval__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interval__lt", t, "multi")
		}
	}
	if r.intervalLte != nil {
		t := *r.intervalLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interval__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interval__lte", t, "multi")
		}
	}
	if r.intervalN != nil {
		t := *r.intervalN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interval__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interval__n", t, "multi")
		}
	}
	if r.jobId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id", r.jobId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.objectId != nil {
		t := *r.objectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id", t, "multi")
		}
	}
	if r.objectIdEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__empty", r.objectIdEmpty, "")
	}
	if r.objectIdGt != nil {
		t := *r.objectIdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gt", t, "multi")
		}
	}
	if r.objectIdGte != nil {
		t := *r.objectIdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__gte", t, "multi")
		}
	}
	if r.objectIdLt != nil {
		t := *r.objectIdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lt", t, "multi")
		}
	}
	if r.objectIdLte != nil {
		t := *r.objectIdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__lte", t, "multi")
		}
	}
	if r.objectIdN != nil {
		t := *r.objectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "object_id__n", t, "multi")
		}
	}
	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type", r.objectType, "")
	}
	if r.objectTypeN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_type__n", r.objectTypeN, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.scheduled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduled", r.scheduled, "")
	}
	if r.scheduledAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduled__after", r.scheduledAfter, "")
	}
	if r.scheduledBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduled__before", r.scheduledBefore, "")
	}
	if r.started != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started", r.started, "")
	}
	if r.startedAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started__after", r.startedAfter, "")
	}
	if r.startedBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "started__before", r.startedBefore, "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.user != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user", r.user, "")
	}
	if r.userN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user__n", r.userN, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoreJobsRetrieveRequest struct {
	ctx        context.Context
	ApiService *CoreAPIService
	id         int32
}

func (r ApiCoreJobsRetrieveRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.CoreJobsRetrieveExecute(r)
}

/*
CoreJobsRetrieve Method for CoreJobsRetrieve

Retrieve a list of job results

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this job.
	@return ApiCoreJobsRetrieveRequest
*/
func (a *CoreAPIService) CoreJobsRetrieve(ctx context.Context, id int32) ApiCoreJobsRetrieveRequest {
	return ApiCoreJobsRetrieveRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Job
func (a *CoreAPIService) CoreJobsRetrieveExecute(r ApiCoreJobsRetrieveRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoreAPIService.CoreJobsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/core/jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
