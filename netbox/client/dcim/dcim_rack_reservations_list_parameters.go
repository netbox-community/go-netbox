// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2020 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDcimRackReservationsListParams creates a new DcimRackReservationsListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDcimRackReservationsListParams() *DcimRackReservationsListParams {
	return &DcimRackReservationsListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDcimRackReservationsListParamsWithTimeout creates a new DcimRackReservationsListParams object
// with the ability to set a timeout on a request.
func NewDcimRackReservationsListParamsWithTimeout(timeout time.Duration) *DcimRackReservationsListParams {
	return &DcimRackReservationsListParams{
		timeout: timeout,
	}
}

// NewDcimRackReservationsListParamsWithContext creates a new DcimRackReservationsListParams object
// with the ability to set a context for a request.
func NewDcimRackReservationsListParamsWithContext(ctx context.Context) *DcimRackReservationsListParams {
	return &DcimRackReservationsListParams{
		Context: ctx,
	}
}

// NewDcimRackReservationsListParamsWithHTTPClient creates a new DcimRackReservationsListParams object
// with the ability to set a custom HTTPClient for a request.
func NewDcimRackReservationsListParamsWithHTTPClient(client *http.Client) *DcimRackReservationsListParams {
	return &DcimRackReservationsListParams{
		HTTPClient: client,
	}
}

/* DcimRackReservationsListParams contains all the parameters to send to the API endpoint
   for the dcim rack reservations list operation.

   Typically these are written to a http.Request.
*/
type DcimRackReservationsListParams struct {

	// Created.
	Created *string

	// CreatedGte.
	CreatedGte *string

	// CreatedLte.
	CreatedLte *string

	// ID.
	ID *string

	// IDGt.
	IDGt *string

	// IDGte.
	IDGte *string

	// IDLt.
	IDLt *string

	// IDLte.
	IDLte *string

	// IDn.
	IDn *string

	// LastUpdated.
	LastUpdated *string

	// LastUpdatedGte.
	LastUpdatedGte *string

	// LastUpdatedLte.
	LastUpdatedLte *string

	/* Limit.

	   Number of results to return per page.
	*/
	Limit *int64

	// Location.
	Location *string

	// Locationn.
	Locationn *string

	// LocationID.
	LocationID *string

	// LocationIDn.
	LocationIDn *string

	/* Offset.

	   The initial index from which to return the results.
	*/
	Offset *int64

	// Q.
	Q *string

	// RackID.
	RackID *string

	// RackIDn.
	RackIDn *string

	// Site.
	Site *string

	// Siten.
	Siten *string

	// SiteID.
	SiteID *string

	// SiteIDn.
	SiteIDn *string

	// Tag.
	Tag *string

	// Tagn.
	Tagn *string

	// Tenant.
	Tenant *string

	// Tenantn.
	Tenantn *string

	// TenantGroup.
	TenantGroup *string

	// TenantGroupn.
	TenantGroupn *string

	// TenantGroupID.
	TenantGroupID *string

	// TenantGroupIDn.
	TenantGroupIDn *string

	// TenantID.
	TenantID *string

	// TenantIDn.
	TenantIDn *string

	// User.
	User *string

	// Usern.
	Usern *string

	// UserID.
	UserID *string

	// UserIDn.
	UserIDn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the dcim rack reservations list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DcimRackReservationsListParams) WithDefaults() *DcimRackReservationsListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the dcim rack reservations list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DcimRackReservationsListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTimeout(timeout time.Duration) *DcimRackReservationsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithContext(ctx context.Context) *DcimRackReservationsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithHTTPClient(client *http.Client) *DcimRackReservationsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreated adds the created to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithCreated(created *string) *DcimRackReservationsListParams {
	o.SetCreated(created)
	return o
}

// SetCreated adds the created to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetCreated(created *string) {
	o.Created = created
}

// WithCreatedGte adds the createdGte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithCreatedGte(createdGte *string) *DcimRackReservationsListParams {
	o.SetCreatedGte(createdGte)
	return o
}

// SetCreatedGte adds the createdGte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetCreatedGte(createdGte *string) {
	o.CreatedGte = createdGte
}

// WithCreatedLte adds the createdLte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithCreatedLte(createdLte *string) *DcimRackReservationsListParams {
	o.SetCreatedLte(createdLte)
	return o
}

// SetCreatedLte adds the createdLte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetCreatedLte(createdLte *string) {
	o.CreatedLte = createdLte
}

// WithID adds the id to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithID(id *string) *DcimRackReservationsListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetID(id *string) {
	o.ID = id
}

// WithIDGt adds the iDGt to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithIDGt(iDGt *string) *DcimRackReservationsListParams {
	o.SetIDGt(iDGt)
	return o
}

// SetIDGt adds the idGt to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetIDGt(iDGt *string) {
	o.IDGt = iDGt
}

// WithIDGte adds the iDGte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithIDGte(iDGte *string) *DcimRackReservationsListParams {
	o.SetIDGte(iDGte)
	return o
}

// SetIDGte adds the idGte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetIDGte(iDGte *string) {
	o.IDGte = iDGte
}

// WithIDLt adds the iDLt to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithIDLt(iDLt *string) *DcimRackReservationsListParams {
	o.SetIDLt(iDLt)
	return o
}

// SetIDLt adds the idLt to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetIDLt(iDLt *string) {
	o.IDLt = iDLt
}

// WithIDLte adds the iDLte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithIDLte(iDLte *string) *DcimRackReservationsListParams {
	o.SetIDLte(iDLte)
	return o
}

// SetIDLte adds the idLte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetIDLte(iDLte *string) {
	o.IDLte = iDLte
}

// WithIDn adds the iDn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithIDn(iDn *string) *DcimRackReservationsListParams {
	o.SetIDn(iDn)
	return o
}

// SetIDn adds the idN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetIDn(iDn *string) {
	o.IDn = iDn
}

// WithLastUpdated adds the lastUpdated to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithLastUpdated(lastUpdated *string) *DcimRackReservationsListParams {
	o.SetLastUpdated(lastUpdated)
	return o
}

// SetLastUpdated adds the lastUpdated to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetLastUpdated(lastUpdated *string) {
	o.LastUpdated = lastUpdated
}

// WithLastUpdatedGte adds the lastUpdatedGte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithLastUpdatedGte(lastUpdatedGte *string) *DcimRackReservationsListParams {
	o.SetLastUpdatedGte(lastUpdatedGte)
	return o
}

// SetLastUpdatedGte adds the lastUpdatedGte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetLastUpdatedGte(lastUpdatedGte *string) {
	o.LastUpdatedGte = lastUpdatedGte
}

// WithLastUpdatedLte adds the lastUpdatedLte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithLastUpdatedLte(lastUpdatedLte *string) *DcimRackReservationsListParams {
	o.SetLastUpdatedLte(lastUpdatedLte)
	return o
}

// SetLastUpdatedLte adds the lastUpdatedLte to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetLastUpdatedLte(lastUpdatedLte *string) {
	o.LastUpdatedLte = lastUpdatedLte
}

// WithLimit adds the limit to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithLimit(limit *int64) *DcimRackReservationsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLocation adds the location to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithLocation(location *string) *DcimRackReservationsListParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetLocation(location *string) {
	o.Location = location
}

// WithLocationn adds the locationn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithLocationn(locationn *string) *DcimRackReservationsListParams {
	o.SetLocationn(locationn)
	return o
}

// SetLocationn adds the locationN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetLocationn(locationn *string) {
	o.Locationn = locationn
}

// WithLocationID adds the locationID to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithLocationID(locationID *string) *DcimRackReservationsListParams {
	o.SetLocationID(locationID)
	return o
}

// SetLocationID adds the locationId to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetLocationID(locationID *string) {
	o.LocationID = locationID
}

// WithLocationIDn adds the locationIDn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithLocationIDn(locationIDn *string) *DcimRackReservationsListParams {
	o.SetLocationIDn(locationIDn)
	return o
}

// SetLocationIDn adds the locationIdN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetLocationIDn(locationIDn *string) {
	o.LocationIDn = locationIDn
}

// WithOffset adds the offset to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithOffset(offset *int64) *DcimRackReservationsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQ adds the q to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithQ(q *string) *DcimRackReservationsListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetQ(q *string) {
	o.Q = q
}

// WithRackID adds the rackID to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithRackID(rackID *string) *DcimRackReservationsListParams {
	o.SetRackID(rackID)
	return o
}

// SetRackID adds the rackId to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetRackID(rackID *string) {
	o.RackID = rackID
}

// WithRackIDn adds the rackIDn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithRackIDn(rackIDn *string) *DcimRackReservationsListParams {
	o.SetRackIDn(rackIDn)
	return o
}

// SetRackIDn adds the rackIdN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetRackIDn(rackIDn *string) {
	o.RackIDn = rackIDn
}

// WithSite adds the site to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithSite(site *string) *DcimRackReservationsListParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetSite(site *string) {
	o.Site = site
}

// WithSiten adds the siten to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithSiten(siten *string) *DcimRackReservationsListParams {
	o.SetSiten(siten)
	return o
}

// SetSiten adds the siteN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetSiten(siten *string) {
	o.Siten = siten
}

// WithSiteID adds the siteID to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithSiteID(siteID *string) *DcimRackReservationsListParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WithSiteIDn adds the siteIDn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithSiteIDn(siteIDn *string) *DcimRackReservationsListParams {
	o.SetSiteIDn(siteIDn)
	return o
}

// SetSiteIDn adds the siteIdN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetSiteIDn(siteIDn *string) {
	o.SiteIDn = siteIDn
}

// WithTag adds the tag to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTag(tag *string) *DcimRackReservationsListParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithTagn adds the tagn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTagn(tagn *string) *DcimRackReservationsListParams {
	o.SetTagn(tagn)
	return o
}

// SetTagn adds the tagN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTagn(tagn *string) {
	o.Tagn = tagn
}

// WithTenant adds the tenant to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTenant(tenant *string) *DcimRackReservationsListParams {
	o.SetTenant(tenant)
	return o
}

// SetTenant adds the tenant to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTenant(tenant *string) {
	o.Tenant = tenant
}

// WithTenantn adds the tenantn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTenantn(tenantn *string) *DcimRackReservationsListParams {
	o.SetTenantn(tenantn)
	return o
}

// SetTenantn adds the tenantN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTenantn(tenantn *string) {
	o.Tenantn = tenantn
}

// WithTenantGroup adds the tenantGroup to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTenantGroup(tenantGroup *string) *DcimRackReservationsListParams {
	o.SetTenantGroup(tenantGroup)
	return o
}

// SetTenantGroup adds the tenantGroup to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTenantGroup(tenantGroup *string) {
	o.TenantGroup = tenantGroup
}

// WithTenantGroupn adds the tenantGroupn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTenantGroupn(tenantGroupn *string) *DcimRackReservationsListParams {
	o.SetTenantGroupn(tenantGroupn)
	return o
}

// SetTenantGroupn adds the tenantGroupN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTenantGroupn(tenantGroupn *string) {
	o.TenantGroupn = tenantGroupn
}

// WithTenantGroupID adds the tenantGroupID to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTenantGroupID(tenantGroupID *string) *DcimRackReservationsListParams {
	o.SetTenantGroupID(tenantGroupID)
	return o
}

// SetTenantGroupID adds the tenantGroupId to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTenantGroupID(tenantGroupID *string) {
	o.TenantGroupID = tenantGroupID
}

// WithTenantGroupIDn adds the tenantGroupIDn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTenantGroupIDn(tenantGroupIDn *string) *DcimRackReservationsListParams {
	o.SetTenantGroupIDn(tenantGroupIDn)
	return o
}

// SetTenantGroupIDn adds the tenantGroupIdN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTenantGroupIDn(tenantGroupIDn *string) {
	o.TenantGroupIDn = tenantGroupIDn
}

// WithTenantID adds the tenantID to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTenantID(tenantID *string) *DcimRackReservationsListParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithTenantIDn adds the tenantIDn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithTenantIDn(tenantIDn *string) *DcimRackReservationsListParams {
	o.SetTenantIDn(tenantIDn)
	return o
}

// SetTenantIDn adds the tenantIdN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetTenantIDn(tenantIDn *string) {
	o.TenantIDn = tenantIDn
}

// WithUser adds the user to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithUser(user *string) *DcimRackReservationsListParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetUser(user *string) {
	o.User = user
}

// WithUsern adds the usern to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithUsern(usern *string) *DcimRackReservationsListParams {
	o.SetUsern(usern)
	return o
}

// SetUsern adds the userN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetUsern(usern *string) {
	o.Usern = usern
}

// WithUserID adds the userID to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithUserID(userID *string) *DcimRackReservationsListParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithUserIDn adds the userIDn to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) WithUserIDn(userIDn *string) *DcimRackReservationsListParams {
	o.SetUserIDn(userIDn)
	return o
}

// SetUserIDn adds the userIdN to the dcim rack reservations list params
func (o *DcimRackReservationsListParams) SetUserIDn(userIDn *string) {
	o.UserIDn = userIDn
}

// WriteToRequest writes these params to a swagger request
func (o *DcimRackReservationsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Created != nil {

		// query param created
		var qrCreated string

		if o.Created != nil {
			qrCreated = *o.Created
		}
		qCreated := qrCreated
		if qCreated != "" {

			if err := r.SetQueryParam("created", qCreated); err != nil {
				return err
			}
		}
	}

	if o.CreatedGte != nil {

		// query param created__gte
		var qrCreatedGte string

		if o.CreatedGte != nil {
			qrCreatedGte = *o.CreatedGte
		}
		qCreatedGte := qrCreatedGte
		if qCreatedGte != "" {

			if err := r.SetQueryParam("created__gte", qCreatedGte); err != nil {
				return err
			}
		}
	}

	if o.CreatedLte != nil {

		// query param created__lte
		var qrCreatedLte string

		if o.CreatedLte != nil {
			qrCreatedLte = *o.CreatedLte
		}
		qCreatedLte := qrCreatedLte
		if qCreatedLte != "" {

			if err := r.SetQueryParam("created__lte", qCreatedLte); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.IDGt != nil {

		// query param id__gt
		var qrIDGt string

		if o.IDGt != nil {
			qrIDGt = *o.IDGt
		}
		qIDGt := qrIDGt
		if qIDGt != "" {

			if err := r.SetQueryParam("id__gt", qIDGt); err != nil {
				return err
			}
		}
	}

	if o.IDGte != nil {

		// query param id__gte
		var qrIDGte string

		if o.IDGte != nil {
			qrIDGte = *o.IDGte
		}
		qIDGte := qrIDGte
		if qIDGte != "" {

			if err := r.SetQueryParam("id__gte", qIDGte); err != nil {
				return err
			}
		}
	}

	if o.IDLt != nil {

		// query param id__lt
		var qrIDLt string

		if o.IDLt != nil {
			qrIDLt = *o.IDLt
		}
		qIDLt := qrIDLt
		if qIDLt != "" {

			if err := r.SetQueryParam("id__lt", qIDLt); err != nil {
				return err
			}
		}
	}

	if o.IDLte != nil {

		// query param id__lte
		var qrIDLte string

		if o.IDLte != nil {
			qrIDLte = *o.IDLte
		}
		qIDLte := qrIDLte
		if qIDLte != "" {

			if err := r.SetQueryParam("id__lte", qIDLte); err != nil {
				return err
			}
		}
	}

	if o.IDn != nil {

		// query param id__n
		var qrIDn string

		if o.IDn != nil {
			qrIDn = *o.IDn
		}
		qIDn := qrIDn
		if qIDn != "" {

			if err := r.SetQueryParam("id__n", qIDn); err != nil {
				return err
			}
		}
	}

	if o.LastUpdated != nil {

		// query param last_updated
		var qrLastUpdated string

		if o.LastUpdated != nil {
			qrLastUpdated = *o.LastUpdated
		}
		qLastUpdated := qrLastUpdated
		if qLastUpdated != "" {

			if err := r.SetQueryParam("last_updated", qLastUpdated); err != nil {
				return err
			}
		}
	}

	if o.LastUpdatedGte != nil {

		// query param last_updated__gte
		var qrLastUpdatedGte string

		if o.LastUpdatedGte != nil {
			qrLastUpdatedGte = *o.LastUpdatedGte
		}
		qLastUpdatedGte := qrLastUpdatedGte
		if qLastUpdatedGte != "" {

			if err := r.SetQueryParam("last_updated__gte", qLastUpdatedGte); err != nil {
				return err
			}
		}
	}

	if o.LastUpdatedLte != nil {

		// query param last_updated__lte
		var qrLastUpdatedLte string

		if o.LastUpdatedLte != nil {
			qrLastUpdatedLte = *o.LastUpdatedLte
		}
		qLastUpdatedLte := qrLastUpdatedLte
		if qLastUpdatedLte != "" {

			if err := r.SetQueryParam("last_updated__lte", qLastUpdatedLte); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Location != nil {

		// query param location
		var qrLocation string

		if o.Location != nil {
			qrLocation = *o.Location
		}
		qLocation := qrLocation
		if qLocation != "" {

			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}
	}

	if o.Locationn != nil {

		// query param location__n
		var qrLocationn string

		if o.Locationn != nil {
			qrLocationn = *o.Locationn
		}
		qLocationn := qrLocationn
		if qLocationn != "" {

			if err := r.SetQueryParam("location__n", qLocationn); err != nil {
				return err
			}
		}
	}

	if o.LocationID != nil {

		// query param location_id
		var qrLocationID string

		if o.LocationID != nil {
			qrLocationID = *o.LocationID
		}
		qLocationID := qrLocationID
		if qLocationID != "" {

			if err := r.SetQueryParam("location_id", qLocationID); err != nil {
				return err
			}
		}
	}

	if o.LocationIDn != nil {

		// query param location_id__n
		var qrLocationIDn string

		if o.LocationIDn != nil {
			qrLocationIDn = *o.LocationIDn
		}
		qLocationIDn := qrLocationIDn
		if qLocationIDn != "" {

			if err := r.SetQueryParam("location_id__n", qLocationIDn); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Q != nil {

		// query param q
		var qrQ string

		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {

			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}
	}

	if o.RackID != nil {

		// query param rack_id
		var qrRackID string

		if o.RackID != nil {
			qrRackID = *o.RackID
		}
		qRackID := qrRackID
		if qRackID != "" {

			if err := r.SetQueryParam("rack_id", qRackID); err != nil {
				return err
			}
		}
	}

	if o.RackIDn != nil {

		// query param rack_id__n
		var qrRackIDn string

		if o.RackIDn != nil {
			qrRackIDn = *o.RackIDn
		}
		qRackIDn := qrRackIDn
		if qRackIDn != "" {

			if err := r.SetQueryParam("rack_id__n", qRackIDn); err != nil {
				return err
			}
		}
	}

	if o.Site != nil {

		// query param site
		var qrSite string

		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {

			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}
	}

	if o.Siten != nil {

		// query param site__n
		var qrSiten string

		if o.Siten != nil {
			qrSiten = *o.Siten
		}
		qSiten := qrSiten
		if qSiten != "" {

			if err := r.SetQueryParam("site__n", qSiten); err != nil {
				return err
			}
		}
	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string

		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {

			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}
	}

	if o.SiteIDn != nil {

		// query param site_id__n
		var qrSiteIDn string

		if o.SiteIDn != nil {
			qrSiteIDn = *o.SiteIDn
		}
		qSiteIDn := qrSiteIDn
		if qSiteIDn != "" {

			if err := r.SetQueryParam("site_id__n", qSiteIDn); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// query param tag
		var qrTag string

		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {

			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}
	}

	if o.Tagn != nil {

		// query param tag__n
		var qrTagn string

		if o.Tagn != nil {
			qrTagn = *o.Tagn
		}
		qTagn := qrTagn
		if qTagn != "" {

			if err := r.SetQueryParam("tag__n", qTagn); err != nil {
				return err
			}
		}
	}

	if o.Tenant != nil {

		// query param tenant
		var qrTenant string

		if o.Tenant != nil {
			qrTenant = *o.Tenant
		}
		qTenant := qrTenant
		if qTenant != "" {

			if err := r.SetQueryParam("tenant", qTenant); err != nil {
				return err
			}
		}
	}

	if o.Tenantn != nil {

		// query param tenant__n
		var qrTenantn string

		if o.Tenantn != nil {
			qrTenantn = *o.Tenantn
		}
		qTenantn := qrTenantn
		if qTenantn != "" {

			if err := r.SetQueryParam("tenant__n", qTenantn); err != nil {
				return err
			}
		}
	}

	if o.TenantGroup != nil {

		// query param tenant_group
		var qrTenantGroup string

		if o.TenantGroup != nil {
			qrTenantGroup = *o.TenantGroup
		}
		qTenantGroup := qrTenantGroup
		if qTenantGroup != "" {

			if err := r.SetQueryParam("tenant_group", qTenantGroup); err != nil {
				return err
			}
		}
	}

	if o.TenantGroupn != nil {

		// query param tenant_group__n
		var qrTenantGroupn string

		if o.TenantGroupn != nil {
			qrTenantGroupn = *o.TenantGroupn
		}
		qTenantGroupn := qrTenantGroupn
		if qTenantGroupn != "" {

			if err := r.SetQueryParam("tenant_group__n", qTenantGroupn); err != nil {
				return err
			}
		}
	}

	if o.TenantGroupID != nil {

		// query param tenant_group_id
		var qrTenantGroupID string

		if o.TenantGroupID != nil {
			qrTenantGroupID = *o.TenantGroupID
		}
		qTenantGroupID := qrTenantGroupID
		if qTenantGroupID != "" {

			if err := r.SetQueryParam("tenant_group_id", qTenantGroupID); err != nil {
				return err
			}
		}
	}

	if o.TenantGroupIDn != nil {

		// query param tenant_group_id__n
		var qrTenantGroupIDn string

		if o.TenantGroupIDn != nil {
			qrTenantGroupIDn = *o.TenantGroupIDn
		}
		qTenantGroupIDn := qrTenantGroupIDn
		if qTenantGroupIDn != "" {

			if err := r.SetQueryParam("tenant_group_id__n", qTenantGroupIDn); err != nil {
				return err
			}
		}
	}

	if o.TenantID != nil {

		// query param tenant_id
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenant_id", qTenantID); err != nil {
				return err
			}
		}
	}

	if o.TenantIDn != nil {

		// query param tenant_id__n
		var qrTenantIDn string

		if o.TenantIDn != nil {
			qrTenantIDn = *o.TenantIDn
		}
		qTenantIDn := qrTenantIDn
		if qTenantIDn != "" {

			if err := r.SetQueryParam("tenant_id__n", qTenantIDn); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// query param user
		var qrUser string

		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if o.Usern != nil {

		// query param user__n
		var qrUsern string

		if o.Usern != nil {
			qrUsern = *o.Usern
		}
		qUsern := qrUsern
		if qUsern != "" {

			if err := r.SetQueryParam("user__n", qUsern); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param user_id
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("user_id", qUserID); err != nil {
				return err
			}
		}
	}

	if o.UserIDn != nil {

		// query param user_id__n
		var qrUserIDn string

		if o.UserIDn != nil {
			qrUserIDn = *o.UserIDn
		}
		qUserIDn := qrUserIDn
		if qUserIDn != "" {

			if err := r.SetQueryParam("user_id__n", qUserIDn); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
